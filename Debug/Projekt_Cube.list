
Projekt_Cube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a2c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08006bfc  08006bfc  00016bfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c50  08006c50  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006c50  08006c50  00016c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c58  08006c58  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c58  08006c58  00016c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c5c  08006c5c  00016c5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006c60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000614  20000070  08006cd0  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000684  08006cd0  00020684  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000190f8  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ff4  00000000  00000000  00039198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b8  00000000  00000000  0003c190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001070  00000000  00000000  0003d348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027a2b  00000000  00000000  0003e3b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017368  00000000  00000000  00065de3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f8517  00000000  00000000  0007d14b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00175662  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f80  00000000  00000000  001756b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006be4 	.word	0x08006be4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08006be4 	.word	0x08006be4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_uldivmod>:
 8000a9c:	b953      	cbnz	r3, 8000ab4 <__aeabi_uldivmod+0x18>
 8000a9e:	b94a      	cbnz	r2, 8000ab4 <__aeabi_uldivmod+0x18>
 8000aa0:	2900      	cmp	r1, #0
 8000aa2:	bf08      	it	eq
 8000aa4:	2800      	cmpeq	r0, #0
 8000aa6:	bf1c      	itt	ne
 8000aa8:	f04f 31ff 	movne.w	r1, #4294967295
 8000aac:	f04f 30ff 	movne.w	r0, #4294967295
 8000ab0:	f000 b96e 	b.w	8000d90 <__aeabi_idiv0>
 8000ab4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000abc:	f000 f806 	bl	8000acc <__udivmoddi4>
 8000ac0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ac4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac8:	b004      	add	sp, #16
 8000aca:	4770      	bx	lr

08000acc <__udivmoddi4>:
 8000acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad0:	9d08      	ldr	r5, [sp, #32]
 8000ad2:	4604      	mov	r4, r0
 8000ad4:	468c      	mov	ip, r1
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	f040 8083 	bne.w	8000be2 <__udivmoddi4+0x116>
 8000adc:	428a      	cmp	r2, r1
 8000ade:	4617      	mov	r7, r2
 8000ae0:	d947      	bls.n	8000b72 <__udivmoddi4+0xa6>
 8000ae2:	fab2 f282 	clz	r2, r2
 8000ae6:	b142      	cbz	r2, 8000afa <__udivmoddi4+0x2e>
 8000ae8:	f1c2 0020 	rsb	r0, r2, #32
 8000aec:	fa24 f000 	lsr.w	r0, r4, r0
 8000af0:	4091      	lsls	r1, r2
 8000af2:	4097      	lsls	r7, r2
 8000af4:	ea40 0c01 	orr.w	ip, r0, r1
 8000af8:	4094      	lsls	r4, r2
 8000afa:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000afe:	0c23      	lsrs	r3, r4, #16
 8000b00:	fbbc f6f8 	udiv	r6, ip, r8
 8000b04:	fa1f fe87 	uxth.w	lr, r7
 8000b08:	fb08 c116 	mls	r1, r8, r6, ip
 8000b0c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b10:	fb06 f10e 	mul.w	r1, r6, lr
 8000b14:	4299      	cmp	r1, r3
 8000b16:	d909      	bls.n	8000b2c <__udivmoddi4+0x60>
 8000b18:	18fb      	adds	r3, r7, r3
 8000b1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b1e:	f080 8119 	bcs.w	8000d54 <__udivmoddi4+0x288>
 8000b22:	4299      	cmp	r1, r3
 8000b24:	f240 8116 	bls.w	8000d54 <__udivmoddi4+0x288>
 8000b28:	3e02      	subs	r6, #2
 8000b2a:	443b      	add	r3, r7
 8000b2c:	1a5b      	subs	r3, r3, r1
 8000b2e:	b2a4      	uxth	r4, r4
 8000b30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b34:	fb08 3310 	mls	r3, r8, r0, r3
 8000b38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b3c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b40:	45a6      	cmp	lr, r4
 8000b42:	d909      	bls.n	8000b58 <__udivmoddi4+0x8c>
 8000b44:	193c      	adds	r4, r7, r4
 8000b46:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b4a:	f080 8105 	bcs.w	8000d58 <__udivmoddi4+0x28c>
 8000b4e:	45a6      	cmp	lr, r4
 8000b50:	f240 8102 	bls.w	8000d58 <__udivmoddi4+0x28c>
 8000b54:	3802      	subs	r0, #2
 8000b56:	443c      	add	r4, r7
 8000b58:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b5c:	eba4 040e 	sub.w	r4, r4, lr
 8000b60:	2600      	movs	r6, #0
 8000b62:	b11d      	cbz	r5, 8000b6c <__udivmoddi4+0xa0>
 8000b64:	40d4      	lsrs	r4, r2
 8000b66:	2300      	movs	r3, #0
 8000b68:	e9c5 4300 	strd	r4, r3, [r5]
 8000b6c:	4631      	mov	r1, r6
 8000b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b72:	b902      	cbnz	r2, 8000b76 <__udivmoddi4+0xaa>
 8000b74:	deff      	udf	#255	; 0xff
 8000b76:	fab2 f282 	clz	r2, r2
 8000b7a:	2a00      	cmp	r2, #0
 8000b7c:	d150      	bne.n	8000c20 <__udivmoddi4+0x154>
 8000b7e:	1bcb      	subs	r3, r1, r7
 8000b80:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b84:	fa1f f887 	uxth.w	r8, r7
 8000b88:	2601      	movs	r6, #1
 8000b8a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b8e:	0c21      	lsrs	r1, r4, #16
 8000b90:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b98:	fb08 f30c 	mul.w	r3, r8, ip
 8000b9c:	428b      	cmp	r3, r1
 8000b9e:	d907      	bls.n	8000bb0 <__udivmoddi4+0xe4>
 8000ba0:	1879      	adds	r1, r7, r1
 8000ba2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ba6:	d202      	bcs.n	8000bae <__udivmoddi4+0xe2>
 8000ba8:	428b      	cmp	r3, r1
 8000baa:	f200 80e9 	bhi.w	8000d80 <__udivmoddi4+0x2b4>
 8000bae:	4684      	mov	ip, r0
 8000bb0:	1ac9      	subs	r1, r1, r3
 8000bb2:	b2a3      	uxth	r3, r4
 8000bb4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bb8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000bbc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000bc0:	fb08 f800 	mul.w	r8, r8, r0
 8000bc4:	45a0      	cmp	r8, r4
 8000bc6:	d907      	bls.n	8000bd8 <__udivmoddi4+0x10c>
 8000bc8:	193c      	adds	r4, r7, r4
 8000bca:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x10a>
 8000bd0:	45a0      	cmp	r8, r4
 8000bd2:	f200 80d9 	bhi.w	8000d88 <__udivmoddi4+0x2bc>
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	eba4 0408 	sub.w	r4, r4, r8
 8000bdc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000be0:	e7bf      	b.n	8000b62 <__udivmoddi4+0x96>
 8000be2:	428b      	cmp	r3, r1
 8000be4:	d909      	bls.n	8000bfa <__udivmoddi4+0x12e>
 8000be6:	2d00      	cmp	r5, #0
 8000be8:	f000 80b1 	beq.w	8000d4e <__udivmoddi4+0x282>
 8000bec:	2600      	movs	r6, #0
 8000bee:	e9c5 0100 	strd	r0, r1, [r5]
 8000bf2:	4630      	mov	r0, r6
 8000bf4:	4631      	mov	r1, r6
 8000bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfa:	fab3 f683 	clz	r6, r3
 8000bfe:	2e00      	cmp	r6, #0
 8000c00:	d14a      	bne.n	8000c98 <__udivmoddi4+0x1cc>
 8000c02:	428b      	cmp	r3, r1
 8000c04:	d302      	bcc.n	8000c0c <__udivmoddi4+0x140>
 8000c06:	4282      	cmp	r2, r0
 8000c08:	f200 80b8 	bhi.w	8000d7c <__udivmoddi4+0x2b0>
 8000c0c:	1a84      	subs	r4, r0, r2
 8000c0e:	eb61 0103 	sbc.w	r1, r1, r3
 8000c12:	2001      	movs	r0, #1
 8000c14:	468c      	mov	ip, r1
 8000c16:	2d00      	cmp	r5, #0
 8000c18:	d0a8      	beq.n	8000b6c <__udivmoddi4+0xa0>
 8000c1a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c1e:	e7a5      	b.n	8000b6c <__udivmoddi4+0xa0>
 8000c20:	f1c2 0320 	rsb	r3, r2, #32
 8000c24:	fa20 f603 	lsr.w	r6, r0, r3
 8000c28:	4097      	lsls	r7, r2
 8000c2a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c2e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c32:	40d9      	lsrs	r1, r3
 8000c34:	4330      	orrs	r0, r6
 8000c36:	0c03      	lsrs	r3, r0, #16
 8000c38:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c3c:	fa1f f887 	uxth.w	r8, r7
 8000c40:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c48:	fb06 f108 	mul.w	r1, r6, r8
 8000c4c:	4299      	cmp	r1, r3
 8000c4e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c52:	d909      	bls.n	8000c68 <__udivmoddi4+0x19c>
 8000c54:	18fb      	adds	r3, r7, r3
 8000c56:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c5a:	f080 808d 	bcs.w	8000d78 <__udivmoddi4+0x2ac>
 8000c5e:	4299      	cmp	r1, r3
 8000c60:	f240 808a 	bls.w	8000d78 <__udivmoddi4+0x2ac>
 8000c64:	3e02      	subs	r6, #2
 8000c66:	443b      	add	r3, r7
 8000c68:	1a5b      	subs	r3, r3, r1
 8000c6a:	b281      	uxth	r1, r0
 8000c6c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c70:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c78:	fb00 f308 	mul.w	r3, r0, r8
 8000c7c:	428b      	cmp	r3, r1
 8000c7e:	d907      	bls.n	8000c90 <__udivmoddi4+0x1c4>
 8000c80:	1879      	adds	r1, r7, r1
 8000c82:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c86:	d273      	bcs.n	8000d70 <__udivmoddi4+0x2a4>
 8000c88:	428b      	cmp	r3, r1
 8000c8a:	d971      	bls.n	8000d70 <__udivmoddi4+0x2a4>
 8000c8c:	3802      	subs	r0, #2
 8000c8e:	4439      	add	r1, r7
 8000c90:	1acb      	subs	r3, r1, r3
 8000c92:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c96:	e778      	b.n	8000b8a <__udivmoddi4+0xbe>
 8000c98:	f1c6 0c20 	rsb	ip, r6, #32
 8000c9c:	fa03 f406 	lsl.w	r4, r3, r6
 8000ca0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ca4:	431c      	orrs	r4, r3
 8000ca6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000caa:	fa01 f306 	lsl.w	r3, r1, r6
 8000cae:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000cb2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000cb6:	431f      	orrs	r7, r3
 8000cb8:	0c3b      	lsrs	r3, r7, #16
 8000cba:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cbe:	fa1f f884 	uxth.w	r8, r4
 8000cc2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000cc6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000cca:	fb09 fa08 	mul.w	sl, r9, r8
 8000cce:	458a      	cmp	sl, r1
 8000cd0:	fa02 f206 	lsl.w	r2, r2, r6
 8000cd4:	fa00 f306 	lsl.w	r3, r0, r6
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x220>
 8000cda:	1861      	adds	r1, r4, r1
 8000cdc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ce0:	d248      	bcs.n	8000d74 <__udivmoddi4+0x2a8>
 8000ce2:	458a      	cmp	sl, r1
 8000ce4:	d946      	bls.n	8000d74 <__udivmoddi4+0x2a8>
 8000ce6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cea:	4421      	add	r1, r4
 8000cec:	eba1 010a 	sub.w	r1, r1, sl
 8000cf0:	b2bf      	uxth	r7, r7
 8000cf2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cf6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cfa:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000cfe:	fb00 f808 	mul.w	r8, r0, r8
 8000d02:	45b8      	cmp	r8, r7
 8000d04:	d907      	bls.n	8000d16 <__udivmoddi4+0x24a>
 8000d06:	19e7      	adds	r7, r4, r7
 8000d08:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0c:	d22e      	bcs.n	8000d6c <__udivmoddi4+0x2a0>
 8000d0e:	45b8      	cmp	r8, r7
 8000d10:	d92c      	bls.n	8000d6c <__udivmoddi4+0x2a0>
 8000d12:	3802      	subs	r0, #2
 8000d14:	4427      	add	r7, r4
 8000d16:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d1a:	eba7 0708 	sub.w	r7, r7, r8
 8000d1e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d22:	454f      	cmp	r7, r9
 8000d24:	46c6      	mov	lr, r8
 8000d26:	4649      	mov	r1, r9
 8000d28:	d31a      	bcc.n	8000d60 <__udivmoddi4+0x294>
 8000d2a:	d017      	beq.n	8000d5c <__udivmoddi4+0x290>
 8000d2c:	b15d      	cbz	r5, 8000d46 <__udivmoddi4+0x27a>
 8000d2e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d32:	eb67 0701 	sbc.w	r7, r7, r1
 8000d36:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d3a:	40f2      	lsrs	r2, r6
 8000d3c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d40:	40f7      	lsrs	r7, r6
 8000d42:	e9c5 2700 	strd	r2, r7, [r5]
 8000d46:	2600      	movs	r6, #0
 8000d48:	4631      	mov	r1, r6
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	462e      	mov	r6, r5
 8000d50:	4628      	mov	r0, r5
 8000d52:	e70b      	b.n	8000b6c <__udivmoddi4+0xa0>
 8000d54:	4606      	mov	r6, r0
 8000d56:	e6e9      	b.n	8000b2c <__udivmoddi4+0x60>
 8000d58:	4618      	mov	r0, r3
 8000d5a:	e6fd      	b.n	8000b58 <__udivmoddi4+0x8c>
 8000d5c:	4543      	cmp	r3, r8
 8000d5e:	d2e5      	bcs.n	8000d2c <__udivmoddi4+0x260>
 8000d60:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d64:	eb69 0104 	sbc.w	r1, r9, r4
 8000d68:	3801      	subs	r0, #1
 8000d6a:	e7df      	b.n	8000d2c <__udivmoddi4+0x260>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	e7d2      	b.n	8000d16 <__udivmoddi4+0x24a>
 8000d70:	4660      	mov	r0, ip
 8000d72:	e78d      	b.n	8000c90 <__udivmoddi4+0x1c4>
 8000d74:	4681      	mov	r9, r0
 8000d76:	e7b9      	b.n	8000cec <__udivmoddi4+0x220>
 8000d78:	4666      	mov	r6, ip
 8000d7a:	e775      	b.n	8000c68 <__udivmoddi4+0x19c>
 8000d7c:	4630      	mov	r0, r6
 8000d7e:	e74a      	b.n	8000c16 <__udivmoddi4+0x14a>
 8000d80:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d84:	4439      	add	r1, r7
 8000d86:	e713      	b.n	8000bb0 <__udivmoddi4+0xe4>
 8000d88:	3802      	subs	r0, #2
 8000d8a:	443c      	add	r4, r7
 8000d8c:	e724      	b.n	8000bd8 <__udivmoddi4+0x10c>
 8000d8e:	bf00      	nop

08000d90 <__aeabi_idiv0>:
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop

08000d94 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d9a:	463b      	mov	r3, r7
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000da6:	4b21      	ldr	r3, [pc, #132]	; (8000e2c <MX_ADC1_Init+0x98>)
 8000da8:	4a21      	ldr	r2, [pc, #132]	; (8000e30 <MX_ADC1_Init+0x9c>)
 8000daa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000dac:	4b1f      	ldr	r3, [pc, #124]	; (8000e2c <MX_ADC1_Init+0x98>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000db2:	4b1e      	ldr	r3, [pc, #120]	; (8000e2c <MX_ADC1_Init+0x98>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000db8:	4b1c      	ldr	r3, [pc, #112]	; (8000e2c <MX_ADC1_Init+0x98>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000dbe:	4b1b      	ldr	r3, [pc, #108]	; (8000e2c <MX_ADC1_Init+0x98>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dc4:	4b19      	ldr	r3, [pc, #100]	; (8000e2c <MX_ADC1_Init+0x98>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dcc:	4b17      	ldr	r3, [pc, #92]	; (8000e2c <MX_ADC1_Init+0x98>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dd2:	4b16      	ldr	r3, [pc, #88]	; (8000e2c <MX_ADC1_Init+0x98>)
 8000dd4:	4a17      	ldr	r2, [pc, #92]	; (8000e34 <MX_ADC1_Init+0xa0>)
 8000dd6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dd8:	4b14      	ldr	r3, [pc, #80]	; (8000e2c <MX_ADC1_Init+0x98>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000dde:	4b13      	ldr	r3, [pc, #76]	; (8000e2c <MX_ADC1_Init+0x98>)
 8000de0:	2201      	movs	r2, #1
 8000de2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000de4:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <MX_ADC1_Init+0x98>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dec:	4b0f      	ldr	r3, [pc, #60]	; (8000e2c <MX_ADC1_Init+0x98>)
 8000dee:	2201      	movs	r2, #1
 8000df0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000df2:	480e      	ldr	r0, [pc, #56]	; (8000e2c <MX_ADC1_Init+0x98>)
 8000df4:	f000 ffb4 	bl	8001d60 <HAL_ADC_Init>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000dfe:	f000 fa7b 	bl	80012f8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000e02:	2303      	movs	r3, #3
 8000e04:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e06:	2301      	movs	r3, #1
 8000e08:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e0e:	463b      	mov	r3, r7
 8000e10:	4619      	mov	r1, r3
 8000e12:	4806      	ldr	r0, [pc, #24]	; (8000e2c <MX_ADC1_Init+0x98>)
 8000e14:	f000 ffe8 	bl	8001de8 <HAL_ADC_ConfigChannel>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000e1e:	f000 fa6b 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e22:	bf00      	nop
 8000e24:	3710      	adds	r7, #16
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	200000b8 	.word	0x200000b8
 8000e30:	40012000 	.word	0x40012000
 8000e34:	0f000001 	.word	0x0f000001

08000e38 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b08a      	sub	sp, #40	; 0x28
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e40:	f107 0314 	add.w	r3, r7, #20
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
 8000e4e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a15      	ldr	r2, [pc, #84]	; (8000eac <HAL_ADC_MspInit+0x74>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d123      	bne.n	8000ea2 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e5a:	4b15      	ldr	r3, [pc, #84]	; (8000eb0 <HAL_ADC_MspInit+0x78>)
 8000e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5e:	4a14      	ldr	r2, [pc, #80]	; (8000eb0 <HAL_ADC_MspInit+0x78>)
 8000e60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e64:	6453      	str	r3, [r2, #68]	; 0x44
 8000e66:	4b12      	ldr	r3, [pc, #72]	; (8000eb0 <HAL_ADC_MspInit+0x78>)
 8000e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e6e:	613b      	str	r3, [r7, #16]
 8000e70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e72:	4b0f      	ldr	r3, [pc, #60]	; (8000eb0 <HAL_ADC_MspInit+0x78>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	4a0e      	ldr	r2, [pc, #56]	; (8000eb0 <HAL_ADC_MspInit+0x78>)
 8000e78:	f043 0301 	orr.w	r3, r3, #1
 8000e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7e:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <HAL_ADC_MspInit+0x78>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e8a:	2308      	movs	r3, #8
 8000e8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e96:	f107 0314 	add.w	r3, r7, #20
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4805      	ldr	r0, [pc, #20]	; (8000eb4 <HAL_ADC_MspInit+0x7c>)
 8000e9e:	f001 fb05 	bl	80024ac <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000ea2:	bf00      	nop
 8000ea4:	3728      	adds	r7, #40	; 0x28
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40012000 	.word	0x40012000
 8000eb0:	40023800 	.word	0x40023800
 8000eb4:	40020000 	.word	0x40020000

08000eb8 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b08e      	sub	sp, #56	; 0x38
 8000ebc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	605a      	str	r2, [r3, #4]
 8000ec8:	609a      	str	r2, [r3, #8]
 8000eca:	60da      	str	r2, [r3, #12]
 8000ecc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ece:	4b91      	ldr	r3, [pc, #580]	; (8001114 <MX_GPIO_Init+0x25c>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	4a90      	ldr	r2, [pc, #576]	; (8001114 <MX_GPIO_Init+0x25c>)
 8000ed4:	f043 0304 	orr.w	r3, r3, #4
 8000ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eda:	4b8e      	ldr	r3, [pc, #568]	; (8001114 <MX_GPIO_Init+0x25c>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	f003 0304 	and.w	r3, r3, #4
 8000ee2:	623b      	str	r3, [r7, #32]
 8000ee4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ee6:	4b8b      	ldr	r3, [pc, #556]	; (8001114 <MX_GPIO_Init+0x25c>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	4a8a      	ldr	r2, [pc, #552]	; (8001114 <MX_GPIO_Init+0x25c>)
 8000eec:	f043 0320 	orr.w	r3, r3, #32
 8000ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef2:	4b88      	ldr	r3, [pc, #544]	; (8001114 <MX_GPIO_Init+0x25c>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	f003 0320 	and.w	r3, r3, #32
 8000efa:	61fb      	str	r3, [r7, #28]
 8000efc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000efe:	4b85      	ldr	r3, [pc, #532]	; (8001114 <MX_GPIO_Init+0x25c>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	4a84      	ldr	r2, [pc, #528]	; (8001114 <MX_GPIO_Init+0x25c>)
 8000f04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f08:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0a:	4b82      	ldr	r3, [pc, #520]	; (8001114 <MX_GPIO_Init+0x25c>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f12:	61bb      	str	r3, [r7, #24]
 8000f14:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f16:	4b7f      	ldr	r3, [pc, #508]	; (8001114 <MX_GPIO_Init+0x25c>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	4a7e      	ldr	r2, [pc, #504]	; (8001114 <MX_GPIO_Init+0x25c>)
 8000f1c:	f043 0301 	orr.w	r3, r3, #1
 8000f20:	6313      	str	r3, [r2, #48]	; 0x30
 8000f22:	4b7c      	ldr	r3, [pc, #496]	; (8001114 <MX_GPIO_Init+0x25c>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	617b      	str	r3, [r7, #20]
 8000f2c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f2e:	4b79      	ldr	r3, [pc, #484]	; (8001114 <MX_GPIO_Init+0x25c>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	4a78      	ldr	r2, [pc, #480]	; (8001114 <MX_GPIO_Init+0x25c>)
 8000f34:	f043 0302 	orr.w	r3, r3, #2
 8000f38:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3a:	4b76      	ldr	r3, [pc, #472]	; (8001114 <MX_GPIO_Init+0x25c>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	f003 0302 	and.w	r3, r3, #2
 8000f42:	613b      	str	r3, [r7, #16]
 8000f44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f46:	4b73      	ldr	r3, [pc, #460]	; (8001114 <MX_GPIO_Init+0x25c>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	4a72      	ldr	r2, [pc, #456]	; (8001114 <MX_GPIO_Init+0x25c>)
 8000f4c:	f043 0310 	orr.w	r3, r3, #16
 8000f50:	6313      	str	r3, [r2, #48]	; 0x30
 8000f52:	4b70      	ldr	r3, [pc, #448]	; (8001114 <MX_GPIO_Init+0x25c>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	f003 0310 	and.w	r3, r3, #16
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f5e:	4b6d      	ldr	r3, [pc, #436]	; (8001114 <MX_GPIO_Init+0x25c>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	4a6c      	ldr	r2, [pc, #432]	; (8001114 <MX_GPIO_Init+0x25c>)
 8000f64:	f043 0308 	orr.w	r3, r3, #8
 8000f68:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6a:	4b6a      	ldr	r3, [pc, #424]	; (8001114 <MX_GPIO_Init+0x25c>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	f003 0308 	and.w	r3, r3, #8
 8000f72:	60bb      	str	r3, [r7, #8]
 8000f74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f76:	4b67      	ldr	r3, [pc, #412]	; (8001114 <MX_GPIO_Init+0x25c>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	4a66      	ldr	r2, [pc, #408]	; (8001114 <MX_GPIO_Init+0x25c>)
 8000f7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f80:	6313      	str	r3, [r2, #48]	; 0x30
 8000f82:	4b64      	ldr	r3, [pc, #400]	; (8001114 <MX_GPIO_Init+0x25c>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f8a:	607b      	str	r3, [r7, #4]
 8000f8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, D6_Pin|D7_Pin|RS_Pin, GPIO_PIN_RESET);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f44f 6185 	mov.w	r1, #1064	; 0x428
 8000f94:	4860      	ldr	r0, [pc, #384]	; (8001118 <MX_GPIO_Init+0x260>)
 8000f96:	f001 fc35 	bl	8002804 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, D4_Pin|D5_Pin, GPIO_PIN_RESET);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2109      	movs	r1, #9
 8000f9e:	485f      	ldr	r0, [pc, #380]	; (800111c <MX_GPIO_Init+0x264>)
 8000fa0:	f001 fc30 	bl	8002804 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f244 0181 	movw	r1, #16513	; 0x4081
 8000faa:	485d      	ldr	r0, [pc, #372]	; (8001120 <MX_GPIO_Init+0x268>)
 8000fac:	f001 fc2a 	bl	8002804 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	2140      	movs	r1, #64	; 0x40
 8000fb4:	485b      	ldr	r0, [pc, #364]	; (8001124 <MX_GPIO_Init+0x26c>)
 8000fb6:	f001 fc25 	bl	8002804 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2180      	movs	r1, #128	; 0x80
 8000fbe:	485a      	ldr	r0, [pc, #360]	; (8001128 <MX_GPIO_Init+0x270>)
 8000fc0:	f001 fc20 	bl	8002804 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000fc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fca:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000fd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4850      	ldr	r0, [pc, #320]	; (800111c <MX_GPIO_Init+0x264>)
 8000fdc:	f001 fa66 	bl	80024ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = D6_Pin|D7_Pin|RS_Pin;
 8000fe0:	f44f 6385 	mov.w	r3, #1064	; 0x428
 8000fe4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ff2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4847      	ldr	r0, [pc, #284]	; (8001118 <MX_GPIO_Init+0x260>)
 8000ffa:	f001 fa57 	bl	80024ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin;
 8000ffe:	2309      	movs	r3, #9
 8001000:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001002:	2301      	movs	r3, #1
 8001004:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100a:	2300      	movs	r3, #0
 800100c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800100e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001012:	4619      	mov	r1, r3
 8001014:	4841      	ldr	r0, [pc, #260]	; (800111c <MX_GPIO_Init+0x264>)
 8001016:	f001 fa49 	bl	80024ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800101a:	2332      	movs	r3, #50	; 0x32
 800101c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101e:	2302      	movs	r3, #2
 8001020:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001026:	2303      	movs	r3, #3
 8001028:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800102a:	230b      	movs	r3, #11
 800102c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800102e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001032:	4619      	mov	r1, r3
 8001034:	4839      	ldr	r0, [pc, #228]	; (800111c <MX_GPIO_Init+0x264>)
 8001036:	f001 fa39 	bl	80024ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800103a:	2386      	movs	r3, #134	; 0x86
 800103c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103e:	2302      	movs	r3, #2
 8001040:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001046:	2303      	movs	r3, #3
 8001048:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800104a:	230b      	movs	r3, #11
 800104c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001052:	4619      	mov	r1, r3
 8001054:	4835      	ldr	r0, [pc, #212]	; (800112c <MX_GPIO_Init+0x274>)
 8001056:	f001 fa29 	bl	80024ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800105a:	f244 0381 	movw	r3, #16513	; 0x4081
 800105e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001060:	2301      	movs	r3, #1
 8001062:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001068:	2300      	movs	r3, #0
 800106a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800106c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001070:	4619      	mov	r1, r3
 8001072:	482b      	ldr	r0, [pc, #172]	; (8001120 <MX_GPIO_Init+0x268>)
 8001074:	f001 fa1a 	bl	80024ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001078:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800107c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107e:	2302      	movs	r3, #2
 8001080:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001086:	2303      	movs	r3, #3
 8001088:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800108a:	230b      	movs	r3, #11
 800108c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800108e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001092:	4619      	mov	r1, r3
 8001094:	4822      	ldr	r0, [pc, #136]	; (8001120 <MX_GPIO_Init+0x268>)
 8001096:	f001 fa09 	bl	80024ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800109a:	2340      	movs	r3, #64	; 0x40
 800109c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109e:	2301      	movs	r3, #1
 80010a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a6:	2300      	movs	r3, #0
 80010a8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80010aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ae:	4619      	mov	r1, r3
 80010b0:	481c      	ldr	r0, [pc, #112]	; (8001124 <MX_GPIO_Init+0x26c>)
 80010b2:	f001 f9fb 	bl	80024ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80010b6:	2380      	movs	r3, #128	; 0x80
 80010b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ba:	2300      	movs	r3, #0
 80010bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80010c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c6:	4619      	mov	r1, r3
 80010c8:	4816      	ldr	r0, [pc, #88]	; (8001124 <MX_GPIO_Init+0x26c>)
 80010ca:	f001 f9ef 	bl	80024ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EN_Pin;
 80010ce:	2380      	movs	r3, #128	; 0x80
 80010d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d2:	2301      	movs	r3, #1
 80010d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d6:	2300      	movs	r3, #0
 80010d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010da:	2300      	movs	r3, #0
 80010dc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(EN_GPIO_Port, &GPIO_InitStruct);
 80010de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010e2:	4619      	mov	r1, r3
 80010e4:	4810      	ldr	r0, [pc, #64]	; (8001128 <MX_GPIO_Init+0x270>)
 80010e6:	f001 f9e1 	bl	80024ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80010ea:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80010ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f0:	2302      	movs	r3, #2
 80010f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f8:	2303      	movs	r3, #3
 80010fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010fc:	230b      	movs	r3, #11
 80010fe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001100:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001104:	4619      	mov	r1, r3
 8001106:	4807      	ldr	r0, [pc, #28]	; (8001124 <MX_GPIO_Init+0x26c>)
 8001108:	f001 f9d0 	bl	80024ac <HAL_GPIO_Init>

}
 800110c:	bf00      	nop
 800110e:	3738      	adds	r7, #56	; 0x38
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	40023800 	.word	0x40023800
 8001118:	40021400 	.word	0x40021400
 800111c:	40020800 	.word	0x40020800
 8001120:	40020400 	.word	0x40020400
 8001124:	40021800 	.word	0x40021800
 8001128:	40020c00 	.word	0x40020c00
 800112c:	40020000 	.word	0x40020000

08001130 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001136:	f000 fd92 	bl	8001c5e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800113a:	f000 f84d 	bl	80011d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800113e:	f7ff febb 	bl	8000eb8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001142:	f000 fc65 	bl	8001a10 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001146:	f000 fcd7 	bl	8001af8 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM4_Init();
 800114a:	f000 fa7d 	bl	8001648 <MX_TIM4_Init>
  MX_TIM3_Init();
 800114e:	f000 fa25 	bl	800159c <MX_TIM3_Init>
  MX_TIM1_Init();
 8001152:	f000 f977 	bl	8001444 <MX_TIM1_Init>
  MX_ADC1_Init();
 8001156:	f7ff fe1d 	bl	8000d94 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800115a:	2100      	movs	r1, #0
 800115c:	4817      	ldr	r0, [pc, #92]	; (80011bc <main+0x8c>)
 800115e:	f002 feb9 	bl	8003ed4 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim4);
 8001162:	4817      	ldr	r0, [pc, #92]	; (80011c0 <main+0x90>)
 8001164:	f002 fdae 	bl	8003cc4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1);
 8001168:	2100      	movs	r1, #0
 800116a:	4816      	ldr	r0, [pc, #88]	; (80011c4 <main+0x94>)
 800116c:	f003 f852 	bl	8004214 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_2);
 8001170:	2104      	movs	r1, #4
 8001172:	4814      	ldr	r0, [pc, #80]	; (80011c4 <main+0x94>)
 8001174:	f003 f84e 	bl	8004214 <HAL_TIM_Encoder_Start>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
//	  HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), 1000);
	  HAL_Delay(10);
 8001178:	200a      	movs	r0, #10
 800117a:	f000 fdcd 	bl	8001d18 <HAL_Delay>
	  if (messagesReady){
 800117e:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <main+0x98>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d0f8      	beq.n	8001178 <main+0x48>
		  HAL_TIM_Base_Stop_IT(&htim4);
 8001186:	480e      	ldr	r0, [pc, #56]	; (80011c0 <main+0x90>)
 8001188:	f002 fe14 	bl	8003db4 <HAL_TIM_Base_Stop_IT>
		  int dupa = 0;
 800118c:	2300      	movs	r3, #0
 800118e:	607b      	str	r3, [r7, #4]
		  HAL_UART_Transmit(&huart3, uartMessages, lastUartMessagesIndex, 10000);
 8001190:	4b0e      	ldr	r3, [pc, #56]	; (80011cc <main+0x9c>)
 8001192:	6819      	ldr	r1, [r3, #0]
 8001194:	4b0e      	ldr	r3, [pc, #56]	; (80011d0 <main+0xa0>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	b29a      	uxth	r2, r3
 800119a:	f242 7310 	movw	r3, #10000	; 0x2710
 800119e:	480d      	ldr	r0, [pc, #52]	; (80011d4 <main+0xa4>)
 80011a0:	f004 f922 	bl	80053e8 <HAL_UART_Transmit>
		  lastUartMessagesIndex = 0;
 80011a4:	4b0a      	ldr	r3, [pc, #40]	; (80011d0 <main+0xa0>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
		  messagesReady = false;
 80011aa:	4b07      	ldr	r3, [pc, #28]	; (80011c8 <main+0x98>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	701a      	strb	r2, [r3, #0]
		  free(uartMessages);
 80011b0:	4b06      	ldr	r3, [pc, #24]	; (80011cc <main+0x9c>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f005 f8c7 	bl	8006348 <free>
	  HAL_Delay(10);
 80011ba:	e7dd      	b.n	8001178 <main+0x48>
 80011bc:	2000019c 	.word	0x2000019c
 80011c0:	20000104 	.word	0x20000104
 80011c4:	20000150 	.word	0x20000150
 80011c8:	200000ac 	.word	0x200000ac
 80011cc:	20000100 	.word	0x20000100
 80011d0:	200000a8 	.word	0x200000a8
 80011d4:	200001e8 	.word	0x200001e8

080011d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b0b4      	sub	sp, #208	; 0xd0
 80011dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011de:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80011e2:	2230      	movs	r2, #48	; 0x30
 80011e4:	2100      	movs	r1, #0
 80011e6:	4618      	mov	r0, r3
 80011e8:	f005 f8c4 	bl	8006374 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011ec:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011fc:	f107 0308 	add.w	r3, r7, #8
 8001200:	2284      	movs	r2, #132	; 0x84
 8001202:	2100      	movs	r1, #0
 8001204:	4618      	mov	r0, r3
 8001206:	f005 f8b5 	bl	8006374 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800120a:	f001 fc5d 	bl	8002ac8 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800120e:	4b37      	ldr	r3, [pc, #220]	; (80012ec <SystemClock_Config+0x114>)
 8001210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001212:	4a36      	ldr	r2, [pc, #216]	; (80012ec <SystemClock_Config+0x114>)
 8001214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001218:	6413      	str	r3, [r2, #64]	; 0x40
 800121a:	4b34      	ldr	r3, [pc, #208]	; (80012ec <SystemClock_Config+0x114>)
 800121c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001222:	607b      	str	r3, [r7, #4]
 8001224:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001226:	4b32      	ldr	r3, [pc, #200]	; (80012f0 <SystemClock_Config+0x118>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800122e:	4a30      	ldr	r2, [pc, #192]	; (80012f0 <SystemClock_Config+0x118>)
 8001230:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001234:	6013      	str	r3, [r2, #0]
 8001236:	4b2e      	ldr	r3, [pc, #184]	; (80012f0 <SystemClock_Config+0x118>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800123e:	603b      	str	r3, [r7, #0]
 8001240:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001242:	2301      	movs	r3, #1
 8001244:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001248:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800124c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001250:	2302      	movs	r3, #2
 8001252:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001256:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800125a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 800125e:	2304      	movs	r3, #4
 8001260:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001264:	2348      	movs	r3, #72	; 0x48
 8001266:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800126a:	2302      	movs	r3, #2
 800126c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001270:	2303      	movs	r3, #3
 8001272:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001276:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800127a:	4618      	mov	r0, r3
 800127c:	f001 fc34 	bl	8002ae8 <HAL_RCC_OscConfig>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001286:	f000 f837 	bl	80012f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800128a:	230f      	movs	r3, #15
 800128c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001290:	2302      	movs	r3, #2
 8001292:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001296:	2300      	movs	r3, #0
 8001298:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800129c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012a4:	2300      	movs	r3, #0
 80012a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012aa:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80012ae:	2102      	movs	r1, #2
 80012b0:	4618      	mov	r0, r3
 80012b2:	f001 febd 	bl	8003030 <HAL_RCC_ClockConfig>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80012bc:	f000 f81c 	bl	80012f8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 80012c0:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <SystemClock_Config+0x11c>)
 80012c2:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80012c4:	2300      	movs	r3, #0
 80012c6:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80012c8:	2300      	movs	r3, #0
 80012ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012ce:	f107 0308 	add.w	r3, r7, #8
 80012d2:	4618      	mov	r0, r3
 80012d4:	f002 f8ae 	bl	8003434 <HAL_RCCEx_PeriphCLKConfig>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <SystemClock_Config+0x10a>
  {
    Error_Handler();
 80012de:	f000 f80b 	bl	80012f8 <Error_Handler>
  }
}
 80012e2:	bf00      	nop
 80012e4:	37d0      	adds	r7, #208	; 0xd0
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40023800 	.word	0x40023800
 80012f0:	40007000 	.word	0x40007000
 80012f4:	00200100 	.word	0x00200100

080012f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012fc:	b672      	cpsid	i
}
 80012fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001300:	e7fe      	b.n	8001300 <Error_Handler+0x8>
	...

08001304 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800130a:	4b0f      	ldr	r3, [pc, #60]	; (8001348 <HAL_MspInit+0x44>)
 800130c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130e:	4a0e      	ldr	r2, [pc, #56]	; (8001348 <HAL_MspInit+0x44>)
 8001310:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001314:	6413      	str	r3, [r2, #64]	; 0x40
 8001316:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <HAL_MspInit+0x44>)
 8001318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800131e:	607b      	str	r3, [r7, #4]
 8001320:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001322:	4b09      	ldr	r3, [pc, #36]	; (8001348 <HAL_MspInit+0x44>)
 8001324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001326:	4a08      	ldr	r2, [pc, #32]	; (8001348 <HAL_MspInit+0x44>)
 8001328:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800132c:	6453      	str	r3, [r2, #68]	; 0x44
 800132e:	4b06      	ldr	r3, [pc, #24]	; (8001348 <HAL_MspInit+0x44>)
 8001330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001332:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001336:	603b      	str	r3, [r7, #0]
 8001338:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800133a:	bf00      	nop
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	40023800 	.word	0x40023800

0800134c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001350:	e7fe      	b.n	8001350 <NMI_Handler+0x4>

08001352 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001352:	b480      	push	{r7}
 8001354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001356:	e7fe      	b.n	8001356 <HardFault_Handler+0x4>

08001358 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800135c:	e7fe      	b.n	800135c <MemManage_Handler+0x4>

0800135e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800135e:	b480      	push	{r7}
 8001360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001362:	e7fe      	b.n	8001362 <BusFault_Handler+0x4>

08001364 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001368:	e7fe      	b.n	8001368 <UsageFault_Handler+0x4>

0800136a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800136a:	b480      	push	{r7}
 800136c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800136e:	bf00      	nop
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800137c:	bf00      	nop
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr

08001386 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001386:	b480      	push	{r7}
 8001388:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001398:	f000 fc9e 	bl	8001cd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800139c:	bf00      	nop
 800139e:	bd80      	pop	{r7, pc}

080013a0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80013a4:	4802      	ldr	r0, [pc, #8]	; (80013b0 <TIM4_IRQHandler+0x10>)
 80013a6:	f002 ffc3 	bl	8004330 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	20000104 	.word	0x20000104

080013b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013bc:	4a14      	ldr	r2, [pc, #80]	; (8001410 <_sbrk+0x5c>)
 80013be:	4b15      	ldr	r3, [pc, #84]	; (8001414 <_sbrk+0x60>)
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013c8:	4b13      	ldr	r3, [pc, #76]	; (8001418 <_sbrk+0x64>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d102      	bne.n	80013d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013d0:	4b11      	ldr	r3, [pc, #68]	; (8001418 <_sbrk+0x64>)
 80013d2:	4a12      	ldr	r2, [pc, #72]	; (800141c <_sbrk+0x68>)
 80013d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013d6:	4b10      	ldr	r3, [pc, #64]	; (8001418 <_sbrk+0x64>)
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4413      	add	r3, r2
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d207      	bcs.n	80013f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013e4:	f004 ff86 	bl	80062f4 <__errno>
 80013e8:	4603      	mov	r3, r0
 80013ea:	220c      	movs	r2, #12
 80013ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013ee:	f04f 33ff 	mov.w	r3, #4294967295
 80013f2:	e009      	b.n	8001408 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013f4:	4b08      	ldr	r3, [pc, #32]	; (8001418 <_sbrk+0x64>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013fa:	4b07      	ldr	r3, [pc, #28]	; (8001418 <_sbrk+0x64>)
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4413      	add	r3, r2
 8001402:	4a05      	ldr	r2, [pc, #20]	; (8001418 <_sbrk+0x64>)
 8001404:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001406:	68fb      	ldr	r3, [r7, #12]
}
 8001408:	4618      	mov	r0, r3
 800140a:	3718      	adds	r7, #24
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20050000 	.word	0x20050000
 8001414:	00000400 	.word	0x00000400
 8001418:	2000008c 	.word	0x2000008c
 800141c:	20000688 	.word	0x20000688

08001420 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001424:	4b06      	ldr	r3, [pc, #24]	; (8001440 <SystemInit+0x20>)
 8001426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800142a:	4a05      	ldr	r2, [pc, #20]	; (8001440 <SystemInit+0x20>)
 800142c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001430:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	e000ed00 	.word	0xe000ed00

08001444 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b09a      	sub	sp, #104	; 0x68
 8001448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800144a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	605a      	str	r2, [r3, #4]
 8001454:	609a      	str	r2, [r3, #8]
 8001456:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001458:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001464:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	60da      	str	r2, [r3, #12]
 8001472:	611a      	str	r2, [r3, #16]
 8001474:	615a      	str	r2, [r3, #20]
 8001476:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001478:	1d3b      	adds	r3, r7, #4
 800147a:	222c      	movs	r2, #44	; 0x2c
 800147c:	2100      	movs	r1, #0
 800147e:	4618      	mov	r0, r3
 8001480:	f004 ff78 	bl	8006374 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001484:	4b43      	ldr	r3, [pc, #268]	; (8001594 <MX_TIM1_Init+0x150>)
 8001486:	4a44      	ldr	r2, [pc, #272]	; (8001598 <MX_TIM1_Init+0x154>)
 8001488:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 800148a:	4b42      	ldr	r3, [pc, #264]	; (8001594 <MX_TIM1_Init+0x150>)
 800148c:	2247      	movs	r2, #71	; 0x47
 800148e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001490:	4b40      	ldr	r3, [pc, #256]	; (8001594 <MX_TIM1_Init+0x150>)
 8001492:	2200      	movs	r2, #0
 8001494:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001496:	4b3f      	ldr	r3, [pc, #252]	; (8001594 <MX_TIM1_Init+0x150>)
 8001498:	f240 32e7 	movw	r2, #999	; 0x3e7
 800149c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800149e:	4b3d      	ldr	r3, [pc, #244]	; (8001594 <MX_TIM1_Init+0x150>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014a4:	4b3b      	ldr	r3, [pc, #236]	; (8001594 <MX_TIM1_Init+0x150>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014aa:	4b3a      	ldr	r3, [pc, #232]	; (8001594 <MX_TIM1_Init+0x150>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014b0:	4838      	ldr	r0, [pc, #224]	; (8001594 <MX_TIM1_Init+0x150>)
 80014b2:	f002 fbaf 	bl	8003c14 <HAL_TIM_Base_Init>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80014bc:	f7ff ff1c 	bl	80012f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014c4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80014c6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80014ca:	4619      	mov	r1, r3
 80014cc:	4831      	ldr	r0, [pc, #196]	; (8001594 <MX_TIM1_Init+0x150>)
 80014ce:	f003 f963 	bl	8004798 <HAL_TIM_ConfigClockSource>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80014d8:	f7ff ff0e 	bl	80012f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80014dc:	482d      	ldr	r0, [pc, #180]	; (8001594 <MX_TIM1_Init+0x150>)
 80014de:	f002 fc98 	bl	8003e12 <HAL_TIM_PWM_Init>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80014e8:	f7ff ff06 	bl	80012f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ec:	2300      	movs	r3, #0
 80014ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80014f0:	2300      	movs	r3, #0
 80014f2:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014f4:	2300      	movs	r3, #0
 80014f6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014f8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80014fc:	4619      	mov	r1, r3
 80014fe:	4825      	ldr	r0, [pc, #148]	; (8001594 <MX_TIM1_Init+0x150>)
 8001500:	f003 fdfa 	bl	80050f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800150a:	f7ff fef5 	bl	80012f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800150e:	2360      	movs	r3, #96	; 0x60
 8001510:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001512:	2300      	movs	r3, #0
 8001514:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001516:	2300      	movs	r3, #0
 8001518:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800151a:	2300      	movs	r3, #0
 800151c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800151e:	2300      	movs	r3, #0
 8001520:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001522:	2300      	movs	r3, #0
 8001524:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001526:	2300      	movs	r3, #0
 8001528:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800152a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800152e:	2200      	movs	r2, #0
 8001530:	4619      	mov	r1, r3
 8001532:	4818      	ldr	r0, [pc, #96]	; (8001594 <MX_TIM1_Init+0x150>)
 8001534:	f003 f81c 	bl	8004570 <HAL_TIM_PWM_ConfigChannel>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800153e:	f7ff fedb 	bl	80012f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001542:	2300      	movs	r3, #0
 8001544:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001546:	2300      	movs	r3, #0
 8001548:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800154a:	2300      	movs	r3, #0
 800154c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800154e:	2300      	movs	r3, #0
 8001550:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001552:	2300      	movs	r3, #0
 8001554:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001556:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800155a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800155c:	2300      	movs	r3, #0
 800155e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001560:	2300      	movs	r3, #0
 8001562:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001564:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001568:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800156a:	2300      	movs	r3, #0
 800156c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800156e:	2300      	movs	r3, #0
 8001570:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001572:	1d3b      	adds	r3, r7, #4
 8001574:	4619      	mov	r1, r3
 8001576:	4807      	ldr	r0, [pc, #28]	; (8001594 <MX_TIM1_Init+0x150>)
 8001578:	f003 fe4c 	bl	8005214 <HAL_TIMEx_ConfigBreakDeadTime>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001582:	f7ff feb9 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001586:	4803      	ldr	r0, [pc, #12]	; (8001594 <MX_TIM1_Init+0x150>)
 8001588:	f000 f948 	bl	800181c <HAL_TIM_MspPostInit>

}
 800158c:	bf00      	nop
 800158e:	3768      	adds	r7, #104	; 0x68
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	2000019c 	.word	0x2000019c
 8001598:	40010000 	.word	0x40010000

0800159c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b08c      	sub	sp, #48	; 0x30
 80015a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80015a2:	f107 030c 	add.w	r3, r7, #12
 80015a6:	2224      	movs	r2, #36	; 0x24
 80015a8:	2100      	movs	r1, #0
 80015aa:	4618      	mov	r0, r3
 80015ac:	f004 fee2 	bl	8006374 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015b0:	463b      	mov	r3, r7
 80015b2:	2200      	movs	r2, #0
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	605a      	str	r2, [r3, #4]
 80015b8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015ba:	4b21      	ldr	r3, [pc, #132]	; (8001640 <MX_TIM3_Init+0xa4>)
 80015bc:	4a21      	ldr	r2, [pc, #132]	; (8001644 <MX_TIM3_Init+0xa8>)
 80015be:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80015c0:	4b1f      	ldr	r3, [pc, #124]	; (8001640 <MX_TIM3_Init+0xa4>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015c6:	4b1e      	ldr	r3, [pc, #120]	; (8001640 <MX_TIM3_Init+0xa4>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80015cc:	4b1c      	ldr	r3, [pc, #112]	; (8001640 <MX_TIM3_Init+0xa4>)
 80015ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015d2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015d4:	4b1a      	ldr	r3, [pc, #104]	; (8001640 <MX_TIM3_Init+0xa4>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015da:	4b19      	ldr	r3, [pc, #100]	; (8001640 <MX_TIM3_Init+0xa4>)
 80015dc:	2280      	movs	r2, #128	; 0x80
 80015de:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80015e0:	2303      	movs	r3, #3
 80015e2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80015e4:	2302      	movs	r3, #2
 80015e6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80015e8:	2301      	movs	r3, #1
 80015ea:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80015ec:	2300      	movs	r3, #0
 80015ee:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80015f0:	2300      	movs	r3, #0
 80015f2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80015f4:	2302      	movs	r3, #2
 80015f6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80015f8:	2301      	movs	r3, #1
 80015fa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80015fc:	2300      	movs	r3, #0
 80015fe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001600:	2300      	movs	r3, #0
 8001602:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001604:	f107 030c 	add.w	r3, r7, #12
 8001608:	4619      	mov	r1, r3
 800160a:	480d      	ldr	r0, [pc, #52]	; (8001640 <MX_TIM3_Init+0xa4>)
 800160c:	f002 fd5c 	bl	80040c8 <HAL_TIM_Encoder_Init>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001616:	f7ff fe6f 	bl	80012f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800161a:	2300      	movs	r3, #0
 800161c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800161e:	2300      	movs	r3, #0
 8001620:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001622:	463b      	mov	r3, r7
 8001624:	4619      	mov	r1, r3
 8001626:	4806      	ldr	r0, [pc, #24]	; (8001640 <MX_TIM3_Init+0xa4>)
 8001628:	f003 fd66 	bl	80050f8 <HAL_TIMEx_MasterConfigSynchronization>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001632:	f7ff fe61 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001636:	bf00      	nop
 8001638:	3730      	adds	r7, #48	; 0x30
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	20000150 	.word	0x20000150
 8001644:	40000400 	.word	0x40000400

08001648 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b088      	sub	sp, #32
 800164c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800164e:	f107 0310 	add.w	r3, r7, #16
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	605a      	str	r2, [r3, #4]
 8001658:	609a      	str	r2, [r3, #8]
 800165a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800165c:	1d3b      	adds	r3, r7, #4
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	605a      	str	r2, [r3, #4]
 8001664:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001666:	4b1d      	ldr	r3, [pc, #116]	; (80016dc <MX_TIM4_Init+0x94>)
 8001668:	4a1d      	ldr	r2, [pc, #116]	; (80016e0 <MX_TIM4_Init+0x98>)
 800166a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7199;
 800166c:	4b1b      	ldr	r3, [pc, #108]	; (80016dc <MX_TIM4_Init+0x94>)
 800166e:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001672:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001674:	4b19      	ldr	r3, [pc, #100]	; (80016dc <MX_TIM4_Init+0x94>)
 8001676:	2200      	movs	r2, #0
 8001678:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9;
 800167a:	4b18      	ldr	r3, [pc, #96]	; (80016dc <MX_TIM4_Init+0x94>)
 800167c:	2209      	movs	r2, #9
 800167e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001680:	4b16      	ldr	r3, [pc, #88]	; (80016dc <MX_TIM4_Init+0x94>)
 8001682:	2200      	movs	r2, #0
 8001684:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001686:	4b15      	ldr	r3, [pc, #84]	; (80016dc <MX_TIM4_Init+0x94>)
 8001688:	2200      	movs	r2, #0
 800168a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800168c:	4813      	ldr	r0, [pc, #76]	; (80016dc <MX_TIM4_Init+0x94>)
 800168e:	f002 fac1 	bl	8003c14 <HAL_TIM_Base_Init>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001698:	f7ff fe2e 	bl	80012f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800169c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016a0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80016a2:	f107 0310 	add.w	r3, r7, #16
 80016a6:	4619      	mov	r1, r3
 80016a8:	480c      	ldr	r0, [pc, #48]	; (80016dc <MX_TIM4_Init+0x94>)
 80016aa:	f003 f875 	bl	8004798 <HAL_TIM_ConfigClockSource>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80016b4:	f7ff fe20 	bl	80012f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016b8:	2300      	movs	r3, #0
 80016ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016bc:	2300      	movs	r3, #0
 80016be:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80016c0:	1d3b      	adds	r3, r7, #4
 80016c2:	4619      	mov	r1, r3
 80016c4:	4805      	ldr	r0, [pc, #20]	; (80016dc <MX_TIM4_Init+0x94>)
 80016c6:	f003 fd17 	bl	80050f8 <HAL_TIMEx_MasterConfigSynchronization>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80016d0:	f7ff fe12 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80016d4:	bf00      	nop
 80016d6:	3720      	adds	r7, #32
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	20000104 	.word	0x20000104
 80016e0:	40000800 	.word	0x40000800

080016e4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a16      	ldr	r2, [pc, #88]	; (800174c <HAL_TIM_Base_MspInit+0x68>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d10c      	bne.n	8001710 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016f6:	4b16      	ldr	r3, [pc, #88]	; (8001750 <HAL_TIM_Base_MspInit+0x6c>)
 80016f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fa:	4a15      	ldr	r2, [pc, #84]	; (8001750 <HAL_TIM_Base_MspInit+0x6c>)
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	6453      	str	r3, [r2, #68]	; 0x44
 8001702:	4b13      	ldr	r3, [pc, #76]	; (8001750 <HAL_TIM_Base_MspInit+0x6c>)
 8001704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800170e:	e018      	b.n	8001742 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM4)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a0f      	ldr	r2, [pc, #60]	; (8001754 <HAL_TIM_Base_MspInit+0x70>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d113      	bne.n	8001742 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800171a:	4b0d      	ldr	r3, [pc, #52]	; (8001750 <HAL_TIM_Base_MspInit+0x6c>)
 800171c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171e:	4a0c      	ldr	r2, [pc, #48]	; (8001750 <HAL_TIM_Base_MspInit+0x6c>)
 8001720:	f043 0304 	orr.w	r3, r3, #4
 8001724:	6413      	str	r3, [r2, #64]	; 0x40
 8001726:	4b0a      	ldr	r3, [pc, #40]	; (8001750 <HAL_TIM_Base_MspInit+0x6c>)
 8001728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172a:	f003 0304 	and.w	r3, r3, #4
 800172e:	60bb      	str	r3, [r7, #8]
 8001730:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 3, 0);
 8001732:	2200      	movs	r2, #0
 8001734:	2103      	movs	r1, #3
 8001736:	201e      	movs	r0, #30
 8001738:	f000 fe81 	bl	800243e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800173c:	201e      	movs	r0, #30
 800173e:	f000 fe9a 	bl	8002476 <HAL_NVIC_EnableIRQ>
}
 8001742:	bf00      	nop
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40010000 	.word	0x40010000
 8001750:	40023800 	.word	0x40023800
 8001754:	40000800 	.word	0x40000800

08001758 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b08a      	sub	sp, #40	; 0x28
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001760:	f107 0314 	add.w	r3, r7, #20
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	605a      	str	r2, [r3, #4]
 800176a:	609a      	str	r2, [r3, #8]
 800176c:	60da      	str	r2, [r3, #12]
 800176e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a25      	ldr	r2, [pc, #148]	; (800180c <HAL_TIM_Encoder_MspInit+0xb4>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d143      	bne.n	8001802 <HAL_TIM_Encoder_MspInit+0xaa>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800177a:	4b25      	ldr	r3, [pc, #148]	; (8001810 <HAL_TIM_Encoder_MspInit+0xb8>)
 800177c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177e:	4a24      	ldr	r2, [pc, #144]	; (8001810 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001780:	f043 0302 	orr.w	r3, r3, #2
 8001784:	6413      	str	r3, [r2, #64]	; 0x40
 8001786:	4b22      	ldr	r3, [pc, #136]	; (8001810 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	613b      	str	r3, [r7, #16]
 8001790:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001792:	4b1f      	ldr	r3, [pc, #124]	; (8001810 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	4a1e      	ldr	r2, [pc, #120]	; (8001810 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001798:	f043 0301 	orr.w	r3, r3, #1
 800179c:	6313      	str	r3, [r2, #48]	; 0x30
 800179e:	4b1c      	ldr	r3, [pc, #112]	; (8001810 <HAL_TIM_Encoder_MspInit+0xb8>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017aa:	4b19      	ldr	r3, [pc, #100]	; (8001810 <HAL_TIM_Encoder_MspInit+0xb8>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	4a18      	ldr	r2, [pc, #96]	; (8001810 <HAL_TIM_Encoder_MspInit+0xb8>)
 80017b0:	f043 0304 	orr.w	r3, r3, #4
 80017b4:	6313      	str	r3, [r2, #48]	; 0x30
 80017b6:	4b16      	ldr	r3, [pc, #88]	; (8001810 <HAL_TIM_Encoder_MspInit+0xb8>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	f003 0304 	and.w	r3, r3, #4
 80017be:	60bb      	str	r3, [r7, #8]
 80017c0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017c2:	2340      	movs	r3, #64	; 0x40
 80017c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c6:	2302      	movs	r3, #2
 80017c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ca:	2300      	movs	r3, #0
 80017cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ce:	2300      	movs	r3, #0
 80017d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80017d2:	2302      	movs	r3, #2
 80017d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d6:	f107 0314 	add.w	r3, r7, #20
 80017da:	4619      	mov	r1, r3
 80017dc:	480d      	ldr	r0, [pc, #52]	; (8001814 <HAL_TIM_Encoder_MspInit+0xbc>)
 80017de:	f000 fe65 	bl	80024ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80017e2:	2380      	movs	r3, #128	; 0x80
 80017e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e6:	2302      	movs	r3, #2
 80017e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ea:	2300      	movs	r3, #0
 80017ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ee:	2300      	movs	r3, #0
 80017f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80017f2:	2302      	movs	r3, #2
 80017f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017f6:	f107 0314 	add.w	r3, r7, #20
 80017fa:	4619      	mov	r1, r3
 80017fc:	4806      	ldr	r0, [pc, #24]	; (8001818 <HAL_TIM_Encoder_MspInit+0xc0>)
 80017fe:	f000 fe55 	bl	80024ac <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001802:	bf00      	nop
 8001804:	3728      	adds	r7, #40	; 0x28
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40000400 	.word	0x40000400
 8001810:	40023800 	.word	0x40023800
 8001814:	40020000 	.word	0x40020000
 8001818:	40020800 	.word	0x40020800

0800181c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b088      	sub	sp, #32
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001824:	f107 030c 	add.w	r3, r7, #12
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	605a      	str	r2, [r3, #4]
 800182e:	609a      	str	r2, [r3, #8]
 8001830:	60da      	str	r2, [r3, #12]
 8001832:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a11      	ldr	r2, [pc, #68]	; (8001880 <HAL_TIM_MspPostInit+0x64>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d11c      	bne.n	8001878 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800183e:	4b11      	ldr	r3, [pc, #68]	; (8001884 <HAL_TIM_MspPostInit+0x68>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	4a10      	ldr	r2, [pc, #64]	; (8001884 <HAL_TIM_MspPostInit+0x68>)
 8001844:	f043 0310 	orr.w	r3, r3, #16
 8001848:	6313      	str	r3, [r2, #48]	; 0x30
 800184a:	4b0e      	ldr	r3, [pc, #56]	; (8001884 <HAL_TIM_MspPostInit+0x68>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	f003 0310 	and.w	r3, r3, #16
 8001852:	60bb      	str	r3, [r7, #8]
 8001854:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001856:	f44f 7300 	mov.w	r3, #512	; 0x200
 800185a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185c:	2302      	movs	r3, #2
 800185e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001860:	2300      	movs	r3, #0
 8001862:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001864:	2300      	movs	r3, #0
 8001866:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001868:	2301      	movs	r3, #1
 800186a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800186c:	f107 030c 	add.w	r3, r7, #12
 8001870:	4619      	mov	r1, r3
 8001872:	4805      	ldr	r0, [pc, #20]	; (8001888 <HAL_TIM_MspPostInit+0x6c>)
 8001874:	f000 fe1a 	bl	80024ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001878:	bf00      	nop
 800187a:	3720      	adds	r7, #32
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	40010000 	.word	0x40010000
 8001884:	40023800 	.word	0x40023800
 8001888:	40021000 	.word	0x40021000

0800188c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 1 */
void SetPwmValue(uint32_t value){
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, value);
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM4) { // 1s timer
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a50      	ldr	r2, [pc, #320]	; (80019dc <HAL_TIM_PeriodElapsedCallback+0x150>)
 800189a:	4293      	cmp	r3, r2
 800189c:	f040 809a 	bne.w	80019d4 <HAL_TIM_PeriodElapsedCallback+0x148>
		uint8_t messageLen = 6;
 80018a0:	2306      	movs	r3, #6
 80018a2:	73fb      	strb	r3, [r7, #15]
		if (lastUartMessagesIndex == 0 && !messagesReady){
 80018a4:	4b4e      	ldr	r3, [pc, #312]	; (80019e0 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d113      	bne.n	80018d4 <HAL_TIM_PeriodElapsedCallback+0x48>
 80018ac:	4b4d      	ldr	r3, [pc, #308]	; (80019e4 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	f083 0301 	eor.w	r3, r3, #1
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d00c      	beq.n	80018d4 <HAL_TIM_PeriodElapsedCallback+0x48>
			uartMessages = calloc(1, 1000*messageLen);
 80018ba:	7bfb      	ldrb	r3, [r7, #15]
 80018bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018c0:	fb02 f303 	mul.w	r3, r2, r3
 80018c4:	4619      	mov	r1, r3
 80018c6:	2001      	movs	r0, #1
 80018c8:	f004 fd0c 	bl	80062e4 <calloc>
 80018cc:	4603      	mov	r3, r0
 80018ce:	461a      	mov	r2, r3
 80018d0:	4b45      	ldr	r3, [pc, #276]	; (80019e8 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80018d2:	601a      	str	r2, [r3, #0]
		}
		if (lastUartMessagesIndex >= 6000){
 80018d4:	4b42      	ldr	r3, [pc, #264]	; (80019e0 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f241 726f 	movw	r2, #5999	; 0x176f
 80018dc:	4293      	cmp	r3, r2
 80018de:	d902      	bls.n	80018e6 <HAL_TIM_PeriodElapsedCallback+0x5a>
			messagesReady = true;
 80018e0:	4b40      	ldr	r3, [pc, #256]	; (80019e4 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80018e2:	2201      	movs	r2, #1
 80018e4:	701a      	strb	r2, [r3, #0]
		}
		if (!messagesReady){
 80018e6:	4b3f      	ldr	r3, [pc, #252]	; (80019e4 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	f083 0301 	eor.w	r3, r3, #1
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d06f      	beq.n	80019d4 <HAL_TIM_PeriodElapsedCallback+0x148>
	//		ADC_Value = HAL_ADC_GetValue(&hadc1);
	//		HAL_Delay(100);
	//		GetEncoderValue();
	//		SetPwmValue(pulseWidth);
			char *message;
			message = calloc(1, messageLen*(sizeof(uint8_t)));
 80018f4:	7bfb      	ldrb	r3, [r7, #15]
 80018f6:	4619      	mov	r1, r3
 80018f8:	2001      	movs	r0, #1
 80018fa:	f004 fcf3 	bl	80062e4 <calloc>
 80018fe:	4603      	mov	r3, r0
 8001900:	60bb      	str	r3, [r7, #8]
			encoderValue = __HAL_TIM_GET_COUNTER(&htim3);
 8001902:	4b3a      	ldr	r3, [pc, #232]	; (80019ec <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001908:	461a      	mov	r2, r3
 800190a:	4b39      	ldr	r3, [pc, #228]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x164>)
 800190c:	601a      	str	r2, [r3, #0]
			if(lastEncoder > encoderValue){
 800190e:	4b39      	ldr	r3, [pc, #228]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a37      	ldr	r2, [pc, #220]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8001914:	6812      	ldr	r2, [r2, #0]
 8001916:	4293      	cmp	r3, r2
 8001918:	d912      	bls.n	8001940 <HAL_TIM_PeriodElapsedCallback+0xb4>
				lastEncoder = 65535 - lastEncoder;
 800191a:	4b36      	ldr	r3, [pc, #216]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x168>)
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001922:	1a9b      	subs	r3, r3, r2
 8001924:	4a33      	ldr	r2, [pc, #204]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001926:	6013      	str	r3, [r2, #0]
				encoderValue = encoderValue + lastEncoder;
 8001928:	4b31      	ldr	r3, [pc, #196]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x164>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	461a      	mov	r2, r3
 800192e:	4b31      	ldr	r3, [pc, #196]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4413      	add	r3, r2
 8001934:	461a      	mov	r2, r3
 8001936:	4b2e      	ldr	r3, [pc, #184]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8001938:	601a      	str	r2, [r3, #0]
				lastEncoder = 0;
 800193a:	4b2e      	ldr	r3, [pc, #184]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x168>)
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
			}
			difference = encoderValue - lastEncoder;
 8001940:	4b2b      	ldr	r3, [pc, #172]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	461a      	mov	r2, r3
 8001946:	4b2b      	ldr	r3, [pc, #172]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	4a2a      	ldr	r2, [pc, #168]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800194e:	6013      	str	r3, [r2, #0]
			RPM = (difference) * scaler / 1928.0;
 8001950:	4b29      	ldr	r3, [pc, #164]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4618      	mov	r0, r3
 8001956:	f7fe fded 	bl	8000534 <__aeabi_ui2d>
 800195a:	f04f 0200 	mov.w	r2, #0
 800195e:	4b27      	ldr	r3, [pc, #156]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001960:	f7fe fe62 	bl	8000628 <__aeabi_dmul>
 8001964:	4602      	mov	r2, r0
 8001966:	460b      	mov	r3, r1
 8001968:	4610      	mov	r0, r2
 800196a:	4619      	mov	r1, r3
 800196c:	f04f 0200 	mov.w	r2, #0
 8001970:	4b23      	ldr	r3, [pc, #140]	; (8001a00 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001972:	f7fe ff83 	bl	800087c <__aeabi_ddiv>
 8001976:	4602      	mov	r2, r0
 8001978:	460b      	mov	r3, r1
 800197a:	4922      	ldr	r1, [pc, #136]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0x178>)
 800197c:	e9c1 2300 	strd	r2, r3, [r1]
			killme = (int)(RPM);
 8001980:	4b20      	ldr	r3, [pc, #128]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001986:	4610      	mov	r0, r2
 8001988:	4619      	mov	r1, r3
 800198a:	f7ff f85f 	bl	8000a4c <__aeabi_d2iz>
 800198e:	4603      	mov	r3, r0
 8001990:	4a1d      	ldr	r2, [pc, #116]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001992:	6013      	str	r3, [r2, #0]
			//sprintf((char *)message, "%03i\n\r", killme);
			sprintf((char *)message, "%d\n\r", killme);
 8001994:	4b1c      	ldr	r3, [pc, #112]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	461a      	mov	r2, r3
 800199a:	491c      	ldr	r1, [pc, #112]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0x180>)
 800199c:	68b8      	ldr	r0, [r7, #8]
 800199e:	f004 fdbb 	bl	8006518 <siprintf>

			memcpy(uartMessages+lastUartMessagesIndex+messageLen, message, messageLen*sizeof(uint8_t));
 80019a2:	4b11      	ldr	r3, [pc, #68]	; (80019e8 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	7bf9      	ldrb	r1, [r7, #15]
 80019a8:	4b0d      	ldr	r3, [pc, #52]	; (80019e0 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	440b      	add	r3, r1
 80019ae:	4413      	add	r3, r2
 80019b0:	7bfa      	ldrb	r2, [r7, #15]
 80019b2:	68b9      	ldr	r1, [r7, #8]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f004 fccf 	bl	8006358 <memcpy>
			lastUartMessagesIndex += 6;
 80019ba:	4b09      	ldr	r3, [pc, #36]	; (80019e0 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	3306      	adds	r3, #6
 80019c0:	4a07      	ldr	r2, [pc, #28]	; (80019e0 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80019c2:	6013      	str	r3, [r2, #0]
			//HAL_UART_Transmit(&huart3, (uint8_t *)message, strlen(message), 50);
			free(message);
 80019c4:	68b8      	ldr	r0, [r7, #8]
 80019c6:	f004 fcbf 	bl	8006348 <free>
			//*msg = '\n';
			lastEncoder = encoderValue;
 80019ca:	4b09      	ldr	r3, [pc, #36]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	461a      	mov	r2, r3
 80019d0:	4b08      	ldr	r3, [pc, #32]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80019d2:	601a      	str	r2, [r3, #0]
		}
	}
}
 80019d4:	bf00      	nop
 80019d6:	3710      	adds	r7, #16
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40000800 	.word	0x40000800
 80019e0:	200000a8 	.word	0x200000a8
 80019e4:	200000ac 	.word	0x200000ac
 80019e8:	20000100 	.word	0x20000100
 80019ec:	20000150 	.word	0x20000150
 80019f0:	20000090 	.word	0x20000090
 80019f4:	200000a0 	.word	0x200000a0
 80019f8:	200000a4 	.word	0x200000a4
 80019fc:	404e0000 	.word	0x404e0000
 8001a00:	409e2000 	.word	0x409e2000
 8001a04:	20000098 	.word	0x20000098
 8001a08:	20000094 	.word	0x20000094
 8001a0c:	08006bfc 	.word	0x08006bfc

08001a10 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a14:	4b14      	ldr	r3, [pc, #80]	; (8001a68 <MX_USART3_UART_Init+0x58>)
 8001a16:	4a15      	ldr	r2, [pc, #84]	; (8001a6c <MX_USART3_UART_Init+0x5c>)
 8001a18:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001a1a:	4b13      	ldr	r3, [pc, #76]	; (8001a68 <MX_USART3_UART_Init+0x58>)
 8001a1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a20:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a22:	4b11      	ldr	r3, [pc, #68]	; (8001a68 <MX_USART3_UART_Init+0x58>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a28:	4b0f      	ldr	r3, [pc, #60]	; (8001a68 <MX_USART3_UART_Init+0x58>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a2e:	4b0e      	ldr	r3, [pc, #56]	; (8001a68 <MX_USART3_UART_Init+0x58>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a34:	4b0c      	ldr	r3, [pc, #48]	; (8001a68 <MX_USART3_UART_Init+0x58>)
 8001a36:	220c      	movs	r2, #12
 8001a38:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a3a:	4b0b      	ldr	r3, [pc, #44]	; (8001a68 <MX_USART3_UART_Init+0x58>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a40:	4b09      	ldr	r3, [pc, #36]	; (8001a68 <MX_USART3_UART_Init+0x58>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a46:	4b08      	ldr	r3, [pc, #32]	; (8001a68 <MX_USART3_UART_Init+0x58>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a4c:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <MX_USART3_UART_Init+0x58>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a52:	4805      	ldr	r0, [pc, #20]	; (8001a68 <MX_USART3_UART_Init+0x58>)
 8001a54:	f003 fc7a 	bl	800534c <HAL_UART_Init>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001a5e:	f7ff fc4b 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a62:	bf00      	nop
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	200001e8 	.word	0x200001e8
 8001a6c:	40004800 	.word	0x40004800

08001a70 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b08a      	sub	sp, #40	; 0x28
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a78:	f107 0314 	add.w	r3, r7, #20
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	609a      	str	r2, [r3, #8]
 8001a84:	60da      	str	r2, [r3, #12]
 8001a86:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a17      	ldr	r2, [pc, #92]	; (8001aec <HAL_UART_MspInit+0x7c>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d128      	bne.n	8001ae4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a92:	4b17      	ldr	r3, [pc, #92]	; (8001af0 <HAL_UART_MspInit+0x80>)
 8001a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a96:	4a16      	ldr	r2, [pc, #88]	; (8001af0 <HAL_UART_MspInit+0x80>)
 8001a98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a9e:	4b14      	ldr	r3, [pc, #80]	; (8001af0 <HAL_UART_MspInit+0x80>)
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001aa6:	613b      	str	r3, [r7, #16]
 8001aa8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aaa:	4b11      	ldr	r3, [pc, #68]	; (8001af0 <HAL_UART_MspInit+0x80>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	4a10      	ldr	r2, [pc, #64]	; (8001af0 <HAL_UART_MspInit+0x80>)
 8001ab0:	f043 0308 	orr.w	r3, r3, #8
 8001ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab6:	4b0e      	ldr	r3, [pc, #56]	; (8001af0 <HAL_UART_MspInit+0x80>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	f003 0308 	and.w	r3, r3, #8
 8001abe:	60fb      	str	r3, [r7, #12]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001ac2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ac6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac8:	2302      	movs	r3, #2
 8001aca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001acc:	2300      	movs	r3, #0
 8001ace:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ad4:	2307      	movs	r3, #7
 8001ad6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ad8:	f107 0314 	add.w	r3, r7, #20
 8001adc:	4619      	mov	r1, r3
 8001ade:	4805      	ldr	r0, [pc, #20]	; (8001af4 <HAL_UART_MspInit+0x84>)
 8001ae0:	f000 fce4 	bl	80024ac <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001ae4:	bf00      	nop
 8001ae6:	3728      	adds	r7, #40	; 0x28
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	40004800 	.word	0x40004800
 8001af0:	40023800 	.word	0x40023800
 8001af4:	40020c00 	.word	0x40020c00

08001af8 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001afc:	4b14      	ldr	r3, [pc, #80]	; (8001b50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001afe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001b02:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001b04:	4b12      	ldr	r3, [pc, #72]	; (8001b50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b06:	2206      	movs	r2, #6
 8001b08:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001b0a:	4b11      	ldr	r3, [pc, #68]	; (8001b50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b0c:	2202      	movs	r2, #2
 8001b0e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001b10:	4b0f      	ldr	r3, [pc, #60]	; (8001b50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001b16:	4b0e      	ldr	r3, [pc, #56]	; (8001b50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b18:	2202      	movs	r2, #2
 8001b1a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001b1c:	4b0c      	ldr	r3, [pc, #48]	; (8001b50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b1e:	2201      	movs	r2, #1
 8001b20:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001b22:	4b0b      	ldr	r3, [pc, #44]	; (8001b50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001b28:	4b09      	ldr	r3, [pc, #36]	; (8001b50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001b2e:	4b08      	ldr	r3, [pc, #32]	; (8001b50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b30:	2201      	movs	r2, #1
 8001b32:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001b34:	4b06      	ldr	r3, [pc, #24]	; (8001b50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001b3a:	4805      	ldr	r0, [pc, #20]	; (8001b50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b3c:	f000 fe7b 	bl	8002836 <HAL_PCD_Init>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001b46:	f7ff fbd7 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	2000026c 	.word	0x2000026c

08001b54 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b08a      	sub	sp, #40	; 0x28
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b5c:	f107 0314 	add.w	r3, r7, #20
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	605a      	str	r2, [r3, #4]
 8001b66:	609a      	str	r2, [r3, #8]
 8001b68:	60da      	str	r2, [r3, #12]
 8001b6a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b74:	d141      	bne.n	8001bfa <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b76:	4b23      	ldr	r3, [pc, #140]	; (8001c04 <HAL_PCD_MspInit+0xb0>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	4a22      	ldr	r2, [pc, #136]	; (8001c04 <HAL_PCD_MspInit+0xb0>)
 8001b7c:	f043 0301 	orr.w	r3, r3, #1
 8001b80:	6313      	str	r3, [r2, #48]	; 0x30
 8001b82:	4b20      	ldr	r3, [pc, #128]	; (8001c04 <HAL_PCD_MspInit+0xb0>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	613b      	str	r3, [r7, #16]
 8001b8c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001b8e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001b92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b94:	2302      	movs	r3, #2
 8001b96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001ba0:	230a      	movs	r3, #10
 8001ba2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba4:	f107 0314 	add.w	r3, r7, #20
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4817      	ldr	r0, [pc, #92]	; (8001c08 <HAL_PCD_MspInit+0xb4>)
 8001bac:	f000 fc7e 	bl	80024ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001bb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001bbe:	f107 0314 	add.w	r3, r7, #20
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4810      	ldr	r0, [pc, #64]	; (8001c08 <HAL_PCD_MspInit+0xb4>)
 8001bc6:	f000 fc71 	bl	80024ac <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001bca:	4b0e      	ldr	r3, [pc, #56]	; (8001c04 <HAL_PCD_MspInit+0xb0>)
 8001bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bce:	4a0d      	ldr	r2, [pc, #52]	; (8001c04 <HAL_PCD_MspInit+0xb0>)
 8001bd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bd4:	6353      	str	r3, [r2, #52]	; 0x34
 8001bd6:	4b0b      	ldr	r3, [pc, #44]	; (8001c04 <HAL_PCD_MspInit+0xb0>)
 8001bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bde:	60fb      	str	r3, [r7, #12]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	4b08      	ldr	r3, [pc, #32]	; (8001c04 <HAL_PCD_MspInit+0xb0>)
 8001be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be6:	4a07      	ldr	r2, [pc, #28]	; (8001c04 <HAL_PCD_MspInit+0xb0>)
 8001be8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bec:	6453      	str	r3, [r2, #68]	; 0x44
 8001bee:	4b05      	ldr	r3, [pc, #20]	; (8001c04 <HAL_PCD_MspInit+0xb0>)
 8001bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bf6:	60bb      	str	r3, [r7, #8]
 8001bf8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001bfa:	bf00      	nop
 8001bfc:	3728      	adds	r7, #40	; 0x28
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	40023800 	.word	0x40023800
 8001c08:	40020000 	.word	0x40020000

08001c0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c44 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c10:	480d      	ldr	r0, [pc, #52]	; (8001c48 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c12:	490e      	ldr	r1, [pc, #56]	; (8001c4c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c14:	4a0e      	ldr	r2, [pc, #56]	; (8001c50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c18:	e002      	b.n	8001c20 <LoopCopyDataInit>

08001c1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c1e:	3304      	adds	r3, #4

08001c20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c24:	d3f9      	bcc.n	8001c1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c26:	4a0b      	ldr	r2, [pc, #44]	; (8001c54 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c28:	4c0b      	ldr	r4, [pc, #44]	; (8001c58 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c2c:	e001      	b.n	8001c32 <LoopFillZerobss>

08001c2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c30:	3204      	adds	r2, #4

08001c32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c34:	d3fb      	bcc.n	8001c2e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c36:	f7ff fbf3 	bl	8001420 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c3a:	f004 fb61 	bl	8006300 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c3e:	f7ff fa77 	bl	8001130 <main>
  bx  lr    
 8001c42:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c44:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001c48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c4c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001c50:	08006c60 	.word	0x08006c60
  ldr r2, =_sbss
 8001c54:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001c58:	20000684 	.word	0x20000684

08001c5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c5c:	e7fe      	b.n	8001c5c <ADC_IRQHandler>

08001c5e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c62:	2003      	movs	r0, #3
 8001c64:	f000 fbe0 	bl	8002428 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c68:	2000      	movs	r0, #0
 8001c6a:	f000 f805 	bl	8001c78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c6e:	f7ff fb49 	bl	8001304 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c72:	2300      	movs	r3, #0
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c80:	4b12      	ldr	r3, [pc, #72]	; (8001ccc <HAL_InitTick+0x54>)
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	4b12      	ldr	r3, [pc, #72]	; (8001cd0 <HAL_InitTick+0x58>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	4619      	mov	r1, r3
 8001c8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c96:	4618      	mov	r0, r3
 8001c98:	f000 fbfb 	bl	8002492 <HAL_SYSTICK_Config>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e00e      	b.n	8001cc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2b0f      	cmp	r3, #15
 8001caa:	d80a      	bhi.n	8001cc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cac:	2200      	movs	r2, #0
 8001cae:	6879      	ldr	r1, [r7, #4]
 8001cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cb4:	f000 fbc3 	bl	800243e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cb8:	4a06      	ldr	r2, [pc, #24]	; (8001cd4 <HAL_InitTick+0x5c>)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	e000      	b.n	8001cc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3708      	adds	r7, #8
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	20000000 	.word	0x20000000
 8001cd0:	20000008 	.word	0x20000008
 8001cd4:	20000004 	.word	0x20000004

08001cd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cdc:	4b06      	ldr	r3, [pc, #24]	; (8001cf8 <HAL_IncTick+0x20>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <HAL_IncTick+0x24>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	4a04      	ldr	r2, [pc, #16]	; (8001cfc <HAL_IncTick+0x24>)
 8001cea:	6013      	str	r3, [r2, #0]
}
 8001cec:	bf00      	nop
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	20000008 	.word	0x20000008
 8001cfc:	20000670 	.word	0x20000670

08001d00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  return uwTick;
 8001d04:	4b03      	ldr	r3, [pc, #12]	; (8001d14 <HAL_GetTick+0x14>)
 8001d06:	681b      	ldr	r3, [r3, #0]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	20000670 	.word	0x20000670

08001d18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d20:	f7ff ffee 	bl	8001d00 <HAL_GetTick>
 8001d24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d30:	d005      	beq.n	8001d3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d32:	4b0a      	ldr	r3, [pc, #40]	; (8001d5c <HAL_Delay+0x44>)
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	461a      	mov	r2, r3
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d3e:	bf00      	nop
 8001d40:	f7ff ffde 	bl	8001d00 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	68fa      	ldr	r2, [r7, #12]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d8f7      	bhi.n	8001d40 <HAL_Delay+0x28>
  {
  }
}
 8001d50:	bf00      	nop
 8001d52:	bf00      	nop
 8001d54:	3710      	adds	r7, #16
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	20000008 	.word	0x20000008

08001d60 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d101      	bne.n	8001d76 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e031      	b.n	8001dda <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d109      	bne.n	8001d92 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f7ff f85a 	bl	8000e38 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	f003 0310 	and.w	r3, r3, #16
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d116      	bne.n	8001dcc <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001da2:	4b10      	ldr	r3, [pc, #64]	; (8001de4 <HAL_ADC_Init+0x84>)
 8001da4:	4013      	ands	r3, r2
 8001da6:	f043 0202 	orr.w	r2, r3, #2
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 f970 	bl	8002094 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	f023 0303 	bic.w	r3, r3, #3
 8001dc2:	f043 0201 	orr.w	r2, r3, #1
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	641a      	str	r2, [r3, #64]	; 0x40
 8001dca:	e001      	b.n	8001dd0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	ffffeefd 	.word	0xffffeefd

08001de8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b085      	sub	sp, #20
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001df2:	2300      	movs	r3, #0
 8001df4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d101      	bne.n	8001e04 <HAL_ADC_ConfigChannel+0x1c>
 8001e00:	2302      	movs	r3, #2
 8001e02:	e136      	b.n	8002072 <HAL_ADC_ConfigChannel+0x28a>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2201      	movs	r2, #1
 8001e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2b09      	cmp	r3, #9
 8001e12:	d93a      	bls.n	8001e8a <HAL_ADC_ConfigChannel+0xa2>
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001e1c:	d035      	beq.n	8001e8a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	68d9      	ldr	r1, [r3, #12]
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	4413      	add	r3, r2
 8001e32:	3b1e      	subs	r3, #30
 8001e34:	2207      	movs	r2, #7
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	43da      	mvns	r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	400a      	ands	r2, r1
 8001e42:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a8d      	ldr	r2, [pc, #564]	; (8002080 <HAL_ADC_ConfigChannel+0x298>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d10a      	bne.n	8001e64 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	68d9      	ldr	r1, [r3, #12]
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	061a      	lsls	r2, r3, #24
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e62:	e035      	b.n	8001ed0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	68d9      	ldr	r1, [r3, #12]
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	689a      	ldr	r2, [r3, #8]
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	4618      	mov	r0, r3
 8001e76:	4603      	mov	r3, r0
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	4403      	add	r3, r0
 8001e7c:	3b1e      	subs	r3, #30
 8001e7e:	409a      	lsls	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	430a      	orrs	r2, r1
 8001e86:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e88:	e022      	b.n	8001ed0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	6919      	ldr	r1, [r3, #16]
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	461a      	mov	r2, r3
 8001e98:	4613      	mov	r3, r2
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	4413      	add	r3, r2
 8001e9e:	2207      	movs	r2, #7
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	43da      	mvns	r2, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	400a      	ands	r2, r1
 8001eac:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	6919      	ldr	r1, [r3, #16]
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	689a      	ldr	r2, [r3, #8]
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	4403      	add	r3, r0
 8001ec6:	409a      	lsls	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	430a      	orrs	r2, r1
 8001ece:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	2b06      	cmp	r3, #6
 8001ed6:	d824      	bhi.n	8001f22 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	685a      	ldr	r2, [r3, #4]
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	4413      	add	r3, r2
 8001ee8:	3b05      	subs	r3, #5
 8001eea:	221f      	movs	r2, #31
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	43da      	mvns	r2, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	400a      	ands	r2, r1
 8001ef8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	4618      	mov	r0, r3
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685a      	ldr	r2, [r3, #4]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	4413      	add	r3, r2
 8001f12:	3b05      	subs	r3, #5
 8001f14:	fa00 f203 	lsl.w	r2, r0, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	635a      	str	r2, [r3, #52]	; 0x34
 8001f20:	e04c      	b.n	8001fbc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	2b0c      	cmp	r3, #12
 8001f28:	d824      	bhi.n	8001f74 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685a      	ldr	r2, [r3, #4]
 8001f34:	4613      	mov	r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	4413      	add	r3, r2
 8001f3a:	3b23      	subs	r3, #35	; 0x23
 8001f3c:	221f      	movs	r2, #31
 8001f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f42:	43da      	mvns	r2, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	400a      	ands	r2, r1
 8001f4a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	4618      	mov	r0, r3
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685a      	ldr	r2, [r3, #4]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	4413      	add	r3, r2
 8001f64:	3b23      	subs	r3, #35	; 0x23
 8001f66:	fa00 f203 	lsl.w	r2, r0, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	631a      	str	r2, [r3, #48]	; 0x30
 8001f72:	e023      	b.n	8001fbc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685a      	ldr	r2, [r3, #4]
 8001f7e:	4613      	mov	r3, r2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	4413      	add	r3, r2
 8001f84:	3b41      	subs	r3, #65	; 0x41
 8001f86:	221f      	movs	r2, #31
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	43da      	mvns	r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	400a      	ands	r2, r1
 8001f94:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685a      	ldr	r2, [r3, #4]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	4413      	add	r3, r2
 8001fae:	3b41      	subs	r3, #65	; 0x41
 8001fb0:	fa00 f203 	lsl.w	r2, r0, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a30      	ldr	r2, [pc, #192]	; (8002084 <HAL_ADC_ConfigChannel+0x29c>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d10a      	bne.n	8001fdc <HAL_ADC_ConfigChannel+0x1f4>
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001fce:	d105      	bne.n	8001fdc <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001fd0:	4b2d      	ldr	r3, [pc, #180]	; (8002088 <HAL_ADC_ConfigChannel+0x2a0>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	4a2c      	ldr	r2, [pc, #176]	; (8002088 <HAL_ADC_ConfigChannel+0x2a0>)
 8001fd6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001fda:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a28      	ldr	r2, [pc, #160]	; (8002084 <HAL_ADC_ConfigChannel+0x29c>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d10f      	bne.n	8002006 <HAL_ADC_ConfigChannel+0x21e>
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2b12      	cmp	r3, #18
 8001fec:	d10b      	bne.n	8002006 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001fee:	4b26      	ldr	r3, [pc, #152]	; (8002088 <HAL_ADC_ConfigChannel+0x2a0>)
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	4a25      	ldr	r2, [pc, #148]	; (8002088 <HAL_ADC_ConfigChannel+0x2a0>)
 8001ff4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001ff8:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001ffa:	4b23      	ldr	r3, [pc, #140]	; (8002088 <HAL_ADC_ConfigChannel+0x2a0>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	4a22      	ldr	r2, [pc, #136]	; (8002088 <HAL_ADC_ConfigChannel+0x2a0>)
 8002000:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002004:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a1e      	ldr	r2, [pc, #120]	; (8002084 <HAL_ADC_ConfigChannel+0x29c>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d12b      	bne.n	8002068 <HAL_ADC_ConfigChannel+0x280>
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a1a      	ldr	r2, [pc, #104]	; (8002080 <HAL_ADC_ConfigChannel+0x298>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d003      	beq.n	8002022 <HAL_ADC_ConfigChannel+0x23a>
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2b11      	cmp	r3, #17
 8002020:	d122      	bne.n	8002068 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002022:	4b19      	ldr	r3, [pc, #100]	; (8002088 <HAL_ADC_ConfigChannel+0x2a0>)
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	4a18      	ldr	r2, [pc, #96]	; (8002088 <HAL_ADC_ConfigChannel+0x2a0>)
 8002028:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800202c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800202e:	4b16      	ldr	r3, [pc, #88]	; (8002088 <HAL_ADC_ConfigChannel+0x2a0>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	4a15      	ldr	r2, [pc, #84]	; (8002088 <HAL_ADC_ConfigChannel+0x2a0>)
 8002034:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002038:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a10      	ldr	r2, [pc, #64]	; (8002080 <HAL_ADC_ConfigChannel+0x298>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d111      	bne.n	8002068 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002044:	4b11      	ldr	r3, [pc, #68]	; (800208c <HAL_ADC_ConfigChannel+0x2a4>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a11      	ldr	r2, [pc, #68]	; (8002090 <HAL_ADC_ConfigChannel+0x2a8>)
 800204a:	fba2 2303 	umull	r2, r3, r2, r3
 800204e:	0c9a      	lsrs	r2, r3, #18
 8002050:	4613      	mov	r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	4413      	add	r3, r2
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800205a:	e002      	b.n	8002062 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	3b01      	subs	r3, #1
 8002060:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d1f9      	bne.n	800205c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3714      	adds	r7, #20
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	10000012 	.word	0x10000012
 8002084:	40012000 	.word	0x40012000
 8002088:	40012300 	.word	0x40012300
 800208c:	20000000 	.word	0x20000000
 8002090:	431bde83 	.word	0x431bde83

08002094 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800209c:	4b78      	ldr	r3, [pc, #480]	; (8002280 <ADC_Init+0x1ec>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	4a77      	ldr	r2, [pc, #476]	; (8002280 <ADC_Init+0x1ec>)
 80020a2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80020a6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80020a8:	4b75      	ldr	r3, [pc, #468]	; (8002280 <ADC_Init+0x1ec>)
 80020aa:	685a      	ldr	r2, [r3, #4]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	4973      	ldr	r1, [pc, #460]	; (8002280 <ADC_Init+0x1ec>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	685a      	ldr	r2, [r3, #4]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	6859      	ldr	r1, [r3, #4]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	691b      	ldr	r3, [r3, #16]
 80020d0:	021a      	lsls	r2, r3, #8
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	430a      	orrs	r2, r1
 80020d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	685a      	ldr	r2, [r3, #4]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80020e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	6859      	ldr	r1, [r3, #4]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689a      	ldr	r2, [r3, #8]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	430a      	orrs	r2, r1
 80020fa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	689a      	ldr	r2, [r3, #8]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800210a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	6899      	ldr	r1, [r3, #8]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	68da      	ldr	r2, [r3, #12]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	430a      	orrs	r2, r1
 800211c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002122:	4a58      	ldr	r2, [pc, #352]	; (8002284 <ADC_Init+0x1f0>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d022      	beq.n	800216e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	689a      	ldr	r2, [r3, #8]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002136:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	6899      	ldr	r1, [r3, #8]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	430a      	orrs	r2, r1
 8002148:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	689a      	ldr	r2, [r3, #8]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002158:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	6899      	ldr	r1, [r3, #8]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	430a      	orrs	r2, r1
 800216a:	609a      	str	r2, [r3, #8]
 800216c:	e00f      	b.n	800218e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	689a      	ldr	r2, [r3, #8]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800217c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	689a      	ldr	r2, [r3, #8]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800218c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	689a      	ldr	r2, [r3, #8]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f022 0202 	bic.w	r2, r2, #2
 800219c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	6899      	ldr	r1, [r3, #8]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	005a      	lsls	r2, r3, #1
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	430a      	orrs	r2, r1
 80021b0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d01b      	beq.n	80021f4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	685a      	ldr	r2, [r3, #4]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021ca:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	685a      	ldr	r2, [r3, #4]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80021da:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	6859      	ldr	r1, [r3, #4]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e6:	3b01      	subs	r3, #1
 80021e8:	035a      	lsls	r2, r3, #13
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	430a      	orrs	r2, r1
 80021f0:	605a      	str	r2, [r3, #4]
 80021f2:	e007      	b.n	8002204 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	685a      	ldr	r2, [r3, #4]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002202:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002212:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	69db      	ldr	r3, [r3, #28]
 800221e:	3b01      	subs	r3, #1
 8002220:	051a      	lsls	r2, r3, #20
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	430a      	orrs	r2, r1
 8002228:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	689a      	ldr	r2, [r3, #8]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002238:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	6899      	ldr	r1, [r3, #8]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002246:	025a      	lsls	r2, r3, #9
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	430a      	orrs	r2, r1
 800224e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	689a      	ldr	r2, [r3, #8]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800225e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	6899      	ldr	r1, [r3, #8]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	695b      	ldr	r3, [r3, #20]
 800226a:	029a      	lsls	r2, r3, #10
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	430a      	orrs	r2, r1
 8002272:	609a      	str	r2, [r3, #8]
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	40012300 	.word	0x40012300
 8002284:	0f000001 	.word	0x0f000001

08002288 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f003 0307 	and.w	r3, r3, #7
 8002296:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002298:	4b0b      	ldr	r3, [pc, #44]	; (80022c8 <__NVIC_SetPriorityGrouping+0x40>)
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800229e:	68ba      	ldr	r2, [r7, #8]
 80022a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022a4:	4013      	ands	r3, r2
 80022a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80022b0:	4b06      	ldr	r3, [pc, #24]	; (80022cc <__NVIC_SetPriorityGrouping+0x44>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022b6:	4a04      	ldr	r2, [pc, #16]	; (80022c8 <__NVIC_SetPriorityGrouping+0x40>)
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	60d3      	str	r3, [r2, #12]
}
 80022bc:	bf00      	nop
 80022be:	3714      	adds	r7, #20
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr
 80022c8:	e000ed00 	.word	0xe000ed00
 80022cc:	05fa0000 	.word	0x05fa0000

080022d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022d4:	4b04      	ldr	r3, [pc, #16]	; (80022e8 <__NVIC_GetPriorityGrouping+0x18>)
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	0a1b      	lsrs	r3, r3, #8
 80022da:	f003 0307 	and.w	r3, r3, #7
}
 80022de:	4618      	mov	r0, r3
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr
 80022e8:	e000ed00 	.word	0xe000ed00

080022ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	4603      	mov	r3, r0
 80022f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	db0b      	blt.n	8002316 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022fe:	79fb      	ldrb	r3, [r7, #7]
 8002300:	f003 021f 	and.w	r2, r3, #31
 8002304:	4907      	ldr	r1, [pc, #28]	; (8002324 <__NVIC_EnableIRQ+0x38>)
 8002306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230a:	095b      	lsrs	r3, r3, #5
 800230c:	2001      	movs	r0, #1
 800230e:	fa00 f202 	lsl.w	r2, r0, r2
 8002312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002316:	bf00      	nop
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	e000e100 	.word	0xe000e100

08002328 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	4603      	mov	r3, r0
 8002330:	6039      	str	r1, [r7, #0]
 8002332:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002338:	2b00      	cmp	r3, #0
 800233a:	db0a      	blt.n	8002352 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	b2da      	uxtb	r2, r3
 8002340:	490c      	ldr	r1, [pc, #48]	; (8002374 <__NVIC_SetPriority+0x4c>)
 8002342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002346:	0112      	lsls	r2, r2, #4
 8002348:	b2d2      	uxtb	r2, r2
 800234a:	440b      	add	r3, r1
 800234c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002350:	e00a      	b.n	8002368 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	b2da      	uxtb	r2, r3
 8002356:	4908      	ldr	r1, [pc, #32]	; (8002378 <__NVIC_SetPriority+0x50>)
 8002358:	79fb      	ldrb	r3, [r7, #7]
 800235a:	f003 030f 	and.w	r3, r3, #15
 800235e:	3b04      	subs	r3, #4
 8002360:	0112      	lsls	r2, r2, #4
 8002362:	b2d2      	uxtb	r2, r2
 8002364:	440b      	add	r3, r1
 8002366:	761a      	strb	r2, [r3, #24]
}
 8002368:	bf00      	nop
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr
 8002374:	e000e100 	.word	0xe000e100
 8002378:	e000ed00 	.word	0xe000ed00

0800237c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800237c:	b480      	push	{r7}
 800237e:	b089      	sub	sp, #36	; 0x24
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f003 0307 	and.w	r3, r3, #7
 800238e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	f1c3 0307 	rsb	r3, r3, #7
 8002396:	2b04      	cmp	r3, #4
 8002398:	bf28      	it	cs
 800239a:	2304      	movcs	r3, #4
 800239c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	3304      	adds	r3, #4
 80023a2:	2b06      	cmp	r3, #6
 80023a4:	d902      	bls.n	80023ac <NVIC_EncodePriority+0x30>
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	3b03      	subs	r3, #3
 80023aa:	e000      	b.n	80023ae <NVIC_EncodePriority+0x32>
 80023ac:	2300      	movs	r3, #0
 80023ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023b0:	f04f 32ff 	mov.w	r2, #4294967295
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ba:	43da      	mvns	r2, r3
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	401a      	ands	r2, r3
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023c4:	f04f 31ff 	mov.w	r1, #4294967295
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	fa01 f303 	lsl.w	r3, r1, r3
 80023ce:	43d9      	mvns	r1, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d4:	4313      	orrs	r3, r2
         );
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3724      	adds	r7, #36	; 0x24
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
	...

080023e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	3b01      	subs	r3, #1
 80023f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023f4:	d301      	bcc.n	80023fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023f6:	2301      	movs	r3, #1
 80023f8:	e00f      	b.n	800241a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023fa:	4a0a      	ldr	r2, [pc, #40]	; (8002424 <SysTick_Config+0x40>)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	3b01      	subs	r3, #1
 8002400:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002402:	210f      	movs	r1, #15
 8002404:	f04f 30ff 	mov.w	r0, #4294967295
 8002408:	f7ff ff8e 	bl	8002328 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800240c:	4b05      	ldr	r3, [pc, #20]	; (8002424 <SysTick_Config+0x40>)
 800240e:	2200      	movs	r2, #0
 8002410:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002412:	4b04      	ldr	r3, [pc, #16]	; (8002424 <SysTick_Config+0x40>)
 8002414:	2207      	movs	r2, #7
 8002416:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	e000e010 	.word	0xe000e010

08002428 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f7ff ff29 	bl	8002288 <__NVIC_SetPriorityGrouping>
}
 8002436:	bf00      	nop
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800243e:	b580      	push	{r7, lr}
 8002440:	b086      	sub	sp, #24
 8002442:	af00      	add	r7, sp, #0
 8002444:	4603      	mov	r3, r0
 8002446:	60b9      	str	r1, [r7, #8]
 8002448:	607a      	str	r2, [r7, #4]
 800244a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800244c:	2300      	movs	r3, #0
 800244e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002450:	f7ff ff3e 	bl	80022d0 <__NVIC_GetPriorityGrouping>
 8002454:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	68b9      	ldr	r1, [r7, #8]
 800245a:	6978      	ldr	r0, [r7, #20]
 800245c:	f7ff ff8e 	bl	800237c <NVIC_EncodePriority>
 8002460:	4602      	mov	r2, r0
 8002462:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002466:	4611      	mov	r1, r2
 8002468:	4618      	mov	r0, r3
 800246a:	f7ff ff5d 	bl	8002328 <__NVIC_SetPriority>
}
 800246e:	bf00      	nop
 8002470:	3718      	adds	r7, #24
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b082      	sub	sp, #8
 800247a:	af00      	add	r7, sp, #0
 800247c:	4603      	mov	r3, r0
 800247e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002480:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002484:	4618      	mov	r0, r3
 8002486:	f7ff ff31 	bl	80022ec <__NVIC_EnableIRQ>
}
 800248a:	bf00      	nop
 800248c:	3708      	adds	r7, #8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}

08002492 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002492:	b580      	push	{r7, lr}
 8002494:	b082      	sub	sp, #8
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f7ff ffa2 	bl	80023e4 <SysTick_Config>
 80024a0:	4603      	mov	r3, r0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
	...

080024ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b089      	sub	sp, #36	; 0x24
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80024b6:	2300      	movs	r3, #0
 80024b8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80024ba:	2300      	movs	r3, #0
 80024bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80024be:	2300      	movs	r3, #0
 80024c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80024c2:	2300      	movs	r3, #0
 80024c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80024c6:	2300      	movs	r3, #0
 80024c8:	61fb      	str	r3, [r7, #28]
 80024ca:	e175      	b.n	80027b8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80024cc:	2201      	movs	r2, #1
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	697a      	ldr	r2, [r7, #20]
 80024dc:	4013      	ands	r3, r2
 80024de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024e0:	693a      	ldr	r2, [r7, #16]
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	f040 8164 	bne.w	80027b2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f003 0303 	and.w	r3, r3, #3
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d005      	beq.n	8002502 <HAL_GPIO_Init+0x56>
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f003 0303 	and.w	r3, r3, #3
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d130      	bne.n	8002564 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	2203      	movs	r2, #3
 800250e:	fa02 f303 	lsl.w	r3, r2, r3
 8002512:	43db      	mvns	r3, r3
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	4013      	ands	r3, r2
 8002518:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	68da      	ldr	r2, [r3, #12]
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	fa02 f303 	lsl.w	r3, r2, r3
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	4313      	orrs	r3, r2
 800252a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002538:	2201      	movs	r2, #1
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	43db      	mvns	r3, r3
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	4013      	ands	r3, r2
 8002546:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	091b      	lsrs	r3, r3, #4
 800254e:	f003 0201 	and.w	r2, r3, #1
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	4313      	orrs	r3, r2
 800255c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f003 0303 	and.w	r3, r3, #3
 800256c:	2b03      	cmp	r3, #3
 800256e:	d017      	beq.n	80025a0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	005b      	lsls	r3, r3, #1
 800257a:	2203      	movs	r2, #3
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	43db      	mvns	r3, r3
 8002582:	69ba      	ldr	r2, [r7, #24]
 8002584:	4013      	ands	r3, r2
 8002586:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	689a      	ldr	r2, [r3, #8]
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	4313      	orrs	r3, r2
 8002598:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f003 0303 	and.w	r3, r3, #3
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d123      	bne.n	80025f4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	08da      	lsrs	r2, r3, #3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	3208      	adds	r2, #8
 80025b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	f003 0307 	and.w	r3, r3, #7
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	220f      	movs	r2, #15
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	43db      	mvns	r3, r3
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	4013      	ands	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	691a      	ldr	r2, [r3, #16]
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	f003 0307 	and.w	r3, r3, #7
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	08da      	lsrs	r2, r3, #3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	3208      	adds	r2, #8
 80025ee:	69b9      	ldr	r1, [r7, #24]
 80025f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	2203      	movs	r2, #3
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	43db      	mvns	r3, r3
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	4013      	ands	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f003 0203 	and.w	r2, r3, #3
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	4313      	orrs	r3, r2
 8002620:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002630:	2b00      	cmp	r3, #0
 8002632:	f000 80be 	beq.w	80027b2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002636:	4b66      	ldr	r3, [pc, #408]	; (80027d0 <HAL_GPIO_Init+0x324>)
 8002638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263a:	4a65      	ldr	r2, [pc, #404]	; (80027d0 <HAL_GPIO_Init+0x324>)
 800263c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002640:	6453      	str	r3, [r2, #68]	; 0x44
 8002642:	4b63      	ldr	r3, [pc, #396]	; (80027d0 <HAL_GPIO_Init+0x324>)
 8002644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002646:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800264a:	60fb      	str	r3, [r7, #12]
 800264c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800264e:	4a61      	ldr	r2, [pc, #388]	; (80027d4 <HAL_GPIO_Init+0x328>)
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	089b      	lsrs	r3, r3, #2
 8002654:	3302      	adds	r3, #2
 8002656:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800265a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	f003 0303 	and.w	r3, r3, #3
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	220f      	movs	r2, #15
 8002666:	fa02 f303 	lsl.w	r3, r2, r3
 800266a:	43db      	mvns	r3, r3
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	4013      	ands	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a58      	ldr	r2, [pc, #352]	; (80027d8 <HAL_GPIO_Init+0x32c>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d037      	beq.n	80026ea <HAL_GPIO_Init+0x23e>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a57      	ldr	r2, [pc, #348]	; (80027dc <HAL_GPIO_Init+0x330>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d031      	beq.n	80026e6 <HAL_GPIO_Init+0x23a>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a56      	ldr	r2, [pc, #344]	; (80027e0 <HAL_GPIO_Init+0x334>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d02b      	beq.n	80026e2 <HAL_GPIO_Init+0x236>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a55      	ldr	r2, [pc, #340]	; (80027e4 <HAL_GPIO_Init+0x338>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d025      	beq.n	80026de <HAL_GPIO_Init+0x232>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a54      	ldr	r2, [pc, #336]	; (80027e8 <HAL_GPIO_Init+0x33c>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d01f      	beq.n	80026da <HAL_GPIO_Init+0x22e>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a53      	ldr	r2, [pc, #332]	; (80027ec <HAL_GPIO_Init+0x340>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d019      	beq.n	80026d6 <HAL_GPIO_Init+0x22a>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a52      	ldr	r2, [pc, #328]	; (80027f0 <HAL_GPIO_Init+0x344>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d013      	beq.n	80026d2 <HAL_GPIO_Init+0x226>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a51      	ldr	r2, [pc, #324]	; (80027f4 <HAL_GPIO_Init+0x348>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d00d      	beq.n	80026ce <HAL_GPIO_Init+0x222>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a50      	ldr	r2, [pc, #320]	; (80027f8 <HAL_GPIO_Init+0x34c>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d007      	beq.n	80026ca <HAL_GPIO_Init+0x21e>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a4f      	ldr	r2, [pc, #316]	; (80027fc <HAL_GPIO_Init+0x350>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d101      	bne.n	80026c6 <HAL_GPIO_Init+0x21a>
 80026c2:	2309      	movs	r3, #9
 80026c4:	e012      	b.n	80026ec <HAL_GPIO_Init+0x240>
 80026c6:	230a      	movs	r3, #10
 80026c8:	e010      	b.n	80026ec <HAL_GPIO_Init+0x240>
 80026ca:	2308      	movs	r3, #8
 80026cc:	e00e      	b.n	80026ec <HAL_GPIO_Init+0x240>
 80026ce:	2307      	movs	r3, #7
 80026d0:	e00c      	b.n	80026ec <HAL_GPIO_Init+0x240>
 80026d2:	2306      	movs	r3, #6
 80026d4:	e00a      	b.n	80026ec <HAL_GPIO_Init+0x240>
 80026d6:	2305      	movs	r3, #5
 80026d8:	e008      	b.n	80026ec <HAL_GPIO_Init+0x240>
 80026da:	2304      	movs	r3, #4
 80026dc:	e006      	b.n	80026ec <HAL_GPIO_Init+0x240>
 80026de:	2303      	movs	r3, #3
 80026e0:	e004      	b.n	80026ec <HAL_GPIO_Init+0x240>
 80026e2:	2302      	movs	r3, #2
 80026e4:	e002      	b.n	80026ec <HAL_GPIO_Init+0x240>
 80026e6:	2301      	movs	r3, #1
 80026e8:	e000      	b.n	80026ec <HAL_GPIO_Init+0x240>
 80026ea:	2300      	movs	r3, #0
 80026ec:	69fa      	ldr	r2, [r7, #28]
 80026ee:	f002 0203 	and.w	r2, r2, #3
 80026f2:	0092      	lsls	r2, r2, #2
 80026f4:	4093      	lsls	r3, r2
 80026f6:	69ba      	ldr	r2, [r7, #24]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80026fc:	4935      	ldr	r1, [pc, #212]	; (80027d4 <HAL_GPIO_Init+0x328>)
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	089b      	lsrs	r3, r3, #2
 8002702:	3302      	adds	r3, #2
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800270a:	4b3d      	ldr	r3, [pc, #244]	; (8002800 <HAL_GPIO_Init+0x354>)
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	43db      	mvns	r3, r3
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	4013      	ands	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d003      	beq.n	800272e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002726:	69ba      	ldr	r2, [r7, #24]
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	4313      	orrs	r3, r2
 800272c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800272e:	4a34      	ldr	r2, [pc, #208]	; (8002800 <HAL_GPIO_Init+0x354>)
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002734:	4b32      	ldr	r3, [pc, #200]	; (8002800 <HAL_GPIO_Init+0x354>)
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	43db      	mvns	r3, r3
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	4013      	ands	r3, r2
 8002742:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d003      	beq.n	8002758 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	4313      	orrs	r3, r2
 8002756:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002758:	4a29      	ldr	r2, [pc, #164]	; (8002800 <HAL_GPIO_Init+0x354>)
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800275e:	4b28      	ldr	r3, [pc, #160]	; (8002800 <HAL_GPIO_Init+0x354>)
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	43db      	mvns	r3, r3
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	4013      	ands	r3, r2
 800276c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d003      	beq.n	8002782 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800277a:	69ba      	ldr	r2, [r7, #24]
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	4313      	orrs	r3, r2
 8002780:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002782:	4a1f      	ldr	r2, [pc, #124]	; (8002800 <HAL_GPIO_Init+0x354>)
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002788:	4b1d      	ldr	r3, [pc, #116]	; (8002800 <HAL_GPIO_Init+0x354>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	43db      	mvns	r3, r3
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	4013      	ands	r3, r2
 8002796:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d003      	beq.n	80027ac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027ac:	4a14      	ldr	r2, [pc, #80]	; (8002800 <HAL_GPIO_Init+0x354>)
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	3301      	adds	r3, #1
 80027b6:	61fb      	str	r3, [r7, #28]
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	2b0f      	cmp	r3, #15
 80027bc:	f67f ae86 	bls.w	80024cc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80027c0:	bf00      	nop
 80027c2:	bf00      	nop
 80027c4:	3724      	adds	r7, #36	; 0x24
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	40023800 	.word	0x40023800
 80027d4:	40013800 	.word	0x40013800
 80027d8:	40020000 	.word	0x40020000
 80027dc:	40020400 	.word	0x40020400
 80027e0:	40020800 	.word	0x40020800
 80027e4:	40020c00 	.word	0x40020c00
 80027e8:	40021000 	.word	0x40021000
 80027ec:	40021400 	.word	0x40021400
 80027f0:	40021800 	.word	0x40021800
 80027f4:	40021c00 	.word	0x40021c00
 80027f8:	40022000 	.word	0x40022000
 80027fc:	40022400 	.word	0x40022400
 8002800:	40013c00 	.word	0x40013c00

08002804 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	460b      	mov	r3, r1
 800280e:	807b      	strh	r3, [r7, #2]
 8002810:	4613      	mov	r3, r2
 8002812:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002814:	787b      	ldrb	r3, [r7, #1]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d003      	beq.n	8002822 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800281a:	887a      	ldrh	r2, [r7, #2]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002820:	e003      	b.n	800282a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002822:	887b      	ldrh	r3, [r7, #2]
 8002824:	041a      	lsls	r2, r3, #16
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	619a      	str	r2, [r3, #24]
}
 800282a:	bf00      	nop
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr

08002836 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002836:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002838:	b08f      	sub	sp, #60	; 0x3c
 800283a:	af0a      	add	r7, sp, #40	; 0x28
 800283c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d101      	bne.n	8002848 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e116      	b.n	8002a76 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2b00      	cmp	r3, #0
 8002858:	d106      	bne.n	8002868 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f7ff f976 	bl	8001b54 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2203      	movs	r2, #3
 800286c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002878:	2b00      	cmp	r3, #0
 800287a:	d102      	bne.n	8002882 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4618      	mov	r0, r3
 8002888:	f003 fa96 	bl	8005db8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	603b      	str	r3, [r7, #0]
 8002892:	687e      	ldr	r6, [r7, #4]
 8002894:	466d      	mov	r5, sp
 8002896:	f106 0410 	add.w	r4, r6, #16
 800289a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800289c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800289e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80028a6:	e885 0003 	stmia.w	r5, {r0, r1}
 80028aa:	1d33      	adds	r3, r6, #4
 80028ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028ae:	6838      	ldr	r0, [r7, #0]
 80028b0:	f003 fa2a 	bl	8005d08 <USB_CoreInit>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d005      	beq.n	80028c6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2202      	movs	r2, #2
 80028be:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e0d7      	b.n	8002a76 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2100      	movs	r1, #0
 80028cc:	4618      	mov	r0, r3
 80028ce:	f003 fa84 	bl	8005dda <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028d2:	2300      	movs	r3, #0
 80028d4:	73fb      	strb	r3, [r7, #15]
 80028d6:	e04a      	b.n	800296e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80028d8:	7bfa      	ldrb	r2, [r7, #15]
 80028da:	6879      	ldr	r1, [r7, #4]
 80028dc:	4613      	mov	r3, r2
 80028de:	00db      	lsls	r3, r3, #3
 80028e0:	1a9b      	subs	r3, r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	440b      	add	r3, r1
 80028e6:	333d      	adds	r3, #61	; 0x3d
 80028e8:	2201      	movs	r2, #1
 80028ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80028ec:	7bfa      	ldrb	r2, [r7, #15]
 80028ee:	6879      	ldr	r1, [r7, #4]
 80028f0:	4613      	mov	r3, r2
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	1a9b      	subs	r3, r3, r2
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	440b      	add	r3, r1
 80028fa:	333c      	adds	r3, #60	; 0x3c
 80028fc:	7bfa      	ldrb	r2, [r7, #15]
 80028fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002900:	7bfa      	ldrb	r2, [r7, #15]
 8002902:	7bfb      	ldrb	r3, [r7, #15]
 8002904:	b298      	uxth	r0, r3
 8002906:	6879      	ldr	r1, [r7, #4]
 8002908:	4613      	mov	r3, r2
 800290a:	00db      	lsls	r3, r3, #3
 800290c:	1a9b      	subs	r3, r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	440b      	add	r3, r1
 8002912:	3342      	adds	r3, #66	; 0x42
 8002914:	4602      	mov	r2, r0
 8002916:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002918:	7bfa      	ldrb	r2, [r7, #15]
 800291a:	6879      	ldr	r1, [r7, #4]
 800291c:	4613      	mov	r3, r2
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	1a9b      	subs	r3, r3, r2
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	440b      	add	r3, r1
 8002926:	333f      	adds	r3, #63	; 0x3f
 8002928:	2200      	movs	r2, #0
 800292a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800292c:	7bfa      	ldrb	r2, [r7, #15]
 800292e:	6879      	ldr	r1, [r7, #4]
 8002930:	4613      	mov	r3, r2
 8002932:	00db      	lsls	r3, r3, #3
 8002934:	1a9b      	subs	r3, r3, r2
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	440b      	add	r3, r1
 800293a:	3344      	adds	r3, #68	; 0x44
 800293c:	2200      	movs	r2, #0
 800293e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002940:	7bfa      	ldrb	r2, [r7, #15]
 8002942:	6879      	ldr	r1, [r7, #4]
 8002944:	4613      	mov	r3, r2
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	1a9b      	subs	r3, r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	440b      	add	r3, r1
 800294e:	3348      	adds	r3, #72	; 0x48
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002954:	7bfa      	ldrb	r2, [r7, #15]
 8002956:	6879      	ldr	r1, [r7, #4]
 8002958:	4613      	mov	r3, r2
 800295a:	00db      	lsls	r3, r3, #3
 800295c:	1a9b      	subs	r3, r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	440b      	add	r3, r1
 8002962:	3350      	adds	r3, #80	; 0x50
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002968:	7bfb      	ldrb	r3, [r7, #15]
 800296a:	3301      	adds	r3, #1
 800296c:	73fb      	strb	r3, [r7, #15]
 800296e:	7bfa      	ldrb	r2, [r7, #15]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	429a      	cmp	r2, r3
 8002976:	d3af      	bcc.n	80028d8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002978:	2300      	movs	r3, #0
 800297a:	73fb      	strb	r3, [r7, #15]
 800297c:	e044      	b.n	8002a08 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800297e:	7bfa      	ldrb	r2, [r7, #15]
 8002980:	6879      	ldr	r1, [r7, #4]
 8002982:	4613      	mov	r3, r2
 8002984:	00db      	lsls	r3, r3, #3
 8002986:	1a9b      	subs	r3, r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	440b      	add	r3, r1
 800298c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002990:	2200      	movs	r2, #0
 8002992:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002994:	7bfa      	ldrb	r2, [r7, #15]
 8002996:	6879      	ldr	r1, [r7, #4]
 8002998:	4613      	mov	r3, r2
 800299a:	00db      	lsls	r3, r3, #3
 800299c:	1a9b      	subs	r3, r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	440b      	add	r3, r1
 80029a2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80029a6:	7bfa      	ldrb	r2, [r7, #15]
 80029a8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80029aa:	7bfa      	ldrb	r2, [r7, #15]
 80029ac:	6879      	ldr	r1, [r7, #4]
 80029ae:	4613      	mov	r3, r2
 80029b0:	00db      	lsls	r3, r3, #3
 80029b2:	1a9b      	subs	r3, r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	440b      	add	r3, r1
 80029b8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80029bc:	2200      	movs	r2, #0
 80029be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80029c0:	7bfa      	ldrb	r2, [r7, #15]
 80029c2:	6879      	ldr	r1, [r7, #4]
 80029c4:	4613      	mov	r3, r2
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	1a9b      	subs	r3, r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	440b      	add	r3, r1
 80029ce:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80029d2:	2200      	movs	r2, #0
 80029d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80029d6:	7bfa      	ldrb	r2, [r7, #15]
 80029d8:	6879      	ldr	r1, [r7, #4]
 80029da:	4613      	mov	r3, r2
 80029dc:	00db      	lsls	r3, r3, #3
 80029de:	1a9b      	subs	r3, r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	440b      	add	r3, r1
 80029e4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80029e8:	2200      	movs	r2, #0
 80029ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80029ec:	7bfa      	ldrb	r2, [r7, #15]
 80029ee:	6879      	ldr	r1, [r7, #4]
 80029f0:	4613      	mov	r3, r2
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	1a9b      	subs	r3, r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	440b      	add	r3, r1
 80029fa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80029fe:	2200      	movs	r2, #0
 8002a00:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a02:	7bfb      	ldrb	r3, [r7, #15]
 8002a04:	3301      	adds	r3, #1
 8002a06:	73fb      	strb	r3, [r7, #15]
 8002a08:	7bfa      	ldrb	r2, [r7, #15]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d3b5      	bcc.n	800297e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	603b      	str	r3, [r7, #0]
 8002a18:	687e      	ldr	r6, [r7, #4]
 8002a1a:	466d      	mov	r5, sp
 8002a1c:	f106 0410 	add.w	r4, r6, #16
 8002a20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a28:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a2c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a30:	1d33      	adds	r3, r6, #4
 8002a32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a34:	6838      	ldr	r0, [r7, #0]
 8002a36:	f003 fa1d 	bl	8005e74 <USB_DevInit>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d005      	beq.n	8002a4c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2202      	movs	r2, #2
 8002a44:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e014      	b.n	8002a76 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d102      	bne.n	8002a6a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f000 f80b 	bl	8002a80 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f003 fbd7 	bl	8006222 <USB_DevDisconnect>

  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3714      	adds	r7, #20
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002a80 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2201      	movs	r2, #1
 8002a92:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002aae:	4b05      	ldr	r3, [pc, #20]	; (8002ac4 <HAL_PCDEx_ActivateLPM+0x44>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	68fa      	ldr	r2, [r7, #12]
 8002ab4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002ab6:	2300      	movs	r3, #0
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3714      	adds	r7, #20
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr
 8002ac4:	10000003 	.word	0x10000003

08002ac8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002acc:	4b05      	ldr	r3, [pc, #20]	; (8002ae4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a04      	ldr	r2, [pc, #16]	; (8002ae4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002ad2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ad6:	6013      	str	r3, [r2, #0]
}
 8002ad8:	bf00      	nop
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	40007000 	.word	0x40007000

08002ae8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b086      	sub	sp, #24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002af0:	2300      	movs	r3, #0
 8002af2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d101      	bne.n	8002afe <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e291      	b.n	8003022 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	f000 8087 	beq.w	8002c1a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b0c:	4b96      	ldr	r3, [pc, #600]	; (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f003 030c 	and.w	r3, r3, #12
 8002b14:	2b04      	cmp	r3, #4
 8002b16:	d00c      	beq.n	8002b32 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b18:	4b93      	ldr	r3, [pc, #588]	; (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f003 030c 	and.w	r3, r3, #12
 8002b20:	2b08      	cmp	r3, #8
 8002b22:	d112      	bne.n	8002b4a <HAL_RCC_OscConfig+0x62>
 8002b24:	4b90      	ldr	r3, [pc, #576]	; (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b30:	d10b      	bne.n	8002b4a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b32:	4b8d      	ldr	r3, [pc, #564]	; (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d06c      	beq.n	8002c18 <HAL_RCC_OscConfig+0x130>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d168      	bne.n	8002c18 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e26b      	b.n	8003022 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b52:	d106      	bne.n	8002b62 <HAL_RCC_OscConfig+0x7a>
 8002b54:	4b84      	ldr	r3, [pc, #528]	; (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a83      	ldr	r2, [pc, #524]	; (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002b5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b5e:	6013      	str	r3, [r2, #0]
 8002b60:	e02e      	b.n	8002bc0 <HAL_RCC_OscConfig+0xd8>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d10c      	bne.n	8002b84 <HAL_RCC_OscConfig+0x9c>
 8002b6a:	4b7f      	ldr	r3, [pc, #508]	; (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a7e      	ldr	r2, [pc, #504]	; (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002b70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b74:	6013      	str	r3, [r2, #0]
 8002b76:	4b7c      	ldr	r3, [pc, #496]	; (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a7b      	ldr	r2, [pc, #492]	; (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002b7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b80:	6013      	str	r3, [r2, #0]
 8002b82:	e01d      	b.n	8002bc0 <HAL_RCC_OscConfig+0xd8>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b8c:	d10c      	bne.n	8002ba8 <HAL_RCC_OscConfig+0xc0>
 8002b8e:	4b76      	ldr	r3, [pc, #472]	; (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a75      	ldr	r2, [pc, #468]	; (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002b94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b98:	6013      	str	r3, [r2, #0]
 8002b9a:	4b73      	ldr	r3, [pc, #460]	; (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a72      	ldr	r2, [pc, #456]	; (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002ba0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ba4:	6013      	str	r3, [r2, #0]
 8002ba6:	e00b      	b.n	8002bc0 <HAL_RCC_OscConfig+0xd8>
 8002ba8:	4b6f      	ldr	r3, [pc, #444]	; (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a6e      	ldr	r2, [pc, #440]	; (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002bae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bb2:	6013      	str	r3, [r2, #0]
 8002bb4:	4b6c      	ldr	r3, [pc, #432]	; (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a6b      	ldr	r2, [pc, #428]	; (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002bba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d013      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc8:	f7ff f89a 	bl	8001d00 <HAL_GetTick>
 8002bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bce:	e008      	b.n	8002be2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bd0:	f7ff f896 	bl	8001d00 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b64      	cmp	r3, #100	; 0x64
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e21f      	b.n	8003022 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002be2:	4b61      	ldr	r3, [pc, #388]	; (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d0f0      	beq.n	8002bd0 <HAL_RCC_OscConfig+0xe8>
 8002bee:	e014      	b.n	8002c1a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf0:	f7ff f886 	bl	8001d00 <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bf6:	e008      	b.n	8002c0a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bf8:	f7ff f882 	bl	8001d00 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b64      	cmp	r3, #100	; 0x64
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e20b      	b.n	8003022 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c0a:	4b57      	ldr	r3, [pc, #348]	; (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d1f0      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x110>
 8002c16:	e000      	b.n	8002c1a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d069      	beq.n	8002cfa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c26:	4b50      	ldr	r3, [pc, #320]	; (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f003 030c 	and.w	r3, r3, #12
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d00b      	beq.n	8002c4a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c32:	4b4d      	ldr	r3, [pc, #308]	; (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f003 030c 	and.w	r3, r3, #12
 8002c3a:	2b08      	cmp	r3, #8
 8002c3c:	d11c      	bne.n	8002c78 <HAL_RCC_OscConfig+0x190>
 8002c3e:	4b4a      	ldr	r3, [pc, #296]	; (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d116      	bne.n	8002c78 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c4a:	4b47      	ldr	r3, [pc, #284]	; (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d005      	beq.n	8002c62 <HAL_RCC_OscConfig+0x17a>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d001      	beq.n	8002c62 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e1df      	b.n	8003022 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c62:	4b41      	ldr	r3, [pc, #260]	; (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	00db      	lsls	r3, r3, #3
 8002c70:	493d      	ldr	r1, [pc, #244]	; (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c76:	e040      	b.n	8002cfa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d023      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c80:	4b39      	ldr	r3, [pc, #228]	; (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a38      	ldr	r2, [pc, #224]	; (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002c86:	f043 0301 	orr.w	r3, r3, #1
 8002c8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c8c:	f7ff f838 	bl	8001d00 <HAL_GetTick>
 8002c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c92:	e008      	b.n	8002ca6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c94:	f7ff f834 	bl	8001d00 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e1bd      	b.n	8003022 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ca6:	4b30      	ldr	r3, [pc, #192]	; (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d0f0      	beq.n	8002c94 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cb2:	4b2d      	ldr	r3, [pc, #180]	; (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	00db      	lsls	r3, r3, #3
 8002cc0:	4929      	ldr	r1, [pc, #164]	; (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	600b      	str	r3, [r1, #0]
 8002cc6:	e018      	b.n	8002cfa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cc8:	4b27      	ldr	r3, [pc, #156]	; (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a26      	ldr	r2, [pc, #152]	; (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002cce:	f023 0301 	bic.w	r3, r3, #1
 8002cd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd4:	f7ff f814 	bl	8001d00 <HAL_GetTick>
 8002cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cda:	e008      	b.n	8002cee <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cdc:	f7ff f810 	bl	8001d00 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e199      	b.n	8003022 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cee:	4b1e      	ldr	r3, [pc, #120]	; (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1f0      	bne.n	8002cdc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0308 	and.w	r3, r3, #8
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d038      	beq.n	8002d78 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d019      	beq.n	8002d42 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d0e:	4b16      	ldr	r3, [pc, #88]	; (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002d10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d12:	4a15      	ldr	r2, [pc, #84]	; (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002d14:	f043 0301 	orr.w	r3, r3, #1
 8002d18:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d1a:	f7fe fff1 	bl	8001d00 <HAL_GetTick>
 8002d1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d20:	e008      	b.n	8002d34 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d22:	f7fe ffed 	bl	8001d00 <HAL_GetTick>
 8002d26:	4602      	mov	r2, r0
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d901      	bls.n	8002d34 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e176      	b.n	8003022 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d34:	4b0c      	ldr	r3, [pc, #48]	; (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002d36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d0f0      	beq.n	8002d22 <HAL_RCC_OscConfig+0x23a>
 8002d40:	e01a      	b.n	8002d78 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d42:	4b09      	ldr	r3, [pc, #36]	; (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002d44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d46:	4a08      	ldr	r2, [pc, #32]	; (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002d48:	f023 0301 	bic.w	r3, r3, #1
 8002d4c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d4e:	f7fe ffd7 	bl	8001d00 <HAL_GetTick>
 8002d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d54:	e00a      	b.n	8002d6c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d56:	f7fe ffd3 	bl	8001d00 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d903      	bls.n	8002d6c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e15c      	b.n	8003022 <HAL_RCC_OscConfig+0x53a>
 8002d68:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d6c:	4b91      	ldr	r3, [pc, #580]	; (8002fb4 <HAL_RCC_OscConfig+0x4cc>)
 8002d6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d1ee      	bne.n	8002d56 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0304 	and.w	r3, r3, #4
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	f000 80a4 	beq.w	8002ece <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d86:	4b8b      	ldr	r3, [pc, #556]	; (8002fb4 <HAL_RCC_OscConfig+0x4cc>)
 8002d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d10d      	bne.n	8002dae <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d92:	4b88      	ldr	r3, [pc, #544]	; (8002fb4 <HAL_RCC_OscConfig+0x4cc>)
 8002d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d96:	4a87      	ldr	r2, [pc, #540]	; (8002fb4 <HAL_RCC_OscConfig+0x4cc>)
 8002d98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d9c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d9e:	4b85      	ldr	r3, [pc, #532]	; (8002fb4 <HAL_RCC_OscConfig+0x4cc>)
 8002da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002da6:	60bb      	str	r3, [r7, #8]
 8002da8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002daa:	2301      	movs	r3, #1
 8002dac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dae:	4b82      	ldr	r3, [pc, #520]	; (8002fb8 <HAL_RCC_OscConfig+0x4d0>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d118      	bne.n	8002dec <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002dba:	4b7f      	ldr	r3, [pc, #508]	; (8002fb8 <HAL_RCC_OscConfig+0x4d0>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a7e      	ldr	r2, [pc, #504]	; (8002fb8 <HAL_RCC_OscConfig+0x4d0>)
 8002dc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dc6:	f7fe ff9b 	bl	8001d00 <HAL_GetTick>
 8002dca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dcc:	e008      	b.n	8002de0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dce:	f7fe ff97 	bl	8001d00 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	2b64      	cmp	r3, #100	; 0x64
 8002dda:	d901      	bls.n	8002de0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e120      	b.n	8003022 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002de0:	4b75      	ldr	r3, [pc, #468]	; (8002fb8 <HAL_RCC_OscConfig+0x4d0>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d0f0      	beq.n	8002dce <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d106      	bne.n	8002e02 <HAL_RCC_OscConfig+0x31a>
 8002df4:	4b6f      	ldr	r3, [pc, #444]	; (8002fb4 <HAL_RCC_OscConfig+0x4cc>)
 8002df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df8:	4a6e      	ldr	r2, [pc, #440]	; (8002fb4 <HAL_RCC_OscConfig+0x4cc>)
 8002dfa:	f043 0301 	orr.w	r3, r3, #1
 8002dfe:	6713      	str	r3, [r2, #112]	; 0x70
 8002e00:	e02d      	b.n	8002e5e <HAL_RCC_OscConfig+0x376>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d10c      	bne.n	8002e24 <HAL_RCC_OscConfig+0x33c>
 8002e0a:	4b6a      	ldr	r3, [pc, #424]	; (8002fb4 <HAL_RCC_OscConfig+0x4cc>)
 8002e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e0e:	4a69      	ldr	r2, [pc, #420]	; (8002fb4 <HAL_RCC_OscConfig+0x4cc>)
 8002e10:	f023 0301 	bic.w	r3, r3, #1
 8002e14:	6713      	str	r3, [r2, #112]	; 0x70
 8002e16:	4b67      	ldr	r3, [pc, #412]	; (8002fb4 <HAL_RCC_OscConfig+0x4cc>)
 8002e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e1a:	4a66      	ldr	r2, [pc, #408]	; (8002fb4 <HAL_RCC_OscConfig+0x4cc>)
 8002e1c:	f023 0304 	bic.w	r3, r3, #4
 8002e20:	6713      	str	r3, [r2, #112]	; 0x70
 8002e22:	e01c      	b.n	8002e5e <HAL_RCC_OscConfig+0x376>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	2b05      	cmp	r3, #5
 8002e2a:	d10c      	bne.n	8002e46 <HAL_RCC_OscConfig+0x35e>
 8002e2c:	4b61      	ldr	r3, [pc, #388]	; (8002fb4 <HAL_RCC_OscConfig+0x4cc>)
 8002e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e30:	4a60      	ldr	r2, [pc, #384]	; (8002fb4 <HAL_RCC_OscConfig+0x4cc>)
 8002e32:	f043 0304 	orr.w	r3, r3, #4
 8002e36:	6713      	str	r3, [r2, #112]	; 0x70
 8002e38:	4b5e      	ldr	r3, [pc, #376]	; (8002fb4 <HAL_RCC_OscConfig+0x4cc>)
 8002e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e3c:	4a5d      	ldr	r2, [pc, #372]	; (8002fb4 <HAL_RCC_OscConfig+0x4cc>)
 8002e3e:	f043 0301 	orr.w	r3, r3, #1
 8002e42:	6713      	str	r3, [r2, #112]	; 0x70
 8002e44:	e00b      	b.n	8002e5e <HAL_RCC_OscConfig+0x376>
 8002e46:	4b5b      	ldr	r3, [pc, #364]	; (8002fb4 <HAL_RCC_OscConfig+0x4cc>)
 8002e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e4a:	4a5a      	ldr	r2, [pc, #360]	; (8002fb4 <HAL_RCC_OscConfig+0x4cc>)
 8002e4c:	f023 0301 	bic.w	r3, r3, #1
 8002e50:	6713      	str	r3, [r2, #112]	; 0x70
 8002e52:	4b58      	ldr	r3, [pc, #352]	; (8002fb4 <HAL_RCC_OscConfig+0x4cc>)
 8002e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e56:	4a57      	ldr	r2, [pc, #348]	; (8002fb4 <HAL_RCC_OscConfig+0x4cc>)
 8002e58:	f023 0304 	bic.w	r3, r3, #4
 8002e5c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d015      	beq.n	8002e92 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e66:	f7fe ff4b 	bl	8001d00 <HAL_GetTick>
 8002e6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e6c:	e00a      	b.n	8002e84 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e6e:	f7fe ff47 	bl	8001d00 <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d901      	bls.n	8002e84 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e0ce      	b.n	8003022 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e84:	4b4b      	ldr	r3, [pc, #300]	; (8002fb4 <HAL_RCC_OscConfig+0x4cc>)
 8002e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e88:	f003 0302 	and.w	r3, r3, #2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d0ee      	beq.n	8002e6e <HAL_RCC_OscConfig+0x386>
 8002e90:	e014      	b.n	8002ebc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e92:	f7fe ff35 	bl	8001d00 <HAL_GetTick>
 8002e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e98:	e00a      	b.n	8002eb0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e9a:	f7fe ff31 	bl	8001d00 <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d901      	bls.n	8002eb0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e0b8      	b.n	8003022 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eb0:	4b40      	ldr	r3, [pc, #256]	; (8002fb4 <HAL_RCC_OscConfig+0x4cc>)
 8002eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb4:	f003 0302 	and.w	r3, r3, #2
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d1ee      	bne.n	8002e9a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ebc:	7dfb      	ldrb	r3, [r7, #23]
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d105      	bne.n	8002ece <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ec2:	4b3c      	ldr	r3, [pc, #240]	; (8002fb4 <HAL_RCC_OscConfig+0x4cc>)
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec6:	4a3b      	ldr	r2, [pc, #236]	; (8002fb4 <HAL_RCC_OscConfig+0x4cc>)
 8002ec8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ecc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	f000 80a4 	beq.w	8003020 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ed8:	4b36      	ldr	r3, [pc, #216]	; (8002fb4 <HAL_RCC_OscConfig+0x4cc>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f003 030c 	and.w	r3, r3, #12
 8002ee0:	2b08      	cmp	r3, #8
 8002ee2:	d06b      	beq.n	8002fbc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d149      	bne.n	8002f80 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eec:	4b31      	ldr	r3, [pc, #196]	; (8002fb4 <HAL_RCC_OscConfig+0x4cc>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a30      	ldr	r2, [pc, #192]	; (8002fb4 <HAL_RCC_OscConfig+0x4cc>)
 8002ef2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ef6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef8:	f7fe ff02 	bl	8001d00 <HAL_GetTick>
 8002efc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002efe:	e008      	b.n	8002f12 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f00:	f7fe fefe 	bl	8001d00 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e087      	b.n	8003022 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f12:	4b28      	ldr	r3, [pc, #160]	; (8002fb4 <HAL_RCC_OscConfig+0x4cc>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1f0      	bne.n	8002f00 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	69da      	ldr	r2, [r3, #28]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a1b      	ldr	r3, [r3, #32]
 8002f26:	431a      	orrs	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2c:	019b      	lsls	r3, r3, #6
 8002f2e:	431a      	orrs	r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f34:	085b      	lsrs	r3, r3, #1
 8002f36:	3b01      	subs	r3, #1
 8002f38:	041b      	lsls	r3, r3, #16
 8002f3a:	431a      	orrs	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f40:	061b      	lsls	r3, r3, #24
 8002f42:	4313      	orrs	r3, r2
 8002f44:	4a1b      	ldr	r2, [pc, #108]	; (8002fb4 <HAL_RCC_OscConfig+0x4cc>)
 8002f46:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002f4a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f4c:	4b19      	ldr	r3, [pc, #100]	; (8002fb4 <HAL_RCC_OscConfig+0x4cc>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a18      	ldr	r2, [pc, #96]	; (8002fb4 <HAL_RCC_OscConfig+0x4cc>)
 8002f52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f58:	f7fe fed2 	bl	8001d00 <HAL_GetTick>
 8002f5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f5e:	e008      	b.n	8002f72 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f60:	f7fe fece 	bl	8001d00 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e057      	b.n	8003022 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f72:	4b10      	ldr	r3, [pc, #64]	; (8002fb4 <HAL_RCC_OscConfig+0x4cc>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d0f0      	beq.n	8002f60 <HAL_RCC_OscConfig+0x478>
 8002f7e:	e04f      	b.n	8003020 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f80:	4b0c      	ldr	r3, [pc, #48]	; (8002fb4 <HAL_RCC_OscConfig+0x4cc>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a0b      	ldr	r2, [pc, #44]	; (8002fb4 <HAL_RCC_OscConfig+0x4cc>)
 8002f86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f8c:	f7fe feb8 	bl	8001d00 <HAL_GetTick>
 8002f90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f92:	e008      	b.n	8002fa6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f94:	f7fe feb4 	bl	8001d00 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d901      	bls.n	8002fa6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e03d      	b.n	8003022 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fa6:	4b03      	ldr	r3, [pc, #12]	; (8002fb4 <HAL_RCC_OscConfig+0x4cc>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d1f0      	bne.n	8002f94 <HAL_RCC_OscConfig+0x4ac>
 8002fb2:	e035      	b.n	8003020 <HAL_RCC_OscConfig+0x538>
 8002fb4:	40023800 	.word	0x40023800
 8002fb8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002fbc:	4b1b      	ldr	r3, [pc, #108]	; (800302c <HAL_RCC_OscConfig+0x544>)
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d028      	beq.n	800301c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d121      	bne.n	800301c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d11a      	bne.n	800301c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002fec:	4013      	ands	r3, r2
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ff2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d111      	bne.n	800301c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003002:	085b      	lsrs	r3, r3, #1
 8003004:	3b01      	subs	r3, #1
 8003006:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003008:	429a      	cmp	r2, r3
 800300a:	d107      	bne.n	800301c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003016:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003018:	429a      	cmp	r2, r3
 800301a:	d001      	beq.n	8003020 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e000      	b.n	8003022 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3718      	adds	r7, #24
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	40023800 	.word	0x40023800

08003030 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800303a:	2300      	movs	r3, #0
 800303c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d101      	bne.n	8003048 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e0d0      	b.n	80031ea <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003048:	4b6a      	ldr	r3, [pc, #424]	; (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 030f 	and.w	r3, r3, #15
 8003050:	683a      	ldr	r2, [r7, #0]
 8003052:	429a      	cmp	r2, r3
 8003054:	d910      	bls.n	8003078 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003056:	4b67      	ldr	r3, [pc, #412]	; (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f023 020f 	bic.w	r2, r3, #15
 800305e:	4965      	ldr	r1, [pc, #404]	; (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	4313      	orrs	r3, r2
 8003064:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003066:	4b63      	ldr	r3, [pc, #396]	; (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 030f 	and.w	r3, r3, #15
 800306e:	683a      	ldr	r2, [r7, #0]
 8003070:	429a      	cmp	r2, r3
 8003072:	d001      	beq.n	8003078 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e0b8      	b.n	80031ea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0302 	and.w	r3, r3, #2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d020      	beq.n	80030c6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0304 	and.w	r3, r3, #4
 800308c:	2b00      	cmp	r3, #0
 800308e:	d005      	beq.n	800309c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003090:	4b59      	ldr	r3, [pc, #356]	; (80031f8 <HAL_RCC_ClockConfig+0x1c8>)
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	4a58      	ldr	r2, [pc, #352]	; (80031f8 <HAL_RCC_ClockConfig+0x1c8>)
 8003096:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800309a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0308 	and.w	r3, r3, #8
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d005      	beq.n	80030b4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030a8:	4b53      	ldr	r3, [pc, #332]	; (80031f8 <HAL_RCC_ClockConfig+0x1c8>)
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	4a52      	ldr	r2, [pc, #328]	; (80031f8 <HAL_RCC_ClockConfig+0x1c8>)
 80030ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030b2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030b4:	4b50      	ldr	r3, [pc, #320]	; (80031f8 <HAL_RCC_ClockConfig+0x1c8>)
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	494d      	ldr	r1, [pc, #308]	; (80031f8 <HAL_RCC_ClockConfig+0x1c8>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d040      	beq.n	8003154 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d107      	bne.n	80030ea <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030da:	4b47      	ldr	r3, [pc, #284]	; (80031f8 <HAL_RCC_ClockConfig+0x1c8>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d115      	bne.n	8003112 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e07f      	b.n	80031ea <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d107      	bne.n	8003102 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030f2:	4b41      	ldr	r3, [pc, #260]	; (80031f8 <HAL_RCC_ClockConfig+0x1c8>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d109      	bne.n	8003112 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e073      	b.n	80031ea <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003102:	4b3d      	ldr	r3, [pc, #244]	; (80031f8 <HAL_RCC_ClockConfig+0x1c8>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	2b00      	cmp	r3, #0
 800310c:	d101      	bne.n	8003112 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e06b      	b.n	80031ea <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003112:	4b39      	ldr	r3, [pc, #228]	; (80031f8 <HAL_RCC_ClockConfig+0x1c8>)
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f023 0203 	bic.w	r2, r3, #3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	4936      	ldr	r1, [pc, #216]	; (80031f8 <HAL_RCC_ClockConfig+0x1c8>)
 8003120:	4313      	orrs	r3, r2
 8003122:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003124:	f7fe fdec 	bl	8001d00 <HAL_GetTick>
 8003128:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800312a:	e00a      	b.n	8003142 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800312c:	f7fe fde8 	bl	8001d00 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	f241 3288 	movw	r2, #5000	; 0x1388
 800313a:	4293      	cmp	r3, r2
 800313c:	d901      	bls.n	8003142 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e053      	b.n	80031ea <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003142:	4b2d      	ldr	r3, [pc, #180]	; (80031f8 <HAL_RCC_ClockConfig+0x1c8>)
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	f003 020c 	and.w	r2, r3, #12
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	429a      	cmp	r2, r3
 8003152:	d1eb      	bne.n	800312c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003154:	4b27      	ldr	r3, [pc, #156]	; (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 030f 	and.w	r3, r3, #15
 800315c:	683a      	ldr	r2, [r7, #0]
 800315e:	429a      	cmp	r2, r3
 8003160:	d210      	bcs.n	8003184 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003162:	4b24      	ldr	r3, [pc, #144]	; (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f023 020f 	bic.w	r2, r3, #15
 800316a:	4922      	ldr	r1, [pc, #136]	; (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	4313      	orrs	r3, r2
 8003170:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003172:	4b20      	ldr	r3, [pc, #128]	; (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 030f 	and.w	r3, r3, #15
 800317a:	683a      	ldr	r2, [r7, #0]
 800317c:	429a      	cmp	r2, r3
 800317e:	d001      	beq.n	8003184 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e032      	b.n	80031ea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0304 	and.w	r3, r3, #4
 800318c:	2b00      	cmp	r3, #0
 800318e:	d008      	beq.n	80031a2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003190:	4b19      	ldr	r3, [pc, #100]	; (80031f8 <HAL_RCC_ClockConfig+0x1c8>)
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	4916      	ldr	r1, [pc, #88]	; (80031f8 <HAL_RCC_ClockConfig+0x1c8>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0308 	and.w	r3, r3, #8
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d009      	beq.n	80031c2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80031ae:	4b12      	ldr	r3, [pc, #72]	; (80031f8 <HAL_RCC_ClockConfig+0x1c8>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	490e      	ldr	r1, [pc, #56]	; (80031f8 <HAL_RCC_ClockConfig+0x1c8>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031c2:	f000 f821 	bl	8003208 <HAL_RCC_GetSysClockFreq>
 80031c6:	4602      	mov	r2, r0
 80031c8:	4b0b      	ldr	r3, [pc, #44]	; (80031f8 <HAL_RCC_ClockConfig+0x1c8>)
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	091b      	lsrs	r3, r3, #4
 80031ce:	f003 030f 	and.w	r3, r3, #15
 80031d2:	490a      	ldr	r1, [pc, #40]	; (80031fc <HAL_RCC_ClockConfig+0x1cc>)
 80031d4:	5ccb      	ldrb	r3, [r1, r3]
 80031d6:	fa22 f303 	lsr.w	r3, r2, r3
 80031da:	4a09      	ldr	r2, [pc, #36]	; (8003200 <HAL_RCC_ClockConfig+0x1d0>)
 80031dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80031de:	4b09      	ldr	r3, [pc, #36]	; (8003204 <HAL_RCC_ClockConfig+0x1d4>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7fe fd48 	bl	8001c78 <HAL_InitTick>

  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3710      	adds	r7, #16
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	40023c00 	.word	0x40023c00
 80031f8:	40023800 	.word	0x40023800
 80031fc:	08006c04 	.word	0x08006c04
 8003200:	20000000 	.word	0x20000000
 8003204:	20000004 	.word	0x20000004

08003208 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003208:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800320c:	b084      	sub	sp, #16
 800320e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003210:	2300      	movs	r3, #0
 8003212:	607b      	str	r3, [r7, #4]
 8003214:	2300      	movs	r3, #0
 8003216:	60fb      	str	r3, [r7, #12]
 8003218:	2300      	movs	r3, #0
 800321a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800321c:	2300      	movs	r3, #0
 800321e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003220:	4b67      	ldr	r3, [pc, #412]	; (80033c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	f003 030c 	and.w	r3, r3, #12
 8003228:	2b08      	cmp	r3, #8
 800322a:	d00d      	beq.n	8003248 <HAL_RCC_GetSysClockFreq+0x40>
 800322c:	2b08      	cmp	r3, #8
 800322e:	f200 80bd 	bhi.w	80033ac <HAL_RCC_GetSysClockFreq+0x1a4>
 8003232:	2b00      	cmp	r3, #0
 8003234:	d002      	beq.n	800323c <HAL_RCC_GetSysClockFreq+0x34>
 8003236:	2b04      	cmp	r3, #4
 8003238:	d003      	beq.n	8003242 <HAL_RCC_GetSysClockFreq+0x3a>
 800323a:	e0b7      	b.n	80033ac <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800323c:	4b61      	ldr	r3, [pc, #388]	; (80033c4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800323e:	60bb      	str	r3, [r7, #8]
      break;
 8003240:	e0b7      	b.n	80033b2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003242:	4b61      	ldr	r3, [pc, #388]	; (80033c8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003244:	60bb      	str	r3, [r7, #8]
      break;
 8003246:	e0b4      	b.n	80033b2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003248:	4b5d      	ldr	r3, [pc, #372]	; (80033c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003250:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003252:	4b5b      	ldr	r3, [pc, #364]	; (80033c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d04d      	beq.n	80032fa <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800325e:	4b58      	ldr	r3, [pc, #352]	; (80033c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	099b      	lsrs	r3, r3, #6
 8003264:	461a      	mov	r2, r3
 8003266:	f04f 0300 	mov.w	r3, #0
 800326a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800326e:	f04f 0100 	mov.w	r1, #0
 8003272:	ea02 0800 	and.w	r8, r2, r0
 8003276:	ea03 0901 	and.w	r9, r3, r1
 800327a:	4640      	mov	r0, r8
 800327c:	4649      	mov	r1, r9
 800327e:	f04f 0200 	mov.w	r2, #0
 8003282:	f04f 0300 	mov.w	r3, #0
 8003286:	014b      	lsls	r3, r1, #5
 8003288:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800328c:	0142      	lsls	r2, r0, #5
 800328e:	4610      	mov	r0, r2
 8003290:	4619      	mov	r1, r3
 8003292:	ebb0 0008 	subs.w	r0, r0, r8
 8003296:	eb61 0109 	sbc.w	r1, r1, r9
 800329a:	f04f 0200 	mov.w	r2, #0
 800329e:	f04f 0300 	mov.w	r3, #0
 80032a2:	018b      	lsls	r3, r1, #6
 80032a4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80032a8:	0182      	lsls	r2, r0, #6
 80032aa:	1a12      	subs	r2, r2, r0
 80032ac:	eb63 0301 	sbc.w	r3, r3, r1
 80032b0:	f04f 0000 	mov.w	r0, #0
 80032b4:	f04f 0100 	mov.w	r1, #0
 80032b8:	00d9      	lsls	r1, r3, #3
 80032ba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80032be:	00d0      	lsls	r0, r2, #3
 80032c0:	4602      	mov	r2, r0
 80032c2:	460b      	mov	r3, r1
 80032c4:	eb12 0208 	adds.w	r2, r2, r8
 80032c8:	eb43 0309 	adc.w	r3, r3, r9
 80032cc:	f04f 0000 	mov.w	r0, #0
 80032d0:	f04f 0100 	mov.w	r1, #0
 80032d4:	0259      	lsls	r1, r3, #9
 80032d6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80032da:	0250      	lsls	r0, r2, #9
 80032dc:	4602      	mov	r2, r0
 80032de:	460b      	mov	r3, r1
 80032e0:	4610      	mov	r0, r2
 80032e2:	4619      	mov	r1, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	461a      	mov	r2, r3
 80032e8:	f04f 0300 	mov.w	r3, #0
 80032ec:	f7fd fbd6 	bl	8000a9c <__aeabi_uldivmod>
 80032f0:	4602      	mov	r2, r0
 80032f2:	460b      	mov	r3, r1
 80032f4:	4613      	mov	r3, r2
 80032f6:	60fb      	str	r3, [r7, #12]
 80032f8:	e04a      	b.n	8003390 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032fa:	4b31      	ldr	r3, [pc, #196]	; (80033c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	099b      	lsrs	r3, r3, #6
 8003300:	461a      	mov	r2, r3
 8003302:	f04f 0300 	mov.w	r3, #0
 8003306:	f240 10ff 	movw	r0, #511	; 0x1ff
 800330a:	f04f 0100 	mov.w	r1, #0
 800330e:	ea02 0400 	and.w	r4, r2, r0
 8003312:	ea03 0501 	and.w	r5, r3, r1
 8003316:	4620      	mov	r0, r4
 8003318:	4629      	mov	r1, r5
 800331a:	f04f 0200 	mov.w	r2, #0
 800331e:	f04f 0300 	mov.w	r3, #0
 8003322:	014b      	lsls	r3, r1, #5
 8003324:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003328:	0142      	lsls	r2, r0, #5
 800332a:	4610      	mov	r0, r2
 800332c:	4619      	mov	r1, r3
 800332e:	1b00      	subs	r0, r0, r4
 8003330:	eb61 0105 	sbc.w	r1, r1, r5
 8003334:	f04f 0200 	mov.w	r2, #0
 8003338:	f04f 0300 	mov.w	r3, #0
 800333c:	018b      	lsls	r3, r1, #6
 800333e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003342:	0182      	lsls	r2, r0, #6
 8003344:	1a12      	subs	r2, r2, r0
 8003346:	eb63 0301 	sbc.w	r3, r3, r1
 800334a:	f04f 0000 	mov.w	r0, #0
 800334e:	f04f 0100 	mov.w	r1, #0
 8003352:	00d9      	lsls	r1, r3, #3
 8003354:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003358:	00d0      	lsls	r0, r2, #3
 800335a:	4602      	mov	r2, r0
 800335c:	460b      	mov	r3, r1
 800335e:	1912      	adds	r2, r2, r4
 8003360:	eb45 0303 	adc.w	r3, r5, r3
 8003364:	f04f 0000 	mov.w	r0, #0
 8003368:	f04f 0100 	mov.w	r1, #0
 800336c:	0299      	lsls	r1, r3, #10
 800336e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003372:	0290      	lsls	r0, r2, #10
 8003374:	4602      	mov	r2, r0
 8003376:	460b      	mov	r3, r1
 8003378:	4610      	mov	r0, r2
 800337a:	4619      	mov	r1, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	461a      	mov	r2, r3
 8003380:	f04f 0300 	mov.w	r3, #0
 8003384:	f7fd fb8a 	bl	8000a9c <__aeabi_uldivmod>
 8003388:	4602      	mov	r2, r0
 800338a:	460b      	mov	r3, r1
 800338c:	4613      	mov	r3, r2
 800338e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003390:	4b0b      	ldr	r3, [pc, #44]	; (80033c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	0c1b      	lsrs	r3, r3, #16
 8003396:	f003 0303 	and.w	r3, r3, #3
 800339a:	3301      	adds	r3, #1
 800339c:	005b      	lsls	r3, r3, #1
 800339e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80033a0:	68fa      	ldr	r2, [r7, #12]
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033a8:	60bb      	str	r3, [r7, #8]
      break;
 80033aa:	e002      	b.n	80033b2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033ac:	4b05      	ldr	r3, [pc, #20]	; (80033c4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80033ae:	60bb      	str	r3, [r7, #8]
      break;
 80033b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033b2:	68bb      	ldr	r3, [r7, #8]
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3710      	adds	r7, #16
 80033b8:	46bd      	mov	sp, r7
 80033ba:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80033be:	bf00      	nop
 80033c0:	40023800 	.word	0x40023800
 80033c4:	00f42400 	.word	0x00f42400
 80033c8:	007a1200 	.word	0x007a1200

080033cc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033cc:	b480      	push	{r7}
 80033ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033d0:	4b03      	ldr	r3, [pc, #12]	; (80033e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80033d2:	681b      	ldr	r3, [r3, #0]
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	20000000 	.word	0x20000000

080033e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80033e8:	f7ff fff0 	bl	80033cc <HAL_RCC_GetHCLKFreq>
 80033ec:	4602      	mov	r2, r0
 80033ee:	4b05      	ldr	r3, [pc, #20]	; (8003404 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	0a9b      	lsrs	r3, r3, #10
 80033f4:	f003 0307 	and.w	r3, r3, #7
 80033f8:	4903      	ldr	r1, [pc, #12]	; (8003408 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033fa:	5ccb      	ldrb	r3, [r1, r3]
 80033fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003400:	4618      	mov	r0, r3
 8003402:	bd80      	pop	{r7, pc}
 8003404:	40023800 	.word	0x40023800
 8003408:	08006c14 	.word	0x08006c14

0800340c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003410:	f7ff ffdc 	bl	80033cc <HAL_RCC_GetHCLKFreq>
 8003414:	4602      	mov	r2, r0
 8003416:	4b05      	ldr	r3, [pc, #20]	; (800342c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	0b5b      	lsrs	r3, r3, #13
 800341c:	f003 0307 	and.w	r3, r3, #7
 8003420:	4903      	ldr	r1, [pc, #12]	; (8003430 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003422:	5ccb      	ldrb	r3, [r1, r3]
 8003424:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003428:	4618      	mov	r0, r3
 800342a:	bd80      	pop	{r7, pc}
 800342c:	40023800 	.word	0x40023800
 8003430:	08006c14 	.word	0x08006c14

08003434 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b088      	sub	sp, #32
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800343c:	2300      	movs	r3, #0
 800343e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003440:	2300      	movs	r3, #0
 8003442:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003444:	2300      	movs	r3, #0
 8003446:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003448:	2300      	movs	r3, #0
 800344a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800344c:	2300      	movs	r3, #0
 800344e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0301 	and.w	r3, r3, #1
 8003458:	2b00      	cmp	r3, #0
 800345a:	d012      	beq.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800345c:	4b69      	ldr	r3, [pc, #420]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	4a68      	ldr	r2, [pc, #416]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003462:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003466:	6093      	str	r3, [r2, #8]
 8003468:	4b66      	ldr	r3, [pc, #408]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800346a:	689a      	ldr	r2, [r3, #8]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003470:	4964      	ldr	r1, [pc, #400]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003472:	4313      	orrs	r3, r2
 8003474:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800347a:	2b00      	cmp	r3, #0
 800347c:	d101      	bne.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800347e:	2301      	movs	r3, #1
 8003480:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d017      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800348e:	4b5d      	ldr	r3, [pc, #372]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003490:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003494:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800349c:	4959      	ldr	r1, [pc, #356]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034ac:	d101      	bne.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80034ae:	2301      	movs	r3, #1
 80034b0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d101      	bne.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80034ba:	2301      	movs	r3, #1
 80034bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d017      	beq.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80034ca:	4b4e      	ldr	r3, [pc, #312]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034d0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d8:	494a      	ldr	r1, [pc, #296]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034e8:	d101      	bne.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80034ea:	2301      	movs	r3, #1
 80034ec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d101      	bne.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80034f6:	2301      	movs	r3, #1
 80034f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d001      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003506:	2301      	movs	r3, #1
 8003508:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0320 	and.w	r3, r3, #32
 8003512:	2b00      	cmp	r3, #0
 8003514:	f000 808b 	beq.w	800362e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003518:	4b3a      	ldr	r3, [pc, #232]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800351a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351c:	4a39      	ldr	r2, [pc, #228]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800351e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003522:	6413      	str	r3, [r2, #64]	; 0x40
 8003524:	4b37      	ldr	r3, [pc, #220]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800352c:	60bb      	str	r3, [r7, #8]
 800352e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003530:	4b35      	ldr	r3, [pc, #212]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a34      	ldr	r2, [pc, #208]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003536:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800353a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800353c:	f7fe fbe0 	bl	8001d00 <HAL_GetTick>
 8003540:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003542:	e008      	b.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003544:	f7fe fbdc 	bl	8001d00 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b64      	cmp	r3, #100	; 0x64
 8003550:	d901      	bls.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e357      	b.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003556:	4b2c      	ldr	r3, [pc, #176]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800355e:	2b00      	cmp	r3, #0
 8003560:	d0f0      	beq.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003562:	4b28      	ldr	r3, [pc, #160]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003566:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800356a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d035      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003576:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800357a:	693a      	ldr	r2, [r7, #16]
 800357c:	429a      	cmp	r2, r3
 800357e:	d02e      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003580:	4b20      	ldr	r3, [pc, #128]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003584:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003588:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800358a:	4b1e      	ldr	r3, [pc, #120]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800358c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800358e:	4a1d      	ldr	r2, [pc, #116]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003590:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003594:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003596:	4b1b      	ldr	r3, [pc, #108]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800359a:	4a1a      	ldr	r2, [pc, #104]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800359c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035a0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80035a2:	4a18      	ldr	r2, [pc, #96]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80035a8:	4b16      	ldr	r3, [pc, #88]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ac:	f003 0301 	and.w	r3, r3, #1
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d114      	bne.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b4:	f7fe fba4 	bl	8001d00 <HAL_GetTick>
 80035b8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035ba:	e00a      	b.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035bc:	f7fe fba0 	bl	8001d00 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d901      	bls.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e319      	b.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035d2:	4b0c      	ldr	r3, [pc, #48]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d0ee      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035ea:	d111      	bne.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80035ec:	4b05      	ldr	r3, [pc, #20]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80035f8:	4b04      	ldr	r3, [pc, #16]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80035fa:	400b      	ands	r3, r1
 80035fc:	4901      	ldr	r1, [pc, #4]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	608b      	str	r3, [r1, #8]
 8003602:	e00b      	b.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003604:	40023800 	.word	0x40023800
 8003608:	40007000 	.word	0x40007000
 800360c:	0ffffcff 	.word	0x0ffffcff
 8003610:	4bb1      	ldr	r3, [pc, #708]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	4ab0      	ldr	r2, [pc, #704]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003616:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800361a:	6093      	str	r3, [r2, #8]
 800361c:	4bae      	ldr	r3, [pc, #696]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800361e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003624:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003628:	49ab      	ldr	r1, [pc, #684]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800362a:	4313      	orrs	r3, r2
 800362c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0310 	and.w	r3, r3, #16
 8003636:	2b00      	cmp	r3, #0
 8003638:	d010      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800363a:	4ba7      	ldr	r3, [pc, #668]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800363c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003640:	4aa5      	ldr	r2, [pc, #660]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003642:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003646:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800364a:	4ba3      	ldr	r3, [pc, #652]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800364c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003654:	49a0      	ldr	r1, [pc, #640]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003656:	4313      	orrs	r3, r2
 8003658:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d00a      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003668:	4b9b      	ldr	r3, [pc, #620]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800366a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800366e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003676:	4998      	ldr	r1, [pc, #608]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003678:	4313      	orrs	r3, r2
 800367a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00a      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800368a:	4b93      	ldr	r3, [pc, #588]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800368c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003690:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003698:	498f      	ldr	r1, [pc, #572]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800369a:	4313      	orrs	r3, r2
 800369c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00a      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80036ac:	4b8a      	ldr	r3, [pc, #552]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80036ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036ba:	4987      	ldr	r1, [pc, #540]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00a      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80036ce:	4b82      	ldr	r3, [pc, #520]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80036d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036d4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036dc:	497e      	ldr	r1, [pc, #504]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d00a      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036f0:	4b79      	ldr	r3, [pc, #484]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80036f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036f6:	f023 0203 	bic.w	r2, r3, #3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fe:	4976      	ldr	r1, [pc, #472]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003700:	4313      	orrs	r3, r2
 8003702:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800370e:	2b00      	cmp	r3, #0
 8003710:	d00a      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003712:	4b71      	ldr	r3, [pc, #452]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003714:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003718:	f023 020c 	bic.w	r2, r3, #12
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003720:	496d      	ldr	r1, [pc, #436]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003722:	4313      	orrs	r3, r2
 8003724:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003730:	2b00      	cmp	r3, #0
 8003732:	d00a      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003734:	4b68      	ldr	r3, [pc, #416]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800373a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003742:	4965      	ldr	r1, [pc, #404]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003744:	4313      	orrs	r3, r2
 8003746:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00a      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003756:	4b60      	ldr	r3, [pc, #384]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800375c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003764:	495c      	ldr	r1, [pc, #368]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003766:	4313      	orrs	r3, r2
 8003768:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003774:	2b00      	cmp	r3, #0
 8003776:	d00a      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003778:	4b57      	ldr	r3, [pc, #348]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800377a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800377e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003786:	4954      	ldr	r1, [pc, #336]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003788:	4313      	orrs	r3, r2
 800378a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003796:	2b00      	cmp	r3, #0
 8003798:	d00a      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800379a:	4b4f      	ldr	r3, [pc, #316]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800379c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037a0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037a8:	494b      	ldr	r1, [pc, #300]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d00a      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80037bc:	4b46      	ldr	r3, [pc, #280]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80037be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ca:	4943      	ldr	r1, [pc, #268]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d00a      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80037de:	4b3e      	ldr	r3, [pc, #248]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80037e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037ec:	493a      	ldr	r1, [pc, #232]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d00a      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003800:	4b35      	ldr	r3, [pc, #212]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003806:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800380e:	4932      	ldr	r1, [pc, #200]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003810:	4313      	orrs	r3, r2
 8003812:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d011      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003822:	4b2d      	ldr	r3, [pc, #180]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003824:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003828:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003830:	4929      	ldr	r1, [pc, #164]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003832:	4313      	orrs	r3, r2
 8003834:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800383c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003840:	d101      	bne.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003842:	2301      	movs	r3, #1
 8003844:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0308 	and.w	r3, r3, #8
 800384e:	2b00      	cmp	r3, #0
 8003850:	d001      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003852:	2301      	movs	r3, #1
 8003854:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00a      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003862:	4b1d      	ldr	r3, [pc, #116]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003864:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003868:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003870:	4919      	ldr	r1, [pc, #100]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003872:	4313      	orrs	r3, r2
 8003874:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d00b      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003884:	4b14      	ldr	r3, [pc, #80]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800388a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003894:	4910      	ldr	r1, [pc, #64]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003896:	4313      	orrs	r3, r2
 8003898:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d006      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	f000 80d9 	beq.w	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80038b0:	4b09      	ldr	r3, [pc, #36]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a08      	ldr	r2, [pc, #32]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80038b6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80038ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038bc:	f7fe fa20 	bl	8001d00 <HAL_GetTick>
 80038c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80038c2:	e00b      	b.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80038c4:	f7fe fa1c 	bl	8001d00 <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	2b64      	cmp	r3, #100	; 0x64
 80038d0:	d904      	bls.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e197      	b.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80038d6:	bf00      	nop
 80038d8:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80038dc:	4b6c      	ldr	r3, [pc, #432]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d1ed      	bne.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0301 	and.w	r3, r3, #1
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d021      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d11d      	bne.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80038fc:	4b64      	ldr	r3, [pc, #400]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003902:	0c1b      	lsrs	r3, r3, #16
 8003904:	f003 0303 	and.w	r3, r3, #3
 8003908:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800390a:	4b61      	ldr	r3, [pc, #388]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800390c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003910:	0e1b      	lsrs	r3, r3, #24
 8003912:	f003 030f 	and.w	r3, r3, #15
 8003916:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	019a      	lsls	r2, r3, #6
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	041b      	lsls	r3, r3, #16
 8003922:	431a      	orrs	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	061b      	lsls	r3, r3, #24
 8003928:	431a      	orrs	r2, r3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	071b      	lsls	r3, r3, #28
 8003930:	4957      	ldr	r1, [pc, #348]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003932:	4313      	orrs	r3, r2
 8003934:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d004      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003948:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800394c:	d00a      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003956:	2b00      	cmp	r3, #0
 8003958:	d02e      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003962:	d129      	bne.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003964:	4b4a      	ldr	r3, [pc, #296]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003966:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800396a:	0c1b      	lsrs	r3, r3, #16
 800396c:	f003 0303 	and.w	r3, r3, #3
 8003970:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003972:	4b47      	ldr	r3, [pc, #284]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003974:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003978:	0f1b      	lsrs	r3, r3, #28
 800397a:	f003 0307 	and.w	r3, r3, #7
 800397e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	019a      	lsls	r2, r3, #6
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	041b      	lsls	r3, r3, #16
 800398a:	431a      	orrs	r2, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	061b      	lsls	r3, r3, #24
 8003992:	431a      	orrs	r2, r3
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	071b      	lsls	r3, r3, #28
 8003998:	493d      	ldr	r1, [pc, #244]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800399a:	4313      	orrs	r3, r2
 800399c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80039a0:	4b3b      	ldr	r3, [pc, #236]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039a6:	f023 021f 	bic.w	r2, r3, #31
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ae:	3b01      	subs	r3, #1
 80039b0:	4937      	ldr	r1, [pc, #220]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d01d      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80039c4:	4b32      	ldr	r3, [pc, #200]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039ca:	0e1b      	lsrs	r3, r3, #24
 80039cc:	f003 030f 	and.w	r3, r3, #15
 80039d0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80039d2:	4b2f      	ldr	r3, [pc, #188]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039d8:	0f1b      	lsrs	r3, r3, #28
 80039da:	f003 0307 	and.w	r3, r3, #7
 80039de:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	019a      	lsls	r2, r3, #6
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	041b      	lsls	r3, r3, #16
 80039ec:	431a      	orrs	r2, r3
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	061b      	lsls	r3, r3, #24
 80039f2:	431a      	orrs	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	071b      	lsls	r3, r3, #28
 80039f8:	4925      	ldr	r1, [pc, #148]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d011      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	019a      	lsls	r2, r3, #6
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	041b      	lsls	r3, r3, #16
 8003a18:	431a      	orrs	r2, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	061b      	lsls	r3, r3, #24
 8003a20:	431a      	orrs	r2, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	071b      	lsls	r3, r3, #28
 8003a28:	4919      	ldr	r1, [pc, #100]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003a30:	4b17      	ldr	r3, [pc, #92]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a16      	ldr	r2, [pc, #88]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a36:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a3c:	f7fe f960 	bl	8001d00 <HAL_GetTick>
 8003a40:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a42:	e008      	b.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003a44:	f7fe f95c 	bl	8001d00 <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	2b64      	cmp	r3, #100	; 0x64
 8003a50:	d901      	bls.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e0d7      	b.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a56:	4b0e      	ldr	r3, [pc, #56]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d0f0      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	f040 80cd 	bne.w	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003a6a:	4b09      	ldr	r3, [pc, #36]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a08      	ldr	r2, [pc, #32]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a76:	f7fe f943 	bl	8001d00 <HAL_GetTick>
 8003a7a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003a7c:	e00a      	b.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003a7e:	f7fe f93f 	bl	8001d00 <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	2b64      	cmp	r3, #100	; 0x64
 8003a8a:	d903      	bls.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	e0ba      	b.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003a90:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003a94:	4b5e      	ldr	r3, [pc, #376]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003aa0:	d0ed      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d003      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d009      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d02e      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d12a      	bne.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003aca:	4b51      	ldr	r3, [pc, #324]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad0:	0c1b      	lsrs	r3, r3, #16
 8003ad2:	f003 0303 	and.w	r3, r3, #3
 8003ad6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003ad8:	4b4d      	ldr	r3, [pc, #308]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ade:	0f1b      	lsrs	r3, r3, #28
 8003ae0:	f003 0307 	and.w	r3, r3, #7
 8003ae4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	695b      	ldr	r3, [r3, #20]
 8003aea:	019a      	lsls	r2, r3, #6
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	041b      	lsls	r3, r3, #16
 8003af0:	431a      	orrs	r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	699b      	ldr	r3, [r3, #24]
 8003af6:	061b      	lsls	r3, r3, #24
 8003af8:	431a      	orrs	r2, r3
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	071b      	lsls	r3, r3, #28
 8003afe:	4944      	ldr	r1, [pc, #272]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003b06:	4b42      	ldr	r3, [pc, #264]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b0c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b14:	3b01      	subs	r3, #1
 8003b16:	021b      	lsls	r3, r3, #8
 8003b18:	493d      	ldr	r1, [pc, #244]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d022      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b34:	d11d      	bne.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003b36:	4b36      	ldr	r3, [pc, #216]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b3c:	0e1b      	lsrs	r3, r3, #24
 8003b3e:	f003 030f 	and.w	r3, r3, #15
 8003b42:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003b44:	4b32      	ldr	r3, [pc, #200]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b4a:	0f1b      	lsrs	r3, r3, #28
 8003b4c:	f003 0307 	and.w	r3, r3, #7
 8003b50:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	695b      	ldr	r3, [r3, #20]
 8003b56:	019a      	lsls	r2, r3, #6
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a1b      	ldr	r3, [r3, #32]
 8003b5c:	041b      	lsls	r3, r3, #16
 8003b5e:	431a      	orrs	r2, r3
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	061b      	lsls	r3, r3, #24
 8003b64:	431a      	orrs	r2, r3
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	071b      	lsls	r3, r3, #28
 8003b6a:	4929      	ldr	r1, [pc, #164]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0308 	and.w	r3, r3, #8
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d028      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003b7e:	4b24      	ldr	r3, [pc, #144]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b84:	0e1b      	lsrs	r3, r3, #24
 8003b86:	f003 030f 	and.w	r3, r3, #15
 8003b8a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003b8c:	4b20      	ldr	r3, [pc, #128]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b92:	0c1b      	lsrs	r3, r3, #16
 8003b94:	f003 0303 	and.w	r3, r3, #3
 8003b98:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	695b      	ldr	r3, [r3, #20]
 8003b9e:	019a      	lsls	r2, r3, #6
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	041b      	lsls	r3, r3, #16
 8003ba4:	431a      	orrs	r2, r3
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	061b      	lsls	r3, r3, #24
 8003baa:	431a      	orrs	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	69db      	ldr	r3, [r3, #28]
 8003bb0:	071b      	lsls	r3, r3, #28
 8003bb2:	4917      	ldr	r1, [pc, #92]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003bba:	4b15      	ldr	r3, [pc, #84]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bc0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc8:	4911      	ldr	r1, [pc, #68]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003bd0:	4b0f      	ldr	r3, [pc, #60]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a0e      	ldr	r2, [pc, #56]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bdc:	f7fe f890 	bl	8001d00 <HAL_GetTick>
 8003be0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003be2:	e008      	b.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003be4:	f7fe f88c 	bl	8001d00 <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	2b64      	cmp	r3, #100	; 0x64
 8003bf0:	d901      	bls.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e007      	b.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003bf6:	4b06      	ldr	r3, [pc, #24]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bfe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c02:	d1ef      	bne.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3720      	adds	r7, #32
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	40023800 	.word	0x40023800

08003c14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e049      	b.n	8003cba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d106      	bne.n	8003c40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f7fd fd52 	bl	80016e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2202      	movs	r2, #2
 8003c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	3304      	adds	r3, #4
 8003c50:	4619      	mov	r1, r3
 8003c52:	4610      	mov	r0, r2
 8003c54:	f000 fe92 	bl	800497c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3708      	adds	r7, #8
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
	...

08003cc4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b085      	sub	sp, #20
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d001      	beq.n	8003cdc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e054      	b.n	8003d86 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2202      	movs	r2, #2
 8003ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68da      	ldr	r2, [r3, #12]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f042 0201 	orr.w	r2, r2, #1
 8003cf2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a26      	ldr	r2, [pc, #152]	; (8003d94 <HAL_TIM_Base_Start_IT+0xd0>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d022      	beq.n	8003d44 <HAL_TIM_Base_Start_IT+0x80>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d06:	d01d      	beq.n	8003d44 <HAL_TIM_Base_Start_IT+0x80>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a22      	ldr	r2, [pc, #136]	; (8003d98 <HAL_TIM_Base_Start_IT+0xd4>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d018      	beq.n	8003d44 <HAL_TIM_Base_Start_IT+0x80>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a21      	ldr	r2, [pc, #132]	; (8003d9c <HAL_TIM_Base_Start_IT+0xd8>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d013      	beq.n	8003d44 <HAL_TIM_Base_Start_IT+0x80>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a1f      	ldr	r2, [pc, #124]	; (8003da0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d00e      	beq.n	8003d44 <HAL_TIM_Base_Start_IT+0x80>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a1e      	ldr	r2, [pc, #120]	; (8003da4 <HAL_TIM_Base_Start_IT+0xe0>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d009      	beq.n	8003d44 <HAL_TIM_Base_Start_IT+0x80>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a1c      	ldr	r2, [pc, #112]	; (8003da8 <HAL_TIM_Base_Start_IT+0xe4>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d004      	beq.n	8003d44 <HAL_TIM_Base_Start_IT+0x80>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a1b      	ldr	r2, [pc, #108]	; (8003dac <HAL_TIM_Base_Start_IT+0xe8>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d115      	bne.n	8003d70 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	689a      	ldr	r2, [r3, #8]
 8003d4a:	4b19      	ldr	r3, [pc, #100]	; (8003db0 <HAL_TIM_Base_Start_IT+0xec>)
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2b06      	cmp	r3, #6
 8003d54:	d015      	beq.n	8003d82 <HAL_TIM_Base_Start_IT+0xbe>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d5c:	d011      	beq.n	8003d82 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f042 0201 	orr.w	r2, r2, #1
 8003d6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d6e:	e008      	b.n	8003d82 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f042 0201 	orr.w	r2, r2, #1
 8003d7e:	601a      	str	r2, [r3, #0]
 8003d80:	e000      	b.n	8003d84 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d82:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d84:	2300      	movs	r3, #0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3714      	adds	r7, #20
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr
 8003d92:	bf00      	nop
 8003d94:	40010000 	.word	0x40010000
 8003d98:	40000400 	.word	0x40000400
 8003d9c:	40000800 	.word	0x40000800
 8003da0:	40000c00 	.word	0x40000c00
 8003da4:	40010400 	.word	0x40010400
 8003da8:	40014000 	.word	0x40014000
 8003dac:	40001800 	.word	0x40001800
 8003db0:	00010007 	.word	0x00010007

08003db4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68da      	ldr	r2, [r3, #12]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f022 0201 	bic.w	r2, r2, #1
 8003dca:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	6a1a      	ldr	r2, [r3, #32]
 8003dd2:	f241 1311 	movw	r3, #4369	; 0x1111
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d10f      	bne.n	8003dfc <HAL_TIM_Base_Stop_IT+0x48>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	6a1a      	ldr	r2, [r3, #32]
 8003de2:	f240 4344 	movw	r3, #1092	; 0x444
 8003de6:	4013      	ands	r3, r2
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d107      	bne.n	8003dfc <HAL_TIM_Base_Stop_IT+0x48>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f022 0201 	bic.w	r2, r2, #1
 8003dfa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	370c      	adds	r7, #12
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr

08003e12 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e12:	b580      	push	{r7, lr}
 8003e14:	b082      	sub	sp, #8
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d101      	bne.n	8003e24 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e049      	b.n	8003eb8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d106      	bne.n	8003e3e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f000 f841 	bl	8003ec0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2202      	movs	r2, #2
 8003e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	3304      	adds	r3, #4
 8003e4e:	4619      	mov	r1, r3
 8003e50:	4610      	mov	r0, r2
 8003e52:	f000 fd93 	bl	800497c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2201      	movs	r2, #1
 8003e62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2201      	movs	r2, #1
 8003e72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2201      	movs	r2, #1
 8003e82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2201      	movs	r2, #1
 8003e92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003eb6:	2300      	movs	r3, #0
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3708      	adds	r7, #8
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003ec8:	bf00      	nop
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d109      	bne.n	8003ef8 <HAL_TIM_PWM_Start+0x24>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	bf14      	ite	ne
 8003ef0:	2301      	movne	r3, #1
 8003ef2:	2300      	moveq	r3, #0
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	e03c      	b.n	8003f72 <HAL_TIM_PWM_Start+0x9e>
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	2b04      	cmp	r3, #4
 8003efc:	d109      	bne.n	8003f12 <HAL_TIM_PWM_Start+0x3e>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	bf14      	ite	ne
 8003f0a:	2301      	movne	r3, #1
 8003f0c:	2300      	moveq	r3, #0
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	e02f      	b.n	8003f72 <HAL_TIM_PWM_Start+0x9e>
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	2b08      	cmp	r3, #8
 8003f16:	d109      	bne.n	8003f2c <HAL_TIM_PWM_Start+0x58>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	bf14      	ite	ne
 8003f24:	2301      	movne	r3, #1
 8003f26:	2300      	moveq	r3, #0
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	e022      	b.n	8003f72 <HAL_TIM_PWM_Start+0x9e>
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	2b0c      	cmp	r3, #12
 8003f30:	d109      	bne.n	8003f46 <HAL_TIM_PWM_Start+0x72>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	bf14      	ite	ne
 8003f3e:	2301      	movne	r3, #1
 8003f40:	2300      	moveq	r3, #0
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	e015      	b.n	8003f72 <HAL_TIM_PWM_Start+0x9e>
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	2b10      	cmp	r3, #16
 8003f4a:	d109      	bne.n	8003f60 <HAL_TIM_PWM_Start+0x8c>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	bf14      	ite	ne
 8003f58:	2301      	movne	r3, #1
 8003f5a:	2300      	moveq	r3, #0
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	e008      	b.n	8003f72 <HAL_TIM_PWM_Start+0x9e>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	bf14      	ite	ne
 8003f6c:	2301      	movne	r3, #1
 8003f6e:	2300      	moveq	r3, #0
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d001      	beq.n	8003f7a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e092      	b.n	80040a0 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d104      	bne.n	8003f8a <HAL_TIM_PWM_Start+0xb6>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2202      	movs	r2, #2
 8003f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f88:	e023      	b.n	8003fd2 <HAL_TIM_PWM_Start+0xfe>
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	2b04      	cmp	r3, #4
 8003f8e:	d104      	bne.n	8003f9a <HAL_TIM_PWM_Start+0xc6>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2202      	movs	r2, #2
 8003f94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f98:	e01b      	b.n	8003fd2 <HAL_TIM_PWM_Start+0xfe>
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	2b08      	cmp	r3, #8
 8003f9e:	d104      	bne.n	8003faa <HAL_TIM_PWM_Start+0xd6>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2202      	movs	r2, #2
 8003fa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fa8:	e013      	b.n	8003fd2 <HAL_TIM_PWM_Start+0xfe>
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	2b0c      	cmp	r3, #12
 8003fae:	d104      	bne.n	8003fba <HAL_TIM_PWM_Start+0xe6>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2202      	movs	r2, #2
 8003fb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003fb8:	e00b      	b.n	8003fd2 <HAL_TIM_PWM_Start+0xfe>
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	2b10      	cmp	r3, #16
 8003fbe:	d104      	bne.n	8003fca <HAL_TIM_PWM_Start+0xf6>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2202      	movs	r2, #2
 8003fc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fc8:	e003      	b.n	8003fd2 <HAL_TIM_PWM_Start+0xfe>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2202      	movs	r2, #2
 8003fce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	6839      	ldr	r1, [r7, #0]
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f001 f866 	bl	80050ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a30      	ldr	r2, [pc, #192]	; (80040a8 <HAL_TIM_PWM_Start+0x1d4>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d004      	beq.n	8003ff4 <HAL_TIM_PWM_Start+0x120>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a2f      	ldr	r2, [pc, #188]	; (80040ac <HAL_TIM_PWM_Start+0x1d8>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d101      	bne.n	8003ff8 <HAL_TIM_PWM_Start+0x124>
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e000      	b.n	8003ffa <HAL_TIM_PWM_Start+0x126>
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d007      	beq.n	800400e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800400c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a25      	ldr	r2, [pc, #148]	; (80040a8 <HAL_TIM_PWM_Start+0x1d4>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d022      	beq.n	800405e <HAL_TIM_PWM_Start+0x18a>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004020:	d01d      	beq.n	800405e <HAL_TIM_PWM_Start+0x18a>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a22      	ldr	r2, [pc, #136]	; (80040b0 <HAL_TIM_PWM_Start+0x1dc>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d018      	beq.n	800405e <HAL_TIM_PWM_Start+0x18a>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a20      	ldr	r2, [pc, #128]	; (80040b4 <HAL_TIM_PWM_Start+0x1e0>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d013      	beq.n	800405e <HAL_TIM_PWM_Start+0x18a>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a1f      	ldr	r2, [pc, #124]	; (80040b8 <HAL_TIM_PWM_Start+0x1e4>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d00e      	beq.n	800405e <HAL_TIM_PWM_Start+0x18a>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a19      	ldr	r2, [pc, #100]	; (80040ac <HAL_TIM_PWM_Start+0x1d8>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d009      	beq.n	800405e <HAL_TIM_PWM_Start+0x18a>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a1b      	ldr	r2, [pc, #108]	; (80040bc <HAL_TIM_PWM_Start+0x1e8>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d004      	beq.n	800405e <HAL_TIM_PWM_Start+0x18a>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a19      	ldr	r2, [pc, #100]	; (80040c0 <HAL_TIM_PWM_Start+0x1ec>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d115      	bne.n	800408a <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	689a      	ldr	r2, [r3, #8]
 8004064:	4b17      	ldr	r3, [pc, #92]	; (80040c4 <HAL_TIM_PWM_Start+0x1f0>)
 8004066:	4013      	ands	r3, r2
 8004068:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2b06      	cmp	r3, #6
 800406e:	d015      	beq.n	800409c <HAL_TIM_PWM_Start+0x1c8>
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004076:	d011      	beq.n	800409c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f042 0201 	orr.w	r2, r2, #1
 8004086:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004088:	e008      	b.n	800409c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f042 0201 	orr.w	r2, r2, #1
 8004098:	601a      	str	r2, [r3, #0]
 800409a:	e000      	b.n	800409e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800409c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800409e:	2300      	movs	r3, #0
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3710      	adds	r7, #16
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	40010000 	.word	0x40010000
 80040ac:	40010400 	.word	0x40010400
 80040b0:	40000400 	.word	0x40000400
 80040b4:	40000800 	.word	0x40000800
 80040b8:	40000c00 	.word	0x40000c00
 80040bc:	40014000 	.word	0x40014000
 80040c0:	40001800 	.word	0x40001800
 80040c4:	00010007 	.word	0x00010007

080040c8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b086      	sub	sp, #24
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d101      	bne.n	80040dc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e08f      	b.n	80041fc <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d106      	bne.n	80040f6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f7fd fb31 	bl	8001758 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2202      	movs	r2, #2
 80040fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	6899      	ldr	r1, [r3, #8]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	4b3e      	ldr	r3, [pc, #248]	; (8004204 <HAL_TIM_Encoder_Init+0x13c>)
 800410a:	400b      	ands	r3, r1
 800410c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	3304      	adds	r3, #4
 8004116:	4619      	mov	r1, r3
 8004118:	4610      	mov	r0, r2
 800411a:	f000 fc2f 	bl	800497c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	699b      	ldr	r3, [r3, #24]
 800412c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	6a1b      	ldr	r3, [r3, #32]
 8004134:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	697a      	ldr	r2, [r7, #20]
 800413c:	4313      	orrs	r3, r2
 800413e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004140:	693a      	ldr	r2, [r7, #16]
 8004142:	4b31      	ldr	r3, [pc, #196]	; (8004208 <HAL_TIM_Encoder_Init+0x140>)
 8004144:	4013      	ands	r3, r2
 8004146:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	689a      	ldr	r2, [r3, #8]
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	699b      	ldr	r3, [r3, #24]
 8004150:	021b      	lsls	r3, r3, #8
 8004152:	4313      	orrs	r3, r2
 8004154:	693a      	ldr	r2, [r7, #16]
 8004156:	4313      	orrs	r3, r2
 8004158:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800415a:	693a      	ldr	r2, [r7, #16]
 800415c:	4b2b      	ldr	r3, [pc, #172]	; (800420c <HAL_TIM_Encoder_Init+0x144>)
 800415e:	4013      	ands	r3, r2
 8004160:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004162:	693a      	ldr	r2, [r7, #16]
 8004164:	4b2a      	ldr	r3, [pc, #168]	; (8004210 <HAL_TIM_Encoder_Init+0x148>)
 8004166:	4013      	ands	r3, r2
 8004168:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	68da      	ldr	r2, [r3, #12]
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	69db      	ldr	r3, [r3, #28]
 8004172:	021b      	lsls	r3, r3, #8
 8004174:	4313      	orrs	r3, r2
 8004176:	693a      	ldr	r2, [r7, #16]
 8004178:	4313      	orrs	r3, r2
 800417a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	691b      	ldr	r3, [r3, #16]
 8004180:	011a      	lsls	r2, r3, #4
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	6a1b      	ldr	r3, [r3, #32]
 8004186:	031b      	lsls	r3, r3, #12
 8004188:	4313      	orrs	r3, r2
 800418a:	693a      	ldr	r2, [r7, #16]
 800418c:	4313      	orrs	r3, r2
 800418e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004196:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800419e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	685a      	ldr	r2, [r3, #4]
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	695b      	ldr	r3, [r3, #20]
 80041a8:	011b      	lsls	r3, r3, #4
 80041aa:	4313      	orrs	r3, r2
 80041ac:	68fa      	ldr	r2, [r7, #12]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	697a      	ldr	r2, [r7, #20]
 80041b8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	693a      	ldr	r2, [r7, #16]
 80041c0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	68fa      	ldr	r2, [r7, #12]
 80041c8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2201      	movs	r2, #1
 80041ce:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2201      	movs	r2, #1
 80041d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2201      	movs	r2, #1
 80041de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2201      	movs	r2, #1
 80041e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2201      	movs	r2, #1
 80041ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2201      	movs	r2, #1
 80041f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041fa:	2300      	movs	r3, #0
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3718      	adds	r7, #24
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}
 8004204:	fffebff8 	.word	0xfffebff8
 8004208:	fffffcfc 	.word	0xfffffcfc
 800420c:	fffff3f3 	.word	0xfffff3f3
 8004210:	ffff0f0f 	.word	0xffff0f0f

08004214 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004224:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800422c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004234:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800423c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d110      	bne.n	8004266 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004244:	7bfb      	ldrb	r3, [r7, #15]
 8004246:	2b01      	cmp	r3, #1
 8004248:	d102      	bne.n	8004250 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800424a:	7b7b      	ldrb	r3, [r7, #13]
 800424c:	2b01      	cmp	r3, #1
 800424e:	d001      	beq.n	8004254 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e069      	b.n	8004328 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2202      	movs	r2, #2
 8004258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2202      	movs	r2, #2
 8004260:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004264:	e031      	b.n	80042ca <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	2b04      	cmp	r3, #4
 800426a:	d110      	bne.n	800428e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800426c:	7bbb      	ldrb	r3, [r7, #14]
 800426e:	2b01      	cmp	r3, #1
 8004270:	d102      	bne.n	8004278 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004272:	7b3b      	ldrb	r3, [r7, #12]
 8004274:	2b01      	cmp	r3, #1
 8004276:	d001      	beq.n	800427c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e055      	b.n	8004328 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2202      	movs	r2, #2
 8004280:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2202      	movs	r2, #2
 8004288:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800428c:	e01d      	b.n	80042ca <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800428e:	7bfb      	ldrb	r3, [r7, #15]
 8004290:	2b01      	cmp	r3, #1
 8004292:	d108      	bne.n	80042a6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004294:	7bbb      	ldrb	r3, [r7, #14]
 8004296:	2b01      	cmp	r3, #1
 8004298:	d105      	bne.n	80042a6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800429a:	7b7b      	ldrb	r3, [r7, #13]
 800429c:	2b01      	cmp	r3, #1
 800429e:	d102      	bne.n	80042a6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80042a0:	7b3b      	ldrb	r3, [r7, #12]
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d001      	beq.n	80042aa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e03e      	b.n	8004328 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2202      	movs	r2, #2
 80042ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2202      	movs	r2, #2
 80042b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2202      	movs	r2, #2
 80042be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2202      	movs	r2, #2
 80042c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d003      	beq.n	80042d8 <HAL_TIM_Encoder_Start+0xc4>
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	2b04      	cmp	r3, #4
 80042d4:	d008      	beq.n	80042e8 <HAL_TIM_Encoder_Start+0xd4>
 80042d6:	e00f      	b.n	80042f8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2201      	movs	r2, #1
 80042de:	2100      	movs	r1, #0
 80042e0:	4618      	mov	r0, r3
 80042e2:	f000 fee3 	bl	80050ac <TIM_CCxChannelCmd>
      break;
 80042e6:	e016      	b.n	8004316 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2201      	movs	r2, #1
 80042ee:	2104      	movs	r1, #4
 80042f0:	4618      	mov	r0, r3
 80042f2:	f000 fedb 	bl	80050ac <TIM_CCxChannelCmd>
      break;
 80042f6:	e00e      	b.n	8004316 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2201      	movs	r2, #1
 80042fe:	2100      	movs	r1, #0
 8004300:	4618      	mov	r0, r3
 8004302:	f000 fed3 	bl	80050ac <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	2201      	movs	r2, #1
 800430c:	2104      	movs	r1, #4
 800430e:	4618      	mov	r0, r3
 8004310:	f000 fecc 	bl	80050ac <TIM_CCxChannelCmd>
      break;
 8004314:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f042 0201 	orr.w	r2, r2, #1
 8004324:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004326:	2300      	movs	r3, #0
}
 8004328:	4618      	mov	r0, r3
 800432a:	3710      	adds	r7, #16
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	f003 0302 	and.w	r3, r3, #2
 8004342:	2b02      	cmp	r3, #2
 8004344:	d122      	bne.n	800438c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	f003 0302 	and.w	r3, r3, #2
 8004350:	2b02      	cmp	r3, #2
 8004352:	d11b      	bne.n	800438c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f06f 0202 	mvn.w	r2, #2
 800435c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2201      	movs	r2, #1
 8004362:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	f003 0303 	and.w	r3, r3, #3
 800436e:	2b00      	cmp	r3, #0
 8004370:	d003      	beq.n	800437a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 fae4 	bl	8004940 <HAL_TIM_IC_CaptureCallback>
 8004378:	e005      	b.n	8004386 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 fad6 	bl	800492c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f000 fae7 	bl	8004954 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	f003 0304 	and.w	r3, r3, #4
 8004396:	2b04      	cmp	r3, #4
 8004398:	d122      	bne.n	80043e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	f003 0304 	and.w	r3, r3, #4
 80043a4:	2b04      	cmp	r3, #4
 80043a6:	d11b      	bne.n	80043e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f06f 0204 	mvn.w	r2, #4
 80043b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2202      	movs	r2, #2
 80043b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	699b      	ldr	r3, [r3, #24]
 80043be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d003      	beq.n	80043ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 faba 	bl	8004940 <HAL_TIM_IC_CaptureCallback>
 80043cc:	e005      	b.n	80043da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 faac 	bl	800492c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f000 fabd 	bl	8004954 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	f003 0308 	and.w	r3, r3, #8
 80043ea:	2b08      	cmp	r3, #8
 80043ec:	d122      	bne.n	8004434 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	f003 0308 	and.w	r3, r3, #8
 80043f8:	2b08      	cmp	r3, #8
 80043fa:	d11b      	bne.n	8004434 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f06f 0208 	mvn.w	r2, #8
 8004404:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2204      	movs	r2, #4
 800440a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	69db      	ldr	r3, [r3, #28]
 8004412:	f003 0303 	and.w	r3, r3, #3
 8004416:	2b00      	cmp	r3, #0
 8004418:	d003      	beq.n	8004422 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 fa90 	bl	8004940 <HAL_TIM_IC_CaptureCallback>
 8004420:	e005      	b.n	800442e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f000 fa82 	bl	800492c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f000 fa93 	bl	8004954 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	f003 0310 	and.w	r3, r3, #16
 800443e:	2b10      	cmp	r3, #16
 8004440:	d122      	bne.n	8004488 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	f003 0310 	and.w	r3, r3, #16
 800444c:	2b10      	cmp	r3, #16
 800444e:	d11b      	bne.n	8004488 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f06f 0210 	mvn.w	r2, #16
 8004458:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2208      	movs	r2, #8
 800445e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	69db      	ldr	r3, [r3, #28]
 8004466:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800446a:	2b00      	cmp	r3, #0
 800446c:	d003      	beq.n	8004476 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f000 fa66 	bl	8004940 <HAL_TIM_IC_CaptureCallback>
 8004474:	e005      	b.n	8004482 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 fa58 	bl	800492c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f000 fa69 	bl	8004954 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	f003 0301 	and.w	r3, r3, #1
 8004492:	2b01      	cmp	r3, #1
 8004494:	d10e      	bne.n	80044b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	f003 0301 	and.w	r3, r3, #1
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d107      	bne.n	80044b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f06f 0201 	mvn.w	r2, #1
 80044ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f7fd f9ec 	bl	800188c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044be:	2b80      	cmp	r3, #128	; 0x80
 80044c0:	d10e      	bne.n	80044e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044cc:	2b80      	cmp	r3, #128	; 0x80
 80044ce:	d107      	bne.n	80044e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80044d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 ff22 	bl	8005324 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044ee:	d10e      	bne.n	800450e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044fa:	2b80      	cmp	r3, #128	; 0x80
 80044fc:	d107      	bne.n	800450e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004506:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f000 ff15 	bl	8005338 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	691b      	ldr	r3, [r3, #16]
 8004514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004518:	2b40      	cmp	r3, #64	; 0x40
 800451a:	d10e      	bne.n	800453a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004526:	2b40      	cmp	r3, #64	; 0x40
 8004528:	d107      	bne.n	800453a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004532:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f000 fa17 	bl	8004968 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	f003 0320 	and.w	r3, r3, #32
 8004544:	2b20      	cmp	r3, #32
 8004546:	d10e      	bne.n	8004566 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	f003 0320 	and.w	r3, r3, #32
 8004552:	2b20      	cmp	r3, #32
 8004554:	d107      	bne.n	8004566 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f06f 0220 	mvn.w	r2, #32
 800455e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f000 fed5 	bl	8005310 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004566:	bf00      	nop
 8004568:	3708      	adds	r7, #8
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
	...

08004570 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b086      	sub	sp, #24
 8004574:	af00      	add	r7, sp, #0
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800457c:	2300      	movs	r3, #0
 800457e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004586:	2b01      	cmp	r3, #1
 8004588:	d101      	bne.n	800458e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800458a:	2302      	movs	r3, #2
 800458c:	e0ff      	b.n	800478e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2201      	movs	r2, #1
 8004592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2b14      	cmp	r3, #20
 800459a:	f200 80f0 	bhi.w	800477e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800459e:	a201      	add	r2, pc, #4	; (adr r2, 80045a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80045a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a4:	080045f9 	.word	0x080045f9
 80045a8:	0800477f 	.word	0x0800477f
 80045ac:	0800477f 	.word	0x0800477f
 80045b0:	0800477f 	.word	0x0800477f
 80045b4:	08004639 	.word	0x08004639
 80045b8:	0800477f 	.word	0x0800477f
 80045bc:	0800477f 	.word	0x0800477f
 80045c0:	0800477f 	.word	0x0800477f
 80045c4:	0800467b 	.word	0x0800467b
 80045c8:	0800477f 	.word	0x0800477f
 80045cc:	0800477f 	.word	0x0800477f
 80045d0:	0800477f 	.word	0x0800477f
 80045d4:	080046bb 	.word	0x080046bb
 80045d8:	0800477f 	.word	0x0800477f
 80045dc:	0800477f 	.word	0x0800477f
 80045e0:	0800477f 	.word	0x0800477f
 80045e4:	080046fd 	.word	0x080046fd
 80045e8:	0800477f 	.word	0x0800477f
 80045ec:	0800477f 	.word	0x0800477f
 80045f0:	0800477f 	.word	0x0800477f
 80045f4:	0800473d 	.word	0x0800473d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	68b9      	ldr	r1, [r7, #8]
 80045fe:	4618      	mov	r0, r3
 8004600:	f000 fa5c 	bl	8004abc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	699a      	ldr	r2, [r3, #24]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f042 0208 	orr.w	r2, r2, #8
 8004612:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	699a      	ldr	r2, [r3, #24]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f022 0204 	bic.w	r2, r2, #4
 8004622:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	6999      	ldr	r1, [r3, #24]
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	691a      	ldr	r2, [r3, #16]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	430a      	orrs	r2, r1
 8004634:	619a      	str	r2, [r3, #24]
      break;
 8004636:	e0a5      	b.n	8004784 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	68b9      	ldr	r1, [r7, #8]
 800463e:	4618      	mov	r0, r3
 8004640:	f000 faae 	bl	8004ba0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	699a      	ldr	r2, [r3, #24]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004652:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	699a      	ldr	r2, [r3, #24]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004662:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	6999      	ldr	r1, [r3, #24]
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	691b      	ldr	r3, [r3, #16]
 800466e:	021a      	lsls	r2, r3, #8
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	430a      	orrs	r2, r1
 8004676:	619a      	str	r2, [r3, #24]
      break;
 8004678:	e084      	b.n	8004784 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68b9      	ldr	r1, [r7, #8]
 8004680:	4618      	mov	r0, r3
 8004682:	f000 fb05 	bl	8004c90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	69da      	ldr	r2, [r3, #28]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f042 0208 	orr.w	r2, r2, #8
 8004694:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	69da      	ldr	r2, [r3, #28]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f022 0204 	bic.w	r2, r2, #4
 80046a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	69d9      	ldr	r1, [r3, #28]
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	691a      	ldr	r2, [r3, #16]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	430a      	orrs	r2, r1
 80046b6:	61da      	str	r2, [r3, #28]
      break;
 80046b8:	e064      	b.n	8004784 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	68b9      	ldr	r1, [r7, #8]
 80046c0:	4618      	mov	r0, r3
 80046c2:	f000 fb5b 	bl	8004d7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	69da      	ldr	r2, [r3, #28]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	69da      	ldr	r2, [r3, #28]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	69d9      	ldr	r1, [r3, #28]
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	021a      	lsls	r2, r3, #8
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	430a      	orrs	r2, r1
 80046f8:	61da      	str	r2, [r3, #28]
      break;
 80046fa:	e043      	b.n	8004784 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68b9      	ldr	r1, [r7, #8]
 8004702:	4618      	mov	r0, r3
 8004704:	f000 fb92 	bl	8004e2c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f042 0208 	orr.w	r2, r2, #8
 8004716:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f022 0204 	bic.w	r2, r2, #4
 8004726:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	691a      	ldr	r2, [r3, #16]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	430a      	orrs	r2, r1
 8004738:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800473a:	e023      	b.n	8004784 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68b9      	ldr	r1, [r7, #8]
 8004742:	4618      	mov	r0, r3
 8004744:	f000 fbc4 	bl	8004ed0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004756:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004766:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	691b      	ldr	r3, [r3, #16]
 8004772:	021a      	lsls	r2, r3, #8
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	430a      	orrs	r2, r1
 800477a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800477c:	e002      	b.n	8004784 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	75fb      	strb	r3, [r7, #23]
      break;
 8004782:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2200      	movs	r2, #0
 8004788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800478c:	7dfb      	ldrb	r3, [r7, #23]
}
 800478e:	4618      	mov	r0, r3
 8004790:	3718      	adds	r7, #24
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop

08004798 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047a2:	2300      	movs	r3, #0
 80047a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d101      	bne.n	80047b4 <HAL_TIM_ConfigClockSource+0x1c>
 80047b0:	2302      	movs	r3, #2
 80047b2:	e0b4      	b.n	800491e <HAL_TIM_ConfigClockSource+0x186>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2202      	movs	r2, #2
 80047c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80047cc:	68ba      	ldr	r2, [r7, #8]
 80047ce:	4b56      	ldr	r3, [pc, #344]	; (8004928 <HAL_TIM_ConfigClockSource+0x190>)
 80047d0:	4013      	ands	r3, r2
 80047d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	68ba      	ldr	r2, [r7, #8]
 80047e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047ec:	d03e      	beq.n	800486c <HAL_TIM_ConfigClockSource+0xd4>
 80047ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047f2:	f200 8087 	bhi.w	8004904 <HAL_TIM_ConfigClockSource+0x16c>
 80047f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047fa:	f000 8086 	beq.w	800490a <HAL_TIM_ConfigClockSource+0x172>
 80047fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004802:	d87f      	bhi.n	8004904 <HAL_TIM_ConfigClockSource+0x16c>
 8004804:	2b70      	cmp	r3, #112	; 0x70
 8004806:	d01a      	beq.n	800483e <HAL_TIM_ConfigClockSource+0xa6>
 8004808:	2b70      	cmp	r3, #112	; 0x70
 800480a:	d87b      	bhi.n	8004904 <HAL_TIM_ConfigClockSource+0x16c>
 800480c:	2b60      	cmp	r3, #96	; 0x60
 800480e:	d050      	beq.n	80048b2 <HAL_TIM_ConfigClockSource+0x11a>
 8004810:	2b60      	cmp	r3, #96	; 0x60
 8004812:	d877      	bhi.n	8004904 <HAL_TIM_ConfigClockSource+0x16c>
 8004814:	2b50      	cmp	r3, #80	; 0x50
 8004816:	d03c      	beq.n	8004892 <HAL_TIM_ConfigClockSource+0xfa>
 8004818:	2b50      	cmp	r3, #80	; 0x50
 800481a:	d873      	bhi.n	8004904 <HAL_TIM_ConfigClockSource+0x16c>
 800481c:	2b40      	cmp	r3, #64	; 0x40
 800481e:	d058      	beq.n	80048d2 <HAL_TIM_ConfigClockSource+0x13a>
 8004820:	2b40      	cmp	r3, #64	; 0x40
 8004822:	d86f      	bhi.n	8004904 <HAL_TIM_ConfigClockSource+0x16c>
 8004824:	2b30      	cmp	r3, #48	; 0x30
 8004826:	d064      	beq.n	80048f2 <HAL_TIM_ConfigClockSource+0x15a>
 8004828:	2b30      	cmp	r3, #48	; 0x30
 800482a:	d86b      	bhi.n	8004904 <HAL_TIM_ConfigClockSource+0x16c>
 800482c:	2b20      	cmp	r3, #32
 800482e:	d060      	beq.n	80048f2 <HAL_TIM_ConfigClockSource+0x15a>
 8004830:	2b20      	cmp	r3, #32
 8004832:	d867      	bhi.n	8004904 <HAL_TIM_ConfigClockSource+0x16c>
 8004834:	2b00      	cmp	r3, #0
 8004836:	d05c      	beq.n	80048f2 <HAL_TIM_ConfigClockSource+0x15a>
 8004838:	2b10      	cmp	r3, #16
 800483a:	d05a      	beq.n	80048f2 <HAL_TIM_ConfigClockSource+0x15a>
 800483c:	e062      	b.n	8004904 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6818      	ldr	r0, [r3, #0]
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	6899      	ldr	r1, [r3, #8]
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	685a      	ldr	r2, [r3, #4]
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	f000 fc0d 	bl	800506c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004860:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	68ba      	ldr	r2, [r7, #8]
 8004868:	609a      	str	r2, [r3, #8]
      break;
 800486a:	e04f      	b.n	800490c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6818      	ldr	r0, [r3, #0]
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	6899      	ldr	r1, [r3, #8]
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	685a      	ldr	r2, [r3, #4]
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	f000 fbf6 	bl	800506c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	689a      	ldr	r2, [r3, #8]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800488e:	609a      	str	r2, [r3, #8]
      break;
 8004890:	e03c      	b.n	800490c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6818      	ldr	r0, [r3, #0]
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	6859      	ldr	r1, [r3, #4]
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	461a      	mov	r2, r3
 80048a0:	f000 fb6a 	bl	8004f78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2150      	movs	r1, #80	; 0x50
 80048aa:	4618      	mov	r0, r3
 80048ac:	f000 fbc3 	bl	8005036 <TIM_ITRx_SetConfig>
      break;
 80048b0:	e02c      	b.n	800490c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6818      	ldr	r0, [r3, #0]
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	6859      	ldr	r1, [r3, #4]
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	461a      	mov	r2, r3
 80048c0:	f000 fb89 	bl	8004fd6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2160      	movs	r1, #96	; 0x60
 80048ca:	4618      	mov	r0, r3
 80048cc:	f000 fbb3 	bl	8005036 <TIM_ITRx_SetConfig>
      break;
 80048d0:	e01c      	b.n	800490c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6818      	ldr	r0, [r3, #0]
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	6859      	ldr	r1, [r3, #4]
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	461a      	mov	r2, r3
 80048e0:	f000 fb4a 	bl	8004f78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2140      	movs	r1, #64	; 0x40
 80048ea:	4618      	mov	r0, r3
 80048ec:	f000 fba3 	bl	8005036 <TIM_ITRx_SetConfig>
      break;
 80048f0:	e00c      	b.n	800490c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4619      	mov	r1, r3
 80048fc:	4610      	mov	r0, r2
 80048fe:	f000 fb9a 	bl	8005036 <TIM_ITRx_SetConfig>
      break;
 8004902:	e003      	b.n	800490c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	73fb      	strb	r3, [r7, #15]
      break;
 8004908:	e000      	b.n	800490c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800490a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800491c:	7bfb      	ldrb	r3, [r7, #15]
}
 800491e:	4618      	mov	r0, r3
 8004920:	3710      	adds	r7, #16
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	fffeff88 	.word	0xfffeff88

0800492c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004934:	bf00      	nop
 8004936:	370c      	adds	r7, #12
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004940:	b480      	push	{r7}
 8004942:	b083      	sub	sp, #12
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004948:	bf00      	nop
 800494a:	370c      	adds	r7, #12
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr

08004954 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004954:	b480      	push	{r7}
 8004956:	b083      	sub	sp, #12
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800495c:	bf00      	nop
 800495e:	370c      	adds	r7, #12
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr

08004968 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004968:	b480      	push	{r7}
 800496a:	b083      	sub	sp, #12
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004970:	bf00      	nop
 8004972:	370c      	adds	r7, #12
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr

0800497c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800497c:	b480      	push	{r7}
 800497e:	b085      	sub	sp, #20
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a40      	ldr	r2, [pc, #256]	; (8004a90 <TIM_Base_SetConfig+0x114>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d013      	beq.n	80049bc <TIM_Base_SetConfig+0x40>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800499a:	d00f      	beq.n	80049bc <TIM_Base_SetConfig+0x40>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a3d      	ldr	r2, [pc, #244]	; (8004a94 <TIM_Base_SetConfig+0x118>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d00b      	beq.n	80049bc <TIM_Base_SetConfig+0x40>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a3c      	ldr	r2, [pc, #240]	; (8004a98 <TIM_Base_SetConfig+0x11c>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d007      	beq.n	80049bc <TIM_Base_SetConfig+0x40>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a3b      	ldr	r2, [pc, #236]	; (8004a9c <TIM_Base_SetConfig+0x120>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d003      	beq.n	80049bc <TIM_Base_SetConfig+0x40>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4a3a      	ldr	r2, [pc, #232]	; (8004aa0 <TIM_Base_SetConfig+0x124>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d108      	bne.n	80049ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	68fa      	ldr	r2, [r7, #12]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a2f      	ldr	r2, [pc, #188]	; (8004a90 <TIM_Base_SetConfig+0x114>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d02b      	beq.n	8004a2e <TIM_Base_SetConfig+0xb2>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049dc:	d027      	beq.n	8004a2e <TIM_Base_SetConfig+0xb2>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a2c      	ldr	r2, [pc, #176]	; (8004a94 <TIM_Base_SetConfig+0x118>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d023      	beq.n	8004a2e <TIM_Base_SetConfig+0xb2>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a2b      	ldr	r2, [pc, #172]	; (8004a98 <TIM_Base_SetConfig+0x11c>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d01f      	beq.n	8004a2e <TIM_Base_SetConfig+0xb2>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a2a      	ldr	r2, [pc, #168]	; (8004a9c <TIM_Base_SetConfig+0x120>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d01b      	beq.n	8004a2e <TIM_Base_SetConfig+0xb2>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a29      	ldr	r2, [pc, #164]	; (8004aa0 <TIM_Base_SetConfig+0x124>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d017      	beq.n	8004a2e <TIM_Base_SetConfig+0xb2>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a28      	ldr	r2, [pc, #160]	; (8004aa4 <TIM_Base_SetConfig+0x128>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d013      	beq.n	8004a2e <TIM_Base_SetConfig+0xb2>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a27      	ldr	r2, [pc, #156]	; (8004aa8 <TIM_Base_SetConfig+0x12c>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d00f      	beq.n	8004a2e <TIM_Base_SetConfig+0xb2>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4a26      	ldr	r2, [pc, #152]	; (8004aac <TIM_Base_SetConfig+0x130>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d00b      	beq.n	8004a2e <TIM_Base_SetConfig+0xb2>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a25      	ldr	r2, [pc, #148]	; (8004ab0 <TIM_Base_SetConfig+0x134>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d007      	beq.n	8004a2e <TIM_Base_SetConfig+0xb2>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a24      	ldr	r2, [pc, #144]	; (8004ab4 <TIM_Base_SetConfig+0x138>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d003      	beq.n	8004a2e <TIM_Base_SetConfig+0xb2>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4a23      	ldr	r2, [pc, #140]	; (8004ab8 <TIM_Base_SetConfig+0x13c>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d108      	bne.n	8004a40 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	68fa      	ldr	r2, [r7, #12]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	695b      	ldr	r3, [r3, #20]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	68fa      	ldr	r2, [r7, #12]
 8004a52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	689a      	ldr	r2, [r3, #8]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4a0a      	ldr	r2, [pc, #40]	; (8004a90 <TIM_Base_SetConfig+0x114>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d003      	beq.n	8004a74 <TIM_Base_SetConfig+0xf8>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	4a0c      	ldr	r2, [pc, #48]	; (8004aa0 <TIM_Base_SetConfig+0x124>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d103      	bne.n	8004a7c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	691a      	ldr	r2, [r3, #16]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	615a      	str	r2, [r3, #20]
}
 8004a82:	bf00      	nop
 8004a84:	3714      	adds	r7, #20
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr
 8004a8e:	bf00      	nop
 8004a90:	40010000 	.word	0x40010000
 8004a94:	40000400 	.word	0x40000400
 8004a98:	40000800 	.word	0x40000800
 8004a9c:	40000c00 	.word	0x40000c00
 8004aa0:	40010400 	.word	0x40010400
 8004aa4:	40014000 	.word	0x40014000
 8004aa8:	40014400 	.word	0x40014400
 8004aac:	40014800 	.word	0x40014800
 8004ab0:	40001800 	.word	0x40001800
 8004ab4:	40001c00 	.word	0x40001c00
 8004ab8:	40002000 	.word	0x40002000

08004abc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b087      	sub	sp, #28
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a1b      	ldr	r3, [r3, #32]
 8004aca:	f023 0201 	bic.w	r2, r3, #1
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a1b      	ldr	r3, [r3, #32]
 8004ad6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	699b      	ldr	r3, [r3, #24]
 8004ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ae4:	68fa      	ldr	r2, [r7, #12]
 8004ae6:	4b2b      	ldr	r3, [pc, #172]	; (8004b94 <TIM_OC1_SetConfig+0xd8>)
 8004ae8:	4013      	ands	r3, r2
 8004aea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f023 0303 	bic.w	r3, r3, #3
 8004af2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68fa      	ldr	r2, [r7, #12]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	f023 0302 	bic.w	r3, r3, #2
 8004b04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	697a      	ldr	r2, [r7, #20]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4a21      	ldr	r2, [pc, #132]	; (8004b98 <TIM_OC1_SetConfig+0xdc>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d003      	beq.n	8004b20 <TIM_OC1_SetConfig+0x64>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4a20      	ldr	r2, [pc, #128]	; (8004b9c <TIM_OC1_SetConfig+0xe0>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d10c      	bne.n	8004b3a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	f023 0308 	bic.w	r3, r3, #8
 8004b26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	697a      	ldr	r2, [r7, #20]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	f023 0304 	bic.w	r3, r3, #4
 8004b38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a16      	ldr	r2, [pc, #88]	; (8004b98 <TIM_OC1_SetConfig+0xdc>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d003      	beq.n	8004b4a <TIM_OC1_SetConfig+0x8e>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a15      	ldr	r2, [pc, #84]	; (8004b9c <TIM_OC1_SetConfig+0xe0>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d111      	bne.n	8004b6e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	695b      	ldr	r3, [r3, #20]
 8004b5e:	693a      	ldr	r2, [r7, #16]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	699b      	ldr	r3, [r3, #24]
 8004b68:	693a      	ldr	r2, [r7, #16]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	693a      	ldr	r2, [r7, #16]
 8004b72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	68fa      	ldr	r2, [r7, #12]
 8004b78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	685a      	ldr	r2, [r3, #4]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	697a      	ldr	r2, [r7, #20]
 8004b86:	621a      	str	r2, [r3, #32]
}
 8004b88:	bf00      	nop
 8004b8a:	371c      	adds	r7, #28
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr
 8004b94:	fffeff8f 	.word	0xfffeff8f
 8004b98:	40010000 	.word	0x40010000
 8004b9c:	40010400 	.word	0x40010400

08004ba0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b087      	sub	sp, #28
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a1b      	ldr	r3, [r3, #32]
 8004bae:	f023 0210 	bic.w	r2, r3, #16
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a1b      	ldr	r3, [r3, #32]
 8004bba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004bc8:	68fa      	ldr	r2, [r7, #12]
 8004bca:	4b2e      	ldr	r3, [pc, #184]	; (8004c84 <TIM_OC2_SetConfig+0xe4>)
 8004bcc:	4013      	ands	r3, r2
 8004bce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	021b      	lsls	r3, r3, #8
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	f023 0320 	bic.w	r3, r3, #32
 8004bea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	011b      	lsls	r3, r3, #4
 8004bf2:	697a      	ldr	r2, [r7, #20]
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	4a23      	ldr	r2, [pc, #140]	; (8004c88 <TIM_OC2_SetConfig+0xe8>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d003      	beq.n	8004c08 <TIM_OC2_SetConfig+0x68>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	4a22      	ldr	r2, [pc, #136]	; (8004c8c <TIM_OC2_SetConfig+0xec>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d10d      	bne.n	8004c24 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	011b      	lsls	r3, r3, #4
 8004c16:	697a      	ldr	r2, [r7, #20]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c22:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4a18      	ldr	r2, [pc, #96]	; (8004c88 <TIM_OC2_SetConfig+0xe8>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d003      	beq.n	8004c34 <TIM_OC2_SetConfig+0x94>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4a17      	ldr	r2, [pc, #92]	; (8004c8c <TIM_OC2_SetConfig+0xec>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d113      	bne.n	8004c5c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	695b      	ldr	r3, [r3, #20]
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	693a      	ldr	r2, [r7, #16]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	699b      	ldr	r3, [r3, #24]
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	693a      	ldr	r2, [r7, #16]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	693a      	ldr	r2, [r7, #16]
 8004c60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	68fa      	ldr	r2, [r7, #12]
 8004c66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	685a      	ldr	r2, [r3, #4]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	697a      	ldr	r2, [r7, #20]
 8004c74:	621a      	str	r2, [r3, #32]
}
 8004c76:	bf00      	nop
 8004c78:	371c      	adds	r7, #28
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop
 8004c84:	feff8fff 	.word	0xfeff8fff
 8004c88:	40010000 	.word	0x40010000
 8004c8c:	40010400 	.word	0x40010400

08004c90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b087      	sub	sp, #28
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a1b      	ldr	r3, [r3, #32]
 8004c9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a1b      	ldr	r3, [r3, #32]
 8004caa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	69db      	ldr	r3, [r3, #28]
 8004cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004cb8:	68fa      	ldr	r2, [r7, #12]
 8004cba:	4b2d      	ldr	r3, [pc, #180]	; (8004d70 <TIM_OC3_SetConfig+0xe0>)
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f023 0303 	bic.w	r3, r3, #3
 8004cc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	68fa      	ldr	r2, [r7, #12]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004cd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	021b      	lsls	r3, r3, #8
 8004ce0:	697a      	ldr	r2, [r7, #20]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a22      	ldr	r2, [pc, #136]	; (8004d74 <TIM_OC3_SetConfig+0xe4>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d003      	beq.n	8004cf6 <TIM_OC3_SetConfig+0x66>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a21      	ldr	r2, [pc, #132]	; (8004d78 <TIM_OC3_SetConfig+0xe8>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d10d      	bne.n	8004d12 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004cfc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	021b      	lsls	r3, r3, #8
 8004d04:	697a      	ldr	r2, [r7, #20]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4a17      	ldr	r2, [pc, #92]	; (8004d74 <TIM_OC3_SetConfig+0xe4>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d003      	beq.n	8004d22 <TIM_OC3_SetConfig+0x92>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4a16      	ldr	r2, [pc, #88]	; (8004d78 <TIM_OC3_SetConfig+0xe8>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d113      	bne.n	8004d4a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	695b      	ldr	r3, [r3, #20]
 8004d36:	011b      	lsls	r3, r3, #4
 8004d38:	693a      	ldr	r2, [r7, #16]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	699b      	ldr	r3, [r3, #24]
 8004d42:	011b      	lsls	r3, r3, #4
 8004d44:	693a      	ldr	r2, [r7, #16]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	693a      	ldr	r2, [r7, #16]
 8004d4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	68fa      	ldr	r2, [r7, #12]
 8004d54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	685a      	ldr	r2, [r3, #4]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	697a      	ldr	r2, [r7, #20]
 8004d62:	621a      	str	r2, [r3, #32]
}
 8004d64:	bf00      	nop
 8004d66:	371c      	adds	r7, #28
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr
 8004d70:	fffeff8f 	.word	0xfffeff8f
 8004d74:	40010000 	.word	0x40010000
 8004d78:	40010400 	.word	0x40010400

08004d7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b087      	sub	sp, #28
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a1b      	ldr	r3, [r3, #32]
 8004d8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a1b      	ldr	r3, [r3, #32]
 8004d96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	69db      	ldr	r3, [r3, #28]
 8004da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004da4:	68fa      	ldr	r2, [r7, #12]
 8004da6:	4b1e      	ldr	r3, [pc, #120]	; (8004e20 <TIM_OC4_SetConfig+0xa4>)
 8004da8:	4013      	ands	r3, r2
 8004daa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004db2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	021b      	lsls	r3, r3, #8
 8004dba:	68fa      	ldr	r2, [r7, #12]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004dc6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	031b      	lsls	r3, r3, #12
 8004dce:	693a      	ldr	r2, [r7, #16]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	4a13      	ldr	r2, [pc, #76]	; (8004e24 <TIM_OC4_SetConfig+0xa8>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d003      	beq.n	8004de4 <TIM_OC4_SetConfig+0x68>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4a12      	ldr	r2, [pc, #72]	; (8004e28 <TIM_OC4_SetConfig+0xac>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d109      	bne.n	8004df8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004dea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	695b      	ldr	r3, [r3, #20]
 8004df0:	019b      	lsls	r3, r3, #6
 8004df2:	697a      	ldr	r2, [r7, #20]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	697a      	ldr	r2, [r7, #20]
 8004dfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	68fa      	ldr	r2, [r7, #12]
 8004e02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	685a      	ldr	r2, [r3, #4]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	693a      	ldr	r2, [r7, #16]
 8004e10:	621a      	str	r2, [r3, #32]
}
 8004e12:	bf00      	nop
 8004e14:	371c      	adds	r7, #28
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr
 8004e1e:	bf00      	nop
 8004e20:	feff8fff 	.word	0xfeff8fff
 8004e24:	40010000 	.word	0x40010000
 8004e28:	40010400 	.word	0x40010400

08004e2c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b087      	sub	sp, #28
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a1b      	ldr	r3, [r3, #32]
 8004e3a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a1b      	ldr	r3, [r3, #32]
 8004e46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004e54:	68fa      	ldr	r2, [r7, #12]
 8004e56:	4b1b      	ldr	r3, [pc, #108]	; (8004ec4 <TIM_OC5_SetConfig+0x98>)
 8004e58:	4013      	ands	r3, r2
 8004e5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	68fa      	ldr	r2, [r7, #12]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004e6c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	041b      	lsls	r3, r3, #16
 8004e74:	693a      	ldr	r2, [r7, #16]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a12      	ldr	r2, [pc, #72]	; (8004ec8 <TIM_OC5_SetConfig+0x9c>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d003      	beq.n	8004e8a <TIM_OC5_SetConfig+0x5e>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a11      	ldr	r2, [pc, #68]	; (8004ecc <TIM_OC5_SetConfig+0xa0>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d109      	bne.n	8004e9e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e90:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	695b      	ldr	r3, [r3, #20]
 8004e96:	021b      	lsls	r3, r3, #8
 8004e98:	697a      	ldr	r2, [r7, #20]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	697a      	ldr	r2, [r7, #20]
 8004ea2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	68fa      	ldr	r2, [r7, #12]
 8004ea8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	685a      	ldr	r2, [r3, #4]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	693a      	ldr	r2, [r7, #16]
 8004eb6:	621a      	str	r2, [r3, #32]
}
 8004eb8:	bf00      	nop
 8004eba:	371c      	adds	r7, #28
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr
 8004ec4:	fffeff8f 	.word	0xfffeff8f
 8004ec8:	40010000 	.word	0x40010000
 8004ecc:	40010400 	.word	0x40010400

08004ed0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b087      	sub	sp, #28
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a1b      	ldr	r3, [r3, #32]
 8004ede:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a1b      	ldr	r3, [r3, #32]
 8004eea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004ef8:	68fa      	ldr	r2, [r7, #12]
 8004efa:	4b1c      	ldr	r3, [pc, #112]	; (8004f6c <TIM_OC6_SetConfig+0x9c>)
 8004efc:	4013      	ands	r3, r2
 8004efe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	021b      	lsls	r3, r3, #8
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004f12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	051b      	lsls	r3, r3, #20
 8004f1a:	693a      	ldr	r2, [r7, #16]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4a13      	ldr	r2, [pc, #76]	; (8004f70 <TIM_OC6_SetConfig+0xa0>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d003      	beq.n	8004f30 <TIM_OC6_SetConfig+0x60>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4a12      	ldr	r2, [pc, #72]	; (8004f74 <TIM_OC6_SetConfig+0xa4>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d109      	bne.n	8004f44 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f36:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	695b      	ldr	r3, [r3, #20]
 8004f3c:	029b      	lsls	r3, r3, #10
 8004f3e:	697a      	ldr	r2, [r7, #20]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	697a      	ldr	r2, [r7, #20]
 8004f48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	685a      	ldr	r2, [r3, #4]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	693a      	ldr	r2, [r7, #16]
 8004f5c:	621a      	str	r2, [r3, #32]
}
 8004f5e:	bf00      	nop
 8004f60:	371c      	adds	r7, #28
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr
 8004f6a:	bf00      	nop
 8004f6c:	feff8fff 	.word	0xfeff8fff
 8004f70:	40010000 	.word	0x40010000
 8004f74:	40010400 	.word	0x40010400

08004f78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b087      	sub	sp, #28
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	60b9      	str	r1, [r7, #8]
 8004f82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6a1b      	ldr	r3, [r3, #32]
 8004f88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	6a1b      	ldr	r3, [r3, #32]
 8004f8e:	f023 0201 	bic.w	r2, r3, #1
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fa2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	011b      	lsls	r3, r3, #4
 8004fa8:	693a      	ldr	r2, [r7, #16]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	f023 030a 	bic.w	r3, r3, #10
 8004fb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	693a      	ldr	r2, [r7, #16]
 8004fc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	697a      	ldr	r2, [r7, #20]
 8004fc8:	621a      	str	r2, [r3, #32]
}
 8004fca:	bf00      	nop
 8004fcc:	371c      	adds	r7, #28
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr

08004fd6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fd6:	b480      	push	{r7}
 8004fd8:	b087      	sub	sp, #28
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	60f8      	str	r0, [r7, #12]
 8004fde:	60b9      	str	r1, [r7, #8]
 8004fe0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	6a1b      	ldr	r3, [r3, #32]
 8004fe6:	f023 0210 	bic.w	r2, r3, #16
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	699b      	ldr	r3, [r3, #24]
 8004ff2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6a1b      	ldr	r3, [r3, #32]
 8004ff8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005000:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	031b      	lsls	r3, r3, #12
 8005006:	697a      	ldr	r2, [r7, #20]
 8005008:	4313      	orrs	r3, r2
 800500a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005012:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	011b      	lsls	r3, r3, #4
 8005018:	693a      	ldr	r2, [r7, #16]
 800501a:	4313      	orrs	r3, r2
 800501c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	697a      	ldr	r2, [r7, #20]
 8005022:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	693a      	ldr	r2, [r7, #16]
 8005028:	621a      	str	r2, [r3, #32]
}
 800502a:	bf00      	nop
 800502c:	371c      	adds	r7, #28
 800502e:	46bd      	mov	sp, r7
 8005030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005034:	4770      	bx	lr

08005036 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005036:	b480      	push	{r7}
 8005038:	b085      	sub	sp, #20
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
 800503e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800504c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800504e:	683a      	ldr	r2, [r7, #0]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	4313      	orrs	r3, r2
 8005054:	f043 0307 	orr.w	r3, r3, #7
 8005058:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	68fa      	ldr	r2, [r7, #12]
 800505e:	609a      	str	r2, [r3, #8]
}
 8005060:	bf00      	nop
 8005062:	3714      	adds	r7, #20
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr

0800506c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800506c:	b480      	push	{r7}
 800506e:	b087      	sub	sp, #28
 8005070:	af00      	add	r7, sp, #0
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	60b9      	str	r1, [r7, #8]
 8005076:	607a      	str	r2, [r7, #4]
 8005078:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005086:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	021a      	lsls	r2, r3, #8
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	431a      	orrs	r2, r3
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	4313      	orrs	r3, r2
 8005094:	697a      	ldr	r2, [r7, #20]
 8005096:	4313      	orrs	r3, r2
 8005098:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	697a      	ldr	r2, [r7, #20]
 800509e:	609a      	str	r2, [r3, #8]
}
 80050a0:	bf00      	nop
 80050a2:	371c      	adds	r7, #28
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr

080050ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b087      	sub	sp, #28
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	60b9      	str	r1, [r7, #8]
 80050b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	f003 031f 	and.w	r3, r3, #31
 80050be:	2201      	movs	r2, #1
 80050c0:	fa02 f303 	lsl.w	r3, r2, r3
 80050c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6a1a      	ldr	r2, [r3, #32]
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	43db      	mvns	r3, r3
 80050ce:	401a      	ands	r2, r3
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6a1a      	ldr	r2, [r3, #32]
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	f003 031f 	and.w	r3, r3, #31
 80050de:	6879      	ldr	r1, [r7, #4]
 80050e0:	fa01 f303 	lsl.w	r3, r1, r3
 80050e4:	431a      	orrs	r2, r3
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	621a      	str	r2, [r3, #32]
}
 80050ea:	bf00      	nop
 80050ec:	371c      	adds	r7, #28
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr
	...

080050f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b085      	sub	sp, #20
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005108:	2b01      	cmp	r3, #1
 800510a:	d101      	bne.n	8005110 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800510c:	2302      	movs	r3, #2
 800510e:	e06d      	b.n	80051ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2202      	movs	r2, #2
 800511c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a30      	ldr	r2, [pc, #192]	; (80051f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d004      	beq.n	8005144 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a2f      	ldr	r2, [pc, #188]	; (80051fc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d108      	bne.n	8005156 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800514a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	68fa      	ldr	r2, [r7, #12]
 8005152:	4313      	orrs	r3, r2
 8005154:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800515c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	4313      	orrs	r3, r2
 8005166:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68fa      	ldr	r2, [r7, #12]
 800516e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a20      	ldr	r2, [pc, #128]	; (80051f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d022      	beq.n	80051c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005182:	d01d      	beq.n	80051c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a1d      	ldr	r2, [pc, #116]	; (8005200 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d018      	beq.n	80051c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a1c      	ldr	r2, [pc, #112]	; (8005204 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d013      	beq.n	80051c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a1a      	ldr	r2, [pc, #104]	; (8005208 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d00e      	beq.n	80051c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a15      	ldr	r2, [pc, #84]	; (80051fc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d009      	beq.n	80051c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a16      	ldr	r2, [pc, #88]	; (800520c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d004      	beq.n	80051c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a15      	ldr	r2, [pc, #84]	; (8005210 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d10c      	bne.n	80051da <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051c6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	68ba      	ldr	r2, [r7, #8]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	68ba      	ldr	r2, [r7, #8]
 80051d8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2201      	movs	r2, #1
 80051de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051ea:	2300      	movs	r3, #0
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3714      	adds	r7, #20
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr
 80051f8:	40010000 	.word	0x40010000
 80051fc:	40010400 	.word	0x40010400
 8005200:	40000400 	.word	0x40000400
 8005204:	40000800 	.word	0x40000800
 8005208:	40000c00 	.word	0x40000c00
 800520c:	40014000 	.word	0x40014000
 8005210:	40001800 	.word	0x40001800

08005214 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005214:	b480      	push	{r7}
 8005216:	b085      	sub	sp, #20
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800521e:	2300      	movs	r3, #0
 8005220:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005228:	2b01      	cmp	r3, #1
 800522a:	d101      	bne.n	8005230 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800522c:	2302      	movs	r3, #2
 800522e:	e065      	b.n	80052fc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	68db      	ldr	r3, [r3, #12]
 8005242:	4313      	orrs	r3, r2
 8005244:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	4313      	orrs	r3, r2
 8005252:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	4313      	orrs	r3, r2
 8005260:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4313      	orrs	r3, r2
 800526e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	4313      	orrs	r3, r2
 800527c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	695b      	ldr	r3, [r3, #20]
 8005288:	4313      	orrs	r3, r2
 800528a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005296:	4313      	orrs	r3, r2
 8005298:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	699b      	ldr	r3, [r3, #24]
 80052a4:	041b      	lsls	r3, r3, #16
 80052a6:	4313      	orrs	r3, r2
 80052a8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a16      	ldr	r2, [pc, #88]	; (8005308 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d004      	beq.n	80052be <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a14      	ldr	r2, [pc, #80]	; (800530c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d115      	bne.n	80052ea <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c8:	051b      	lsls	r3, r3, #20
 80052ca:	4313      	orrs	r3, r2
 80052cc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	69db      	ldr	r3, [r3, #28]
 80052d8:	4313      	orrs	r3, r2
 80052da:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	6a1b      	ldr	r3, [r3, #32]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68fa      	ldr	r2, [r7, #12]
 80052f0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052fa:	2300      	movs	r3, #0
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3714      	adds	r7, #20
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr
 8005308:	40010000 	.word	0x40010000
 800530c:	40010400 	.word	0x40010400

08005310 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005318:	bf00      	nop
 800531a:	370c      	adds	r7, #12
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005324:	b480      	push	{r7}
 8005326:	b083      	sub	sp, #12
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800532c:	bf00      	nop
 800532e:	370c      	adds	r7, #12
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr

08005338 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005340:	bf00      	nop
 8005342:	370c      	adds	r7, #12
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr

0800534c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b082      	sub	sp, #8
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d101      	bne.n	800535e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	e040      	b.n	80053e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005362:	2b00      	cmp	r3, #0
 8005364:	d106      	bne.n	8005374 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f7fc fb7e 	bl	8001a70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2224      	movs	r2, #36	; 0x24
 8005378:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f022 0201 	bic.w	r2, r2, #1
 8005388:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 f8c0 	bl	8005510 <UART_SetConfig>
 8005390:	4603      	mov	r3, r0
 8005392:	2b01      	cmp	r3, #1
 8005394:	d101      	bne.n	800539a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e022      	b.n	80053e0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d002      	beq.n	80053a8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 fb16 	bl	80059d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	685a      	ldr	r2, [r3, #4]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80053b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	689a      	ldr	r2, [r3, #8]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80053c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f042 0201 	orr.w	r2, r2, #1
 80053d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f000 fb9d 	bl	8005b18 <UART_CheckIdleState>
 80053de:	4603      	mov	r3, r0
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3708      	adds	r7, #8
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b08a      	sub	sp, #40	; 0x28
 80053ec:	af02      	add	r7, sp, #8
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	603b      	str	r3, [r7, #0]
 80053f4:	4613      	mov	r3, r2
 80053f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053fc:	2b20      	cmp	r3, #32
 80053fe:	f040 8081 	bne.w	8005504 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d002      	beq.n	800540e <HAL_UART_Transmit+0x26>
 8005408:	88fb      	ldrh	r3, [r7, #6]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d101      	bne.n	8005412 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e079      	b.n	8005506 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005418:	2b01      	cmp	r3, #1
 800541a:	d101      	bne.n	8005420 <HAL_UART_Transmit+0x38>
 800541c:	2302      	movs	r3, #2
 800541e:	e072      	b.n	8005506 <HAL_UART_Transmit+0x11e>
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2200      	movs	r2, #0
 800542c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2221      	movs	r2, #33	; 0x21
 8005434:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005436:	f7fc fc63 	bl	8001d00 <HAL_GetTick>
 800543a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	88fa      	ldrh	r2, [r7, #6]
 8005440:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	88fa      	ldrh	r2, [r7, #6]
 8005448:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005454:	d108      	bne.n	8005468 <HAL_UART_Transmit+0x80>
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d104      	bne.n	8005468 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800545e:	2300      	movs	r3, #0
 8005460:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	61bb      	str	r3, [r7, #24]
 8005466:	e003      	b.n	8005470 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800546c:	2300      	movs	r3, #0
 800546e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2200      	movs	r2, #0
 8005474:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005478:	e02c      	b.n	80054d4 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	9300      	str	r3, [sp, #0]
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	2200      	movs	r2, #0
 8005482:	2180      	movs	r1, #128	; 0x80
 8005484:	68f8      	ldr	r0, [r7, #12]
 8005486:	f000 fb7a 	bl	8005b7e <UART_WaitOnFlagUntilTimeout>
 800548a:	4603      	mov	r3, r0
 800548c:	2b00      	cmp	r3, #0
 800548e:	d001      	beq.n	8005494 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005490:	2303      	movs	r3, #3
 8005492:	e038      	b.n	8005506 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d10b      	bne.n	80054b2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800549a:	69bb      	ldr	r3, [r7, #24]
 800549c:	881b      	ldrh	r3, [r3, #0]
 800549e:	461a      	mov	r2, r3
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054a8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80054aa:	69bb      	ldr	r3, [r7, #24]
 80054ac:	3302      	adds	r3, #2
 80054ae:	61bb      	str	r3, [r7, #24]
 80054b0:	e007      	b.n	80054c2 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80054b2:	69fb      	ldr	r3, [r7, #28]
 80054b4:	781a      	ldrb	r2, [r3, #0]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80054bc:	69fb      	ldr	r3, [r7, #28]
 80054be:	3301      	adds	r3, #1
 80054c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	3b01      	subs	r3, #1
 80054cc:	b29a      	uxth	r2, r3
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80054da:	b29b      	uxth	r3, r3
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d1cc      	bne.n	800547a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	9300      	str	r3, [sp, #0]
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	2200      	movs	r2, #0
 80054e8:	2140      	movs	r1, #64	; 0x40
 80054ea:	68f8      	ldr	r0, [r7, #12]
 80054ec:	f000 fb47 	bl	8005b7e <UART_WaitOnFlagUntilTimeout>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d001      	beq.n	80054fa <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80054f6:	2303      	movs	r3, #3
 80054f8:	e005      	b.n	8005506 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2220      	movs	r2, #32
 80054fe:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005500:	2300      	movs	r3, #0
 8005502:	e000      	b.n	8005506 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005504:	2302      	movs	r3, #2
  }
}
 8005506:	4618      	mov	r0, r3
 8005508:	3720      	adds	r7, #32
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
	...

08005510 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b088      	sub	sp, #32
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005518:	2300      	movs	r3, #0
 800551a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	689a      	ldr	r2, [r3, #8]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	691b      	ldr	r3, [r3, #16]
 8005524:	431a      	orrs	r2, r3
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	695b      	ldr	r3, [r3, #20]
 800552a:	431a      	orrs	r2, r3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	69db      	ldr	r3, [r3, #28]
 8005530:	4313      	orrs	r3, r2
 8005532:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	4ba7      	ldr	r3, [pc, #668]	; (80057d8 <UART_SetConfig+0x2c8>)
 800553c:	4013      	ands	r3, r2
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	6812      	ldr	r2, [r2, #0]
 8005542:	6979      	ldr	r1, [r7, #20]
 8005544:	430b      	orrs	r3, r1
 8005546:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	68da      	ldr	r2, [r3, #12]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	430a      	orrs	r2, r1
 800555c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	699b      	ldr	r3, [r3, #24]
 8005562:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6a1b      	ldr	r3, [r3, #32]
 8005568:	697a      	ldr	r2, [r7, #20]
 800556a:	4313      	orrs	r3, r2
 800556c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	697a      	ldr	r2, [r7, #20]
 800557e:	430a      	orrs	r2, r1
 8005580:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a95      	ldr	r2, [pc, #596]	; (80057dc <UART_SetConfig+0x2cc>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d120      	bne.n	80055ce <UART_SetConfig+0xbe>
 800558c:	4b94      	ldr	r3, [pc, #592]	; (80057e0 <UART_SetConfig+0x2d0>)
 800558e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005592:	f003 0303 	and.w	r3, r3, #3
 8005596:	2b03      	cmp	r3, #3
 8005598:	d816      	bhi.n	80055c8 <UART_SetConfig+0xb8>
 800559a:	a201      	add	r2, pc, #4	; (adr r2, 80055a0 <UART_SetConfig+0x90>)
 800559c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055a0:	080055b1 	.word	0x080055b1
 80055a4:	080055bd 	.word	0x080055bd
 80055a8:	080055b7 	.word	0x080055b7
 80055ac:	080055c3 	.word	0x080055c3
 80055b0:	2301      	movs	r3, #1
 80055b2:	77fb      	strb	r3, [r7, #31]
 80055b4:	e14f      	b.n	8005856 <UART_SetConfig+0x346>
 80055b6:	2302      	movs	r3, #2
 80055b8:	77fb      	strb	r3, [r7, #31]
 80055ba:	e14c      	b.n	8005856 <UART_SetConfig+0x346>
 80055bc:	2304      	movs	r3, #4
 80055be:	77fb      	strb	r3, [r7, #31]
 80055c0:	e149      	b.n	8005856 <UART_SetConfig+0x346>
 80055c2:	2308      	movs	r3, #8
 80055c4:	77fb      	strb	r3, [r7, #31]
 80055c6:	e146      	b.n	8005856 <UART_SetConfig+0x346>
 80055c8:	2310      	movs	r3, #16
 80055ca:	77fb      	strb	r3, [r7, #31]
 80055cc:	e143      	b.n	8005856 <UART_SetConfig+0x346>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a84      	ldr	r2, [pc, #528]	; (80057e4 <UART_SetConfig+0x2d4>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d132      	bne.n	800563e <UART_SetConfig+0x12e>
 80055d8:	4b81      	ldr	r3, [pc, #516]	; (80057e0 <UART_SetConfig+0x2d0>)
 80055da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055de:	f003 030c 	and.w	r3, r3, #12
 80055e2:	2b0c      	cmp	r3, #12
 80055e4:	d828      	bhi.n	8005638 <UART_SetConfig+0x128>
 80055e6:	a201      	add	r2, pc, #4	; (adr r2, 80055ec <UART_SetConfig+0xdc>)
 80055e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ec:	08005621 	.word	0x08005621
 80055f0:	08005639 	.word	0x08005639
 80055f4:	08005639 	.word	0x08005639
 80055f8:	08005639 	.word	0x08005639
 80055fc:	0800562d 	.word	0x0800562d
 8005600:	08005639 	.word	0x08005639
 8005604:	08005639 	.word	0x08005639
 8005608:	08005639 	.word	0x08005639
 800560c:	08005627 	.word	0x08005627
 8005610:	08005639 	.word	0x08005639
 8005614:	08005639 	.word	0x08005639
 8005618:	08005639 	.word	0x08005639
 800561c:	08005633 	.word	0x08005633
 8005620:	2300      	movs	r3, #0
 8005622:	77fb      	strb	r3, [r7, #31]
 8005624:	e117      	b.n	8005856 <UART_SetConfig+0x346>
 8005626:	2302      	movs	r3, #2
 8005628:	77fb      	strb	r3, [r7, #31]
 800562a:	e114      	b.n	8005856 <UART_SetConfig+0x346>
 800562c:	2304      	movs	r3, #4
 800562e:	77fb      	strb	r3, [r7, #31]
 8005630:	e111      	b.n	8005856 <UART_SetConfig+0x346>
 8005632:	2308      	movs	r3, #8
 8005634:	77fb      	strb	r3, [r7, #31]
 8005636:	e10e      	b.n	8005856 <UART_SetConfig+0x346>
 8005638:	2310      	movs	r3, #16
 800563a:	77fb      	strb	r3, [r7, #31]
 800563c:	e10b      	b.n	8005856 <UART_SetConfig+0x346>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a69      	ldr	r2, [pc, #420]	; (80057e8 <UART_SetConfig+0x2d8>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d120      	bne.n	800568a <UART_SetConfig+0x17a>
 8005648:	4b65      	ldr	r3, [pc, #404]	; (80057e0 <UART_SetConfig+0x2d0>)
 800564a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800564e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005652:	2b30      	cmp	r3, #48	; 0x30
 8005654:	d013      	beq.n	800567e <UART_SetConfig+0x16e>
 8005656:	2b30      	cmp	r3, #48	; 0x30
 8005658:	d814      	bhi.n	8005684 <UART_SetConfig+0x174>
 800565a:	2b20      	cmp	r3, #32
 800565c:	d009      	beq.n	8005672 <UART_SetConfig+0x162>
 800565e:	2b20      	cmp	r3, #32
 8005660:	d810      	bhi.n	8005684 <UART_SetConfig+0x174>
 8005662:	2b00      	cmp	r3, #0
 8005664:	d002      	beq.n	800566c <UART_SetConfig+0x15c>
 8005666:	2b10      	cmp	r3, #16
 8005668:	d006      	beq.n	8005678 <UART_SetConfig+0x168>
 800566a:	e00b      	b.n	8005684 <UART_SetConfig+0x174>
 800566c:	2300      	movs	r3, #0
 800566e:	77fb      	strb	r3, [r7, #31]
 8005670:	e0f1      	b.n	8005856 <UART_SetConfig+0x346>
 8005672:	2302      	movs	r3, #2
 8005674:	77fb      	strb	r3, [r7, #31]
 8005676:	e0ee      	b.n	8005856 <UART_SetConfig+0x346>
 8005678:	2304      	movs	r3, #4
 800567a:	77fb      	strb	r3, [r7, #31]
 800567c:	e0eb      	b.n	8005856 <UART_SetConfig+0x346>
 800567e:	2308      	movs	r3, #8
 8005680:	77fb      	strb	r3, [r7, #31]
 8005682:	e0e8      	b.n	8005856 <UART_SetConfig+0x346>
 8005684:	2310      	movs	r3, #16
 8005686:	77fb      	strb	r3, [r7, #31]
 8005688:	e0e5      	b.n	8005856 <UART_SetConfig+0x346>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a57      	ldr	r2, [pc, #348]	; (80057ec <UART_SetConfig+0x2dc>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d120      	bne.n	80056d6 <UART_SetConfig+0x1c6>
 8005694:	4b52      	ldr	r3, [pc, #328]	; (80057e0 <UART_SetConfig+0x2d0>)
 8005696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800569a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800569e:	2bc0      	cmp	r3, #192	; 0xc0
 80056a0:	d013      	beq.n	80056ca <UART_SetConfig+0x1ba>
 80056a2:	2bc0      	cmp	r3, #192	; 0xc0
 80056a4:	d814      	bhi.n	80056d0 <UART_SetConfig+0x1c0>
 80056a6:	2b80      	cmp	r3, #128	; 0x80
 80056a8:	d009      	beq.n	80056be <UART_SetConfig+0x1ae>
 80056aa:	2b80      	cmp	r3, #128	; 0x80
 80056ac:	d810      	bhi.n	80056d0 <UART_SetConfig+0x1c0>
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d002      	beq.n	80056b8 <UART_SetConfig+0x1a8>
 80056b2:	2b40      	cmp	r3, #64	; 0x40
 80056b4:	d006      	beq.n	80056c4 <UART_SetConfig+0x1b4>
 80056b6:	e00b      	b.n	80056d0 <UART_SetConfig+0x1c0>
 80056b8:	2300      	movs	r3, #0
 80056ba:	77fb      	strb	r3, [r7, #31]
 80056bc:	e0cb      	b.n	8005856 <UART_SetConfig+0x346>
 80056be:	2302      	movs	r3, #2
 80056c0:	77fb      	strb	r3, [r7, #31]
 80056c2:	e0c8      	b.n	8005856 <UART_SetConfig+0x346>
 80056c4:	2304      	movs	r3, #4
 80056c6:	77fb      	strb	r3, [r7, #31]
 80056c8:	e0c5      	b.n	8005856 <UART_SetConfig+0x346>
 80056ca:	2308      	movs	r3, #8
 80056cc:	77fb      	strb	r3, [r7, #31]
 80056ce:	e0c2      	b.n	8005856 <UART_SetConfig+0x346>
 80056d0:	2310      	movs	r3, #16
 80056d2:	77fb      	strb	r3, [r7, #31]
 80056d4:	e0bf      	b.n	8005856 <UART_SetConfig+0x346>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a45      	ldr	r2, [pc, #276]	; (80057f0 <UART_SetConfig+0x2e0>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d125      	bne.n	800572c <UART_SetConfig+0x21c>
 80056e0:	4b3f      	ldr	r3, [pc, #252]	; (80057e0 <UART_SetConfig+0x2d0>)
 80056e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056ee:	d017      	beq.n	8005720 <UART_SetConfig+0x210>
 80056f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056f4:	d817      	bhi.n	8005726 <UART_SetConfig+0x216>
 80056f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056fa:	d00b      	beq.n	8005714 <UART_SetConfig+0x204>
 80056fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005700:	d811      	bhi.n	8005726 <UART_SetConfig+0x216>
 8005702:	2b00      	cmp	r3, #0
 8005704:	d003      	beq.n	800570e <UART_SetConfig+0x1fe>
 8005706:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800570a:	d006      	beq.n	800571a <UART_SetConfig+0x20a>
 800570c:	e00b      	b.n	8005726 <UART_SetConfig+0x216>
 800570e:	2300      	movs	r3, #0
 8005710:	77fb      	strb	r3, [r7, #31]
 8005712:	e0a0      	b.n	8005856 <UART_SetConfig+0x346>
 8005714:	2302      	movs	r3, #2
 8005716:	77fb      	strb	r3, [r7, #31]
 8005718:	e09d      	b.n	8005856 <UART_SetConfig+0x346>
 800571a:	2304      	movs	r3, #4
 800571c:	77fb      	strb	r3, [r7, #31]
 800571e:	e09a      	b.n	8005856 <UART_SetConfig+0x346>
 8005720:	2308      	movs	r3, #8
 8005722:	77fb      	strb	r3, [r7, #31]
 8005724:	e097      	b.n	8005856 <UART_SetConfig+0x346>
 8005726:	2310      	movs	r3, #16
 8005728:	77fb      	strb	r3, [r7, #31]
 800572a:	e094      	b.n	8005856 <UART_SetConfig+0x346>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a30      	ldr	r2, [pc, #192]	; (80057f4 <UART_SetConfig+0x2e4>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d125      	bne.n	8005782 <UART_SetConfig+0x272>
 8005736:	4b2a      	ldr	r3, [pc, #168]	; (80057e0 <UART_SetConfig+0x2d0>)
 8005738:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800573c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005740:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005744:	d017      	beq.n	8005776 <UART_SetConfig+0x266>
 8005746:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800574a:	d817      	bhi.n	800577c <UART_SetConfig+0x26c>
 800574c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005750:	d00b      	beq.n	800576a <UART_SetConfig+0x25a>
 8005752:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005756:	d811      	bhi.n	800577c <UART_SetConfig+0x26c>
 8005758:	2b00      	cmp	r3, #0
 800575a:	d003      	beq.n	8005764 <UART_SetConfig+0x254>
 800575c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005760:	d006      	beq.n	8005770 <UART_SetConfig+0x260>
 8005762:	e00b      	b.n	800577c <UART_SetConfig+0x26c>
 8005764:	2301      	movs	r3, #1
 8005766:	77fb      	strb	r3, [r7, #31]
 8005768:	e075      	b.n	8005856 <UART_SetConfig+0x346>
 800576a:	2302      	movs	r3, #2
 800576c:	77fb      	strb	r3, [r7, #31]
 800576e:	e072      	b.n	8005856 <UART_SetConfig+0x346>
 8005770:	2304      	movs	r3, #4
 8005772:	77fb      	strb	r3, [r7, #31]
 8005774:	e06f      	b.n	8005856 <UART_SetConfig+0x346>
 8005776:	2308      	movs	r3, #8
 8005778:	77fb      	strb	r3, [r7, #31]
 800577a:	e06c      	b.n	8005856 <UART_SetConfig+0x346>
 800577c:	2310      	movs	r3, #16
 800577e:	77fb      	strb	r3, [r7, #31]
 8005780:	e069      	b.n	8005856 <UART_SetConfig+0x346>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a1c      	ldr	r2, [pc, #112]	; (80057f8 <UART_SetConfig+0x2e8>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d137      	bne.n	80057fc <UART_SetConfig+0x2ec>
 800578c:	4b14      	ldr	r3, [pc, #80]	; (80057e0 <UART_SetConfig+0x2d0>)
 800578e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005792:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005796:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800579a:	d017      	beq.n	80057cc <UART_SetConfig+0x2bc>
 800579c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80057a0:	d817      	bhi.n	80057d2 <UART_SetConfig+0x2c2>
 80057a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057a6:	d00b      	beq.n	80057c0 <UART_SetConfig+0x2b0>
 80057a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057ac:	d811      	bhi.n	80057d2 <UART_SetConfig+0x2c2>
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d003      	beq.n	80057ba <UART_SetConfig+0x2aa>
 80057b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057b6:	d006      	beq.n	80057c6 <UART_SetConfig+0x2b6>
 80057b8:	e00b      	b.n	80057d2 <UART_SetConfig+0x2c2>
 80057ba:	2300      	movs	r3, #0
 80057bc:	77fb      	strb	r3, [r7, #31]
 80057be:	e04a      	b.n	8005856 <UART_SetConfig+0x346>
 80057c0:	2302      	movs	r3, #2
 80057c2:	77fb      	strb	r3, [r7, #31]
 80057c4:	e047      	b.n	8005856 <UART_SetConfig+0x346>
 80057c6:	2304      	movs	r3, #4
 80057c8:	77fb      	strb	r3, [r7, #31]
 80057ca:	e044      	b.n	8005856 <UART_SetConfig+0x346>
 80057cc:	2308      	movs	r3, #8
 80057ce:	77fb      	strb	r3, [r7, #31]
 80057d0:	e041      	b.n	8005856 <UART_SetConfig+0x346>
 80057d2:	2310      	movs	r3, #16
 80057d4:	77fb      	strb	r3, [r7, #31]
 80057d6:	e03e      	b.n	8005856 <UART_SetConfig+0x346>
 80057d8:	efff69f3 	.word	0xefff69f3
 80057dc:	40011000 	.word	0x40011000
 80057e0:	40023800 	.word	0x40023800
 80057e4:	40004400 	.word	0x40004400
 80057e8:	40004800 	.word	0x40004800
 80057ec:	40004c00 	.word	0x40004c00
 80057f0:	40005000 	.word	0x40005000
 80057f4:	40011400 	.word	0x40011400
 80057f8:	40007800 	.word	0x40007800
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a71      	ldr	r2, [pc, #452]	; (80059c8 <UART_SetConfig+0x4b8>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d125      	bne.n	8005852 <UART_SetConfig+0x342>
 8005806:	4b71      	ldr	r3, [pc, #452]	; (80059cc <UART_SetConfig+0x4bc>)
 8005808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800580c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005810:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005814:	d017      	beq.n	8005846 <UART_SetConfig+0x336>
 8005816:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800581a:	d817      	bhi.n	800584c <UART_SetConfig+0x33c>
 800581c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005820:	d00b      	beq.n	800583a <UART_SetConfig+0x32a>
 8005822:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005826:	d811      	bhi.n	800584c <UART_SetConfig+0x33c>
 8005828:	2b00      	cmp	r3, #0
 800582a:	d003      	beq.n	8005834 <UART_SetConfig+0x324>
 800582c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005830:	d006      	beq.n	8005840 <UART_SetConfig+0x330>
 8005832:	e00b      	b.n	800584c <UART_SetConfig+0x33c>
 8005834:	2300      	movs	r3, #0
 8005836:	77fb      	strb	r3, [r7, #31]
 8005838:	e00d      	b.n	8005856 <UART_SetConfig+0x346>
 800583a:	2302      	movs	r3, #2
 800583c:	77fb      	strb	r3, [r7, #31]
 800583e:	e00a      	b.n	8005856 <UART_SetConfig+0x346>
 8005840:	2304      	movs	r3, #4
 8005842:	77fb      	strb	r3, [r7, #31]
 8005844:	e007      	b.n	8005856 <UART_SetConfig+0x346>
 8005846:	2308      	movs	r3, #8
 8005848:	77fb      	strb	r3, [r7, #31]
 800584a:	e004      	b.n	8005856 <UART_SetConfig+0x346>
 800584c:	2310      	movs	r3, #16
 800584e:	77fb      	strb	r3, [r7, #31]
 8005850:	e001      	b.n	8005856 <UART_SetConfig+0x346>
 8005852:	2310      	movs	r3, #16
 8005854:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	69db      	ldr	r3, [r3, #28]
 800585a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800585e:	d15a      	bne.n	8005916 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8005860:	7ffb      	ldrb	r3, [r7, #31]
 8005862:	2b08      	cmp	r3, #8
 8005864:	d827      	bhi.n	80058b6 <UART_SetConfig+0x3a6>
 8005866:	a201      	add	r2, pc, #4	; (adr r2, 800586c <UART_SetConfig+0x35c>)
 8005868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800586c:	08005891 	.word	0x08005891
 8005870:	08005899 	.word	0x08005899
 8005874:	080058a1 	.word	0x080058a1
 8005878:	080058b7 	.word	0x080058b7
 800587c:	080058a7 	.word	0x080058a7
 8005880:	080058b7 	.word	0x080058b7
 8005884:	080058b7 	.word	0x080058b7
 8005888:	080058b7 	.word	0x080058b7
 800588c:	080058af 	.word	0x080058af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005890:	f7fd fda8 	bl	80033e4 <HAL_RCC_GetPCLK1Freq>
 8005894:	61b8      	str	r0, [r7, #24]
        break;
 8005896:	e013      	b.n	80058c0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005898:	f7fd fdb8 	bl	800340c <HAL_RCC_GetPCLK2Freq>
 800589c:	61b8      	str	r0, [r7, #24]
        break;
 800589e:	e00f      	b.n	80058c0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058a0:	4b4b      	ldr	r3, [pc, #300]	; (80059d0 <UART_SetConfig+0x4c0>)
 80058a2:	61bb      	str	r3, [r7, #24]
        break;
 80058a4:	e00c      	b.n	80058c0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058a6:	f7fd fcaf 	bl	8003208 <HAL_RCC_GetSysClockFreq>
 80058aa:	61b8      	str	r0, [r7, #24]
        break;
 80058ac:	e008      	b.n	80058c0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058b2:	61bb      	str	r3, [r7, #24]
        break;
 80058b4:	e004      	b.n	80058c0 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80058b6:	2300      	movs	r3, #0
 80058b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	77bb      	strb	r3, [r7, #30]
        break;
 80058be:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80058c0:	69bb      	ldr	r3, [r7, #24]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d074      	beq.n	80059b0 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80058c6:	69bb      	ldr	r3, [r7, #24]
 80058c8:	005a      	lsls	r2, r3, #1
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	085b      	lsrs	r3, r3, #1
 80058d0:	441a      	add	r2, r3
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80058da:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	2b0f      	cmp	r3, #15
 80058e0:	d916      	bls.n	8005910 <UART_SetConfig+0x400>
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058e8:	d212      	bcs.n	8005910 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	f023 030f 	bic.w	r3, r3, #15
 80058f2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	085b      	lsrs	r3, r3, #1
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	f003 0307 	and.w	r3, r3, #7
 80058fe:	b29a      	uxth	r2, r3
 8005900:	89fb      	ldrh	r3, [r7, #14]
 8005902:	4313      	orrs	r3, r2
 8005904:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	89fa      	ldrh	r2, [r7, #14]
 800590c:	60da      	str	r2, [r3, #12]
 800590e:	e04f      	b.n	80059b0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	77bb      	strb	r3, [r7, #30]
 8005914:	e04c      	b.n	80059b0 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005916:	7ffb      	ldrb	r3, [r7, #31]
 8005918:	2b08      	cmp	r3, #8
 800591a:	d828      	bhi.n	800596e <UART_SetConfig+0x45e>
 800591c:	a201      	add	r2, pc, #4	; (adr r2, 8005924 <UART_SetConfig+0x414>)
 800591e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005922:	bf00      	nop
 8005924:	08005949 	.word	0x08005949
 8005928:	08005951 	.word	0x08005951
 800592c:	08005959 	.word	0x08005959
 8005930:	0800596f 	.word	0x0800596f
 8005934:	0800595f 	.word	0x0800595f
 8005938:	0800596f 	.word	0x0800596f
 800593c:	0800596f 	.word	0x0800596f
 8005940:	0800596f 	.word	0x0800596f
 8005944:	08005967 	.word	0x08005967
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005948:	f7fd fd4c 	bl	80033e4 <HAL_RCC_GetPCLK1Freq>
 800594c:	61b8      	str	r0, [r7, #24]
        break;
 800594e:	e013      	b.n	8005978 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005950:	f7fd fd5c 	bl	800340c <HAL_RCC_GetPCLK2Freq>
 8005954:	61b8      	str	r0, [r7, #24]
        break;
 8005956:	e00f      	b.n	8005978 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005958:	4b1d      	ldr	r3, [pc, #116]	; (80059d0 <UART_SetConfig+0x4c0>)
 800595a:	61bb      	str	r3, [r7, #24]
        break;
 800595c:	e00c      	b.n	8005978 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800595e:	f7fd fc53 	bl	8003208 <HAL_RCC_GetSysClockFreq>
 8005962:	61b8      	str	r0, [r7, #24]
        break;
 8005964:	e008      	b.n	8005978 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005966:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800596a:	61bb      	str	r3, [r7, #24]
        break;
 800596c:	e004      	b.n	8005978 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800596e:	2300      	movs	r3, #0
 8005970:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	77bb      	strb	r3, [r7, #30]
        break;
 8005976:	bf00      	nop
    }

    if (pclk != 0U)
 8005978:	69bb      	ldr	r3, [r7, #24]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d018      	beq.n	80059b0 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	085a      	lsrs	r2, r3, #1
 8005984:	69bb      	ldr	r3, [r7, #24]
 8005986:	441a      	add	r2, r3
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005990:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	2b0f      	cmp	r3, #15
 8005996:	d909      	bls.n	80059ac <UART_SetConfig+0x49c>
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800599e:	d205      	bcs.n	80059ac <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	b29a      	uxth	r2, r3
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	60da      	str	r2, [r3, #12]
 80059aa:	e001      	b.n	80059b0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2200      	movs	r2, #0
 80059ba:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80059bc:	7fbb      	ldrb	r3, [r7, #30]
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3720      	adds	r7, #32
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	bf00      	nop
 80059c8:	40007c00 	.word	0x40007c00
 80059cc:	40023800 	.word	0x40023800
 80059d0:	00f42400 	.word	0x00f42400

080059d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e0:	f003 0301 	and.w	r3, r3, #1
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d00a      	beq.n	80059fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	430a      	orrs	r2, r1
 80059fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a02:	f003 0302 	and.w	r3, r3, #2
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d00a      	beq.n	8005a20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	430a      	orrs	r2, r1
 8005a1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a24:	f003 0304 	and.w	r3, r3, #4
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d00a      	beq.n	8005a42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	430a      	orrs	r2, r1
 8005a40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a46:	f003 0308 	and.w	r3, r3, #8
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d00a      	beq.n	8005a64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	430a      	orrs	r2, r1
 8005a62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a68:	f003 0310 	and.w	r3, r3, #16
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d00a      	beq.n	8005a86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	430a      	orrs	r2, r1
 8005a84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8a:	f003 0320 	and.w	r3, r3, #32
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d00a      	beq.n	8005aa8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	430a      	orrs	r2, r1
 8005aa6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d01a      	beq.n	8005aea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	430a      	orrs	r2, r1
 8005ac8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ace:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ad2:	d10a      	bne.n	8005aea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	430a      	orrs	r2, r1
 8005ae8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d00a      	beq.n	8005b0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	430a      	orrs	r2, r1
 8005b0a:	605a      	str	r2, [r3, #4]
  }
}
 8005b0c:	bf00      	nop
 8005b0e:	370c      	adds	r7, #12
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b086      	sub	sp, #24
 8005b1c:	af02      	add	r7, sp, #8
 8005b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b28:	f7fc f8ea 	bl	8001d00 <HAL_GetTick>
 8005b2c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 0308 	and.w	r3, r3, #8
 8005b38:	2b08      	cmp	r3, #8
 8005b3a:	d10e      	bne.n	8005b5a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b40:	9300      	str	r3, [sp, #0]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 f817 	bl	8005b7e <UART_WaitOnFlagUntilTimeout>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d001      	beq.n	8005b5a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b56:	2303      	movs	r3, #3
 8005b58:	e00d      	b.n	8005b76 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2220      	movs	r2, #32
 8005b5e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2220      	movs	r2, #32
 8005b64:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005b74:	2300      	movs	r3, #0
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3710      	adds	r7, #16
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}

08005b7e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b7e:	b580      	push	{r7, lr}
 8005b80:	b09c      	sub	sp, #112	; 0x70
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	60f8      	str	r0, [r7, #12]
 8005b86:	60b9      	str	r1, [r7, #8]
 8005b88:	603b      	str	r3, [r7, #0]
 8005b8a:	4613      	mov	r3, r2
 8005b8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b8e:	e0a5      	b.n	8005cdc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b96:	f000 80a1 	beq.w	8005cdc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b9a:	f7fc f8b1 	bl	8001d00 <HAL_GetTick>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	1ad3      	subs	r3, r2, r3
 8005ba4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d302      	bcc.n	8005bb0 <UART_WaitOnFlagUntilTimeout+0x32>
 8005baa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d13e      	bne.n	8005c2e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bb8:	e853 3f00 	ldrex	r3, [r3]
 8005bbc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005bbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bc0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005bc4:	667b      	str	r3, [r7, #100]	; 0x64
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	461a      	mov	r2, r3
 8005bcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bce:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005bd0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005bd4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005bd6:	e841 2300 	strex	r3, r2, [r1]
 8005bda:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005bdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d1e6      	bne.n	8005bb0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	3308      	adds	r3, #8
 8005be8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bec:	e853 3f00 	ldrex	r3, [r3]
 8005bf0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bf4:	f023 0301 	bic.w	r3, r3, #1
 8005bf8:	663b      	str	r3, [r7, #96]	; 0x60
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	3308      	adds	r3, #8
 8005c00:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005c02:	64ba      	str	r2, [r7, #72]	; 0x48
 8005c04:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c06:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005c08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c0a:	e841 2300 	strex	r3, r2, [r1]
 8005c0e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005c10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d1e5      	bne.n	8005be2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2220      	movs	r2, #32
 8005c1a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2220      	movs	r2, #32
 8005c20:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2200      	movs	r2, #0
 8005c26:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005c2a:	2303      	movs	r3, #3
 8005c2c:	e067      	b.n	8005cfe <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 0304 	and.w	r3, r3, #4
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d04f      	beq.n	8005cdc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	69db      	ldr	r3, [r3, #28]
 8005c42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c4a:	d147      	bne.n	8005cdc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c54:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c5e:	e853 3f00 	ldrex	r3, [r3]
 8005c62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c66:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005c6a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	461a      	mov	r2, r3
 8005c72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c74:	637b      	str	r3, [r7, #52]	; 0x34
 8005c76:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c7c:	e841 2300 	strex	r3, r2, [r1]
 8005c80:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d1e6      	bne.n	8005c56 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	3308      	adds	r3, #8
 8005c8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	e853 3f00 	ldrex	r3, [r3]
 8005c96:	613b      	str	r3, [r7, #16]
   return(result);
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	f023 0301 	bic.w	r3, r3, #1
 8005c9e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	3308      	adds	r3, #8
 8005ca6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005ca8:	623a      	str	r2, [r7, #32]
 8005caa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cac:	69f9      	ldr	r1, [r7, #28]
 8005cae:	6a3a      	ldr	r2, [r7, #32]
 8005cb0:	e841 2300 	strex	r3, r2, [r1]
 8005cb4:	61bb      	str	r3, [r7, #24]
   return(result);
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d1e5      	bne.n	8005c88 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2220      	movs	r2, #32
 8005cc0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2220      	movs	r2, #32
 8005cc6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2220      	movs	r2, #32
 8005ccc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005cd8:	2303      	movs	r3, #3
 8005cda:	e010      	b.n	8005cfe <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	69da      	ldr	r2, [r3, #28]
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	68ba      	ldr	r2, [r7, #8]
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	bf0c      	ite	eq
 8005cec:	2301      	moveq	r3, #1
 8005cee:	2300      	movne	r3, #0
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	79fb      	ldrb	r3, [r7, #7]
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	f43f af4a 	beq.w	8005b90 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005cfc:	2300      	movs	r3, #0
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3770      	adds	r7, #112	; 0x70
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}
	...

08005d08 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d08:	b084      	sub	sp, #16
 8005d0a:	b580      	push	{r7, lr}
 8005d0c:	b084      	sub	sp, #16
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	6078      	str	r0, [r7, #4]
 8005d12:	f107 001c 	add.w	r0, r7, #28
 8005d16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d120      	bne.n	8005d62 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d24:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	68da      	ldr	r2, [r3, #12]
 8005d30:	4b20      	ldr	r3, [pc, #128]	; (8005db4 <USB_CoreInit+0xac>)
 8005d32:	4013      	ands	r3, r2
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005d44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d105      	bne.n	8005d56 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f000 fa92 	bl	8006280 <USB_CoreReset>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	73fb      	strb	r3, [r7, #15]
 8005d60:	e010      	b.n	8005d84 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	68db      	ldr	r3, [r3, #12]
 8005d66:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f000 fa86 	bl	8006280 <USB_CoreReset>
 8005d74:	4603      	mov	r3, r0
 8005d76:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d7c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d10b      	bne.n	8005da2 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	f043 0206 	orr.w	r2, r3, #6
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	f043 0220 	orr.w	r2, r3, #32
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3710      	adds	r7, #16
 8005da8:	46bd      	mov	sp, r7
 8005daa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005dae:	b004      	add	sp, #16
 8005db0:	4770      	bx	lr
 8005db2:	bf00      	nop
 8005db4:	ffbdffbf 	.word	0xffbdffbf

08005db8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b083      	sub	sp, #12
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	f023 0201 	bic.w	r2, r3, #1
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005dcc:	2300      	movs	r3, #0
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	370c      	adds	r7, #12
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr

08005dda <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005dda:	b580      	push	{r7, lr}
 8005ddc:	b084      	sub	sp, #16
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	6078      	str	r0, [r7, #4]
 8005de2:	460b      	mov	r3, r1
 8005de4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005de6:	2300      	movs	r3, #0
 8005de8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005df6:	78fb      	ldrb	r3, [r7, #3]
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d115      	bne.n	8005e28 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005e08:	2001      	movs	r0, #1
 8005e0a:	f7fb ff85 	bl	8001d18 <HAL_Delay>
      ms++;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	3301      	adds	r3, #1
 8005e12:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f000 fa25 	bl	8006264 <USB_GetMode>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d01e      	beq.n	8005e5e <USB_SetCurrentMode+0x84>
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2b31      	cmp	r3, #49	; 0x31
 8005e24:	d9f0      	bls.n	8005e08 <USB_SetCurrentMode+0x2e>
 8005e26:	e01a      	b.n	8005e5e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005e28:	78fb      	ldrb	r3, [r7, #3]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d115      	bne.n	8005e5a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	68db      	ldr	r3, [r3, #12]
 8005e32:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005e3a:	2001      	movs	r0, #1
 8005e3c:	f7fb ff6c 	bl	8001d18 <HAL_Delay>
      ms++;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	3301      	adds	r3, #1
 8005e44:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 fa0c 	bl	8006264 <USB_GetMode>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d005      	beq.n	8005e5e <USB_SetCurrentMode+0x84>
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2b31      	cmp	r3, #49	; 0x31
 8005e56:	d9f0      	bls.n	8005e3a <USB_SetCurrentMode+0x60>
 8005e58:	e001      	b.n	8005e5e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e005      	b.n	8005e6a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2b32      	cmp	r3, #50	; 0x32
 8005e62:	d101      	bne.n	8005e68 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	e000      	b.n	8005e6a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005e68:	2300      	movs	r3, #0
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3710      	adds	r7, #16
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
	...

08005e74 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e74:	b084      	sub	sp, #16
 8005e76:	b580      	push	{r7, lr}
 8005e78:	b086      	sub	sp, #24
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	6078      	str	r0, [r7, #4]
 8005e7e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005e82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005e86:	2300      	movs	r3, #0
 8005e88:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005e8e:	2300      	movs	r3, #0
 8005e90:	613b      	str	r3, [r7, #16]
 8005e92:	e009      	b.n	8005ea8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	3340      	adds	r3, #64	; 0x40
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	4413      	add	r3, r2
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	613b      	str	r3, [r7, #16]
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	2b0e      	cmp	r3, #14
 8005eac:	d9f2      	bls.n	8005e94 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005eae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d11c      	bne.n	8005eee <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	68fa      	ldr	r2, [r7, #12]
 8005ebe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ec2:	f043 0302 	orr.w	r3, r3, #2
 8005ec6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ecc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	601a      	str	r2, [r3, #0]
 8005eec:	e005      	b.n	8005efa <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005f00:	461a      	mov	r2, r3
 8005f02:	2300      	movs	r3, #0
 8005f04:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f0c:	4619      	mov	r1, r3
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f14:	461a      	mov	r2, r3
 8005f16:	680b      	ldr	r3, [r1, #0]
 8005f18:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d10c      	bne.n	8005f3a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d104      	bne.n	8005f30 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005f26:	2100      	movs	r1, #0
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f000 f961 	bl	80061f0 <USB_SetDevSpeed>
 8005f2e:	e008      	b.n	8005f42 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005f30:	2101      	movs	r1, #1
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f000 f95c 	bl	80061f0 <USB_SetDevSpeed>
 8005f38:	e003      	b.n	8005f42 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005f3a:	2103      	movs	r1, #3
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f000 f957 	bl	80061f0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005f42:	2110      	movs	r1, #16
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f000 f8f3 	bl	8006130 <USB_FlushTxFifo>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d001      	beq.n	8005f54 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f000 f91d 	bl	8006194 <USB_FlushRxFifo>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d001      	beq.n	8005f64 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005f60:	2301      	movs	r3, #1
 8005f62:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f76:	461a      	mov	r2, r3
 8005f78:	2300      	movs	r3, #0
 8005f7a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f82:	461a      	mov	r2, r3
 8005f84:	2300      	movs	r3, #0
 8005f86:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f88:	2300      	movs	r3, #0
 8005f8a:	613b      	str	r3, [r7, #16]
 8005f8c:	e043      	b.n	8006016 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	015a      	lsls	r2, r3, #5
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	4413      	add	r3, r2
 8005f96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fa0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fa4:	d118      	bne.n	8005fd8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d10a      	bne.n	8005fc2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	015a      	lsls	r2, r3, #5
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	4413      	add	r3, r2
 8005fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fb8:	461a      	mov	r2, r3
 8005fba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005fbe:	6013      	str	r3, [r2, #0]
 8005fc0:	e013      	b.n	8005fea <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	015a      	lsls	r2, r3, #5
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	4413      	add	r3, r2
 8005fca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fce:	461a      	mov	r2, r3
 8005fd0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005fd4:	6013      	str	r3, [r2, #0]
 8005fd6:	e008      	b.n	8005fea <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	015a      	lsls	r2, r3, #5
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	4413      	add	r3, r2
 8005fe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	015a      	lsls	r2, r3, #5
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	4413      	add	r3, r2
 8005ff2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	015a      	lsls	r2, r3, #5
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	4413      	add	r3, r2
 8006004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006008:	461a      	mov	r2, r3
 800600a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800600e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	3301      	adds	r3, #1
 8006014:	613b      	str	r3, [r7, #16]
 8006016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006018:	693a      	ldr	r2, [r7, #16]
 800601a:	429a      	cmp	r2, r3
 800601c:	d3b7      	bcc.n	8005f8e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800601e:	2300      	movs	r3, #0
 8006020:	613b      	str	r3, [r7, #16]
 8006022:	e043      	b.n	80060ac <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	015a      	lsls	r2, r3, #5
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	4413      	add	r3, r2
 800602c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006036:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800603a:	d118      	bne.n	800606e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d10a      	bne.n	8006058 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	015a      	lsls	r2, r3, #5
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	4413      	add	r3, r2
 800604a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800604e:	461a      	mov	r2, r3
 8006050:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006054:	6013      	str	r3, [r2, #0]
 8006056:	e013      	b.n	8006080 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	015a      	lsls	r2, r3, #5
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	4413      	add	r3, r2
 8006060:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006064:	461a      	mov	r2, r3
 8006066:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800606a:	6013      	str	r3, [r2, #0]
 800606c:	e008      	b.n	8006080 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	015a      	lsls	r2, r3, #5
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	4413      	add	r3, r2
 8006076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800607a:	461a      	mov	r2, r3
 800607c:	2300      	movs	r3, #0
 800607e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	015a      	lsls	r2, r3, #5
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	4413      	add	r3, r2
 8006088:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800608c:	461a      	mov	r2, r3
 800608e:	2300      	movs	r3, #0
 8006090:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	015a      	lsls	r2, r3, #5
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	4413      	add	r3, r2
 800609a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800609e:	461a      	mov	r2, r3
 80060a0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80060a4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	3301      	adds	r3, #1
 80060aa:	613b      	str	r3, [r7, #16]
 80060ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ae:	693a      	ldr	r2, [r7, #16]
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d3b7      	bcc.n	8006024 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060ba:	691b      	ldr	r3, [r3, #16]
 80060bc:	68fa      	ldr	r2, [r7, #12]
 80060be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060c6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80060d4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80060d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d105      	bne.n	80060e8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	699b      	ldr	r3, [r3, #24]
 80060e0:	f043 0210 	orr.w	r2, r3, #16
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	699a      	ldr	r2, [r3, #24]
 80060ec:	4b0e      	ldr	r3, [pc, #56]	; (8006128 <USB_DevInit+0x2b4>)
 80060ee:	4313      	orrs	r3, r2
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80060f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d005      	beq.n	8006106 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	699b      	ldr	r3, [r3, #24]
 80060fe:	f043 0208 	orr.w	r2, r3, #8
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006106:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006108:	2b01      	cmp	r3, #1
 800610a:	d105      	bne.n	8006118 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	699a      	ldr	r2, [r3, #24]
 8006110:	4b06      	ldr	r3, [pc, #24]	; (800612c <USB_DevInit+0x2b8>)
 8006112:	4313      	orrs	r3, r2
 8006114:	687a      	ldr	r2, [r7, #4]
 8006116:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006118:	7dfb      	ldrb	r3, [r7, #23]
}
 800611a:	4618      	mov	r0, r3
 800611c:	3718      	adds	r7, #24
 800611e:	46bd      	mov	sp, r7
 8006120:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006124:	b004      	add	sp, #16
 8006126:	4770      	bx	lr
 8006128:	803c3800 	.word	0x803c3800
 800612c:	40000004 	.word	0x40000004

08006130 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006130:	b480      	push	{r7}
 8006132:	b085      	sub	sp, #20
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800613a:	2300      	movs	r3, #0
 800613c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	3301      	adds	r3, #1
 8006142:	60fb      	str	r3, [r7, #12]
 8006144:	4a12      	ldr	r2, [pc, #72]	; (8006190 <USB_FlushTxFifo+0x60>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d901      	bls.n	800614e <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800614a:	2303      	movs	r3, #3
 800614c:	e01a      	b.n	8006184 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	691b      	ldr	r3, [r3, #16]
 8006152:	2b00      	cmp	r3, #0
 8006154:	daf3      	bge.n	800613e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006156:	2300      	movs	r3, #0
 8006158:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	019b      	lsls	r3, r3, #6
 800615e:	f043 0220 	orr.w	r2, r3, #32
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	3301      	adds	r3, #1
 800616a:	60fb      	str	r3, [r7, #12]
 800616c:	4a08      	ldr	r2, [pc, #32]	; (8006190 <USB_FlushTxFifo+0x60>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d901      	bls.n	8006176 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8006172:	2303      	movs	r3, #3
 8006174:	e006      	b.n	8006184 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	691b      	ldr	r3, [r3, #16]
 800617a:	f003 0320 	and.w	r3, r3, #32
 800617e:	2b20      	cmp	r3, #32
 8006180:	d0f1      	beq.n	8006166 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8006182:	2300      	movs	r3, #0
}
 8006184:	4618      	mov	r0, r3
 8006186:	3714      	adds	r7, #20
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr
 8006190:	00030d40 	.word	0x00030d40

08006194 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006194:	b480      	push	{r7}
 8006196:	b085      	sub	sp, #20
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800619c:	2300      	movs	r3, #0
 800619e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	3301      	adds	r3, #1
 80061a4:	60fb      	str	r3, [r7, #12]
 80061a6:	4a11      	ldr	r2, [pc, #68]	; (80061ec <USB_FlushRxFifo+0x58>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d901      	bls.n	80061b0 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 80061ac:	2303      	movs	r3, #3
 80061ae:	e017      	b.n	80061e0 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	691b      	ldr	r3, [r3, #16]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	daf3      	bge.n	80061a0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80061b8:	2300      	movs	r3, #0
 80061ba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2210      	movs	r2, #16
 80061c0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	3301      	adds	r3, #1
 80061c6:	60fb      	str	r3, [r7, #12]
 80061c8:	4a08      	ldr	r2, [pc, #32]	; (80061ec <USB_FlushRxFifo+0x58>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d901      	bls.n	80061d2 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 80061ce:	2303      	movs	r3, #3
 80061d0:	e006      	b.n	80061e0 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	691b      	ldr	r3, [r3, #16]
 80061d6:	f003 0310 	and.w	r3, r3, #16
 80061da:	2b10      	cmp	r3, #16
 80061dc:	d0f1      	beq.n	80061c2 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 80061de:	2300      	movs	r3, #0
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3714      	adds	r7, #20
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr
 80061ec:	00030d40 	.word	0x00030d40

080061f0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b085      	sub	sp, #20
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	460b      	mov	r3, r1
 80061fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	78fb      	ldrb	r3, [r7, #3]
 800620a:	68f9      	ldr	r1, [r7, #12]
 800620c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006210:	4313      	orrs	r3, r2
 8006212:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	3714      	adds	r7, #20
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr

08006222 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006222:	b480      	push	{r7}
 8006224:	b085      	sub	sp, #20
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	68fa      	ldr	r2, [r7, #12]
 8006238:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800623c:	f023 0303 	bic.w	r3, r3, #3
 8006240:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	68fa      	ldr	r2, [r7, #12]
 800624c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006250:	f043 0302 	orr.w	r3, r3, #2
 8006254:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006256:	2300      	movs	r3, #0
}
 8006258:	4618      	mov	r0, r3
 800625a:	3714      	adds	r7, #20
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr

08006264 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006264:	b480      	push	{r7}
 8006266:	b083      	sub	sp, #12
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	695b      	ldr	r3, [r3, #20]
 8006270:	f003 0301 	and.w	r3, r3, #1
}
 8006274:	4618      	mov	r0, r3
 8006276:	370c      	adds	r7, #12
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr

08006280 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006280:	b480      	push	{r7}
 8006282:	b085      	sub	sp, #20
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006288:	2300      	movs	r3, #0
 800628a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	3301      	adds	r3, #1
 8006290:	60fb      	str	r3, [r7, #12]
 8006292:	4a13      	ldr	r2, [pc, #76]	; (80062e0 <USB_CoreReset+0x60>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d901      	bls.n	800629c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8006298:	2303      	movs	r3, #3
 800629a:	e01a      	b.n	80062d2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	691b      	ldr	r3, [r3, #16]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	daf3      	bge.n	800628c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80062a4:	2300      	movs	r3, #0
 80062a6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	691b      	ldr	r3, [r3, #16]
 80062ac:	f043 0201 	orr.w	r2, r3, #1
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	3301      	adds	r3, #1
 80062b8:	60fb      	str	r3, [r7, #12]
 80062ba:	4a09      	ldr	r2, [pc, #36]	; (80062e0 <USB_CoreReset+0x60>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d901      	bls.n	80062c4 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80062c0:	2303      	movs	r3, #3
 80062c2:	e006      	b.n	80062d2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	691b      	ldr	r3, [r3, #16]
 80062c8:	f003 0301 	and.w	r3, r3, #1
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d0f1      	beq.n	80062b4 <USB_CoreReset+0x34>

  return HAL_OK;
 80062d0:	2300      	movs	r3, #0
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3714      	adds	r7, #20
 80062d6:	46bd      	mov	sp, r7
 80062d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062dc:	4770      	bx	lr
 80062de:	bf00      	nop
 80062e0:	00030d40 	.word	0x00030d40

080062e4 <calloc>:
 80062e4:	4b02      	ldr	r3, [pc, #8]	; (80062f0 <calloc+0xc>)
 80062e6:	460a      	mov	r2, r1
 80062e8:	4601      	mov	r1, r0
 80062ea:	6818      	ldr	r0, [r3, #0]
 80062ec:	f000 b84a 	b.w	8006384 <_calloc_r>
 80062f0:	2000000c 	.word	0x2000000c

080062f4 <__errno>:
 80062f4:	4b01      	ldr	r3, [pc, #4]	; (80062fc <__errno+0x8>)
 80062f6:	6818      	ldr	r0, [r3, #0]
 80062f8:	4770      	bx	lr
 80062fa:	bf00      	nop
 80062fc:	2000000c 	.word	0x2000000c

08006300 <__libc_init_array>:
 8006300:	b570      	push	{r4, r5, r6, lr}
 8006302:	4d0d      	ldr	r5, [pc, #52]	; (8006338 <__libc_init_array+0x38>)
 8006304:	4c0d      	ldr	r4, [pc, #52]	; (800633c <__libc_init_array+0x3c>)
 8006306:	1b64      	subs	r4, r4, r5
 8006308:	10a4      	asrs	r4, r4, #2
 800630a:	2600      	movs	r6, #0
 800630c:	42a6      	cmp	r6, r4
 800630e:	d109      	bne.n	8006324 <__libc_init_array+0x24>
 8006310:	4d0b      	ldr	r5, [pc, #44]	; (8006340 <__libc_init_array+0x40>)
 8006312:	4c0c      	ldr	r4, [pc, #48]	; (8006344 <__libc_init_array+0x44>)
 8006314:	f000 fc66 	bl	8006be4 <_init>
 8006318:	1b64      	subs	r4, r4, r5
 800631a:	10a4      	asrs	r4, r4, #2
 800631c:	2600      	movs	r6, #0
 800631e:	42a6      	cmp	r6, r4
 8006320:	d105      	bne.n	800632e <__libc_init_array+0x2e>
 8006322:	bd70      	pop	{r4, r5, r6, pc}
 8006324:	f855 3b04 	ldr.w	r3, [r5], #4
 8006328:	4798      	blx	r3
 800632a:	3601      	adds	r6, #1
 800632c:	e7ee      	b.n	800630c <__libc_init_array+0xc>
 800632e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006332:	4798      	blx	r3
 8006334:	3601      	adds	r6, #1
 8006336:	e7f2      	b.n	800631e <__libc_init_array+0x1e>
 8006338:	08006c58 	.word	0x08006c58
 800633c:	08006c58 	.word	0x08006c58
 8006340:	08006c58 	.word	0x08006c58
 8006344:	08006c5c 	.word	0x08006c5c

08006348 <free>:
 8006348:	4b02      	ldr	r3, [pc, #8]	; (8006354 <free+0xc>)
 800634a:	4601      	mov	r1, r0
 800634c:	6818      	ldr	r0, [r3, #0]
 800634e:	f000 b829 	b.w	80063a4 <_free_r>
 8006352:	bf00      	nop
 8006354:	2000000c 	.word	0x2000000c

08006358 <memcpy>:
 8006358:	440a      	add	r2, r1
 800635a:	4291      	cmp	r1, r2
 800635c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006360:	d100      	bne.n	8006364 <memcpy+0xc>
 8006362:	4770      	bx	lr
 8006364:	b510      	push	{r4, lr}
 8006366:	f811 4b01 	ldrb.w	r4, [r1], #1
 800636a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800636e:	4291      	cmp	r1, r2
 8006370:	d1f9      	bne.n	8006366 <memcpy+0xe>
 8006372:	bd10      	pop	{r4, pc}

08006374 <memset>:
 8006374:	4402      	add	r2, r0
 8006376:	4603      	mov	r3, r0
 8006378:	4293      	cmp	r3, r2
 800637a:	d100      	bne.n	800637e <memset+0xa>
 800637c:	4770      	bx	lr
 800637e:	f803 1b01 	strb.w	r1, [r3], #1
 8006382:	e7f9      	b.n	8006378 <memset+0x4>

08006384 <_calloc_r>:
 8006384:	b513      	push	{r0, r1, r4, lr}
 8006386:	434a      	muls	r2, r1
 8006388:	4611      	mov	r1, r2
 800638a:	9201      	str	r2, [sp, #4]
 800638c:	f000 f85a 	bl	8006444 <_malloc_r>
 8006390:	4604      	mov	r4, r0
 8006392:	b118      	cbz	r0, 800639c <_calloc_r+0x18>
 8006394:	9a01      	ldr	r2, [sp, #4]
 8006396:	2100      	movs	r1, #0
 8006398:	f7ff ffec 	bl	8006374 <memset>
 800639c:	4620      	mov	r0, r4
 800639e:	b002      	add	sp, #8
 80063a0:	bd10      	pop	{r4, pc}
	...

080063a4 <_free_r>:
 80063a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80063a6:	2900      	cmp	r1, #0
 80063a8:	d048      	beq.n	800643c <_free_r+0x98>
 80063aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063ae:	9001      	str	r0, [sp, #4]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	f1a1 0404 	sub.w	r4, r1, #4
 80063b6:	bfb8      	it	lt
 80063b8:	18e4      	addlt	r4, r4, r3
 80063ba:	f000 f8cd 	bl	8006558 <__malloc_lock>
 80063be:	4a20      	ldr	r2, [pc, #128]	; (8006440 <_free_r+0x9c>)
 80063c0:	9801      	ldr	r0, [sp, #4]
 80063c2:	6813      	ldr	r3, [r2, #0]
 80063c4:	4615      	mov	r5, r2
 80063c6:	b933      	cbnz	r3, 80063d6 <_free_r+0x32>
 80063c8:	6063      	str	r3, [r4, #4]
 80063ca:	6014      	str	r4, [r2, #0]
 80063cc:	b003      	add	sp, #12
 80063ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80063d2:	f000 b8c7 	b.w	8006564 <__malloc_unlock>
 80063d6:	42a3      	cmp	r3, r4
 80063d8:	d90b      	bls.n	80063f2 <_free_r+0x4e>
 80063da:	6821      	ldr	r1, [r4, #0]
 80063dc:	1862      	adds	r2, r4, r1
 80063de:	4293      	cmp	r3, r2
 80063e0:	bf04      	itt	eq
 80063e2:	681a      	ldreq	r2, [r3, #0]
 80063e4:	685b      	ldreq	r3, [r3, #4]
 80063e6:	6063      	str	r3, [r4, #4]
 80063e8:	bf04      	itt	eq
 80063ea:	1852      	addeq	r2, r2, r1
 80063ec:	6022      	streq	r2, [r4, #0]
 80063ee:	602c      	str	r4, [r5, #0]
 80063f0:	e7ec      	b.n	80063cc <_free_r+0x28>
 80063f2:	461a      	mov	r2, r3
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	b10b      	cbz	r3, 80063fc <_free_r+0x58>
 80063f8:	42a3      	cmp	r3, r4
 80063fa:	d9fa      	bls.n	80063f2 <_free_r+0x4e>
 80063fc:	6811      	ldr	r1, [r2, #0]
 80063fe:	1855      	adds	r5, r2, r1
 8006400:	42a5      	cmp	r5, r4
 8006402:	d10b      	bne.n	800641c <_free_r+0x78>
 8006404:	6824      	ldr	r4, [r4, #0]
 8006406:	4421      	add	r1, r4
 8006408:	1854      	adds	r4, r2, r1
 800640a:	42a3      	cmp	r3, r4
 800640c:	6011      	str	r1, [r2, #0]
 800640e:	d1dd      	bne.n	80063cc <_free_r+0x28>
 8006410:	681c      	ldr	r4, [r3, #0]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	6053      	str	r3, [r2, #4]
 8006416:	4421      	add	r1, r4
 8006418:	6011      	str	r1, [r2, #0]
 800641a:	e7d7      	b.n	80063cc <_free_r+0x28>
 800641c:	d902      	bls.n	8006424 <_free_r+0x80>
 800641e:	230c      	movs	r3, #12
 8006420:	6003      	str	r3, [r0, #0]
 8006422:	e7d3      	b.n	80063cc <_free_r+0x28>
 8006424:	6825      	ldr	r5, [r4, #0]
 8006426:	1961      	adds	r1, r4, r5
 8006428:	428b      	cmp	r3, r1
 800642a:	bf04      	itt	eq
 800642c:	6819      	ldreq	r1, [r3, #0]
 800642e:	685b      	ldreq	r3, [r3, #4]
 8006430:	6063      	str	r3, [r4, #4]
 8006432:	bf04      	itt	eq
 8006434:	1949      	addeq	r1, r1, r5
 8006436:	6021      	streq	r1, [r4, #0]
 8006438:	6054      	str	r4, [r2, #4]
 800643a:	e7c7      	b.n	80063cc <_free_r+0x28>
 800643c:	b003      	add	sp, #12
 800643e:	bd30      	pop	{r4, r5, pc}
 8006440:	200000b0 	.word	0x200000b0

08006444 <_malloc_r>:
 8006444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006446:	1ccd      	adds	r5, r1, #3
 8006448:	f025 0503 	bic.w	r5, r5, #3
 800644c:	3508      	adds	r5, #8
 800644e:	2d0c      	cmp	r5, #12
 8006450:	bf38      	it	cc
 8006452:	250c      	movcc	r5, #12
 8006454:	2d00      	cmp	r5, #0
 8006456:	4606      	mov	r6, r0
 8006458:	db01      	blt.n	800645e <_malloc_r+0x1a>
 800645a:	42a9      	cmp	r1, r5
 800645c:	d903      	bls.n	8006466 <_malloc_r+0x22>
 800645e:	230c      	movs	r3, #12
 8006460:	6033      	str	r3, [r6, #0]
 8006462:	2000      	movs	r0, #0
 8006464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006466:	f000 f877 	bl	8006558 <__malloc_lock>
 800646a:	4921      	ldr	r1, [pc, #132]	; (80064f0 <_malloc_r+0xac>)
 800646c:	680a      	ldr	r2, [r1, #0]
 800646e:	4614      	mov	r4, r2
 8006470:	b99c      	cbnz	r4, 800649a <_malloc_r+0x56>
 8006472:	4f20      	ldr	r7, [pc, #128]	; (80064f4 <_malloc_r+0xb0>)
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	b923      	cbnz	r3, 8006482 <_malloc_r+0x3e>
 8006478:	4621      	mov	r1, r4
 800647a:	4630      	mov	r0, r6
 800647c:	f000 f83c 	bl	80064f8 <_sbrk_r>
 8006480:	6038      	str	r0, [r7, #0]
 8006482:	4629      	mov	r1, r5
 8006484:	4630      	mov	r0, r6
 8006486:	f000 f837 	bl	80064f8 <_sbrk_r>
 800648a:	1c43      	adds	r3, r0, #1
 800648c:	d123      	bne.n	80064d6 <_malloc_r+0x92>
 800648e:	230c      	movs	r3, #12
 8006490:	6033      	str	r3, [r6, #0]
 8006492:	4630      	mov	r0, r6
 8006494:	f000 f866 	bl	8006564 <__malloc_unlock>
 8006498:	e7e3      	b.n	8006462 <_malloc_r+0x1e>
 800649a:	6823      	ldr	r3, [r4, #0]
 800649c:	1b5b      	subs	r3, r3, r5
 800649e:	d417      	bmi.n	80064d0 <_malloc_r+0x8c>
 80064a0:	2b0b      	cmp	r3, #11
 80064a2:	d903      	bls.n	80064ac <_malloc_r+0x68>
 80064a4:	6023      	str	r3, [r4, #0]
 80064a6:	441c      	add	r4, r3
 80064a8:	6025      	str	r5, [r4, #0]
 80064aa:	e004      	b.n	80064b6 <_malloc_r+0x72>
 80064ac:	6863      	ldr	r3, [r4, #4]
 80064ae:	42a2      	cmp	r2, r4
 80064b0:	bf0c      	ite	eq
 80064b2:	600b      	streq	r3, [r1, #0]
 80064b4:	6053      	strne	r3, [r2, #4]
 80064b6:	4630      	mov	r0, r6
 80064b8:	f000 f854 	bl	8006564 <__malloc_unlock>
 80064bc:	f104 000b 	add.w	r0, r4, #11
 80064c0:	1d23      	adds	r3, r4, #4
 80064c2:	f020 0007 	bic.w	r0, r0, #7
 80064c6:	1ac2      	subs	r2, r0, r3
 80064c8:	d0cc      	beq.n	8006464 <_malloc_r+0x20>
 80064ca:	1a1b      	subs	r3, r3, r0
 80064cc:	50a3      	str	r3, [r4, r2]
 80064ce:	e7c9      	b.n	8006464 <_malloc_r+0x20>
 80064d0:	4622      	mov	r2, r4
 80064d2:	6864      	ldr	r4, [r4, #4]
 80064d4:	e7cc      	b.n	8006470 <_malloc_r+0x2c>
 80064d6:	1cc4      	adds	r4, r0, #3
 80064d8:	f024 0403 	bic.w	r4, r4, #3
 80064dc:	42a0      	cmp	r0, r4
 80064de:	d0e3      	beq.n	80064a8 <_malloc_r+0x64>
 80064e0:	1a21      	subs	r1, r4, r0
 80064e2:	4630      	mov	r0, r6
 80064e4:	f000 f808 	bl	80064f8 <_sbrk_r>
 80064e8:	3001      	adds	r0, #1
 80064ea:	d1dd      	bne.n	80064a8 <_malloc_r+0x64>
 80064ec:	e7cf      	b.n	800648e <_malloc_r+0x4a>
 80064ee:	bf00      	nop
 80064f0:	200000b0 	.word	0x200000b0
 80064f4:	200000b4 	.word	0x200000b4

080064f8 <_sbrk_r>:
 80064f8:	b538      	push	{r3, r4, r5, lr}
 80064fa:	4d06      	ldr	r5, [pc, #24]	; (8006514 <_sbrk_r+0x1c>)
 80064fc:	2300      	movs	r3, #0
 80064fe:	4604      	mov	r4, r0
 8006500:	4608      	mov	r0, r1
 8006502:	602b      	str	r3, [r5, #0]
 8006504:	f7fa ff56 	bl	80013b4 <_sbrk>
 8006508:	1c43      	adds	r3, r0, #1
 800650a:	d102      	bne.n	8006512 <_sbrk_r+0x1a>
 800650c:	682b      	ldr	r3, [r5, #0]
 800650e:	b103      	cbz	r3, 8006512 <_sbrk_r+0x1a>
 8006510:	6023      	str	r3, [r4, #0]
 8006512:	bd38      	pop	{r3, r4, r5, pc}
 8006514:	20000674 	.word	0x20000674

08006518 <siprintf>:
 8006518:	b40e      	push	{r1, r2, r3}
 800651a:	b500      	push	{lr}
 800651c:	b09c      	sub	sp, #112	; 0x70
 800651e:	ab1d      	add	r3, sp, #116	; 0x74
 8006520:	9002      	str	r0, [sp, #8]
 8006522:	9006      	str	r0, [sp, #24]
 8006524:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006528:	4809      	ldr	r0, [pc, #36]	; (8006550 <siprintf+0x38>)
 800652a:	9107      	str	r1, [sp, #28]
 800652c:	9104      	str	r1, [sp, #16]
 800652e:	4909      	ldr	r1, [pc, #36]	; (8006554 <siprintf+0x3c>)
 8006530:	f853 2b04 	ldr.w	r2, [r3], #4
 8006534:	9105      	str	r1, [sp, #20]
 8006536:	6800      	ldr	r0, [r0, #0]
 8006538:	9301      	str	r3, [sp, #4]
 800653a:	a902      	add	r1, sp, #8
 800653c:	f000 f874 	bl	8006628 <_svfiprintf_r>
 8006540:	9b02      	ldr	r3, [sp, #8]
 8006542:	2200      	movs	r2, #0
 8006544:	701a      	strb	r2, [r3, #0]
 8006546:	b01c      	add	sp, #112	; 0x70
 8006548:	f85d eb04 	ldr.w	lr, [sp], #4
 800654c:	b003      	add	sp, #12
 800654e:	4770      	bx	lr
 8006550:	2000000c 	.word	0x2000000c
 8006554:	ffff0208 	.word	0xffff0208

08006558 <__malloc_lock>:
 8006558:	4801      	ldr	r0, [pc, #4]	; (8006560 <__malloc_lock+0x8>)
 800655a:	f000 baf9 	b.w	8006b50 <__retarget_lock_acquire_recursive>
 800655e:	bf00      	nop
 8006560:	2000067c 	.word	0x2000067c

08006564 <__malloc_unlock>:
 8006564:	4801      	ldr	r0, [pc, #4]	; (800656c <__malloc_unlock+0x8>)
 8006566:	f000 baf4 	b.w	8006b52 <__retarget_lock_release_recursive>
 800656a:	bf00      	nop
 800656c:	2000067c 	.word	0x2000067c

08006570 <__ssputs_r>:
 8006570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006574:	688e      	ldr	r6, [r1, #8]
 8006576:	429e      	cmp	r6, r3
 8006578:	4682      	mov	sl, r0
 800657a:	460c      	mov	r4, r1
 800657c:	4690      	mov	r8, r2
 800657e:	461f      	mov	r7, r3
 8006580:	d838      	bhi.n	80065f4 <__ssputs_r+0x84>
 8006582:	898a      	ldrh	r2, [r1, #12]
 8006584:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006588:	d032      	beq.n	80065f0 <__ssputs_r+0x80>
 800658a:	6825      	ldr	r5, [r4, #0]
 800658c:	6909      	ldr	r1, [r1, #16]
 800658e:	eba5 0901 	sub.w	r9, r5, r1
 8006592:	6965      	ldr	r5, [r4, #20]
 8006594:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006598:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800659c:	3301      	adds	r3, #1
 800659e:	444b      	add	r3, r9
 80065a0:	106d      	asrs	r5, r5, #1
 80065a2:	429d      	cmp	r5, r3
 80065a4:	bf38      	it	cc
 80065a6:	461d      	movcc	r5, r3
 80065a8:	0553      	lsls	r3, r2, #21
 80065aa:	d531      	bpl.n	8006610 <__ssputs_r+0xa0>
 80065ac:	4629      	mov	r1, r5
 80065ae:	f7ff ff49 	bl	8006444 <_malloc_r>
 80065b2:	4606      	mov	r6, r0
 80065b4:	b950      	cbnz	r0, 80065cc <__ssputs_r+0x5c>
 80065b6:	230c      	movs	r3, #12
 80065b8:	f8ca 3000 	str.w	r3, [sl]
 80065bc:	89a3      	ldrh	r3, [r4, #12]
 80065be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065c2:	81a3      	strh	r3, [r4, #12]
 80065c4:	f04f 30ff 	mov.w	r0, #4294967295
 80065c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065cc:	6921      	ldr	r1, [r4, #16]
 80065ce:	464a      	mov	r2, r9
 80065d0:	f7ff fec2 	bl	8006358 <memcpy>
 80065d4:	89a3      	ldrh	r3, [r4, #12]
 80065d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80065da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065de:	81a3      	strh	r3, [r4, #12]
 80065e0:	6126      	str	r6, [r4, #16]
 80065e2:	6165      	str	r5, [r4, #20]
 80065e4:	444e      	add	r6, r9
 80065e6:	eba5 0509 	sub.w	r5, r5, r9
 80065ea:	6026      	str	r6, [r4, #0]
 80065ec:	60a5      	str	r5, [r4, #8]
 80065ee:	463e      	mov	r6, r7
 80065f0:	42be      	cmp	r6, r7
 80065f2:	d900      	bls.n	80065f6 <__ssputs_r+0x86>
 80065f4:	463e      	mov	r6, r7
 80065f6:	4632      	mov	r2, r6
 80065f8:	6820      	ldr	r0, [r4, #0]
 80065fa:	4641      	mov	r1, r8
 80065fc:	f000 faaa 	bl	8006b54 <memmove>
 8006600:	68a3      	ldr	r3, [r4, #8]
 8006602:	6822      	ldr	r2, [r4, #0]
 8006604:	1b9b      	subs	r3, r3, r6
 8006606:	4432      	add	r2, r6
 8006608:	60a3      	str	r3, [r4, #8]
 800660a:	6022      	str	r2, [r4, #0]
 800660c:	2000      	movs	r0, #0
 800660e:	e7db      	b.n	80065c8 <__ssputs_r+0x58>
 8006610:	462a      	mov	r2, r5
 8006612:	f000 fab9 	bl	8006b88 <_realloc_r>
 8006616:	4606      	mov	r6, r0
 8006618:	2800      	cmp	r0, #0
 800661a:	d1e1      	bne.n	80065e0 <__ssputs_r+0x70>
 800661c:	6921      	ldr	r1, [r4, #16]
 800661e:	4650      	mov	r0, sl
 8006620:	f7ff fec0 	bl	80063a4 <_free_r>
 8006624:	e7c7      	b.n	80065b6 <__ssputs_r+0x46>
	...

08006628 <_svfiprintf_r>:
 8006628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800662c:	4698      	mov	r8, r3
 800662e:	898b      	ldrh	r3, [r1, #12]
 8006630:	061b      	lsls	r3, r3, #24
 8006632:	b09d      	sub	sp, #116	; 0x74
 8006634:	4607      	mov	r7, r0
 8006636:	460d      	mov	r5, r1
 8006638:	4614      	mov	r4, r2
 800663a:	d50e      	bpl.n	800665a <_svfiprintf_r+0x32>
 800663c:	690b      	ldr	r3, [r1, #16]
 800663e:	b963      	cbnz	r3, 800665a <_svfiprintf_r+0x32>
 8006640:	2140      	movs	r1, #64	; 0x40
 8006642:	f7ff feff 	bl	8006444 <_malloc_r>
 8006646:	6028      	str	r0, [r5, #0]
 8006648:	6128      	str	r0, [r5, #16]
 800664a:	b920      	cbnz	r0, 8006656 <_svfiprintf_r+0x2e>
 800664c:	230c      	movs	r3, #12
 800664e:	603b      	str	r3, [r7, #0]
 8006650:	f04f 30ff 	mov.w	r0, #4294967295
 8006654:	e0d1      	b.n	80067fa <_svfiprintf_r+0x1d2>
 8006656:	2340      	movs	r3, #64	; 0x40
 8006658:	616b      	str	r3, [r5, #20]
 800665a:	2300      	movs	r3, #0
 800665c:	9309      	str	r3, [sp, #36]	; 0x24
 800665e:	2320      	movs	r3, #32
 8006660:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006664:	f8cd 800c 	str.w	r8, [sp, #12]
 8006668:	2330      	movs	r3, #48	; 0x30
 800666a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006814 <_svfiprintf_r+0x1ec>
 800666e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006672:	f04f 0901 	mov.w	r9, #1
 8006676:	4623      	mov	r3, r4
 8006678:	469a      	mov	sl, r3
 800667a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800667e:	b10a      	cbz	r2, 8006684 <_svfiprintf_r+0x5c>
 8006680:	2a25      	cmp	r2, #37	; 0x25
 8006682:	d1f9      	bne.n	8006678 <_svfiprintf_r+0x50>
 8006684:	ebba 0b04 	subs.w	fp, sl, r4
 8006688:	d00b      	beq.n	80066a2 <_svfiprintf_r+0x7a>
 800668a:	465b      	mov	r3, fp
 800668c:	4622      	mov	r2, r4
 800668e:	4629      	mov	r1, r5
 8006690:	4638      	mov	r0, r7
 8006692:	f7ff ff6d 	bl	8006570 <__ssputs_r>
 8006696:	3001      	adds	r0, #1
 8006698:	f000 80aa 	beq.w	80067f0 <_svfiprintf_r+0x1c8>
 800669c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800669e:	445a      	add	r2, fp
 80066a0:	9209      	str	r2, [sp, #36]	; 0x24
 80066a2:	f89a 3000 	ldrb.w	r3, [sl]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	f000 80a2 	beq.w	80067f0 <_svfiprintf_r+0x1c8>
 80066ac:	2300      	movs	r3, #0
 80066ae:	f04f 32ff 	mov.w	r2, #4294967295
 80066b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80066b6:	f10a 0a01 	add.w	sl, sl, #1
 80066ba:	9304      	str	r3, [sp, #16]
 80066bc:	9307      	str	r3, [sp, #28]
 80066be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80066c2:	931a      	str	r3, [sp, #104]	; 0x68
 80066c4:	4654      	mov	r4, sl
 80066c6:	2205      	movs	r2, #5
 80066c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066cc:	4851      	ldr	r0, [pc, #324]	; (8006814 <_svfiprintf_r+0x1ec>)
 80066ce:	f7f9 fd9f 	bl	8000210 <memchr>
 80066d2:	9a04      	ldr	r2, [sp, #16]
 80066d4:	b9d8      	cbnz	r0, 800670e <_svfiprintf_r+0xe6>
 80066d6:	06d0      	lsls	r0, r2, #27
 80066d8:	bf44      	itt	mi
 80066da:	2320      	movmi	r3, #32
 80066dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80066e0:	0711      	lsls	r1, r2, #28
 80066e2:	bf44      	itt	mi
 80066e4:	232b      	movmi	r3, #43	; 0x2b
 80066e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80066ea:	f89a 3000 	ldrb.w	r3, [sl]
 80066ee:	2b2a      	cmp	r3, #42	; 0x2a
 80066f0:	d015      	beq.n	800671e <_svfiprintf_r+0xf6>
 80066f2:	9a07      	ldr	r2, [sp, #28]
 80066f4:	4654      	mov	r4, sl
 80066f6:	2000      	movs	r0, #0
 80066f8:	f04f 0c0a 	mov.w	ip, #10
 80066fc:	4621      	mov	r1, r4
 80066fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006702:	3b30      	subs	r3, #48	; 0x30
 8006704:	2b09      	cmp	r3, #9
 8006706:	d94e      	bls.n	80067a6 <_svfiprintf_r+0x17e>
 8006708:	b1b0      	cbz	r0, 8006738 <_svfiprintf_r+0x110>
 800670a:	9207      	str	r2, [sp, #28]
 800670c:	e014      	b.n	8006738 <_svfiprintf_r+0x110>
 800670e:	eba0 0308 	sub.w	r3, r0, r8
 8006712:	fa09 f303 	lsl.w	r3, r9, r3
 8006716:	4313      	orrs	r3, r2
 8006718:	9304      	str	r3, [sp, #16]
 800671a:	46a2      	mov	sl, r4
 800671c:	e7d2      	b.n	80066c4 <_svfiprintf_r+0x9c>
 800671e:	9b03      	ldr	r3, [sp, #12]
 8006720:	1d19      	adds	r1, r3, #4
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	9103      	str	r1, [sp, #12]
 8006726:	2b00      	cmp	r3, #0
 8006728:	bfbb      	ittet	lt
 800672a:	425b      	neglt	r3, r3
 800672c:	f042 0202 	orrlt.w	r2, r2, #2
 8006730:	9307      	strge	r3, [sp, #28]
 8006732:	9307      	strlt	r3, [sp, #28]
 8006734:	bfb8      	it	lt
 8006736:	9204      	strlt	r2, [sp, #16]
 8006738:	7823      	ldrb	r3, [r4, #0]
 800673a:	2b2e      	cmp	r3, #46	; 0x2e
 800673c:	d10c      	bne.n	8006758 <_svfiprintf_r+0x130>
 800673e:	7863      	ldrb	r3, [r4, #1]
 8006740:	2b2a      	cmp	r3, #42	; 0x2a
 8006742:	d135      	bne.n	80067b0 <_svfiprintf_r+0x188>
 8006744:	9b03      	ldr	r3, [sp, #12]
 8006746:	1d1a      	adds	r2, r3, #4
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	9203      	str	r2, [sp, #12]
 800674c:	2b00      	cmp	r3, #0
 800674e:	bfb8      	it	lt
 8006750:	f04f 33ff 	movlt.w	r3, #4294967295
 8006754:	3402      	adds	r4, #2
 8006756:	9305      	str	r3, [sp, #20]
 8006758:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006824 <_svfiprintf_r+0x1fc>
 800675c:	7821      	ldrb	r1, [r4, #0]
 800675e:	2203      	movs	r2, #3
 8006760:	4650      	mov	r0, sl
 8006762:	f7f9 fd55 	bl	8000210 <memchr>
 8006766:	b140      	cbz	r0, 800677a <_svfiprintf_r+0x152>
 8006768:	2340      	movs	r3, #64	; 0x40
 800676a:	eba0 000a 	sub.w	r0, r0, sl
 800676e:	fa03 f000 	lsl.w	r0, r3, r0
 8006772:	9b04      	ldr	r3, [sp, #16]
 8006774:	4303      	orrs	r3, r0
 8006776:	3401      	adds	r4, #1
 8006778:	9304      	str	r3, [sp, #16]
 800677a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800677e:	4826      	ldr	r0, [pc, #152]	; (8006818 <_svfiprintf_r+0x1f0>)
 8006780:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006784:	2206      	movs	r2, #6
 8006786:	f7f9 fd43 	bl	8000210 <memchr>
 800678a:	2800      	cmp	r0, #0
 800678c:	d038      	beq.n	8006800 <_svfiprintf_r+0x1d8>
 800678e:	4b23      	ldr	r3, [pc, #140]	; (800681c <_svfiprintf_r+0x1f4>)
 8006790:	bb1b      	cbnz	r3, 80067da <_svfiprintf_r+0x1b2>
 8006792:	9b03      	ldr	r3, [sp, #12]
 8006794:	3307      	adds	r3, #7
 8006796:	f023 0307 	bic.w	r3, r3, #7
 800679a:	3308      	adds	r3, #8
 800679c:	9303      	str	r3, [sp, #12]
 800679e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067a0:	4433      	add	r3, r6
 80067a2:	9309      	str	r3, [sp, #36]	; 0x24
 80067a4:	e767      	b.n	8006676 <_svfiprintf_r+0x4e>
 80067a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80067aa:	460c      	mov	r4, r1
 80067ac:	2001      	movs	r0, #1
 80067ae:	e7a5      	b.n	80066fc <_svfiprintf_r+0xd4>
 80067b0:	2300      	movs	r3, #0
 80067b2:	3401      	adds	r4, #1
 80067b4:	9305      	str	r3, [sp, #20]
 80067b6:	4619      	mov	r1, r3
 80067b8:	f04f 0c0a 	mov.w	ip, #10
 80067bc:	4620      	mov	r0, r4
 80067be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80067c2:	3a30      	subs	r2, #48	; 0x30
 80067c4:	2a09      	cmp	r2, #9
 80067c6:	d903      	bls.n	80067d0 <_svfiprintf_r+0x1a8>
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d0c5      	beq.n	8006758 <_svfiprintf_r+0x130>
 80067cc:	9105      	str	r1, [sp, #20]
 80067ce:	e7c3      	b.n	8006758 <_svfiprintf_r+0x130>
 80067d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80067d4:	4604      	mov	r4, r0
 80067d6:	2301      	movs	r3, #1
 80067d8:	e7f0      	b.n	80067bc <_svfiprintf_r+0x194>
 80067da:	ab03      	add	r3, sp, #12
 80067dc:	9300      	str	r3, [sp, #0]
 80067de:	462a      	mov	r2, r5
 80067e0:	4b0f      	ldr	r3, [pc, #60]	; (8006820 <_svfiprintf_r+0x1f8>)
 80067e2:	a904      	add	r1, sp, #16
 80067e4:	4638      	mov	r0, r7
 80067e6:	f3af 8000 	nop.w
 80067ea:	1c42      	adds	r2, r0, #1
 80067ec:	4606      	mov	r6, r0
 80067ee:	d1d6      	bne.n	800679e <_svfiprintf_r+0x176>
 80067f0:	89ab      	ldrh	r3, [r5, #12]
 80067f2:	065b      	lsls	r3, r3, #25
 80067f4:	f53f af2c 	bmi.w	8006650 <_svfiprintf_r+0x28>
 80067f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80067fa:	b01d      	add	sp, #116	; 0x74
 80067fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006800:	ab03      	add	r3, sp, #12
 8006802:	9300      	str	r3, [sp, #0]
 8006804:	462a      	mov	r2, r5
 8006806:	4b06      	ldr	r3, [pc, #24]	; (8006820 <_svfiprintf_r+0x1f8>)
 8006808:	a904      	add	r1, sp, #16
 800680a:	4638      	mov	r0, r7
 800680c:	f000 f87a 	bl	8006904 <_printf_i>
 8006810:	e7eb      	b.n	80067ea <_svfiprintf_r+0x1c2>
 8006812:	bf00      	nop
 8006814:	08006c1c 	.word	0x08006c1c
 8006818:	08006c26 	.word	0x08006c26
 800681c:	00000000 	.word	0x00000000
 8006820:	08006571 	.word	0x08006571
 8006824:	08006c22 	.word	0x08006c22

08006828 <_printf_common>:
 8006828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800682c:	4616      	mov	r6, r2
 800682e:	4699      	mov	r9, r3
 8006830:	688a      	ldr	r2, [r1, #8]
 8006832:	690b      	ldr	r3, [r1, #16]
 8006834:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006838:	4293      	cmp	r3, r2
 800683a:	bfb8      	it	lt
 800683c:	4613      	movlt	r3, r2
 800683e:	6033      	str	r3, [r6, #0]
 8006840:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006844:	4607      	mov	r7, r0
 8006846:	460c      	mov	r4, r1
 8006848:	b10a      	cbz	r2, 800684e <_printf_common+0x26>
 800684a:	3301      	adds	r3, #1
 800684c:	6033      	str	r3, [r6, #0]
 800684e:	6823      	ldr	r3, [r4, #0]
 8006850:	0699      	lsls	r1, r3, #26
 8006852:	bf42      	ittt	mi
 8006854:	6833      	ldrmi	r3, [r6, #0]
 8006856:	3302      	addmi	r3, #2
 8006858:	6033      	strmi	r3, [r6, #0]
 800685a:	6825      	ldr	r5, [r4, #0]
 800685c:	f015 0506 	ands.w	r5, r5, #6
 8006860:	d106      	bne.n	8006870 <_printf_common+0x48>
 8006862:	f104 0a19 	add.w	sl, r4, #25
 8006866:	68e3      	ldr	r3, [r4, #12]
 8006868:	6832      	ldr	r2, [r6, #0]
 800686a:	1a9b      	subs	r3, r3, r2
 800686c:	42ab      	cmp	r3, r5
 800686e:	dc26      	bgt.n	80068be <_printf_common+0x96>
 8006870:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006874:	1e13      	subs	r3, r2, #0
 8006876:	6822      	ldr	r2, [r4, #0]
 8006878:	bf18      	it	ne
 800687a:	2301      	movne	r3, #1
 800687c:	0692      	lsls	r2, r2, #26
 800687e:	d42b      	bmi.n	80068d8 <_printf_common+0xb0>
 8006880:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006884:	4649      	mov	r1, r9
 8006886:	4638      	mov	r0, r7
 8006888:	47c0      	blx	r8
 800688a:	3001      	adds	r0, #1
 800688c:	d01e      	beq.n	80068cc <_printf_common+0xa4>
 800688e:	6823      	ldr	r3, [r4, #0]
 8006890:	68e5      	ldr	r5, [r4, #12]
 8006892:	6832      	ldr	r2, [r6, #0]
 8006894:	f003 0306 	and.w	r3, r3, #6
 8006898:	2b04      	cmp	r3, #4
 800689a:	bf08      	it	eq
 800689c:	1aad      	subeq	r5, r5, r2
 800689e:	68a3      	ldr	r3, [r4, #8]
 80068a0:	6922      	ldr	r2, [r4, #16]
 80068a2:	bf0c      	ite	eq
 80068a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80068a8:	2500      	movne	r5, #0
 80068aa:	4293      	cmp	r3, r2
 80068ac:	bfc4      	itt	gt
 80068ae:	1a9b      	subgt	r3, r3, r2
 80068b0:	18ed      	addgt	r5, r5, r3
 80068b2:	2600      	movs	r6, #0
 80068b4:	341a      	adds	r4, #26
 80068b6:	42b5      	cmp	r5, r6
 80068b8:	d11a      	bne.n	80068f0 <_printf_common+0xc8>
 80068ba:	2000      	movs	r0, #0
 80068bc:	e008      	b.n	80068d0 <_printf_common+0xa8>
 80068be:	2301      	movs	r3, #1
 80068c0:	4652      	mov	r2, sl
 80068c2:	4649      	mov	r1, r9
 80068c4:	4638      	mov	r0, r7
 80068c6:	47c0      	blx	r8
 80068c8:	3001      	adds	r0, #1
 80068ca:	d103      	bne.n	80068d4 <_printf_common+0xac>
 80068cc:	f04f 30ff 	mov.w	r0, #4294967295
 80068d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068d4:	3501      	adds	r5, #1
 80068d6:	e7c6      	b.n	8006866 <_printf_common+0x3e>
 80068d8:	18e1      	adds	r1, r4, r3
 80068da:	1c5a      	adds	r2, r3, #1
 80068dc:	2030      	movs	r0, #48	; 0x30
 80068de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80068e2:	4422      	add	r2, r4
 80068e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80068e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80068ec:	3302      	adds	r3, #2
 80068ee:	e7c7      	b.n	8006880 <_printf_common+0x58>
 80068f0:	2301      	movs	r3, #1
 80068f2:	4622      	mov	r2, r4
 80068f4:	4649      	mov	r1, r9
 80068f6:	4638      	mov	r0, r7
 80068f8:	47c0      	blx	r8
 80068fa:	3001      	adds	r0, #1
 80068fc:	d0e6      	beq.n	80068cc <_printf_common+0xa4>
 80068fe:	3601      	adds	r6, #1
 8006900:	e7d9      	b.n	80068b6 <_printf_common+0x8e>
	...

08006904 <_printf_i>:
 8006904:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006908:	460c      	mov	r4, r1
 800690a:	4691      	mov	r9, r2
 800690c:	7e27      	ldrb	r7, [r4, #24]
 800690e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006910:	2f78      	cmp	r7, #120	; 0x78
 8006912:	4680      	mov	r8, r0
 8006914:	469a      	mov	sl, r3
 8006916:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800691a:	d807      	bhi.n	800692c <_printf_i+0x28>
 800691c:	2f62      	cmp	r7, #98	; 0x62
 800691e:	d80a      	bhi.n	8006936 <_printf_i+0x32>
 8006920:	2f00      	cmp	r7, #0
 8006922:	f000 80d8 	beq.w	8006ad6 <_printf_i+0x1d2>
 8006926:	2f58      	cmp	r7, #88	; 0x58
 8006928:	f000 80a3 	beq.w	8006a72 <_printf_i+0x16e>
 800692c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006930:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006934:	e03a      	b.n	80069ac <_printf_i+0xa8>
 8006936:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800693a:	2b15      	cmp	r3, #21
 800693c:	d8f6      	bhi.n	800692c <_printf_i+0x28>
 800693e:	a001      	add	r0, pc, #4	; (adr r0, 8006944 <_printf_i+0x40>)
 8006940:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006944:	0800699d 	.word	0x0800699d
 8006948:	080069b1 	.word	0x080069b1
 800694c:	0800692d 	.word	0x0800692d
 8006950:	0800692d 	.word	0x0800692d
 8006954:	0800692d 	.word	0x0800692d
 8006958:	0800692d 	.word	0x0800692d
 800695c:	080069b1 	.word	0x080069b1
 8006960:	0800692d 	.word	0x0800692d
 8006964:	0800692d 	.word	0x0800692d
 8006968:	0800692d 	.word	0x0800692d
 800696c:	0800692d 	.word	0x0800692d
 8006970:	08006abd 	.word	0x08006abd
 8006974:	080069e1 	.word	0x080069e1
 8006978:	08006a9f 	.word	0x08006a9f
 800697c:	0800692d 	.word	0x0800692d
 8006980:	0800692d 	.word	0x0800692d
 8006984:	08006adf 	.word	0x08006adf
 8006988:	0800692d 	.word	0x0800692d
 800698c:	080069e1 	.word	0x080069e1
 8006990:	0800692d 	.word	0x0800692d
 8006994:	0800692d 	.word	0x0800692d
 8006998:	08006aa7 	.word	0x08006aa7
 800699c:	680b      	ldr	r3, [r1, #0]
 800699e:	1d1a      	adds	r2, r3, #4
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	600a      	str	r2, [r1, #0]
 80069a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80069a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80069ac:	2301      	movs	r3, #1
 80069ae:	e0a3      	b.n	8006af8 <_printf_i+0x1f4>
 80069b0:	6825      	ldr	r5, [r4, #0]
 80069b2:	6808      	ldr	r0, [r1, #0]
 80069b4:	062e      	lsls	r6, r5, #24
 80069b6:	f100 0304 	add.w	r3, r0, #4
 80069ba:	d50a      	bpl.n	80069d2 <_printf_i+0xce>
 80069bc:	6805      	ldr	r5, [r0, #0]
 80069be:	600b      	str	r3, [r1, #0]
 80069c0:	2d00      	cmp	r5, #0
 80069c2:	da03      	bge.n	80069cc <_printf_i+0xc8>
 80069c4:	232d      	movs	r3, #45	; 0x2d
 80069c6:	426d      	negs	r5, r5
 80069c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069cc:	485e      	ldr	r0, [pc, #376]	; (8006b48 <_printf_i+0x244>)
 80069ce:	230a      	movs	r3, #10
 80069d0:	e019      	b.n	8006a06 <_printf_i+0x102>
 80069d2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80069d6:	6805      	ldr	r5, [r0, #0]
 80069d8:	600b      	str	r3, [r1, #0]
 80069da:	bf18      	it	ne
 80069dc:	b22d      	sxthne	r5, r5
 80069de:	e7ef      	b.n	80069c0 <_printf_i+0xbc>
 80069e0:	680b      	ldr	r3, [r1, #0]
 80069e2:	6825      	ldr	r5, [r4, #0]
 80069e4:	1d18      	adds	r0, r3, #4
 80069e6:	6008      	str	r0, [r1, #0]
 80069e8:	0628      	lsls	r0, r5, #24
 80069ea:	d501      	bpl.n	80069f0 <_printf_i+0xec>
 80069ec:	681d      	ldr	r5, [r3, #0]
 80069ee:	e002      	b.n	80069f6 <_printf_i+0xf2>
 80069f0:	0669      	lsls	r1, r5, #25
 80069f2:	d5fb      	bpl.n	80069ec <_printf_i+0xe8>
 80069f4:	881d      	ldrh	r5, [r3, #0]
 80069f6:	4854      	ldr	r0, [pc, #336]	; (8006b48 <_printf_i+0x244>)
 80069f8:	2f6f      	cmp	r7, #111	; 0x6f
 80069fa:	bf0c      	ite	eq
 80069fc:	2308      	moveq	r3, #8
 80069fe:	230a      	movne	r3, #10
 8006a00:	2100      	movs	r1, #0
 8006a02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a06:	6866      	ldr	r6, [r4, #4]
 8006a08:	60a6      	str	r6, [r4, #8]
 8006a0a:	2e00      	cmp	r6, #0
 8006a0c:	bfa2      	ittt	ge
 8006a0e:	6821      	ldrge	r1, [r4, #0]
 8006a10:	f021 0104 	bicge.w	r1, r1, #4
 8006a14:	6021      	strge	r1, [r4, #0]
 8006a16:	b90d      	cbnz	r5, 8006a1c <_printf_i+0x118>
 8006a18:	2e00      	cmp	r6, #0
 8006a1a:	d04d      	beq.n	8006ab8 <_printf_i+0x1b4>
 8006a1c:	4616      	mov	r6, r2
 8006a1e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006a22:	fb03 5711 	mls	r7, r3, r1, r5
 8006a26:	5dc7      	ldrb	r7, [r0, r7]
 8006a28:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006a2c:	462f      	mov	r7, r5
 8006a2e:	42bb      	cmp	r3, r7
 8006a30:	460d      	mov	r5, r1
 8006a32:	d9f4      	bls.n	8006a1e <_printf_i+0x11a>
 8006a34:	2b08      	cmp	r3, #8
 8006a36:	d10b      	bne.n	8006a50 <_printf_i+0x14c>
 8006a38:	6823      	ldr	r3, [r4, #0]
 8006a3a:	07df      	lsls	r7, r3, #31
 8006a3c:	d508      	bpl.n	8006a50 <_printf_i+0x14c>
 8006a3e:	6923      	ldr	r3, [r4, #16]
 8006a40:	6861      	ldr	r1, [r4, #4]
 8006a42:	4299      	cmp	r1, r3
 8006a44:	bfde      	ittt	le
 8006a46:	2330      	movle	r3, #48	; 0x30
 8006a48:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006a4c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006a50:	1b92      	subs	r2, r2, r6
 8006a52:	6122      	str	r2, [r4, #16]
 8006a54:	f8cd a000 	str.w	sl, [sp]
 8006a58:	464b      	mov	r3, r9
 8006a5a:	aa03      	add	r2, sp, #12
 8006a5c:	4621      	mov	r1, r4
 8006a5e:	4640      	mov	r0, r8
 8006a60:	f7ff fee2 	bl	8006828 <_printf_common>
 8006a64:	3001      	adds	r0, #1
 8006a66:	d14c      	bne.n	8006b02 <_printf_i+0x1fe>
 8006a68:	f04f 30ff 	mov.w	r0, #4294967295
 8006a6c:	b004      	add	sp, #16
 8006a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a72:	4835      	ldr	r0, [pc, #212]	; (8006b48 <_printf_i+0x244>)
 8006a74:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006a78:	6823      	ldr	r3, [r4, #0]
 8006a7a:	680e      	ldr	r6, [r1, #0]
 8006a7c:	061f      	lsls	r7, r3, #24
 8006a7e:	f856 5b04 	ldr.w	r5, [r6], #4
 8006a82:	600e      	str	r6, [r1, #0]
 8006a84:	d514      	bpl.n	8006ab0 <_printf_i+0x1ac>
 8006a86:	07d9      	lsls	r1, r3, #31
 8006a88:	bf44      	itt	mi
 8006a8a:	f043 0320 	orrmi.w	r3, r3, #32
 8006a8e:	6023      	strmi	r3, [r4, #0]
 8006a90:	b91d      	cbnz	r5, 8006a9a <_printf_i+0x196>
 8006a92:	6823      	ldr	r3, [r4, #0]
 8006a94:	f023 0320 	bic.w	r3, r3, #32
 8006a98:	6023      	str	r3, [r4, #0]
 8006a9a:	2310      	movs	r3, #16
 8006a9c:	e7b0      	b.n	8006a00 <_printf_i+0xfc>
 8006a9e:	6823      	ldr	r3, [r4, #0]
 8006aa0:	f043 0320 	orr.w	r3, r3, #32
 8006aa4:	6023      	str	r3, [r4, #0]
 8006aa6:	2378      	movs	r3, #120	; 0x78
 8006aa8:	4828      	ldr	r0, [pc, #160]	; (8006b4c <_printf_i+0x248>)
 8006aaa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006aae:	e7e3      	b.n	8006a78 <_printf_i+0x174>
 8006ab0:	065e      	lsls	r6, r3, #25
 8006ab2:	bf48      	it	mi
 8006ab4:	b2ad      	uxthmi	r5, r5
 8006ab6:	e7e6      	b.n	8006a86 <_printf_i+0x182>
 8006ab8:	4616      	mov	r6, r2
 8006aba:	e7bb      	b.n	8006a34 <_printf_i+0x130>
 8006abc:	680b      	ldr	r3, [r1, #0]
 8006abe:	6826      	ldr	r6, [r4, #0]
 8006ac0:	6960      	ldr	r0, [r4, #20]
 8006ac2:	1d1d      	adds	r5, r3, #4
 8006ac4:	600d      	str	r5, [r1, #0]
 8006ac6:	0635      	lsls	r5, r6, #24
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	d501      	bpl.n	8006ad0 <_printf_i+0x1cc>
 8006acc:	6018      	str	r0, [r3, #0]
 8006ace:	e002      	b.n	8006ad6 <_printf_i+0x1d2>
 8006ad0:	0671      	lsls	r1, r6, #25
 8006ad2:	d5fb      	bpl.n	8006acc <_printf_i+0x1c8>
 8006ad4:	8018      	strh	r0, [r3, #0]
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	6123      	str	r3, [r4, #16]
 8006ada:	4616      	mov	r6, r2
 8006adc:	e7ba      	b.n	8006a54 <_printf_i+0x150>
 8006ade:	680b      	ldr	r3, [r1, #0]
 8006ae0:	1d1a      	adds	r2, r3, #4
 8006ae2:	600a      	str	r2, [r1, #0]
 8006ae4:	681e      	ldr	r6, [r3, #0]
 8006ae6:	6862      	ldr	r2, [r4, #4]
 8006ae8:	2100      	movs	r1, #0
 8006aea:	4630      	mov	r0, r6
 8006aec:	f7f9 fb90 	bl	8000210 <memchr>
 8006af0:	b108      	cbz	r0, 8006af6 <_printf_i+0x1f2>
 8006af2:	1b80      	subs	r0, r0, r6
 8006af4:	6060      	str	r0, [r4, #4]
 8006af6:	6863      	ldr	r3, [r4, #4]
 8006af8:	6123      	str	r3, [r4, #16]
 8006afa:	2300      	movs	r3, #0
 8006afc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b00:	e7a8      	b.n	8006a54 <_printf_i+0x150>
 8006b02:	6923      	ldr	r3, [r4, #16]
 8006b04:	4632      	mov	r2, r6
 8006b06:	4649      	mov	r1, r9
 8006b08:	4640      	mov	r0, r8
 8006b0a:	47d0      	blx	sl
 8006b0c:	3001      	adds	r0, #1
 8006b0e:	d0ab      	beq.n	8006a68 <_printf_i+0x164>
 8006b10:	6823      	ldr	r3, [r4, #0]
 8006b12:	079b      	lsls	r3, r3, #30
 8006b14:	d413      	bmi.n	8006b3e <_printf_i+0x23a>
 8006b16:	68e0      	ldr	r0, [r4, #12]
 8006b18:	9b03      	ldr	r3, [sp, #12]
 8006b1a:	4298      	cmp	r0, r3
 8006b1c:	bfb8      	it	lt
 8006b1e:	4618      	movlt	r0, r3
 8006b20:	e7a4      	b.n	8006a6c <_printf_i+0x168>
 8006b22:	2301      	movs	r3, #1
 8006b24:	4632      	mov	r2, r6
 8006b26:	4649      	mov	r1, r9
 8006b28:	4640      	mov	r0, r8
 8006b2a:	47d0      	blx	sl
 8006b2c:	3001      	adds	r0, #1
 8006b2e:	d09b      	beq.n	8006a68 <_printf_i+0x164>
 8006b30:	3501      	adds	r5, #1
 8006b32:	68e3      	ldr	r3, [r4, #12]
 8006b34:	9903      	ldr	r1, [sp, #12]
 8006b36:	1a5b      	subs	r3, r3, r1
 8006b38:	42ab      	cmp	r3, r5
 8006b3a:	dcf2      	bgt.n	8006b22 <_printf_i+0x21e>
 8006b3c:	e7eb      	b.n	8006b16 <_printf_i+0x212>
 8006b3e:	2500      	movs	r5, #0
 8006b40:	f104 0619 	add.w	r6, r4, #25
 8006b44:	e7f5      	b.n	8006b32 <_printf_i+0x22e>
 8006b46:	bf00      	nop
 8006b48:	08006c2d 	.word	0x08006c2d
 8006b4c:	08006c3e 	.word	0x08006c3e

08006b50 <__retarget_lock_acquire_recursive>:
 8006b50:	4770      	bx	lr

08006b52 <__retarget_lock_release_recursive>:
 8006b52:	4770      	bx	lr

08006b54 <memmove>:
 8006b54:	4288      	cmp	r0, r1
 8006b56:	b510      	push	{r4, lr}
 8006b58:	eb01 0402 	add.w	r4, r1, r2
 8006b5c:	d902      	bls.n	8006b64 <memmove+0x10>
 8006b5e:	4284      	cmp	r4, r0
 8006b60:	4623      	mov	r3, r4
 8006b62:	d807      	bhi.n	8006b74 <memmove+0x20>
 8006b64:	1e43      	subs	r3, r0, #1
 8006b66:	42a1      	cmp	r1, r4
 8006b68:	d008      	beq.n	8006b7c <memmove+0x28>
 8006b6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006b72:	e7f8      	b.n	8006b66 <memmove+0x12>
 8006b74:	4402      	add	r2, r0
 8006b76:	4601      	mov	r1, r0
 8006b78:	428a      	cmp	r2, r1
 8006b7a:	d100      	bne.n	8006b7e <memmove+0x2a>
 8006b7c:	bd10      	pop	{r4, pc}
 8006b7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006b82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006b86:	e7f7      	b.n	8006b78 <memmove+0x24>

08006b88 <_realloc_r>:
 8006b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b8a:	4607      	mov	r7, r0
 8006b8c:	4614      	mov	r4, r2
 8006b8e:	460e      	mov	r6, r1
 8006b90:	b921      	cbnz	r1, 8006b9c <_realloc_r+0x14>
 8006b92:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006b96:	4611      	mov	r1, r2
 8006b98:	f7ff bc54 	b.w	8006444 <_malloc_r>
 8006b9c:	b922      	cbnz	r2, 8006ba8 <_realloc_r+0x20>
 8006b9e:	f7ff fc01 	bl	80063a4 <_free_r>
 8006ba2:	4625      	mov	r5, r4
 8006ba4:	4628      	mov	r0, r5
 8006ba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ba8:	f000 f814 	bl	8006bd4 <_malloc_usable_size_r>
 8006bac:	42a0      	cmp	r0, r4
 8006bae:	d20f      	bcs.n	8006bd0 <_realloc_r+0x48>
 8006bb0:	4621      	mov	r1, r4
 8006bb2:	4638      	mov	r0, r7
 8006bb4:	f7ff fc46 	bl	8006444 <_malloc_r>
 8006bb8:	4605      	mov	r5, r0
 8006bba:	2800      	cmp	r0, #0
 8006bbc:	d0f2      	beq.n	8006ba4 <_realloc_r+0x1c>
 8006bbe:	4631      	mov	r1, r6
 8006bc0:	4622      	mov	r2, r4
 8006bc2:	f7ff fbc9 	bl	8006358 <memcpy>
 8006bc6:	4631      	mov	r1, r6
 8006bc8:	4638      	mov	r0, r7
 8006bca:	f7ff fbeb 	bl	80063a4 <_free_r>
 8006bce:	e7e9      	b.n	8006ba4 <_realloc_r+0x1c>
 8006bd0:	4635      	mov	r5, r6
 8006bd2:	e7e7      	b.n	8006ba4 <_realloc_r+0x1c>

08006bd4 <_malloc_usable_size_r>:
 8006bd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bd8:	1f18      	subs	r0, r3, #4
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	bfbc      	itt	lt
 8006bde:	580b      	ldrlt	r3, [r1, r0]
 8006be0:	18c0      	addlt	r0, r0, r3
 8006be2:	4770      	bx	lr

08006be4 <_init>:
 8006be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006be6:	bf00      	nop
 8006be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bea:	bc08      	pop	{r3}
 8006bec:	469e      	mov	lr, r3
 8006bee:	4770      	bx	lr

08006bf0 <_fini>:
 8006bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bf2:	bf00      	nop
 8006bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bf6:	bc08      	pop	{r3}
 8006bf8:	469e      	mov	lr, r3
 8006bfa:	4770      	bx	lr
