
Projekt_Cube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f68  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08007138  08007138  00017138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800718c  0800718c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800718c  0800718c  0001718c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007194  08007194  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007194  08007194  00017194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007198  08007198  00017198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800719c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000714  20000070  0800720c  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000784  0800720c  00020784  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000191b4  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003110  00000000  00000000  00039254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011f8  00000000  00000000  0003c368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010a0  00000000  00000000  0003d560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027ac8  00000000  00000000  0003e600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001784a  00000000  00000000  000660c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f8564  00000000  00000000  0007d912  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00175e76  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000505c  00000000  00000000  00175ecc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007120 	.word	0x08007120

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08007120 	.word	0x08007120

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2iz>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a64:	d215      	bcs.n	8000a92 <__aeabi_d2iz+0x36>
 8000a66:	d511      	bpl.n	8000a8c <__aeabi_d2iz+0x30>
 8000a68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d912      	bls.n	8000a98 <__aeabi_d2iz+0x3c>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a82:	fa23 f002 	lsr.w	r0, r3, r2
 8000a86:	bf18      	it	ne
 8000a88:	4240      	negne	r0, r0
 8000a8a:	4770      	bx	lr
 8000a8c:	f04f 0000 	mov.w	r0, #0
 8000a90:	4770      	bx	lr
 8000a92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a96:	d105      	bne.n	8000aa4 <__aeabi_d2iz+0x48>
 8000a98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a9c:	bf08      	it	eq
 8000a9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_d2uiz>:
 8000aac:	004a      	lsls	r2, r1, #1
 8000aae:	d211      	bcs.n	8000ad4 <__aeabi_d2uiz+0x28>
 8000ab0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab4:	d211      	bcs.n	8000ada <__aeabi_d2uiz+0x2e>
 8000ab6:	d50d      	bpl.n	8000ad4 <__aeabi_d2uiz+0x28>
 8000ab8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000abc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac0:	d40e      	bmi.n	8000ae0 <__aeabi_d2uiz+0x34>
 8000ac2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ace:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad2:	4770      	bx	lr
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ade:	d102      	bne.n	8000ae6 <__aeabi_d2uiz+0x3a>
 8000ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae4:	4770      	bx	lr
 8000ae6:	f04f 0000 	mov.w	r0, #0
 8000aea:	4770      	bx	lr

08000aec <__aeabi_uldivmod>:
 8000aec:	b953      	cbnz	r3, 8000b04 <__aeabi_uldivmod+0x18>
 8000aee:	b94a      	cbnz	r2, 8000b04 <__aeabi_uldivmod+0x18>
 8000af0:	2900      	cmp	r1, #0
 8000af2:	bf08      	it	eq
 8000af4:	2800      	cmpeq	r0, #0
 8000af6:	bf1c      	itt	ne
 8000af8:	f04f 31ff 	movne.w	r1, #4294967295
 8000afc:	f04f 30ff 	movne.w	r0, #4294967295
 8000b00:	f000 b96e 	b.w	8000de0 <__aeabi_idiv0>
 8000b04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b0c:	f000 f806 	bl	8000b1c <__udivmoddi4>
 8000b10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b18:	b004      	add	sp, #16
 8000b1a:	4770      	bx	lr

08000b1c <__udivmoddi4>:
 8000b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b20:	9d08      	ldr	r5, [sp, #32]
 8000b22:	4604      	mov	r4, r0
 8000b24:	468c      	mov	ip, r1
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	f040 8083 	bne.w	8000c32 <__udivmoddi4+0x116>
 8000b2c:	428a      	cmp	r2, r1
 8000b2e:	4617      	mov	r7, r2
 8000b30:	d947      	bls.n	8000bc2 <__udivmoddi4+0xa6>
 8000b32:	fab2 f282 	clz	r2, r2
 8000b36:	b142      	cbz	r2, 8000b4a <__udivmoddi4+0x2e>
 8000b38:	f1c2 0020 	rsb	r0, r2, #32
 8000b3c:	fa24 f000 	lsr.w	r0, r4, r0
 8000b40:	4091      	lsls	r1, r2
 8000b42:	4097      	lsls	r7, r2
 8000b44:	ea40 0c01 	orr.w	ip, r0, r1
 8000b48:	4094      	lsls	r4, r2
 8000b4a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b4e:	0c23      	lsrs	r3, r4, #16
 8000b50:	fbbc f6f8 	udiv	r6, ip, r8
 8000b54:	fa1f fe87 	uxth.w	lr, r7
 8000b58:	fb08 c116 	mls	r1, r8, r6, ip
 8000b5c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b60:	fb06 f10e 	mul.w	r1, r6, lr
 8000b64:	4299      	cmp	r1, r3
 8000b66:	d909      	bls.n	8000b7c <__udivmoddi4+0x60>
 8000b68:	18fb      	adds	r3, r7, r3
 8000b6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b6e:	f080 8119 	bcs.w	8000da4 <__udivmoddi4+0x288>
 8000b72:	4299      	cmp	r1, r3
 8000b74:	f240 8116 	bls.w	8000da4 <__udivmoddi4+0x288>
 8000b78:	3e02      	subs	r6, #2
 8000b7a:	443b      	add	r3, r7
 8000b7c:	1a5b      	subs	r3, r3, r1
 8000b7e:	b2a4      	uxth	r4, r4
 8000b80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b84:	fb08 3310 	mls	r3, r8, r0, r3
 8000b88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b8c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b90:	45a6      	cmp	lr, r4
 8000b92:	d909      	bls.n	8000ba8 <__udivmoddi4+0x8c>
 8000b94:	193c      	adds	r4, r7, r4
 8000b96:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b9a:	f080 8105 	bcs.w	8000da8 <__udivmoddi4+0x28c>
 8000b9e:	45a6      	cmp	lr, r4
 8000ba0:	f240 8102 	bls.w	8000da8 <__udivmoddi4+0x28c>
 8000ba4:	3802      	subs	r0, #2
 8000ba6:	443c      	add	r4, r7
 8000ba8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bac:	eba4 040e 	sub.w	r4, r4, lr
 8000bb0:	2600      	movs	r6, #0
 8000bb2:	b11d      	cbz	r5, 8000bbc <__udivmoddi4+0xa0>
 8000bb4:	40d4      	lsrs	r4, r2
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000bbc:	4631      	mov	r1, r6
 8000bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc2:	b902      	cbnz	r2, 8000bc6 <__udivmoddi4+0xaa>
 8000bc4:	deff      	udf	#255	; 0xff
 8000bc6:	fab2 f282 	clz	r2, r2
 8000bca:	2a00      	cmp	r2, #0
 8000bcc:	d150      	bne.n	8000c70 <__udivmoddi4+0x154>
 8000bce:	1bcb      	subs	r3, r1, r7
 8000bd0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bd4:	fa1f f887 	uxth.w	r8, r7
 8000bd8:	2601      	movs	r6, #1
 8000bda:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bde:	0c21      	lsrs	r1, r4, #16
 8000be0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000be4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000be8:	fb08 f30c 	mul.w	r3, r8, ip
 8000bec:	428b      	cmp	r3, r1
 8000bee:	d907      	bls.n	8000c00 <__udivmoddi4+0xe4>
 8000bf0:	1879      	adds	r1, r7, r1
 8000bf2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bf6:	d202      	bcs.n	8000bfe <__udivmoddi4+0xe2>
 8000bf8:	428b      	cmp	r3, r1
 8000bfa:	f200 80e9 	bhi.w	8000dd0 <__udivmoddi4+0x2b4>
 8000bfe:	4684      	mov	ip, r0
 8000c00:	1ac9      	subs	r1, r1, r3
 8000c02:	b2a3      	uxth	r3, r4
 8000c04:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c08:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c0c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c10:	fb08 f800 	mul.w	r8, r8, r0
 8000c14:	45a0      	cmp	r8, r4
 8000c16:	d907      	bls.n	8000c28 <__udivmoddi4+0x10c>
 8000c18:	193c      	adds	r4, r7, r4
 8000c1a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c1e:	d202      	bcs.n	8000c26 <__udivmoddi4+0x10a>
 8000c20:	45a0      	cmp	r8, r4
 8000c22:	f200 80d9 	bhi.w	8000dd8 <__udivmoddi4+0x2bc>
 8000c26:	4618      	mov	r0, r3
 8000c28:	eba4 0408 	sub.w	r4, r4, r8
 8000c2c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c30:	e7bf      	b.n	8000bb2 <__udivmoddi4+0x96>
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0x12e>
 8000c36:	2d00      	cmp	r5, #0
 8000c38:	f000 80b1 	beq.w	8000d9e <__udivmoddi4+0x282>
 8000c3c:	2600      	movs	r6, #0
 8000c3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c42:	4630      	mov	r0, r6
 8000c44:	4631      	mov	r1, r6
 8000c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4a:	fab3 f683 	clz	r6, r3
 8000c4e:	2e00      	cmp	r6, #0
 8000c50:	d14a      	bne.n	8000ce8 <__udivmoddi4+0x1cc>
 8000c52:	428b      	cmp	r3, r1
 8000c54:	d302      	bcc.n	8000c5c <__udivmoddi4+0x140>
 8000c56:	4282      	cmp	r2, r0
 8000c58:	f200 80b8 	bhi.w	8000dcc <__udivmoddi4+0x2b0>
 8000c5c:	1a84      	subs	r4, r0, r2
 8000c5e:	eb61 0103 	sbc.w	r1, r1, r3
 8000c62:	2001      	movs	r0, #1
 8000c64:	468c      	mov	ip, r1
 8000c66:	2d00      	cmp	r5, #0
 8000c68:	d0a8      	beq.n	8000bbc <__udivmoddi4+0xa0>
 8000c6a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c6e:	e7a5      	b.n	8000bbc <__udivmoddi4+0xa0>
 8000c70:	f1c2 0320 	rsb	r3, r2, #32
 8000c74:	fa20 f603 	lsr.w	r6, r0, r3
 8000c78:	4097      	lsls	r7, r2
 8000c7a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c7e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c82:	40d9      	lsrs	r1, r3
 8000c84:	4330      	orrs	r0, r6
 8000c86:	0c03      	lsrs	r3, r0, #16
 8000c88:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c8c:	fa1f f887 	uxth.w	r8, r7
 8000c90:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c98:	fb06 f108 	mul.w	r1, r6, r8
 8000c9c:	4299      	cmp	r1, r3
 8000c9e:	fa04 f402 	lsl.w	r4, r4, r2
 8000ca2:	d909      	bls.n	8000cb8 <__udivmoddi4+0x19c>
 8000ca4:	18fb      	adds	r3, r7, r3
 8000ca6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000caa:	f080 808d 	bcs.w	8000dc8 <__udivmoddi4+0x2ac>
 8000cae:	4299      	cmp	r1, r3
 8000cb0:	f240 808a 	bls.w	8000dc8 <__udivmoddi4+0x2ac>
 8000cb4:	3e02      	subs	r6, #2
 8000cb6:	443b      	add	r3, r7
 8000cb8:	1a5b      	subs	r3, r3, r1
 8000cba:	b281      	uxth	r1, r0
 8000cbc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cc0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cc4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc8:	fb00 f308 	mul.w	r3, r0, r8
 8000ccc:	428b      	cmp	r3, r1
 8000cce:	d907      	bls.n	8000ce0 <__udivmoddi4+0x1c4>
 8000cd0:	1879      	adds	r1, r7, r1
 8000cd2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cd6:	d273      	bcs.n	8000dc0 <__udivmoddi4+0x2a4>
 8000cd8:	428b      	cmp	r3, r1
 8000cda:	d971      	bls.n	8000dc0 <__udivmoddi4+0x2a4>
 8000cdc:	3802      	subs	r0, #2
 8000cde:	4439      	add	r1, r7
 8000ce0:	1acb      	subs	r3, r1, r3
 8000ce2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ce6:	e778      	b.n	8000bda <__udivmoddi4+0xbe>
 8000ce8:	f1c6 0c20 	rsb	ip, r6, #32
 8000cec:	fa03 f406 	lsl.w	r4, r3, r6
 8000cf0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000cf4:	431c      	orrs	r4, r3
 8000cf6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000cfe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d02:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d06:	431f      	orrs	r7, r3
 8000d08:	0c3b      	lsrs	r3, r7, #16
 8000d0a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d0e:	fa1f f884 	uxth.w	r8, r4
 8000d12:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d16:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d1a:	fb09 fa08 	mul.w	sl, r9, r8
 8000d1e:	458a      	cmp	sl, r1
 8000d20:	fa02 f206 	lsl.w	r2, r2, r6
 8000d24:	fa00 f306 	lsl.w	r3, r0, r6
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x220>
 8000d2a:	1861      	adds	r1, r4, r1
 8000d2c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d30:	d248      	bcs.n	8000dc4 <__udivmoddi4+0x2a8>
 8000d32:	458a      	cmp	sl, r1
 8000d34:	d946      	bls.n	8000dc4 <__udivmoddi4+0x2a8>
 8000d36:	f1a9 0902 	sub.w	r9, r9, #2
 8000d3a:	4421      	add	r1, r4
 8000d3c:	eba1 010a 	sub.w	r1, r1, sl
 8000d40:	b2bf      	uxth	r7, r7
 8000d42:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d46:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d4a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d4e:	fb00 f808 	mul.w	r8, r0, r8
 8000d52:	45b8      	cmp	r8, r7
 8000d54:	d907      	bls.n	8000d66 <__udivmoddi4+0x24a>
 8000d56:	19e7      	adds	r7, r4, r7
 8000d58:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d5c:	d22e      	bcs.n	8000dbc <__udivmoddi4+0x2a0>
 8000d5e:	45b8      	cmp	r8, r7
 8000d60:	d92c      	bls.n	8000dbc <__udivmoddi4+0x2a0>
 8000d62:	3802      	subs	r0, #2
 8000d64:	4427      	add	r7, r4
 8000d66:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d6a:	eba7 0708 	sub.w	r7, r7, r8
 8000d6e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d72:	454f      	cmp	r7, r9
 8000d74:	46c6      	mov	lr, r8
 8000d76:	4649      	mov	r1, r9
 8000d78:	d31a      	bcc.n	8000db0 <__udivmoddi4+0x294>
 8000d7a:	d017      	beq.n	8000dac <__udivmoddi4+0x290>
 8000d7c:	b15d      	cbz	r5, 8000d96 <__udivmoddi4+0x27a>
 8000d7e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d82:	eb67 0701 	sbc.w	r7, r7, r1
 8000d86:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d8a:	40f2      	lsrs	r2, r6
 8000d8c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d90:	40f7      	lsrs	r7, r6
 8000d92:	e9c5 2700 	strd	r2, r7, [r5]
 8000d96:	2600      	movs	r6, #0
 8000d98:	4631      	mov	r1, r6
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	462e      	mov	r6, r5
 8000da0:	4628      	mov	r0, r5
 8000da2:	e70b      	b.n	8000bbc <__udivmoddi4+0xa0>
 8000da4:	4606      	mov	r6, r0
 8000da6:	e6e9      	b.n	8000b7c <__udivmoddi4+0x60>
 8000da8:	4618      	mov	r0, r3
 8000daa:	e6fd      	b.n	8000ba8 <__udivmoddi4+0x8c>
 8000dac:	4543      	cmp	r3, r8
 8000dae:	d2e5      	bcs.n	8000d7c <__udivmoddi4+0x260>
 8000db0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000db4:	eb69 0104 	sbc.w	r1, r9, r4
 8000db8:	3801      	subs	r0, #1
 8000dba:	e7df      	b.n	8000d7c <__udivmoddi4+0x260>
 8000dbc:	4608      	mov	r0, r1
 8000dbe:	e7d2      	b.n	8000d66 <__udivmoddi4+0x24a>
 8000dc0:	4660      	mov	r0, ip
 8000dc2:	e78d      	b.n	8000ce0 <__udivmoddi4+0x1c4>
 8000dc4:	4681      	mov	r9, r0
 8000dc6:	e7b9      	b.n	8000d3c <__udivmoddi4+0x220>
 8000dc8:	4666      	mov	r6, ip
 8000dca:	e775      	b.n	8000cb8 <__udivmoddi4+0x19c>
 8000dcc:	4630      	mov	r0, r6
 8000dce:	e74a      	b.n	8000c66 <__udivmoddi4+0x14a>
 8000dd0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dd4:	4439      	add	r1, r7
 8000dd6:	e713      	b.n	8000c00 <__udivmoddi4+0xe4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	443c      	add	r4, r7
 8000ddc:	e724      	b.n	8000c28 <__udivmoddi4+0x10c>
 8000dde:	bf00      	nop

08000de0 <__aeabi_idiv0>:
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop

08000de4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dea:	463b      	mov	r3, r7
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000df6:	4b21      	ldr	r3, [pc, #132]	; (8000e7c <MX_ADC1_Init+0x98>)
 8000df8:	4a21      	ldr	r2, [pc, #132]	; (8000e80 <MX_ADC1_Init+0x9c>)
 8000dfa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000dfc:	4b1f      	ldr	r3, [pc, #124]	; (8000e7c <MX_ADC1_Init+0x98>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e02:	4b1e      	ldr	r3, [pc, #120]	; (8000e7c <MX_ADC1_Init+0x98>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e08:	4b1c      	ldr	r3, [pc, #112]	; (8000e7c <MX_ADC1_Init+0x98>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e0e:	4b1b      	ldr	r3, [pc, #108]	; (8000e7c <MX_ADC1_Init+0x98>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e14:	4b19      	ldr	r3, [pc, #100]	; (8000e7c <MX_ADC1_Init+0x98>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e1c:	4b17      	ldr	r3, [pc, #92]	; (8000e7c <MX_ADC1_Init+0x98>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e22:	4b16      	ldr	r3, [pc, #88]	; (8000e7c <MX_ADC1_Init+0x98>)
 8000e24:	4a17      	ldr	r2, [pc, #92]	; (8000e84 <MX_ADC1_Init+0xa0>)
 8000e26:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e28:	4b14      	ldr	r3, [pc, #80]	; (8000e7c <MX_ADC1_Init+0x98>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e2e:	4b13      	ldr	r3, [pc, #76]	; (8000e7c <MX_ADC1_Init+0x98>)
 8000e30:	2201      	movs	r2, #1
 8000e32:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e34:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <MX_ADC1_Init+0x98>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e3c:	4b0f      	ldr	r3, [pc, #60]	; (8000e7c <MX_ADC1_Init+0x98>)
 8000e3e:	2201      	movs	r2, #1
 8000e40:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e42:	480e      	ldr	r0, [pc, #56]	; (8000e7c <MX_ADC1_Init+0x98>)
 8000e44:	f001 f8f2 	bl	800202c <HAL_ADC_Init>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000e4e:	f000 fa57 	bl	8001300 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000e52:	2303      	movs	r3, #3
 8000e54:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e56:	2301      	movs	r3, #1
 8000e58:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e5e:	463b      	mov	r3, r7
 8000e60:	4619      	mov	r1, r3
 8000e62:	4806      	ldr	r0, [pc, #24]	; (8000e7c <MX_ADC1_Init+0x98>)
 8000e64:	f001 fa8c 	bl	8002380 <HAL_ADC_ConfigChannel>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000e6e:	f000 fa47 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e72:	bf00      	nop
 8000e74:	3710      	adds	r7, #16
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	200000fc 	.word	0x200000fc
 8000e80:	40012000 	.word	0x40012000
 8000e84:	0f000001 	.word	0x0f000001

08000e88 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08a      	sub	sp, #40	; 0x28
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e90:	f107 0314 	add.w	r3, r7, #20
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a15      	ldr	r2, [pc, #84]	; (8000efc <HAL_ADC_MspInit+0x74>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d123      	bne.n	8000ef2 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000eaa:	4b15      	ldr	r3, [pc, #84]	; (8000f00 <HAL_ADC_MspInit+0x78>)
 8000eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eae:	4a14      	ldr	r2, [pc, #80]	; (8000f00 <HAL_ADC_MspInit+0x78>)
 8000eb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000eb6:	4b12      	ldr	r3, [pc, #72]	; (8000f00 <HAL_ADC_MspInit+0x78>)
 8000eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ebe:	613b      	str	r3, [r7, #16]
 8000ec0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec2:	4b0f      	ldr	r3, [pc, #60]	; (8000f00 <HAL_ADC_MspInit+0x78>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	4a0e      	ldr	r2, [pc, #56]	; (8000f00 <HAL_ADC_MspInit+0x78>)
 8000ec8:	f043 0301 	orr.w	r3, r3, #1
 8000ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ece:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <HAL_ADC_MspInit+0x78>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000eda:	2308      	movs	r3, #8
 8000edc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee6:	f107 0314 	add.w	r3, r7, #20
 8000eea:	4619      	mov	r1, r3
 8000eec:	4805      	ldr	r0, [pc, #20]	; (8000f04 <HAL_ADC_MspInit+0x7c>)
 8000eee:	f001 fda9 	bl	8002a44 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000ef2:	bf00      	nop
 8000ef4:	3728      	adds	r7, #40	; 0x28
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40012000 	.word	0x40012000
 8000f00:	40023800 	.word	0x40023800
 8000f04:	40020000 	.word	0x40020000

08000f08 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b08e      	sub	sp, #56	; 0x38
 8000f0c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	605a      	str	r2, [r3, #4]
 8000f18:	609a      	str	r2, [r3, #8]
 8000f1a:	60da      	str	r2, [r3, #12]
 8000f1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f1e:	4b91      	ldr	r3, [pc, #580]	; (8001164 <MX_GPIO_Init+0x25c>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	4a90      	ldr	r2, [pc, #576]	; (8001164 <MX_GPIO_Init+0x25c>)
 8000f24:	f043 0304 	orr.w	r3, r3, #4
 8000f28:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2a:	4b8e      	ldr	r3, [pc, #568]	; (8001164 <MX_GPIO_Init+0x25c>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	f003 0304 	and.w	r3, r3, #4
 8000f32:	623b      	str	r3, [r7, #32]
 8000f34:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f36:	4b8b      	ldr	r3, [pc, #556]	; (8001164 <MX_GPIO_Init+0x25c>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	4a8a      	ldr	r2, [pc, #552]	; (8001164 <MX_GPIO_Init+0x25c>)
 8000f3c:	f043 0320 	orr.w	r3, r3, #32
 8000f40:	6313      	str	r3, [r2, #48]	; 0x30
 8000f42:	4b88      	ldr	r3, [pc, #544]	; (8001164 <MX_GPIO_Init+0x25c>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	f003 0320 	and.w	r3, r3, #32
 8000f4a:	61fb      	str	r3, [r7, #28]
 8000f4c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f4e:	4b85      	ldr	r3, [pc, #532]	; (8001164 <MX_GPIO_Init+0x25c>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	4a84      	ldr	r2, [pc, #528]	; (8001164 <MX_GPIO_Init+0x25c>)
 8000f54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f58:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5a:	4b82      	ldr	r3, [pc, #520]	; (8001164 <MX_GPIO_Init+0x25c>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f62:	61bb      	str	r3, [r7, #24]
 8000f64:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f66:	4b7f      	ldr	r3, [pc, #508]	; (8001164 <MX_GPIO_Init+0x25c>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	4a7e      	ldr	r2, [pc, #504]	; (8001164 <MX_GPIO_Init+0x25c>)
 8000f6c:	f043 0301 	orr.w	r3, r3, #1
 8000f70:	6313      	str	r3, [r2, #48]	; 0x30
 8000f72:	4b7c      	ldr	r3, [pc, #496]	; (8001164 <MX_GPIO_Init+0x25c>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	f003 0301 	and.w	r3, r3, #1
 8000f7a:	617b      	str	r3, [r7, #20]
 8000f7c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7e:	4b79      	ldr	r3, [pc, #484]	; (8001164 <MX_GPIO_Init+0x25c>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	4a78      	ldr	r2, [pc, #480]	; (8001164 <MX_GPIO_Init+0x25c>)
 8000f84:	f043 0302 	orr.w	r3, r3, #2
 8000f88:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8a:	4b76      	ldr	r3, [pc, #472]	; (8001164 <MX_GPIO_Init+0x25c>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	f003 0302 	and.w	r3, r3, #2
 8000f92:	613b      	str	r3, [r7, #16]
 8000f94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f96:	4b73      	ldr	r3, [pc, #460]	; (8001164 <MX_GPIO_Init+0x25c>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	4a72      	ldr	r2, [pc, #456]	; (8001164 <MX_GPIO_Init+0x25c>)
 8000f9c:	f043 0310 	orr.w	r3, r3, #16
 8000fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa2:	4b70      	ldr	r3, [pc, #448]	; (8001164 <MX_GPIO_Init+0x25c>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	f003 0310 	and.w	r3, r3, #16
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fae:	4b6d      	ldr	r3, [pc, #436]	; (8001164 <MX_GPIO_Init+0x25c>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	4a6c      	ldr	r2, [pc, #432]	; (8001164 <MX_GPIO_Init+0x25c>)
 8000fb4:	f043 0308 	orr.w	r3, r3, #8
 8000fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fba:	4b6a      	ldr	r3, [pc, #424]	; (8001164 <MX_GPIO_Init+0x25c>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	f003 0308 	and.w	r3, r3, #8
 8000fc2:	60bb      	str	r3, [r7, #8]
 8000fc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fc6:	4b67      	ldr	r3, [pc, #412]	; (8001164 <MX_GPIO_Init+0x25c>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	4a66      	ldr	r2, [pc, #408]	; (8001164 <MX_GPIO_Init+0x25c>)
 8000fcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd2:	4b64      	ldr	r3, [pc, #400]	; (8001164 <MX_GPIO_Init+0x25c>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fda:	607b      	str	r3, [r7, #4]
 8000fdc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, D6_Pin|D7_Pin|RS_Pin, GPIO_PIN_RESET);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f44f 6185 	mov.w	r1, #1064	; 0x428
 8000fe4:	4860      	ldr	r0, [pc, #384]	; (8001168 <MX_GPIO_Init+0x260>)
 8000fe6:	f001 fed9 	bl	8002d9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, D4_Pin|D5_Pin, GPIO_PIN_RESET);
 8000fea:	2200      	movs	r2, #0
 8000fec:	2109      	movs	r1, #9
 8000fee:	485f      	ldr	r0, [pc, #380]	; (800116c <MX_GPIO_Init+0x264>)
 8000ff0:	f001 fed4 	bl	8002d9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f244 0181 	movw	r1, #16513	; 0x4081
 8000ffa:	485d      	ldr	r0, [pc, #372]	; (8001170 <MX_GPIO_Init+0x268>)
 8000ffc:	f001 fece 	bl	8002d9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001000:	2200      	movs	r2, #0
 8001002:	2140      	movs	r1, #64	; 0x40
 8001004:	485b      	ldr	r0, [pc, #364]	; (8001174 <MX_GPIO_Init+0x26c>)
 8001006:	f001 fec9 	bl	8002d9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 800100a:	2200      	movs	r2, #0
 800100c:	2180      	movs	r1, #128	; 0x80
 800100e:	485a      	ldr	r0, [pc, #360]	; (8001178 <MX_GPIO_Init+0x270>)
 8001010:	f001 fec4 	bl	8002d9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001014:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001018:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800101a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800101e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001024:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001028:	4619      	mov	r1, r3
 800102a:	4850      	ldr	r0, [pc, #320]	; (800116c <MX_GPIO_Init+0x264>)
 800102c:	f001 fd0a 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = D6_Pin|D7_Pin|RS_Pin;
 8001030:	f44f 6385 	mov.w	r3, #1064	; 0x428
 8001034:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001036:	2301      	movs	r3, #1
 8001038:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103a:	2300      	movs	r3, #0
 800103c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103e:	2300      	movs	r3, #0
 8001040:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001042:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001046:	4619      	mov	r1, r3
 8001048:	4847      	ldr	r0, [pc, #284]	; (8001168 <MX_GPIO_Init+0x260>)
 800104a:	f001 fcfb 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin;
 800104e:	2309      	movs	r3, #9
 8001050:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001052:	2301      	movs	r3, #1
 8001054:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105a:	2300      	movs	r3, #0
 800105c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800105e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001062:	4619      	mov	r1, r3
 8001064:	4841      	ldr	r0, [pc, #260]	; (800116c <MX_GPIO_Init+0x264>)
 8001066:	f001 fced 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800106a:	2332      	movs	r3, #50	; 0x32
 800106c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106e:	2302      	movs	r3, #2
 8001070:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001076:	2303      	movs	r3, #3
 8001078:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800107a:	230b      	movs	r3, #11
 800107c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800107e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001082:	4619      	mov	r1, r3
 8001084:	4839      	ldr	r0, [pc, #228]	; (800116c <MX_GPIO_Init+0x264>)
 8001086:	f001 fcdd 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800108a:	2386      	movs	r3, #134	; 0x86
 800108c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108e:	2302      	movs	r3, #2
 8001090:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001096:	2303      	movs	r3, #3
 8001098:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800109a:	230b      	movs	r3, #11
 800109c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010a2:	4619      	mov	r1, r3
 80010a4:	4835      	ldr	r0, [pc, #212]	; (800117c <MX_GPIO_Init+0x274>)
 80010a6:	f001 fccd 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80010aa:	f244 0381 	movw	r3, #16513	; 0x4081
 80010ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b0:	2301      	movs	r3, #1
 80010b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b8:	2300      	movs	r3, #0
 80010ba:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c0:	4619      	mov	r1, r3
 80010c2:	482b      	ldr	r0, [pc, #172]	; (8001170 <MX_GPIO_Init+0x268>)
 80010c4:	f001 fcbe 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80010c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ce:	2302      	movs	r3, #2
 80010d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d6:	2303      	movs	r3, #3
 80010d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010da:	230b      	movs	r3, #11
 80010dc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80010de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010e2:	4619      	mov	r1, r3
 80010e4:	4822      	ldr	r0, [pc, #136]	; (8001170 <MX_GPIO_Init+0x268>)
 80010e6:	f001 fcad 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80010ea:	2340      	movs	r3, #64	; 0x40
 80010ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ee:	2301      	movs	r3, #1
 80010f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f6:	2300      	movs	r3, #0
 80010f8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80010fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010fe:	4619      	mov	r1, r3
 8001100:	481c      	ldr	r0, [pc, #112]	; (8001174 <MX_GPIO_Init+0x26c>)
 8001102:	f001 fc9f 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001106:	2380      	movs	r3, #128	; 0x80
 8001108:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800110a:	2300      	movs	r3, #0
 800110c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001112:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001116:	4619      	mov	r1, r3
 8001118:	4816      	ldr	r0, [pc, #88]	; (8001174 <MX_GPIO_Init+0x26c>)
 800111a:	f001 fc93 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EN_Pin;
 800111e:	2380      	movs	r3, #128	; 0x80
 8001120:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001122:	2301      	movs	r3, #1
 8001124:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	2300      	movs	r3, #0
 8001128:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112a:	2300      	movs	r3, #0
 800112c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(EN_GPIO_Port, &GPIO_InitStruct);
 800112e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001132:	4619      	mov	r1, r3
 8001134:	4810      	ldr	r0, [pc, #64]	; (8001178 <MX_GPIO_Init+0x270>)
 8001136:	f001 fc85 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800113a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800113e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001140:	2302      	movs	r3, #2
 8001142:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001148:	2303      	movs	r3, #3
 800114a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800114c:	230b      	movs	r3, #11
 800114e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001150:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001154:	4619      	mov	r1, r3
 8001156:	4807      	ldr	r0, [pc, #28]	; (8001174 <MX_GPIO_Init+0x26c>)
 8001158:	f001 fc74 	bl	8002a44 <HAL_GPIO_Init>

}
 800115c:	bf00      	nop
 800115e:	3738      	adds	r7, #56	; 0x38
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	40023800 	.word	0x40023800
 8001168:	40021400 	.word	0x40021400
 800116c:	40020800 	.word	0x40020800
 8001170:	40020400 	.word	0x40020400
 8001174:	40021800 	.word	0x40021800
 8001178:	40020c00 	.word	0x40020c00
 800117c:	40020000 	.word	0x40020000

08001180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001184:	f000 fed1 	bl	8001f2a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001188:	f000 f82a 	bl	80011e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800118c:	f7ff febc 	bl	8000f08 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001190:	f000 fda4 	bl	8001cdc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001194:	f000 fe16 	bl	8001dc4 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM4_Init();
 8001198:	f000 fa68 	bl	800166c <MX_TIM4_Init>
  MX_TIM3_Init();
 800119c:	f000 fa10 	bl	80015c0 <MX_TIM3_Init>
  MX_TIM1_Init();
 80011a0:	f000 f962 	bl	8001468 <MX_TIM1_Init>
  MX_ADC1_Init();
 80011a4:	f7ff fe1e 	bl	8000de4 <MX_ADC1_Init>
  MX_TIM9_Init();
 80011a8:	f000 faae 	bl	8001708 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80011ac:	2100      	movs	r1, #0
 80011ae:	4809      	ldr	r0, [pc, #36]	; (80011d4 <main+0x54>)
 80011b0:	f003 f92e 	bl	8004410 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim4);
 80011b4:	4808      	ldr	r0, [pc, #32]	; (80011d8 <main+0x58>)
 80011b6:	f003 f851 	bl	800425c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1);
 80011ba:	2100      	movs	r1, #0
 80011bc:	4807      	ldr	r0, [pc, #28]	; (80011dc <main+0x5c>)
 80011be:	f003 fac7 	bl	8004750 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_2);
 80011c2:	2104      	movs	r1, #4
 80011c4:	4805      	ldr	r0, [pc, #20]	; (80011dc <main+0x5c>)
 80011c6:	f003 fac3 	bl	8004750 <HAL_TIM_Encoder_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1) {
		HAL_Delay(300);
 80011ca:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80011ce:	f000 ff09 	bl	8001fe4 <HAL_Delay>
 80011d2:	e7fa      	b.n	80011ca <main+0x4a>
 80011d4:	20000250 	.word	0x20000250
 80011d8:	200001b8 	.word	0x200001b8
 80011dc:	20000204 	.word	0x20000204

080011e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b0b4      	sub	sp, #208	; 0xd0
 80011e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011e6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80011ea:	2230      	movs	r2, #48	; 0x30
 80011ec:	2100      	movs	r1, #0
 80011ee:	4618      	mov	r0, r3
 80011f0:	f005 fb50 	bl	8006894 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011f4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	60da      	str	r2, [r3, #12]
 8001202:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001204:	f107 0308 	add.w	r3, r7, #8
 8001208:	2284      	movs	r2, #132	; 0x84
 800120a:	2100      	movs	r1, #0
 800120c:	4618      	mov	r0, r3
 800120e:	f005 fb41 	bl	8006894 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001212:	f001 ff25 	bl	8003060 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001216:	4b37      	ldr	r3, [pc, #220]	; (80012f4 <SystemClock_Config+0x114>)
 8001218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121a:	4a36      	ldr	r2, [pc, #216]	; (80012f4 <SystemClock_Config+0x114>)
 800121c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001220:	6413      	str	r3, [r2, #64]	; 0x40
 8001222:	4b34      	ldr	r3, [pc, #208]	; (80012f4 <SystemClock_Config+0x114>)
 8001224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800122a:	607b      	str	r3, [r7, #4]
 800122c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800122e:	4b32      	ldr	r3, [pc, #200]	; (80012f8 <SystemClock_Config+0x118>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001236:	4a30      	ldr	r2, [pc, #192]	; (80012f8 <SystemClock_Config+0x118>)
 8001238:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800123c:	6013      	str	r3, [r2, #0]
 800123e:	4b2e      	ldr	r3, [pc, #184]	; (80012f8 <SystemClock_Config+0x118>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001246:	603b      	str	r3, [r7, #0]
 8001248:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800124a:	2301      	movs	r3, #1
 800124c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001250:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001254:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001258:	2302      	movs	r3, #2
 800125a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800125e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001262:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001266:	2304      	movs	r3, #4
 8001268:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 800126c:	2348      	movs	r3, #72	; 0x48
 800126e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001272:	2302      	movs	r3, #2
 8001274:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001278:	2303      	movs	r3, #3
 800127a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800127e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001282:	4618      	mov	r0, r3
 8001284:	f001 fefc 	bl	8003080 <HAL_RCC_OscConfig>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800128e:	f000 f837 	bl	8001300 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001292:	230f      	movs	r3, #15
 8001294:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001298:	2302      	movs	r3, #2
 800129a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800129e:	2300      	movs	r3, #0
 80012a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012ac:	2300      	movs	r3, #0
 80012ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012b2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80012b6:	2102      	movs	r1, #2
 80012b8:	4618      	mov	r0, r3
 80012ba:	f002 f985 	bl	80035c8 <HAL_RCC_ClockConfig>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80012c4:	f000 f81c 	bl	8001300 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 80012c8:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <SystemClock_Config+0x11c>)
 80012ca:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80012cc:	2300      	movs	r3, #0
 80012ce:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012d6:	f107 0308 	add.w	r3, r7, #8
 80012da:	4618      	mov	r0, r3
 80012dc:	f002 fb76 	bl	80039cc <HAL_RCCEx_PeriphCLKConfig>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <SystemClock_Config+0x10a>
  {
    Error_Handler();
 80012e6:	f000 f80b 	bl	8001300 <Error_Handler>
  }
}
 80012ea:	bf00      	nop
 80012ec:	37d0      	adds	r7, #208	; 0xd0
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40023800 	.word	0x40023800
 80012f8:	40007000 	.word	0x40007000
 80012fc:	00200100 	.word	0x00200100

08001300 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001304:	b672      	cpsid	i
}
 8001306:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001308:	e7fe      	b.n	8001308 <Error_Handler+0x8>
	...

0800130c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001312:	4b0f      	ldr	r3, [pc, #60]	; (8001350 <HAL_MspInit+0x44>)
 8001314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001316:	4a0e      	ldr	r2, [pc, #56]	; (8001350 <HAL_MspInit+0x44>)
 8001318:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800131c:	6413      	str	r3, [r2, #64]	; 0x40
 800131e:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <HAL_MspInit+0x44>)
 8001320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001326:	607b      	str	r3, [r7, #4]
 8001328:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800132a:	4b09      	ldr	r3, [pc, #36]	; (8001350 <HAL_MspInit+0x44>)
 800132c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132e:	4a08      	ldr	r2, [pc, #32]	; (8001350 <HAL_MspInit+0x44>)
 8001330:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001334:	6453      	str	r3, [r2, #68]	; 0x44
 8001336:	4b06      	ldr	r3, [pc, #24]	; (8001350 <HAL_MspInit+0x44>)
 8001338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800133e:	603b      	str	r3, [r7, #0]
 8001340:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001342:	bf00      	nop
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	40023800 	.word	0x40023800

08001354 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001358:	e7fe      	b.n	8001358 <NMI_Handler+0x4>

0800135a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800135a:	b480      	push	{r7}
 800135c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800135e:	e7fe      	b.n	800135e <HardFault_Handler+0x4>

08001360 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001364:	e7fe      	b.n	8001364 <MemManage_Handler+0x4>

08001366 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001366:	b480      	push	{r7}
 8001368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800136a:	e7fe      	b.n	800136a <BusFault_Handler+0x4>

0800136c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001370:	e7fe      	b.n	8001370 <UsageFault_Handler+0x4>

08001372 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001372:	b480      	push	{r7}
 8001374:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001384:	bf00      	nop
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr

0800138e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800138e:	b480      	push	{r7}
 8001390:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001392:	bf00      	nop
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013a0:	f000 fe00 	bl	8001fa4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013a4:	bf00      	nop
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80013ac:	4803      	ldr	r0, [pc, #12]	; (80013bc <TIM1_BRK_TIM9_IRQHandler+0x14>)
 80013ae:	f003 fa5d 	bl	800486c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 80013b2:	4803      	ldr	r0, [pc, #12]	; (80013c0 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 80013b4:	f003 fa5a 	bl	800486c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80013b8:	bf00      	nop
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	20000250 	.word	0x20000250
 80013c0:	2000029c 	.word	0x2000029c

080013c4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80013c8:	4802      	ldr	r0, [pc, #8]	; (80013d4 <TIM4_IRQHandler+0x10>)
 80013ca:	f003 fa4f 	bl	800486c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	200001b8 	.word	0x200001b8

080013d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013e0:	4a14      	ldr	r2, [pc, #80]	; (8001434 <_sbrk+0x5c>)
 80013e2:	4b15      	ldr	r3, [pc, #84]	; (8001438 <_sbrk+0x60>)
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013ec:	4b13      	ldr	r3, [pc, #76]	; (800143c <_sbrk+0x64>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d102      	bne.n	80013fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013f4:	4b11      	ldr	r3, [pc, #68]	; (800143c <_sbrk+0x64>)
 80013f6:	4a12      	ldr	r2, [pc, #72]	; (8001440 <_sbrk+0x68>)
 80013f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013fa:	4b10      	ldr	r3, [pc, #64]	; (800143c <_sbrk+0x64>)
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4413      	add	r3, r2
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	429a      	cmp	r2, r3
 8001406:	d207      	bcs.n	8001418 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001408:	f005 fa12 	bl	8006830 <__errno>
 800140c:	4603      	mov	r3, r0
 800140e:	220c      	movs	r2, #12
 8001410:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001412:	f04f 33ff 	mov.w	r3, #4294967295
 8001416:	e009      	b.n	800142c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001418:	4b08      	ldr	r3, [pc, #32]	; (800143c <_sbrk+0x64>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800141e:	4b07      	ldr	r3, [pc, #28]	; (800143c <_sbrk+0x64>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4413      	add	r3, r2
 8001426:	4a05      	ldr	r2, [pc, #20]	; (800143c <_sbrk+0x64>)
 8001428:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800142a:	68fb      	ldr	r3, [r7, #12]
}
 800142c:	4618      	mov	r0, r3
 800142e:	3718      	adds	r7, #24
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	20050000 	.word	0x20050000
 8001438:	00000400 	.word	0x00000400
 800143c:	20000090 	.word	0x20000090
 8001440:	20000788 	.word	0x20000788

08001444 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001448:	4b06      	ldr	r3, [pc, #24]	; (8001464 <SystemInit+0x20>)
 800144a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800144e:	4a05      	ldr	r2, [pc, #20]	; (8001464 <SystemInit+0x20>)
 8001450:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001454:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim9;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b09a      	sub	sp, #104	; 0x68
 800146c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800146e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	605a      	str	r2, [r3, #4]
 8001478:	609a      	str	r2, [r3, #8]
 800147a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800147c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001488:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
 8001496:	611a      	str	r2, [r3, #16]
 8001498:	615a      	str	r2, [r3, #20]
 800149a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800149c:	1d3b      	adds	r3, r7, #4
 800149e:	222c      	movs	r2, #44	; 0x2c
 80014a0:	2100      	movs	r1, #0
 80014a2:	4618      	mov	r0, r3
 80014a4:	f005 f9f6 	bl	8006894 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014a8:	4b43      	ldr	r3, [pc, #268]	; (80015b8 <MX_TIM1_Init+0x150>)
 80014aa:	4a44      	ldr	r2, [pc, #272]	; (80015bc <MX_TIM1_Init+0x154>)
 80014ac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80014ae:	4b42      	ldr	r3, [pc, #264]	; (80015b8 <MX_TIM1_Init+0x150>)
 80014b0:	2247      	movs	r2, #71	; 0x47
 80014b2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014b4:	4b40      	ldr	r3, [pc, #256]	; (80015b8 <MX_TIM1_Init+0x150>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80014ba:	4b3f      	ldr	r3, [pc, #252]	; (80015b8 <MX_TIM1_Init+0x150>)
 80014bc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014c0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014c2:	4b3d      	ldr	r3, [pc, #244]	; (80015b8 <MX_TIM1_Init+0x150>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014c8:	4b3b      	ldr	r3, [pc, #236]	; (80015b8 <MX_TIM1_Init+0x150>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ce:	4b3a      	ldr	r3, [pc, #232]	; (80015b8 <MX_TIM1_Init+0x150>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014d4:	4838      	ldr	r0, [pc, #224]	; (80015b8 <MX_TIM1_Init+0x150>)
 80014d6:	f002 fe69 	bl	80041ac <HAL_TIM_Base_Init>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80014e0:	f7ff ff0e 	bl	8001300 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014e8:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80014ea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80014ee:	4619      	mov	r1, r3
 80014f0:	4831      	ldr	r0, [pc, #196]	; (80015b8 <MX_TIM1_Init+0x150>)
 80014f2:	f003 fbef 	bl	8004cd4 <HAL_TIM_ConfigClockSource>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80014fc:	f7ff ff00 	bl	8001300 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001500:	482d      	ldr	r0, [pc, #180]	; (80015b8 <MX_TIM1_Init+0x150>)
 8001502:	f002 ff23 	bl	800434c <HAL_TIM_PWM_Init>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800150c:	f7ff fef8 	bl	8001300 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001510:	2300      	movs	r3, #0
 8001512:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001514:	2300      	movs	r3, #0
 8001516:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001518:	2300      	movs	r3, #0
 800151a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800151c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001520:	4619      	mov	r1, r3
 8001522:	4825      	ldr	r0, [pc, #148]	; (80015b8 <MX_TIM1_Init+0x150>)
 8001524:	f004 f886 	bl	8005634 <HAL_TIMEx_MasterConfigSynchronization>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800152e:	f7ff fee7 	bl	8001300 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001532:	2360      	movs	r3, #96	; 0x60
 8001534:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001536:	2300      	movs	r3, #0
 8001538:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800153a:	2300      	movs	r3, #0
 800153c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800153e:	2300      	movs	r3, #0
 8001540:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001542:	2300      	movs	r3, #0
 8001544:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001546:	2300      	movs	r3, #0
 8001548:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800154a:	2300      	movs	r3, #0
 800154c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800154e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001552:	2200      	movs	r2, #0
 8001554:	4619      	mov	r1, r3
 8001556:	4818      	ldr	r0, [pc, #96]	; (80015b8 <MX_TIM1_Init+0x150>)
 8001558:	f003 faa8 	bl	8004aac <HAL_TIM_PWM_ConfigChannel>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001562:	f7ff fecd 	bl	8001300 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001566:	2300      	movs	r3, #0
 8001568:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800156a:	2300      	movs	r3, #0
 800156c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800156e:	2300      	movs	r3, #0
 8001570:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001572:	2300      	movs	r3, #0
 8001574:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001576:	2300      	movs	r3, #0
 8001578:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800157a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800157e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001580:	2300      	movs	r3, #0
 8001582:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001584:	2300      	movs	r3, #0
 8001586:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001588:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800158c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800158e:	2300      	movs	r3, #0
 8001590:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001592:	2300      	movs	r3, #0
 8001594:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001596:	1d3b      	adds	r3, r7, #4
 8001598:	4619      	mov	r1, r3
 800159a:	4807      	ldr	r0, [pc, #28]	; (80015b8 <MX_TIM1_Init+0x150>)
 800159c:	f004 f8d8 	bl	8005750 <HAL_TIMEx_ConfigBreakDeadTime>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80015a6:	f7ff feab 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80015aa:	4803      	ldr	r0, [pc, #12]	; (80015b8 <MX_TIM1_Init+0x150>)
 80015ac:	f000 f9a6 	bl	80018fc <HAL_TIM_MspPostInit>

}
 80015b0:	bf00      	nop
 80015b2:	3768      	adds	r7, #104	; 0x68
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	20000250 	.word	0x20000250
 80015bc:	40010000 	.word	0x40010000

080015c0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b08c      	sub	sp, #48	; 0x30
 80015c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80015c6:	f107 030c 	add.w	r3, r7, #12
 80015ca:	2224      	movs	r2, #36	; 0x24
 80015cc:	2100      	movs	r1, #0
 80015ce:	4618      	mov	r0, r3
 80015d0:	f005 f960 	bl	8006894 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015d4:	463b      	mov	r3, r7
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	605a      	str	r2, [r3, #4]
 80015dc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015de:	4b21      	ldr	r3, [pc, #132]	; (8001664 <MX_TIM3_Init+0xa4>)
 80015e0:	4a21      	ldr	r2, [pc, #132]	; (8001668 <MX_TIM3_Init+0xa8>)
 80015e2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80015e4:	4b1f      	ldr	r3, [pc, #124]	; (8001664 <MX_TIM3_Init+0xa4>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ea:	4b1e      	ldr	r3, [pc, #120]	; (8001664 <MX_TIM3_Init+0xa4>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80015f0:	4b1c      	ldr	r3, [pc, #112]	; (8001664 <MX_TIM3_Init+0xa4>)
 80015f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015f6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015f8:	4b1a      	ldr	r3, [pc, #104]	; (8001664 <MX_TIM3_Init+0xa4>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015fe:	4b19      	ldr	r3, [pc, #100]	; (8001664 <MX_TIM3_Init+0xa4>)
 8001600:	2280      	movs	r2, #128	; 0x80
 8001602:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001604:	2303      	movs	r3, #3
 8001606:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001608:	2302      	movs	r3, #2
 800160a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800160c:	2301      	movs	r3, #1
 800160e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001610:	2300      	movs	r3, #0
 8001612:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001614:	2300      	movs	r3, #0
 8001616:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001618:	2302      	movs	r3, #2
 800161a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800161c:	2301      	movs	r3, #1
 800161e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001620:	2300      	movs	r3, #0
 8001622:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001624:	2300      	movs	r3, #0
 8001626:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001628:	f107 030c 	add.w	r3, r7, #12
 800162c:	4619      	mov	r1, r3
 800162e:	480d      	ldr	r0, [pc, #52]	; (8001664 <MX_TIM3_Init+0xa4>)
 8001630:	f002 ffe8 	bl	8004604 <HAL_TIM_Encoder_Init>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800163a:	f7ff fe61 	bl	8001300 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800163e:	2300      	movs	r3, #0
 8001640:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001642:	2300      	movs	r3, #0
 8001644:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001646:	463b      	mov	r3, r7
 8001648:	4619      	mov	r1, r3
 800164a:	4806      	ldr	r0, [pc, #24]	; (8001664 <MX_TIM3_Init+0xa4>)
 800164c:	f003 fff2 	bl	8005634 <HAL_TIMEx_MasterConfigSynchronization>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001656:	f7ff fe53 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800165a:	bf00      	nop
 800165c:	3730      	adds	r7, #48	; 0x30
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20000204 	.word	0x20000204
 8001668:	40000400 	.word	0x40000400

0800166c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b088      	sub	sp, #32
 8001670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001672:	f107 0310 	add.w	r3, r7, #16
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	605a      	str	r2, [r3, #4]
 800167c:	609a      	str	r2, [r3, #8]
 800167e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001680:	1d3b      	adds	r3, r7, #4
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	605a      	str	r2, [r3, #4]
 8001688:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800168a:	4b1d      	ldr	r3, [pc, #116]	; (8001700 <MX_TIM4_Init+0x94>)
 800168c:	4a1d      	ldr	r2, [pc, #116]	; (8001704 <MX_TIM4_Init+0x98>)
 800168e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7199;
 8001690:	4b1b      	ldr	r3, [pc, #108]	; (8001700 <MX_TIM4_Init+0x94>)
 8001692:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001696:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001698:	4b19      	ldr	r3, [pc, #100]	; (8001700 <MX_TIM4_Init+0x94>)
 800169a:	2200      	movs	r2, #0
 800169c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 800169e:	4b18      	ldr	r3, [pc, #96]	; (8001700 <MX_TIM4_Init+0x94>)
 80016a0:	2263      	movs	r2, #99	; 0x63
 80016a2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016a4:	4b16      	ldr	r3, [pc, #88]	; (8001700 <MX_TIM4_Init+0x94>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016aa:	4b15      	ldr	r3, [pc, #84]	; (8001700 <MX_TIM4_Init+0x94>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80016b0:	4813      	ldr	r0, [pc, #76]	; (8001700 <MX_TIM4_Init+0x94>)
 80016b2:	f002 fd7b 	bl	80041ac <HAL_TIM_Base_Init>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80016bc:	f7ff fe20 	bl	8001300 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016c4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80016c6:	f107 0310 	add.w	r3, r7, #16
 80016ca:	4619      	mov	r1, r3
 80016cc:	480c      	ldr	r0, [pc, #48]	; (8001700 <MX_TIM4_Init+0x94>)
 80016ce:	f003 fb01 	bl	8004cd4 <HAL_TIM_ConfigClockSource>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80016d8:	f7ff fe12 	bl	8001300 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016dc:	2300      	movs	r3, #0
 80016de:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016e0:	2300      	movs	r3, #0
 80016e2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80016e4:	1d3b      	adds	r3, r7, #4
 80016e6:	4619      	mov	r1, r3
 80016e8:	4805      	ldr	r0, [pc, #20]	; (8001700 <MX_TIM4_Init+0x94>)
 80016ea:	f003 ffa3 	bl	8005634 <HAL_TIMEx_MasterConfigSynchronization>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80016f4:	f7ff fe04 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80016f8:	bf00      	nop
 80016fa:	3720      	adds	r7, #32
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	200001b8 	.word	0x200001b8
 8001704:	40000800 	.word	0x40000800

08001708 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800170e:	463b      	mov	r3, r7
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	609a      	str	r2, [r3, #8]
 8001718:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800171a:	4b16      	ldr	r3, [pc, #88]	; (8001774 <MX_TIM9_Init+0x6c>)
 800171c:	4a16      	ldr	r2, [pc, #88]	; (8001778 <MX_TIM9_Init+0x70>)
 800171e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 7199;
 8001720:	4b14      	ldr	r3, [pc, #80]	; (8001774 <MX_TIM9_Init+0x6c>)
 8001722:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001726:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001728:	4b12      	ldr	r3, [pc, #72]	; (8001774 <MX_TIM9_Init+0x6c>)
 800172a:	2200      	movs	r2, #0
 800172c:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 999;
 800172e:	4b11      	ldr	r3, [pc, #68]	; (8001774 <MX_TIM9_Init+0x6c>)
 8001730:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001734:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001736:	4b0f      	ldr	r3, [pc, #60]	; (8001774 <MX_TIM9_Init+0x6c>)
 8001738:	2200      	movs	r2, #0
 800173a:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800173c:	4b0d      	ldr	r3, [pc, #52]	; (8001774 <MX_TIM9_Init+0x6c>)
 800173e:	2200      	movs	r2, #0
 8001740:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001742:	480c      	ldr	r0, [pc, #48]	; (8001774 <MX_TIM9_Init+0x6c>)
 8001744:	f002 fd32 	bl	80041ac <HAL_TIM_Base_Init>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 800174e:	f7ff fdd7 	bl	8001300 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001752:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001756:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001758:	463b      	mov	r3, r7
 800175a:	4619      	mov	r1, r3
 800175c:	4805      	ldr	r0, [pc, #20]	; (8001774 <MX_TIM9_Init+0x6c>)
 800175e:	f003 fab9 	bl	8004cd4 <HAL_TIM_ConfigClockSource>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 8001768:	f7ff fdca 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 800176c:	bf00      	nop
 800176e:	3710      	adds	r7, #16
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	2000029c 	.word	0x2000029c
 8001778:	40014000 	.word	0x40014000

0800177c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a27      	ldr	r2, [pc, #156]	; (8001828 <HAL_TIM_Base_MspInit+0xac>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d114      	bne.n	80017b8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800178e:	4b27      	ldr	r3, [pc, #156]	; (800182c <HAL_TIM_Base_MspInit+0xb0>)
 8001790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001792:	4a26      	ldr	r2, [pc, #152]	; (800182c <HAL_TIM_Base_MspInit+0xb0>)
 8001794:	f043 0301 	orr.w	r3, r3, #1
 8001798:	6453      	str	r3, [r2, #68]	; 0x44
 800179a:	4b24      	ldr	r3, [pc, #144]	; (800182c <HAL_TIM_Base_MspInit+0xb0>)
 800179c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	617b      	str	r3, [r7, #20]
 80017a4:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 2, 0);
 80017a6:	2200      	movs	r2, #0
 80017a8:	2102      	movs	r1, #2
 80017aa:	2018      	movs	r0, #24
 80017ac:	f001 f913 	bl	80029d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80017b0:	2018      	movs	r0, #24
 80017b2:	f001 f92c 	bl	8002a0e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 80017b6:	e032      	b.n	800181e <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM4)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a1c      	ldr	r2, [pc, #112]	; (8001830 <HAL_TIM_Base_MspInit+0xb4>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d114      	bne.n	80017ec <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80017c2:	4b1a      	ldr	r3, [pc, #104]	; (800182c <HAL_TIM_Base_MspInit+0xb0>)
 80017c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c6:	4a19      	ldr	r2, [pc, #100]	; (800182c <HAL_TIM_Base_MspInit+0xb0>)
 80017c8:	f043 0304 	orr.w	r3, r3, #4
 80017cc:	6413      	str	r3, [r2, #64]	; 0x40
 80017ce:	4b17      	ldr	r3, [pc, #92]	; (800182c <HAL_TIM_Base_MspInit+0xb0>)
 80017d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d2:	f003 0304 	and.w	r3, r3, #4
 80017d6:	613b      	str	r3, [r7, #16]
 80017d8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 3, 0);
 80017da:	2200      	movs	r2, #0
 80017dc:	2103      	movs	r1, #3
 80017de:	201e      	movs	r0, #30
 80017e0:	f001 f8f9 	bl	80029d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80017e4:	201e      	movs	r0, #30
 80017e6:	f001 f912 	bl	8002a0e <HAL_NVIC_EnableIRQ>
}
 80017ea:	e018      	b.n	800181e <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM9)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a10      	ldr	r2, [pc, #64]	; (8001834 <HAL_TIM_Base_MspInit+0xb8>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d113      	bne.n	800181e <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80017f6:	4b0d      	ldr	r3, [pc, #52]	; (800182c <HAL_TIM_Base_MspInit+0xb0>)
 80017f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fa:	4a0c      	ldr	r2, [pc, #48]	; (800182c <HAL_TIM_Base_MspInit+0xb0>)
 80017fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001800:	6453      	str	r3, [r2, #68]	; 0x44
 8001802:	4b0a      	ldr	r3, [pc, #40]	; (800182c <HAL_TIM_Base_MspInit+0xb0>)
 8001804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001806:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 2, 0);
 800180e:	2200      	movs	r2, #0
 8001810:	2102      	movs	r1, #2
 8001812:	2018      	movs	r0, #24
 8001814:	f001 f8df 	bl	80029d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001818:	2018      	movs	r0, #24
 800181a:	f001 f8f8 	bl	8002a0e <HAL_NVIC_EnableIRQ>
}
 800181e:	bf00      	nop
 8001820:	3718      	adds	r7, #24
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	40010000 	.word	0x40010000
 800182c:	40023800 	.word	0x40023800
 8001830:	40000800 	.word	0x40000800
 8001834:	40014000 	.word	0x40014000

08001838 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b08a      	sub	sp, #40	; 0x28
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001840:	f107 0314 	add.w	r3, r7, #20
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	605a      	str	r2, [r3, #4]
 800184a:	609a      	str	r2, [r3, #8]
 800184c:	60da      	str	r2, [r3, #12]
 800184e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a25      	ldr	r2, [pc, #148]	; (80018ec <HAL_TIM_Encoder_MspInit+0xb4>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d143      	bne.n	80018e2 <HAL_TIM_Encoder_MspInit+0xaa>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800185a:	4b25      	ldr	r3, [pc, #148]	; (80018f0 <HAL_TIM_Encoder_MspInit+0xb8>)
 800185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185e:	4a24      	ldr	r2, [pc, #144]	; (80018f0 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001860:	f043 0302 	orr.w	r3, r3, #2
 8001864:	6413      	str	r3, [r2, #64]	; 0x40
 8001866:	4b22      	ldr	r3, [pc, #136]	; (80018f0 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	613b      	str	r3, [r7, #16]
 8001870:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001872:	4b1f      	ldr	r3, [pc, #124]	; (80018f0 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	4a1e      	ldr	r2, [pc, #120]	; (80018f0 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001878:	f043 0301 	orr.w	r3, r3, #1
 800187c:	6313      	str	r3, [r2, #48]	; 0x30
 800187e:	4b1c      	ldr	r3, [pc, #112]	; (80018f0 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800188a:	4b19      	ldr	r3, [pc, #100]	; (80018f0 <HAL_TIM_Encoder_MspInit+0xb8>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	4a18      	ldr	r2, [pc, #96]	; (80018f0 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001890:	f043 0304 	orr.w	r3, r3, #4
 8001894:	6313      	str	r3, [r2, #48]	; 0x30
 8001896:	4b16      	ldr	r3, [pc, #88]	; (80018f0 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	f003 0304 	and.w	r3, r3, #4
 800189e:	60bb      	str	r3, [r7, #8]
 80018a0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80018a2:	2340      	movs	r3, #64	; 0x40
 80018a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a6:	2302      	movs	r3, #2
 80018a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018aa:	2300      	movs	r3, #0
 80018ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ae:	2300      	movs	r3, #0
 80018b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018b2:	2302      	movs	r3, #2
 80018b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b6:	f107 0314 	add.w	r3, r7, #20
 80018ba:	4619      	mov	r1, r3
 80018bc:	480d      	ldr	r0, [pc, #52]	; (80018f4 <HAL_TIM_Encoder_MspInit+0xbc>)
 80018be:	f001 f8c1 	bl	8002a44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80018c2:	2380      	movs	r3, #128	; 0x80
 80018c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c6:	2302      	movs	r3, #2
 80018c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ce:	2300      	movs	r3, #0
 80018d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018d2:	2302      	movs	r3, #2
 80018d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018d6:	f107 0314 	add.w	r3, r7, #20
 80018da:	4619      	mov	r1, r3
 80018dc:	4806      	ldr	r0, [pc, #24]	; (80018f8 <HAL_TIM_Encoder_MspInit+0xc0>)
 80018de:	f001 f8b1 	bl	8002a44 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80018e2:	bf00      	nop
 80018e4:	3728      	adds	r7, #40	; 0x28
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40000400 	.word	0x40000400
 80018f0:	40023800 	.word	0x40023800
 80018f4:	40020000 	.word	0x40020000
 80018f8:	40020800 	.word	0x40020800

080018fc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b088      	sub	sp, #32
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001904:	f107 030c 	add.w	r3, r7, #12
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	60da      	str	r2, [r3, #12]
 8001912:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a11      	ldr	r2, [pc, #68]	; (8001960 <HAL_TIM_MspPostInit+0x64>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d11c      	bne.n	8001958 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800191e:	4b11      	ldr	r3, [pc, #68]	; (8001964 <HAL_TIM_MspPostInit+0x68>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	4a10      	ldr	r2, [pc, #64]	; (8001964 <HAL_TIM_MspPostInit+0x68>)
 8001924:	f043 0310 	orr.w	r3, r3, #16
 8001928:	6313      	str	r3, [r2, #48]	; 0x30
 800192a:	4b0e      	ldr	r3, [pc, #56]	; (8001964 <HAL_TIM_MspPostInit+0x68>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	f003 0310 	and.w	r3, r3, #16
 8001932:	60bb      	str	r3, [r7, #8]
 8001934:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001936:	f44f 7300 	mov.w	r3, #512	; 0x200
 800193a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193c:	2302      	movs	r3, #2
 800193e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001940:	2300      	movs	r3, #0
 8001942:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001944:	2300      	movs	r3, #0
 8001946:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001948:	2301      	movs	r3, #1
 800194a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800194c:	f107 030c 	add.w	r3, r7, #12
 8001950:	4619      	mov	r1, r3
 8001952:	4805      	ldr	r0, [pc, #20]	; (8001968 <HAL_TIM_MspPostInit+0x6c>)
 8001954:	f001 f876 	bl	8002a44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001958:	bf00      	nop
 800195a:	3720      	adds	r7, #32
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	40010000 	.word	0x40010000
 8001964:	40023800 	.word	0x40023800
 8001968:	40021000 	.word	0x40021000
 800196c:	00000000 	.word	0x00000000

08001970 <HAL_TIM_PeriodElapsedCallback>:
	if(pulseWidth > 1000) pulseWidth = 1000;
	if(pulseWidth < 0) pulseWidth = 0;
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulseWidth);
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001970:	b590      	push	{r4, r7, lr}
 8001972:	b087      	sub	sp, #28
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM4) { // 10ms timer
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a5e      	ldr	r2, [pc, #376]	; (8001af8 <HAL_TIM_PeriodElapsedCallback+0x188>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d16b      	bne.n	8001a5a <HAL_TIM_PeriodElapsedCallback+0xea>


		// Reading encoder value once per 10 ms to estimate RPM of motor
		encoderValue = __HAL_TIM_GET_COUNTER(&htim3);
 8001982:	4b5e      	ldr	r3, [pc, #376]	; (8001afc <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001988:	4a5d      	ldr	r2, [pc, #372]	; (8001b00 <HAL_TIM_PeriodElapsedCallback+0x190>)
 800198a:	6013      	str	r3, [r2, #0]
		if (lastEncoder > encoderValue) {
 800198c:	4b5d      	ldr	r3, [pc, #372]	; (8001b04 <HAL_TIM_PeriodElapsedCallback+0x194>)
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	4b5b      	ldr	r3, [pc, #364]	; (8001b00 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	429a      	cmp	r2, r3
 8001996:	d90c      	bls.n	80019b2 <HAL_TIM_PeriodElapsedCallback+0x42>
			encoderValue = 65535 - lastEncoder + encoderValue;
 8001998:	4b59      	ldr	r3, [pc, #356]	; (8001b00 <HAL_TIM_PeriodElapsedCallback+0x190>)
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	4b59      	ldr	r3, [pc, #356]	; (8001b04 <HAL_TIM_PeriodElapsedCallback+0x194>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	1ad2      	subs	r2, r2, r3
 80019a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019a6:	4413      	add	r3, r2
 80019a8:	4a55      	ldr	r2, [pc, #340]	; (8001b00 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80019aa:	6013      	str	r3, [r2, #0]
			lastEncoder = 0;
 80019ac:	4b55      	ldr	r3, [pc, #340]	; (8001b04 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	601a      	str	r2, [r3, #0]
		}

		difference = encoderValue - lastEncoder;
 80019b2:	4b53      	ldr	r3, [pc, #332]	; (8001b00 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	b29a      	uxth	r2, r3
 80019b8:	4b52      	ldr	r3, [pc, #328]	; (8001b04 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	b29b      	uxth	r3, r3
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	b29a      	uxth	r2, r3
 80019c2:	4b51      	ldr	r3, [pc, #324]	; (8001b08 <HAL_TIM_PeriodElapsedCallback+0x198>)
 80019c4:	801a      	strh	r2, [r3, #0]
		RPM[k] = (difference) * scaler / 1928.0;
 80019c6:	4b50      	ldr	r3, [pc, #320]	; (8001b08 <HAL_TIM_PeriodElapsedCallback+0x198>)
 80019c8:	881b      	ldrh	r3, [r3, #0]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7fe fdca 	bl	8000564 <__aeabi_i2d>
 80019d0:	a345      	add	r3, pc, #276	; (adr r3, 8001ae8 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80019d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d6:	f7fe fe2f 	bl	8000638 <__aeabi_dmul>
 80019da:	4602      	mov	r2, r0
 80019dc:	460b      	mov	r3, r1
 80019de:	4610      	mov	r0, r2
 80019e0:	4619      	mov	r1, r3
 80019e2:	4b4a      	ldr	r3, [pc, #296]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	461c      	mov	r4, r3
 80019e8:	f04f 0200 	mov.w	r2, #0
 80019ec:	4b48      	ldr	r3, [pc, #288]	; (8001b10 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80019ee:	f7fe ff4d 	bl	800088c <__aeabi_ddiv>
 80019f2:	4602      	mov	r2, r0
 80019f4:	460b      	mov	r3, r1
 80019f6:	4847      	ldr	r0, [pc, #284]	; (8001b14 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80019f8:	00e1      	lsls	r1, r4, #3
 80019fa:	4401      	add	r1, r0
 80019fc:	e9c1 2300 	strd	r2, r3, [r1]
		double avgRPM = GetEncoderValue();
 8001a00:	f000 f89a 	bl	8001b38 <GetEncoderValue>
 8001a04:	ed87 0b04 	vstr	d0, [r7, #16]

		// Updating PID measurments of RPM
		UpdatePid(avgRPM);
 8001a08:	ed97 0b04 	vldr	d0, [r7, #16]
 8001a0c:	f000 f8f2 	bl	8001bf4 <UpdatePid>

		// End Cycle operations
		lastEncoder = encoderValue;
 8001a10:	4b3b      	ldr	r3, [pc, #236]	; (8001b00 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a3b      	ldr	r2, [pc, #236]	; (8001b04 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001a16:	6013      	str	r3, [r2, #0]
		k = (k + 1) % FILTERN;
 8001a18:	4b3c      	ldr	r3, [pc, #240]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	1c5a      	adds	r2, r3, #1
 8001a1e:	4b3e      	ldr	r3, [pc, #248]	; (8001b18 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001a20:	fb83 1302 	smull	r1, r3, r3, r2
 8001a24:	1099      	asrs	r1, r3, #2
 8001a26:	17d3      	asrs	r3, r2, #31
 8001a28:	1ac9      	subs	r1, r1, r3
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	440b      	add	r3, r1
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	1ad1      	subs	r1, r2, r3
 8001a34:	b2ca      	uxtb	r2, r1
 8001a36:	4b35      	ldr	r3, [pc, #212]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001a38:	701a      	strb	r2, [r3, #0]
		if(!dataReady) dataReady = !k;
 8001a3a:	4b38      	ldr	r3, [pc, #224]	; (8001b1c <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	f083 0301 	eor.w	r3, r3, #1
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d008      	beq.n	8001a5a <HAL_TIM_PeriodElapsedCallback+0xea>
 8001a48:	4b30      	ldr	r3, [pc, #192]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	bf0c      	ite	eq
 8001a50:	2301      	moveq	r3, #1
 8001a52:	2300      	movne	r3, #0
 8001a54:	b2da      	uxtb	r2, r3
 8001a56:	4b31      	ldr	r3, [pc, #196]	; (8001b1c <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001a58:	701a      	strb	r2, [r3, #0]
	}
	if (htim->Instance == TIM9) {
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a30      	ldr	r2, [pc, #192]	; (8001b20 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d13a      	bne.n	8001ada <HAL_TIM_PeriodElapsedCallback+0x16a>
		// Updating reference value
		ReadADC();
 8001a64:	f000 f8b0 	bl	8001bc8 <ReadADC>
		pidController.referenceSignal = (double)(ADC_Value/4095.0)*130;
 8001a68:	4b2e      	ldr	r3, [pc, #184]	; (8001b24 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7fe fd69 	bl	8000544 <__aeabi_ui2d>
 8001a72:	a31f      	add	r3, pc, #124	; (adr r3, 8001af0 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a78:	f7fe ff08 	bl	800088c <__aeabi_ddiv>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	460b      	mov	r3, r1
 8001a80:	4610      	mov	r0, r2
 8001a82:	4619      	mov	r1, r3
 8001a84:	f04f 0200 	mov.w	r2, #0
 8001a88:	4b27      	ldr	r3, [pc, #156]	; (8001b28 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001a8a:	f7fe fdd5 	bl	8000638 <__aeabi_dmul>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	460b      	mov	r3, r1
 8001a92:	4926      	ldr	r1, [pc, #152]	; (8001b2c <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8001a94:	e9c1 2300 	strd	r2, r3, [r1]

		// Sending data about current speed via USART
		char *message = calloc(1, 6);
 8001a98:	2106      	movs	r1, #6
 8001a9a:	2001      	movs	r0, #1
 8001a9c:	f004 fec0 	bl	8006820 <calloc>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	60fb      	str	r3, [r7, #12]
		int RPMInt = (int)(pidController.measuredSpeed);
 8001aa4:	4b21      	ldr	r3, [pc, #132]	; (8001b2c <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8001aa6:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001aaa:	4610      	mov	r0, r2
 8001aac:	4619      	mov	r1, r3
 8001aae:	f7fe ffd5 	bl	8000a5c <__aeabi_d2iz>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	60bb      	str	r3, [r7, #8]
		sprintf((char*) message, "%03i\n\r", RPMInt);
 8001ab6:	68ba      	ldr	r2, [r7, #8]
 8001ab8:	491d      	ldr	r1, [pc, #116]	; (8001b30 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001aba:	68f8      	ldr	r0, [r7, #12]
 8001abc:	f004 ffbc 	bl	8006a38 <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t *)message, strlen(message), 50);
 8001ac0:	68f8      	ldr	r0, [r7, #12]
 8001ac2:	f7fe fba5 	bl	8000210 <strlen>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	b29a      	uxth	r2, r3
 8001aca:	2332      	movs	r3, #50	; 0x32
 8001acc:	68f9      	ldr	r1, [r7, #12]
 8001ace:	4819      	ldr	r0, [pc, #100]	; (8001b34 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001ad0:	f003 ff28 	bl	8005924 <HAL_UART_Transmit>
		free(message);
 8001ad4:	68f8      	ldr	r0, [r7, #12]
 8001ad6:	f004 fed5 	bl	8006884 <free>
	}
}
 8001ada:	bf00      	nop
 8001adc:	371c      	adds	r7, #28
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd90      	pop	{r4, r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	f3af 8000 	nop.w
 8001ae8:	00000000 	.word	0x00000000
 8001aec:	40b77000 	.word	0x40b77000
 8001af0:	00000000 	.word	0x00000000
 8001af4:	40affe00 	.word	0x40affe00
 8001af8:	40000800 	.word	0x40000800
 8001afc:	20000204 	.word	0x20000204
 8001b00:	200000e8 	.word	0x200000e8
 8001b04:	200000ec 	.word	0x200000ec
 8001b08:	200000f0 	.word	0x200000f0
 8001b0c:	200000f2 	.word	0x200000f2
 8001b10:	409e2000 	.word	0x409e2000
 8001b14:	20000098 	.word	0x20000098
 8001b18:	66666667 	.word	0x66666667
 8001b1c:	200000f3 	.word	0x200000f3
 8001b20:	40014000 	.word	0x40014000
 8001b24:	2000008c 	.word	0x2000008c
 8001b28:	40604000 	.word	0x40604000
 8001b2c:	20000148 	.word	0x20000148
 8001b30:	08007138 	.word	0x08007138
 8001b34:	200002e8 	.word	0x200002e8

08001b38 <GetEncoderValue>:

double GetEncoderValue(){
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
	// Calculate RPM
	if(dataReady){
 8001b3e:	4b1e      	ldr	r3, [pc, #120]	; (8001bb8 <GetEncoderValue+0x80>)
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d02b      	beq.n	8001b9e <GetEncoderValue+0x66>
		double RPMTmp = 0;
 8001b46:	f04f 0200 	mov.w	r2, #0
 8001b4a:	f04f 0300 	mov.w	r3, #0
 8001b4e:	e9c7 2302 	strd	r2, r3, [r7, #8]
		for(uint8_t i = 0; i < FILTERN; i++){
 8001b52:	2300      	movs	r3, #0
 8001b54:	71fb      	strb	r3, [r7, #7]
 8001b56:	e017      	b.n	8001b88 <GetEncoderValue+0x50>
			RPMTmp = RPMTmp + RPM[i]/((double)(FILTERN));
 8001b58:	79fb      	ldrb	r3, [r7, #7]
 8001b5a:	4a18      	ldr	r2, [pc, #96]	; (8001bbc <GetEncoderValue+0x84>)
 8001b5c:	00db      	lsls	r3, r3, #3
 8001b5e:	4413      	add	r3, r2
 8001b60:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b64:	f04f 0200 	mov.w	r2, #0
 8001b68:	4b15      	ldr	r3, [pc, #84]	; (8001bc0 <GetEncoderValue+0x88>)
 8001b6a:	f7fe fe8f 	bl	800088c <__aeabi_ddiv>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	460b      	mov	r3, r1
 8001b72:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b76:	f7fe fba9 	bl	80002cc <__adddf3>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	e9c7 2302 	strd	r2, r3, [r7, #8]
		for(uint8_t i = 0; i < FILTERN; i++){
 8001b82:	79fb      	ldrb	r3, [r7, #7]
 8001b84:	3301      	adds	r3, #1
 8001b86:	71fb      	strb	r3, [r7, #7]
 8001b88:	79fb      	ldrb	r3, [r7, #7]
 8001b8a:	2b09      	cmp	r3, #9
 8001b8c:	d9e4      	bls.n	8001b58 <GetEncoderValue+0x20>
		}
		pidController.measuredSpeed = RPMTmp;
 8001b8e:	490d      	ldr	r1, [pc, #52]	; (8001bc4 <GetEncoderValue+0x8c>)
 8001b90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b94:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		return RPMTmp;
 8001b98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b9c:	e003      	b.n	8001ba6 <GetEncoderValue+0x6e>
	}
	return 0;
 8001b9e:	f04f 0200 	mov.w	r2, #0
 8001ba2:	f04f 0300 	mov.w	r3, #0
 8001ba6:	ec43 2b17 	vmov	d7, r2, r3
}
 8001baa:	eeb0 0a47 	vmov.f32	s0, s14
 8001bae:	eef0 0a67 	vmov.f32	s1, s15
 8001bb2:	3710      	adds	r7, #16
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	200000f3 	.word	0x200000f3
 8001bbc:	20000098 	.word	0x20000098
 8001bc0:	40240000 	.word	0x40240000
 8001bc4:	20000148 	.word	0x20000148

08001bc8 <ReadADC>:

void ReadADC() {
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8001bcc:	4807      	ldr	r0, [pc, #28]	; (8001bec <ReadADC+0x24>)
 8001bce:	f000 fa71 	bl	80020b4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001bd2:	f04f 31ff 	mov.w	r1, #4294967295
 8001bd6:	4805      	ldr	r0, [pc, #20]	; (8001bec <ReadADC+0x24>)
 8001bd8:	f000 fb3a 	bl	8002250 <HAL_ADC_PollForConversion>
	ADC_Value = HAL_ADC_GetValue(&hadc1);
 8001bdc:	4803      	ldr	r0, [pc, #12]	; (8001bec <ReadADC+0x24>)
 8001bde:	f000 fbc2 	bl	8002366 <HAL_ADC_GetValue>
 8001be2:	4603      	mov	r3, r0
 8001be4:	4a02      	ldr	r2, [pc, #8]	; (8001bf0 <ReadADC+0x28>)
 8001be6:	6013      	str	r3, [r2, #0]
}
 8001be8:	bf00      	nop
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	200000fc 	.word	0x200000fc
 8001bf0:	2000008c 	.word	0x2000008c

08001bf4 <UpdatePid>:

void UpdatePid(double RPMAVG) {
 8001bf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bf8:	b082      	sub	sp, #8
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	ed87 0b00 	vstr	d0, [r7]
	// Update measurment
	pidController.measuredSpeed = RPMAVG;
 8001c00:	4935      	ldr	r1, [pc, #212]	; (8001cd8 <UpdatePid+0xe4>)
 8001c02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001c06:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

	// Controll error handling in preparation for calculating control signal
	pidController.controlError[1] = pidController.controlError[0];
 8001c0a:	4b33      	ldr	r3, [pc, #204]	; (8001cd8 <UpdatePid+0xe4>)
 8001c0c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001c10:	4931      	ldr	r1, [pc, #196]	; (8001cd8 <UpdatePid+0xe4>)
 8001c12:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	pidController.controlError[0] = (pidController.referenceSignal
 8001c16:	4b30      	ldr	r3, [pc, #192]	; (8001cd8 <UpdatePid+0xe4>)
 8001c18:	e9d3 0100 	ldrd	r0, r1, [r3]
			- pidController.measuredSpeed);
 8001c1c:	4b2e      	ldr	r3, [pc, #184]	; (8001cd8 <UpdatePid+0xe4>)
 8001c1e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001c22:	f7fe fb51 	bl	80002c8 <__aeabi_dsub>
 8001c26:	4602      	mov	r2, r0
 8001c28:	460b      	mov	r3, r1
	pidController.controlError[0] = (pidController.referenceSignal
 8001c2a:	492b      	ldr	r1, [pc, #172]	; (8001cd8 <UpdatePid+0xe4>)
 8001c2c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	pidController.sumOfControlError += pidController.controlError[0];
 8001c30:	4b29      	ldr	r3, [pc, #164]	; (8001cd8 <UpdatePid+0xe4>)
 8001c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7fe fc85 	bl	8000544 <__aeabi_ui2d>
 8001c3a:	4b27      	ldr	r3, [pc, #156]	; (8001cd8 <UpdatePid+0xe4>)
 8001c3c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001c40:	f7fe fb44 	bl	80002cc <__adddf3>
 8001c44:	4602      	mov	r2, r0
 8001c46:	460b      	mov	r3, r1
 8001c48:	4610      	mov	r0, r2
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	f7fe ff2e 	bl	8000aac <__aeabi_d2uiz>
 8001c50:	4603      	mov	r3, r0
 8001c52:	4a21      	ldr	r2, [pc, #132]	; (8001cd8 <UpdatePid+0xe4>)
 8001c54:	6413      	str	r3, [r2, #64]	; 0x40

	// Calculate control signal
	pidController.controlSignal = pidController.Kp
 8001c56:	4b20      	ldr	r3, [pc, #128]	; (8001cd8 <UpdatePid+0xe4>)
 8001c58:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
			* (1 * pidController.controlError[0]
 8001c5c:	4b1e      	ldr	r3, [pc, #120]	; (8001cd8 <UpdatePid+0xe4>)
 8001c5e:	e9d3 890c 	ldrd	r8, r9, [r3, #48]	; 0x30
					+ pidController.sumOfControlError * 1 / pidController.Ti
 8001c62:	4b1d      	ldr	r3, [pc, #116]	; (8001cd8 <UpdatePid+0xe4>)
 8001c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7fe fc6c 	bl	8000544 <__aeabi_ui2d>
 8001c6c:	4b1a      	ldr	r3, [pc, #104]	; (8001cd8 <UpdatePid+0xe4>)
 8001c6e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001c72:	f7fe fe0b 	bl	800088c <__aeabi_ddiv>
 8001c76:	4602      	mov	r2, r0
 8001c78:	460b      	mov	r3, r1
 8001c7a:	4640      	mov	r0, r8
 8001c7c:	4649      	mov	r1, r9
 8001c7e:	f7fe fb25 	bl	80002cc <__adddf3>
 8001c82:	4602      	mov	r2, r0
 8001c84:	460b      	mov	r3, r1
 8001c86:	4692      	mov	sl, r2
 8001c88:	469b      	mov	fp, r3
					+ pidController.Td
 8001c8a:	4b13      	ldr	r3, [pc, #76]	; (8001cd8 <UpdatePid+0xe4>)
 8001c8c:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
							* (pidController.controlError[0]
 8001c90:	4b11      	ldr	r3, [pc, #68]	; (8001cd8 <UpdatePid+0xe4>)
 8001c92:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
									- pidController.controlError[1]));
 8001c96:	4b10      	ldr	r3, [pc, #64]	; (8001cd8 <UpdatePid+0xe4>)
 8001c98:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001c9c:	f7fe fb14 	bl	80002c8 <__aeabi_dsub>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	460b      	mov	r3, r1
							* (pidController.controlError[0]
 8001ca4:	4640      	mov	r0, r8
 8001ca6:	4649      	mov	r1, r9
 8001ca8:	f7fe fcc6 	bl	8000638 <__aeabi_dmul>
 8001cac:	4602      	mov	r2, r0
 8001cae:	460b      	mov	r3, r1
					+ pidController.Td
 8001cb0:	4650      	mov	r0, sl
 8001cb2:	4659      	mov	r1, fp
 8001cb4:	f7fe fb0a 	bl	80002cc <__adddf3>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
			* (1 * pidController.controlError[0]
 8001cbc:	4620      	mov	r0, r4
 8001cbe:	4629      	mov	r1, r5
 8001cc0:	f7fe fcba 	bl	8000638 <__aeabi_dmul>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	460b      	mov	r3, r1
	pidController.controlSignal = pidController.Kp
 8001cc8:	4903      	ldr	r1, [pc, #12]	; (8001cd8 <UpdatePid+0xe4>)
 8001cca:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 8001cce:	bf00      	nop
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cd8:	20000148 	.word	0x20000148

08001cdc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001ce0:	4b14      	ldr	r3, [pc, #80]	; (8001d34 <MX_USART3_UART_Init+0x58>)
 8001ce2:	4a15      	ldr	r2, [pc, #84]	; (8001d38 <MX_USART3_UART_Init+0x5c>)
 8001ce4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001ce6:	4b13      	ldr	r3, [pc, #76]	; (8001d34 <MX_USART3_UART_Init+0x58>)
 8001ce8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001cee:	4b11      	ldr	r3, [pc, #68]	; (8001d34 <MX_USART3_UART_Init+0x58>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001cf4:	4b0f      	ldr	r3, [pc, #60]	; (8001d34 <MX_USART3_UART_Init+0x58>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001cfa:	4b0e      	ldr	r3, [pc, #56]	; (8001d34 <MX_USART3_UART_Init+0x58>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d00:	4b0c      	ldr	r3, [pc, #48]	; (8001d34 <MX_USART3_UART_Init+0x58>)
 8001d02:	220c      	movs	r2, #12
 8001d04:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d06:	4b0b      	ldr	r3, [pc, #44]	; (8001d34 <MX_USART3_UART_Init+0x58>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d0c:	4b09      	ldr	r3, [pc, #36]	; (8001d34 <MX_USART3_UART_Init+0x58>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d12:	4b08      	ldr	r3, [pc, #32]	; (8001d34 <MX_USART3_UART_Init+0x58>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d18:	4b06      	ldr	r3, [pc, #24]	; (8001d34 <MX_USART3_UART_Init+0x58>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d1e:	4805      	ldr	r0, [pc, #20]	; (8001d34 <MX_USART3_UART_Init+0x58>)
 8001d20:	f003 fdb2 	bl	8005888 <HAL_UART_Init>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001d2a:	f7ff fae9 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	200002e8 	.word	0x200002e8
 8001d38:	40004800 	.word	0x40004800

08001d3c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b08a      	sub	sp, #40	; 0x28
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d44:	f107 0314 	add.w	r3, r7, #20
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	605a      	str	r2, [r3, #4]
 8001d4e:	609a      	str	r2, [r3, #8]
 8001d50:	60da      	str	r2, [r3, #12]
 8001d52:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a17      	ldr	r2, [pc, #92]	; (8001db8 <HAL_UART_MspInit+0x7c>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d128      	bne.n	8001db0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d5e:	4b17      	ldr	r3, [pc, #92]	; (8001dbc <HAL_UART_MspInit+0x80>)
 8001d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d62:	4a16      	ldr	r2, [pc, #88]	; (8001dbc <HAL_UART_MspInit+0x80>)
 8001d64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d68:	6413      	str	r3, [r2, #64]	; 0x40
 8001d6a:	4b14      	ldr	r3, [pc, #80]	; (8001dbc <HAL_UART_MspInit+0x80>)
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d72:	613b      	str	r3, [r7, #16]
 8001d74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d76:	4b11      	ldr	r3, [pc, #68]	; (8001dbc <HAL_UART_MspInit+0x80>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	4a10      	ldr	r2, [pc, #64]	; (8001dbc <HAL_UART_MspInit+0x80>)
 8001d7c:	f043 0308 	orr.w	r3, r3, #8
 8001d80:	6313      	str	r3, [r2, #48]	; 0x30
 8001d82:	4b0e      	ldr	r3, [pc, #56]	; (8001dbc <HAL_UART_MspInit+0x80>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	f003 0308 	and.w	r3, r3, #8
 8001d8a:	60fb      	str	r3, [r7, #12]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001d8e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d94:	2302      	movs	r3, #2
 8001d96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001da0:	2307      	movs	r3, #7
 8001da2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001da4:	f107 0314 	add.w	r3, r7, #20
 8001da8:	4619      	mov	r1, r3
 8001daa:	4805      	ldr	r0, [pc, #20]	; (8001dc0 <HAL_UART_MspInit+0x84>)
 8001dac:	f000 fe4a 	bl	8002a44 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001db0:	bf00      	nop
 8001db2:	3728      	adds	r7, #40	; 0x28
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	40004800 	.word	0x40004800
 8001dbc:	40023800 	.word	0x40023800
 8001dc0:	40020c00 	.word	0x40020c00

08001dc4 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001dc8:	4b14      	ldr	r3, [pc, #80]	; (8001e1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001dca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001dce:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001dd0:	4b12      	ldr	r3, [pc, #72]	; (8001e1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001dd2:	2206      	movs	r2, #6
 8001dd4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001dd6:	4b11      	ldr	r3, [pc, #68]	; (8001e1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001dd8:	2202      	movs	r2, #2
 8001dda:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001ddc:	4b0f      	ldr	r3, [pc, #60]	; (8001e1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001de2:	4b0e      	ldr	r3, [pc, #56]	; (8001e1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001de4:	2202      	movs	r2, #2
 8001de6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001de8:	4b0c      	ldr	r3, [pc, #48]	; (8001e1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001dea:	2201      	movs	r2, #1
 8001dec:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001dee:	4b0b      	ldr	r3, [pc, #44]	; (8001e1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001df4:	4b09      	ldr	r3, [pc, #36]	; (8001e1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001dfa:	4b08      	ldr	r3, [pc, #32]	; (8001e1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001e00:	4b06      	ldr	r3, [pc, #24]	; (8001e1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001e06:	4805      	ldr	r0, [pc, #20]	; (8001e1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e08:	f000 ffe1 	bl	8002dce <HAL_PCD_Init>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001e12:	f7ff fa75 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001e16:	bf00      	nop
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	2000036c 	.word	0x2000036c

08001e20 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b08a      	sub	sp, #40	; 0x28
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e28:	f107 0314 	add.w	r3, r7, #20
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	605a      	str	r2, [r3, #4]
 8001e32:	609a      	str	r2, [r3, #8]
 8001e34:	60da      	str	r2, [r3, #12]
 8001e36:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e40:	d141      	bne.n	8001ec6 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e42:	4b23      	ldr	r3, [pc, #140]	; (8001ed0 <HAL_PCD_MspInit+0xb0>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	4a22      	ldr	r2, [pc, #136]	; (8001ed0 <HAL_PCD_MspInit+0xb0>)
 8001e48:	f043 0301 	orr.w	r3, r3, #1
 8001e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4e:	4b20      	ldr	r3, [pc, #128]	; (8001ed0 <HAL_PCD_MspInit+0xb0>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	613b      	str	r3, [r7, #16]
 8001e58:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001e5a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001e5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e60:	2302      	movs	r3, #2
 8001e62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e64:	2300      	movs	r3, #0
 8001e66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001e6c:	230a      	movs	r3, #10
 8001e6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e70:	f107 0314 	add.w	r3, r7, #20
 8001e74:	4619      	mov	r1, r3
 8001e76:	4817      	ldr	r0, [pc, #92]	; (8001ed4 <HAL_PCD_MspInit+0xb4>)
 8001e78:	f000 fde4 	bl	8002a44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001e7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e82:	2300      	movs	r3, #0
 8001e84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e86:	2300      	movs	r3, #0
 8001e88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001e8a:	f107 0314 	add.w	r3, r7, #20
 8001e8e:	4619      	mov	r1, r3
 8001e90:	4810      	ldr	r0, [pc, #64]	; (8001ed4 <HAL_PCD_MspInit+0xb4>)
 8001e92:	f000 fdd7 	bl	8002a44 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001e96:	4b0e      	ldr	r3, [pc, #56]	; (8001ed0 <HAL_PCD_MspInit+0xb0>)
 8001e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e9a:	4a0d      	ldr	r2, [pc, #52]	; (8001ed0 <HAL_PCD_MspInit+0xb0>)
 8001e9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ea0:	6353      	str	r3, [r2, #52]	; 0x34
 8001ea2:	4b0b      	ldr	r3, [pc, #44]	; (8001ed0 <HAL_PCD_MspInit+0xb0>)
 8001ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	4b08      	ldr	r3, [pc, #32]	; (8001ed0 <HAL_PCD_MspInit+0xb0>)
 8001eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb2:	4a07      	ldr	r2, [pc, #28]	; (8001ed0 <HAL_PCD_MspInit+0xb0>)
 8001eb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eb8:	6453      	str	r3, [r2, #68]	; 0x44
 8001eba:	4b05      	ldr	r3, [pc, #20]	; (8001ed0 <HAL_PCD_MspInit+0xb0>)
 8001ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ebe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ec2:	60bb      	str	r3, [r7, #8]
 8001ec4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001ec6:	bf00      	nop
 8001ec8:	3728      	adds	r7, #40	; 0x28
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	40023800 	.word	0x40023800
 8001ed4:	40020000 	.word	0x40020000

08001ed8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ed8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f10 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001edc:	480d      	ldr	r0, [pc, #52]	; (8001f14 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ede:	490e      	ldr	r1, [pc, #56]	; (8001f18 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ee0:	4a0e      	ldr	r2, [pc, #56]	; (8001f1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ee2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ee4:	e002      	b.n	8001eec <LoopCopyDataInit>

08001ee6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ee6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ee8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eea:	3304      	adds	r3, #4

08001eec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001eec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ef0:	d3f9      	bcc.n	8001ee6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ef2:	4a0b      	ldr	r2, [pc, #44]	; (8001f20 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ef4:	4c0b      	ldr	r4, [pc, #44]	; (8001f24 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ef6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ef8:	e001      	b.n	8001efe <LoopFillZerobss>

08001efa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001efa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001efc:	3204      	adds	r2, #4

08001efe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001efe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f00:	d3fb      	bcc.n	8001efa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f02:	f7ff fa9f 	bl	8001444 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f06:	f004 fc99 	bl	800683c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f0a:	f7ff f939 	bl	8001180 <main>
  bx  lr    
 8001f0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f10:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001f14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f18:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001f1c:	0800719c 	.word	0x0800719c
  ldr r2, =_sbss
 8001f20:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001f24:	20000784 	.word	0x20000784

08001f28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f28:	e7fe      	b.n	8001f28 <ADC_IRQHandler>

08001f2a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f2e:	2003      	movs	r0, #3
 8001f30:	f000 fd46 	bl	80029c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f34:	2000      	movs	r0, #0
 8001f36:	f000 f805 	bl	8001f44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f3a:	f7ff f9e7 	bl	800130c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f3e:	2300      	movs	r3, #0
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f4c:	4b12      	ldr	r3, [pc, #72]	; (8001f98 <HAL_InitTick+0x54>)
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	4b12      	ldr	r3, [pc, #72]	; (8001f9c <HAL_InitTick+0x58>)
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	4619      	mov	r1, r3
 8001f56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f62:	4618      	mov	r0, r3
 8001f64:	f000 fd61 	bl	8002a2a <HAL_SYSTICK_Config>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e00e      	b.n	8001f90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2b0f      	cmp	r3, #15
 8001f76:	d80a      	bhi.n	8001f8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f78:	2200      	movs	r2, #0
 8001f7a:	6879      	ldr	r1, [r7, #4]
 8001f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f80:	f000 fd29 	bl	80029d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f84:	4a06      	ldr	r2, [pc, #24]	; (8001fa0 <HAL_InitTick+0x5c>)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	e000      	b.n	8001f90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3708      	adds	r7, #8
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	20000000 	.word	0x20000000
 8001f9c:	20000008 	.word	0x20000008
 8001fa0:	20000004 	.word	0x20000004

08001fa4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fa8:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <HAL_IncTick+0x20>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	461a      	mov	r2, r3
 8001fae:	4b06      	ldr	r3, [pc, #24]	; (8001fc8 <HAL_IncTick+0x24>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	4a04      	ldr	r2, [pc, #16]	; (8001fc8 <HAL_IncTick+0x24>)
 8001fb6:	6013      	str	r3, [r2, #0]
}
 8001fb8:	bf00      	nop
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	20000008 	.word	0x20000008
 8001fc8:	20000770 	.word	0x20000770

08001fcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  return uwTick;
 8001fd0:	4b03      	ldr	r3, [pc, #12]	; (8001fe0 <HAL_GetTick+0x14>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	20000770 	.word	0x20000770

08001fe4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fec:	f7ff ffee 	bl	8001fcc <HAL_GetTick>
 8001ff0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ffc:	d005      	beq.n	800200a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ffe:	4b0a      	ldr	r3, [pc, #40]	; (8002028 <HAL_Delay+0x44>)
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	461a      	mov	r2, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	4413      	add	r3, r2
 8002008:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800200a:	bf00      	nop
 800200c:	f7ff ffde 	bl	8001fcc <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	429a      	cmp	r2, r3
 800201a:	d8f7      	bhi.n	800200c <HAL_Delay+0x28>
  {
  }
}
 800201c:	bf00      	nop
 800201e:	bf00      	nop
 8002020:	3710      	adds	r7, #16
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	20000008 	.word	0x20000008

0800202c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002034:	2300      	movs	r3, #0
 8002036:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d101      	bne.n	8002042 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e031      	b.n	80020a6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002046:	2b00      	cmp	r3, #0
 8002048:	d109      	bne.n	800205e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f7fe ff1c 	bl	8000e88 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002062:	f003 0310 	and.w	r3, r3, #16
 8002066:	2b00      	cmp	r3, #0
 8002068:	d116      	bne.n	8002098 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800206e:	4b10      	ldr	r3, [pc, #64]	; (80020b0 <HAL_ADC_Init+0x84>)
 8002070:	4013      	ands	r3, r2
 8002072:	f043 0202 	orr.w	r2, r3, #2
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f000 fad6 	bl	800262c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	f023 0303 	bic.w	r3, r3, #3
 800208e:	f043 0201 	orr.w	r2, r3, #1
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	641a      	str	r2, [r3, #64]	; 0x40
 8002096:	e001      	b.n	800209c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80020a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3710      	adds	r7, #16
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	ffffeefd 	.word	0xffffeefd

080020b4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b085      	sub	sp, #20
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80020bc:	2300      	movs	r3, #0
 80020be:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d101      	bne.n	80020ce <HAL_ADC_Start+0x1a>
 80020ca:	2302      	movs	r3, #2
 80020cc:	e0ad      	b.n	800222a <HAL_ADC_Start+0x176>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2201      	movs	r2, #1
 80020d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f003 0301 	and.w	r3, r3, #1
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d018      	beq.n	8002116 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	689a      	ldr	r2, [r3, #8]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f042 0201 	orr.w	r2, r2, #1
 80020f2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80020f4:	4b50      	ldr	r3, [pc, #320]	; (8002238 <HAL_ADC_Start+0x184>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a50      	ldr	r2, [pc, #320]	; (800223c <HAL_ADC_Start+0x188>)
 80020fa:	fba2 2303 	umull	r2, r3, r2, r3
 80020fe:	0c9a      	lsrs	r2, r3, #18
 8002100:	4613      	mov	r3, r2
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	4413      	add	r3, r2
 8002106:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002108:	e002      	b.n	8002110 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	3b01      	subs	r3, #1
 800210e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d1f9      	bne.n	800210a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	f003 0301 	and.w	r3, r3, #1
 8002120:	2b01      	cmp	r3, #1
 8002122:	d175      	bne.n	8002210 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002128:	4b45      	ldr	r3, [pc, #276]	; (8002240 <HAL_ADC_Start+0x18c>)
 800212a:	4013      	ands	r3, r2
 800212c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800213e:	2b00      	cmp	r3, #0
 8002140:	d007      	beq.n	8002152 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002146:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800214a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002156:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800215a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800215e:	d106      	bne.n	800216e <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002164:	f023 0206 	bic.w	r2, r3, #6
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	645a      	str	r2, [r3, #68]	; 0x44
 800216c:	e002      	b.n	8002174 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002184:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002186:	4b2f      	ldr	r3, [pc, #188]	; (8002244 <HAL_ADC_Start+0x190>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f003 031f 	and.w	r3, r3, #31
 800218e:	2b00      	cmp	r3, #0
 8002190:	d10f      	bne.n	80021b2 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d143      	bne.n	8002228 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	689a      	ldr	r2, [r3, #8]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80021ae:	609a      	str	r2, [r3, #8]
 80021b0:	e03a      	b.n	8002228 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a24      	ldr	r2, [pc, #144]	; (8002248 <HAL_ADC_Start+0x194>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d10e      	bne.n	80021da <HAL_ADC_Start+0x126>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d107      	bne.n	80021da <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	689a      	ldr	r2, [r3, #8]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80021d8:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80021da:	4b1a      	ldr	r3, [pc, #104]	; (8002244 <HAL_ADC_Start+0x190>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f003 0310 	and.w	r3, r3, #16
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d120      	bne.n	8002228 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a18      	ldr	r2, [pc, #96]	; (800224c <HAL_ADC_Start+0x198>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d11b      	bne.n	8002228 <HAL_ADC_Start+0x174>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d114      	bne.n	8002228 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	689a      	ldr	r2, [r3, #8]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800220c:	609a      	str	r2, [r3, #8]
 800220e:	e00b      	b.n	8002228 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002214:	f043 0210 	orr.w	r2, r3, #16
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002220:	f043 0201 	orr.w	r2, r3, #1
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3714      	adds	r7, #20
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	20000000 	.word	0x20000000
 800223c:	431bde83 	.word	0x431bde83
 8002240:	fffff8fe 	.word	0xfffff8fe
 8002244:	40012300 	.word	0x40012300
 8002248:	40012000 	.word	0x40012000
 800224c:	40012200 	.word	0x40012200

08002250 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800225a:	2300      	movs	r3, #0
 800225c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002268:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800226c:	d113      	bne.n	8002296 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002278:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800227c:	d10b      	bne.n	8002296 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002282:	f043 0220 	orr.w	r2, r3, #32
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e063      	b.n	800235e <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002296:	f7ff fe99 	bl	8001fcc <HAL_GetTick>
 800229a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800229c:	e021      	b.n	80022e2 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022a4:	d01d      	beq.n	80022e2 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d007      	beq.n	80022bc <HAL_ADC_PollForConversion+0x6c>
 80022ac:	f7ff fe8e 	bl	8001fcc <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	683a      	ldr	r2, [r7, #0]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d212      	bcs.n	80022e2 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d00b      	beq.n	80022e2 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	f043 0204 	orr.w	r2, r3, #4
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e03d      	b.n	800235e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0302 	and.w	r3, r3, #2
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d1d6      	bne.n	800229e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f06f 0212 	mvn.w	r2, #18
 80022f8:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d123      	bne.n	800235c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002318:	2b00      	cmp	r3, #0
 800231a:	d11f      	bne.n	800235c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002322:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002326:	2b00      	cmp	r3, #0
 8002328:	d006      	beq.n	8002338 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002334:	2b00      	cmp	r3, #0
 8002336:	d111      	bne.n	800235c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002348:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d105      	bne.n	800235c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002354:	f043 0201 	orr.w	r2, r3, #1
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3710      	adds	r7, #16
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002366:	b480      	push	{r7}
 8002368:	b083      	sub	sp, #12
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002374:	4618      	mov	r0, r3
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800238a:	2300      	movs	r3, #0
 800238c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002394:	2b01      	cmp	r3, #1
 8002396:	d101      	bne.n	800239c <HAL_ADC_ConfigChannel+0x1c>
 8002398:	2302      	movs	r3, #2
 800239a:	e136      	b.n	800260a <HAL_ADC_ConfigChannel+0x28a>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2b09      	cmp	r3, #9
 80023aa:	d93a      	bls.n	8002422 <HAL_ADC_ConfigChannel+0xa2>
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80023b4:	d035      	beq.n	8002422 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	68d9      	ldr	r1, [r3, #12]
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	461a      	mov	r2, r3
 80023c4:	4613      	mov	r3, r2
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	4413      	add	r3, r2
 80023ca:	3b1e      	subs	r3, #30
 80023cc:	2207      	movs	r2, #7
 80023ce:	fa02 f303 	lsl.w	r3, r2, r3
 80023d2:	43da      	mvns	r2, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	400a      	ands	r2, r1
 80023da:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a8d      	ldr	r2, [pc, #564]	; (8002618 <HAL_ADC_ConfigChannel+0x298>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d10a      	bne.n	80023fc <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68d9      	ldr	r1, [r3, #12]
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	061a      	lsls	r2, r3, #24
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	430a      	orrs	r2, r1
 80023f8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023fa:	e035      	b.n	8002468 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	68d9      	ldr	r1, [r3, #12]
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	689a      	ldr	r2, [r3, #8]
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	b29b      	uxth	r3, r3
 800240c:	4618      	mov	r0, r3
 800240e:	4603      	mov	r3, r0
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	4403      	add	r3, r0
 8002414:	3b1e      	subs	r3, #30
 8002416:	409a      	lsls	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	430a      	orrs	r2, r1
 800241e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002420:	e022      	b.n	8002468 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	6919      	ldr	r1, [r3, #16]
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	b29b      	uxth	r3, r3
 800242e:	461a      	mov	r2, r3
 8002430:	4613      	mov	r3, r2
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	4413      	add	r3, r2
 8002436:	2207      	movs	r2, #7
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	43da      	mvns	r2, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	400a      	ands	r2, r1
 8002444:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	6919      	ldr	r1, [r3, #16]
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	689a      	ldr	r2, [r3, #8]
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	b29b      	uxth	r3, r3
 8002456:	4618      	mov	r0, r3
 8002458:	4603      	mov	r3, r0
 800245a:	005b      	lsls	r3, r3, #1
 800245c:	4403      	add	r3, r0
 800245e:	409a      	lsls	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	430a      	orrs	r2, r1
 8002466:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	2b06      	cmp	r3, #6
 800246e:	d824      	bhi.n	80024ba <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685a      	ldr	r2, [r3, #4]
 800247a:	4613      	mov	r3, r2
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	4413      	add	r3, r2
 8002480:	3b05      	subs	r3, #5
 8002482:	221f      	movs	r2, #31
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	43da      	mvns	r2, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	400a      	ands	r2, r1
 8002490:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	b29b      	uxth	r3, r3
 800249e:	4618      	mov	r0, r3
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685a      	ldr	r2, [r3, #4]
 80024a4:	4613      	mov	r3, r2
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	4413      	add	r3, r2
 80024aa:	3b05      	subs	r3, #5
 80024ac:	fa00 f203 	lsl.w	r2, r0, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	430a      	orrs	r2, r1
 80024b6:	635a      	str	r2, [r3, #52]	; 0x34
 80024b8:	e04c      	b.n	8002554 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	2b0c      	cmp	r3, #12
 80024c0:	d824      	bhi.n	800250c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685a      	ldr	r2, [r3, #4]
 80024cc:	4613      	mov	r3, r2
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	4413      	add	r3, r2
 80024d2:	3b23      	subs	r3, #35	; 0x23
 80024d4:	221f      	movs	r2, #31
 80024d6:	fa02 f303 	lsl.w	r3, r2, r3
 80024da:	43da      	mvns	r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	400a      	ands	r2, r1
 80024e2:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	4618      	mov	r0, r3
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685a      	ldr	r2, [r3, #4]
 80024f6:	4613      	mov	r3, r2
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	4413      	add	r3, r2
 80024fc:	3b23      	subs	r3, #35	; 0x23
 80024fe:	fa00 f203 	lsl.w	r2, r0, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	430a      	orrs	r2, r1
 8002508:	631a      	str	r2, [r3, #48]	; 0x30
 800250a:	e023      	b.n	8002554 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685a      	ldr	r2, [r3, #4]
 8002516:	4613      	mov	r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	4413      	add	r3, r2
 800251c:	3b41      	subs	r3, #65	; 0x41
 800251e:	221f      	movs	r2, #31
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	43da      	mvns	r2, r3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	400a      	ands	r2, r1
 800252c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	b29b      	uxth	r3, r3
 800253a:	4618      	mov	r0, r3
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685a      	ldr	r2, [r3, #4]
 8002540:	4613      	mov	r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	4413      	add	r3, r2
 8002546:	3b41      	subs	r3, #65	; 0x41
 8002548:	fa00 f203 	lsl.w	r2, r0, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	430a      	orrs	r2, r1
 8002552:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a30      	ldr	r2, [pc, #192]	; (800261c <HAL_ADC_ConfigChannel+0x29c>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d10a      	bne.n	8002574 <HAL_ADC_ConfigChannel+0x1f4>
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002566:	d105      	bne.n	8002574 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002568:	4b2d      	ldr	r3, [pc, #180]	; (8002620 <HAL_ADC_ConfigChannel+0x2a0>)
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	4a2c      	ldr	r2, [pc, #176]	; (8002620 <HAL_ADC_ConfigChannel+0x2a0>)
 800256e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002572:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a28      	ldr	r2, [pc, #160]	; (800261c <HAL_ADC_ConfigChannel+0x29c>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d10f      	bne.n	800259e <HAL_ADC_ConfigChannel+0x21e>
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2b12      	cmp	r3, #18
 8002584:	d10b      	bne.n	800259e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002586:	4b26      	ldr	r3, [pc, #152]	; (8002620 <HAL_ADC_ConfigChannel+0x2a0>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	4a25      	ldr	r2, [pc, #148]	; (8002620 <HAL_ADC_ConfigChannel+0x2a0>)
 800258c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002590:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002592:	4b23      	ldr	r3, [pc, #140]	; (8002620 <HAL_ADC_ConfigChannel+0x2a0>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	4a22      	ldr	r2, [pc, #136]	; (8002620 <HAL_ADC_ConfigChannel+0x2a0>)
 8002598:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800259c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a1e      	ldr	r2, [pc, #120]	; (800261c <HAL_ADC_ConfigChannel+0x29c>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d12b      	bne.n	8002600 <HAL_ADC_ConfigChannel+0x280>
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a1a      	ldr	r2, [pc, #104]	; (8002618 <HAL_ADC_ConfigChannel+0x298>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d003      	beq.n	80025ba <HAL_ADC_ConfigChannel+0x23a>
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2b11      	cmp	r3, #17
 80025b8:	d122      	bne.n	8002600 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80025ba:	4b19      	ldr	r3, [pc, #100]	; (8002620 <HAL_ADC_ConfigChannel+0x2a0>)
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	4a18      	ldr	r2, [pc, #96]	; (8002620 <HAL_ADC_ConfigChannel+0x2a0>)
 80025c0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80025c4:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80025c6:	4b16      	ldr	r3, [pc, #88]	; (8002620 <HAL_ADC_ConfigChannel+0x2a0>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	4a15      	ldr	r2, [pc, #84]	; (8002620 <HAL_ADC_ConfigChannel+0x2a0>)
 80025cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80025d0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a10      	ldr	r2, [pc, #64]	; (8002618 <HAL_ADC_ConfigChannel+0x298>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d111      	bne.n	8002600 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80025dc:	4b11      	ldr	r3, [pc, #68]	; (8002624 <HAL_ADC_ConfigChannel+0x2a4>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a11      	ldr	r2, [pc, #68]	; (8002628 <HAL_ADC_ConfigChannel+0x2a8>)
 80025e2:	fba2 2303 	umull	r2, r3, r2, r3
 80025e6:	0c9a      	lsrs	r2, r3, #18
 80025e8:	4613      	mov	r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	4413      	add	r3, r2
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80025f2:	e002      	b.n	80025fa <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	3b01      	subs	r3, #1
 80025f8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d1f9      	bne.n	80025f4 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3714      	adds	r7, #20
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	10000012 	.word	0x10000012
 800261c:	40012000 	.word	0x40012000
 8002620:	40012300 	.word	0x40012300
 8002624:	20000000 	.word	0x20000000
 8002628:	431bde83 	.word	0x431bde83

0800262c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002634:	4b78      	ldr	r3, [pc, #480]	; (8002818 <ADC_Init+0x1ec>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	4a77      	ldr	r2, [pc, #476]	; (8002818 <ADC_Init+0x1ec>)
 800263a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800263e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002640:	4b75      	ldr	r3, [pc, #468]	; (8002818 <ADC_Init+0x1ec>)
 8002642:	685a      	ldr	r2, [r3, #4]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	4973      	ldr	r1, [pc, #460]	; (8002818 <ADC_Init+0x1ec>)
 800264a:	4313      	orrs	r3, r2
 800264c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	685a      	ldr	r2, [r3, #4]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800265c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	6859      	ldr	r1, [r3, #4]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	691b      	ldr	r3, [r3, #16]
 8002668:	021a      	lsls	r2, r3, #8
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	430a      	orrs	r2, r1
 8002670:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	685a      	ldr	r2, [r3, #4]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002680:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	6859      	ldr	r1, [r3, #4]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	689a      	ldr	r2, [r3, #8]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	430a      	orrs	r2, r1
 8002692:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	689a      	ldr	r2, [r3, #8]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	6899      	ldr	r1, [r3, #8]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	68da      	ldr	r2, [r3, #12]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	430a      	orrs	r2, r1
 80026b4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ba:	4a58      	ldr	r2, [pc, #352]	; (800281c <ADC_Init+0x1f0>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d022      	beq.n	8002706 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	689a      	ldr	r2, [r3, #8]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80026ce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	6899      	ldr	r1, [r3, #8]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	430a      	orrs	r2, r1
 80026e0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	689a      	ldr	r2, [r3, #8]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80026f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	6899      	ldr	r1, [r3, #8]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	430a      	orrs	r2, r1
 8002702:	609a      	str	r2, [r3, #8]
 8002704:	e00f      	b.n	8002726 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	689a      	ldr	r2, [r3, #8]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002714:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	689a      	ldr	r2, [r3, #8]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002724:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	689a      	ldr	r2, [r3, #8]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f022 0202 	bic.w	r2, r2, #2
 8002734:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	6899      	ldr	r1, [r3, #8]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	699b      	ldr	r3, [r3, #24]
 8002740:	005a      	lsls	r2, r3, #1
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	430a      	orrs	r2, r1
 8002748:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d01b      	beq.n	800278c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	685a      	ldr	r2, [r3, #4]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002762:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	685a      	ldr	r2, [r3, #4]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002772:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	6859      	ldr	r1, [r3, #4]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277e:	3b01      	subs	r3, #1
 8002780:	035a      	lsls	r2, r3, #13
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	430a      	orrs	r2, r1
 8002788:	605a      	str	r2, [r3, #4]
 800278a:	e007      	b.n	800279c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	685a      	ldr	r2, [r3, #4]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800279a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80027aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	69db      	ldr	r3, [r3, #28]
 80027b6:	3b01      	subs	r3, #1
 80027b8:	051a      	lsls	r2, r3, #20
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	430a      	orrs	r2, r1
 80027c0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	689a      	ldr	r2, [r3, #8]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80027d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	6899      	ldr	r1, [r3, #8]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80027de:	025a      	lsls	r2, r3, #9
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	430a      	orrs	r2, r1
 80027e6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	689a      	ldr	r2, [r3, #8]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	6899      	ldr	r1, [r3, #8]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	695b      	ldr	r3, [r3, #20]
 8002802:	029a      	lsls	r2, r3, #10
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	430a      	orrs	r2, r1
 800280a:	609a      	str	r2, [r3, #8]
}
 800280c:	bf00      	nop
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr
 8002818:	40012300 	.word	0x40012300
 800281c:	0f000001 	.word	0x0f000001

08002820 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002820:	b480      	push	{r7}
 8002822:	b085      	sub	sp, #20
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f003 0307 	and.w	r3, r3, #7
 800282e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002830:	4b0b      	ldr	r3, [pc, #44]	; (8002860 <__NVIC_SetPriorityGrouping+0x40>)
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002836:	68ba      	ldr	r2, [r7, #8]
 8002838:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800283c:	4013      	ands	r3, r2
 800283e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002848:	4b06      	ldr	r3, [pc, #24]	; (8002864 <__NVIC_SetPriorityGrouping+0x44>)
 800284a:	4313      	orrs	r3, r2
 800284c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800284e:	4a04      	ldr	r2, [pc, #16]	; (8002860 <__NVIC_SetPriorityGrouping+0x40>)
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	60d3      	str	r3, [r2, #12]
}
 8002854:	bf00      	nop
 8002856:	3714      	adds	r7, #20
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr
 8002860:	e000ed00 	.word	0xe000ed00
 8002864:	05fa0000 	.word	0x05fa0000

08002868 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800286c:	4b04      	ldr	r3, [pc, #16]	; (8002880 <__NVIC_GetPriorityGrouping+0x18>)
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	0a1b      	lsrs	r3, r3, #8
 8002872:	f003 0307 	and.w	r3, r3, #7
}
 8002876:	4618      	mov	r0, r3
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr
 8002880:	e000ed00 	.word	0xe000ed00

08002884 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	4603      	mov	r3, r0
 800288c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800288e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002892:	2b00      	cmp	r3, #0
 8002894:	db0b      	blt.n	80028ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002896:	79fb      	ldrb	r3, [r7, #7]
 8002898:	f003 021f 	and.w	r2, r3, #31
 800289c:	4907      	ldr	r1, [pc, #28]	; (80028bc <__NVIC_EnableIRQ+0x38>)
 800289e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a2:	095b      	lsrs	r3, r3, #5
 80028a4:	2001      	movs	r0, #1
 80028a6:	fa00 f202 	lsl.w	r2, r0, r2
 80028aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028ae:	bf00      	nop
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	e000e100 	.word	0xe000e100

080028c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	4603      	mov	r3, r0
 80028c8:	6039      	str	r1, [r7, #0]
 80028ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	db0a      	blt.n	80028ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	b2da      	uxtb	r2, r3
 80028d8:	490c      	ldr	r1, [pc, #48]	; (800290c <__NVIC_SetPriority+0x4c>)
 80028da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028de:	0112      	lsls	r2, r2, #4
 80028e0:	b2d2      	uxtb	r2, r2
 80028e2:	440b      	add	r3, r1
 80028e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028e8:	e00a      	b.n	8002900 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	b2da      	uxtb	r2, r3
 80028ee:	4908      	ldr	r1, [pc, #32]	; (8002910 <__NVIC_SetPriority+0x50>)
 80028f0:	79fb      	ldrb	r3, [r7, #7]
 80028f2:	f003 030f 	and.w	r3, r3, #15
 80028f6:	3b04      	subs	r3, #4
 80028f8:	0112      	lsls	r2, r2, #4
 80028fa:	b2d2      	uxtb	r2, r2
 80028fc:	440b      	add	r3, r1
 80028fe:	761a      	strb	r2, [r3, #24]
}
 8002900:	bf00      	nop
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr
 800290c:	e000e100 	.word	0xe000e100
 8002910:	e000ed00 	.word	0xe000ed00

08002914 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002914:	b480      	push	{r7}
 8002916:	b089      	sub	sp, #36	; 0x24
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f003 0307 	and.w	r3, r3, #7
 8002926:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	f1c3 0307 	rsb	r3, r3, #7
 800292e:	2b04      	cmp	r3, #4
 8002930:	bf28      	it	cs
 8002932:	2304      	movcs	r3, #4
 8002934:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	3304      	adds	r3, #4
 800293a:	2b06      	cmp	r3, #6
 800293c:	d902      	bls.n	8002944 <NVIC_EncodePriority+0x30>
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	3b03      	subs	r3, #3
 8002942:	e000      	b.n	8002946 <NVIC_EncodePriority+0x32>
 8002944:	2300      	movs	r3, #0
 8002946:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002948:	f04f 32ff 	mov.w	r2, #4294967295
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	fa02 f303 	lsl.w	r3, r2, r3
 8002952:	43da      	mvns	r2, r3
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	401a      	ands	r2, r3
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800295c:	f04f 31ff 	mov.w	r1, #4294967295
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	fa01 f303 	lsl.w	r3, r1, r3
 8002966:	43d9      	mvns	r1, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800296c:	4313      	orrs	r3, r2
         );
}
 800296e:	4618      	mov	r0, r3
 8002970:	3724      	adds	r7, #36	; 0x24
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
	...

0800297c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	3b01      	subs	r3, #1
 8002988:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800298c:	d301      	bcc.n	8002992 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800298e:	2301      	movs	r3, #1
 8002990:	e00f      	b.n	80029b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002992:	4a0a      	ldr	r2, [pc, #40]	; (80029bc <SysTick_Config+0x40>)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	3b01      	subs	r3, #1
 8002998:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800299a:	210f      	movs	r1, #15
 800299c:	f04f 30ff 	mov.w	r0, #4294967295
 80029a0:	f7ff ff8e 	bl	80028c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029a4:	4b05      	ldr	r3, [pc, #20]	; (80029bc <SysTick_Config+0x40>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029aa:	4b04      	ldr	r3, [pc, #16]	; (80029bc <SysTick_Config+0x40>)
 80029ac:	2207      	movs	r2, #7
 80029ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	e000e010 	.word	0xe000e010

080029c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f7ff ff29 	bl	8002820 <__NVIC_SetPriorityGrouping>
}
 80029ce:	bf00      	nop
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b086      	sub	sp, #24
 80029da:	af00      	add	r7, sp, #0
 80029dc:	4603      	mov	r3, r0
 80029de:	60b9      	str	r1, [r7, #8]
 80029e0:	607a      	str	r2, [r7, #4]
 80029e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80029e4:	2300      	movs	r3, #0
 80029e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029e8:	f7ff ff3e 	bl	8002868 <__NVIC_GetPriorityGrouping>
 80029ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	68b9      	ldr	r1, [r7, #8]
 80029f2:	6978      	ldr	r0, [r7, #20]
 80029f4:	f7ff ff8e 	bl	8002914 <NVIC_EncodePriority>
 80029f8:	4602      	mov	r2, r0
 80029fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029fe:	4611      	mov	r1, r2
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7ff ff5d 	bl	80028c0 <__NVIC_SetPriority>
}
 8002a06:	bf00      	nop
 8002a08:	3718      	adds	r7, #24
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b082      	sub	sp, #8
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	4603      	mov	r3, r0
 8002a16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7ff ff31 	bl	8002884 <__NVIC_EnableIRQ>
}
 8002a22:	bf00      	nop
 8002a24:	3708      	adds	r7, #8
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}

08002a2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a2a:	b580      	push	{r7, lr}
 8002a2c:	b082      	sub	sp, #8
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f7ff ffa2 	bl	800297c <SysTick_Config>
 8002a38:	4603      	mov	r3, r0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3708      	adds	r7, #8
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
	...

08002a44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b089      	sub	sp, #36	; 0x24
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002a52:	2300      	movs	r3, #0
 8002a54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002a56:	2300      	movs	r3, #0
 8002a58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002a5e:	2300      	movs	r3, #0
 8002a60:	61fb      	str	r3, [r7, #28]
 8002a62:	e175      	b.n	8002d50 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002a64:	2201      	movs	r2, #1
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	697a      	ldr	r2, [r7, #20]
 8002a74:	4013      	ands	r3, r2
 8002a76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a78:	693a      	ldr	r2, [r7, #16]
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	f040 8164 	bne.w	8002d4a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f003 0303 	and.w	r3, r3, #3
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d005      	beq.n	8002a9a <HAL_GPIO_Init+0x56>
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f003 0303 	and.w	r3, r3, #3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d130      	bne.n	8002afc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	005b      	lsls	r3, r3, #1
 8002aa4:	2203      	movs	r2, #3
 8002aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aaa:	43db      	mvns	r3, r3
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	4013      	ands	r3, r2
 8002ab0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	68da      	ldr	r2, [r3, #12]
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	fa02 f303 	lsl.w	r3, r2, r3
 8002abe:	69ba      	ldr	r2, [r7, #24]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad8:	43db      	mvns	r3, r3
 8002ada:	69ba      	ldr	r2, [r7, #24]
 8002adc:	4013      	ands	r3, r2
 8002ade:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	091b      	lsrs	r3, r3, #4
 8002ae6:	f003 0201 	and.w	r2, r3, #1
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	fa02 f303 	lsl.w	r3, r2, r3
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	69ba      	ldr	r2, [r7, #24]
 8002afa:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f003 0303 	and.w	r3, r3, #3
 8002b04:	2b03      	cmp	r3, #3
 8002b06:	d017      	beq.n	8002b38 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	005b      	lsls	r3, r3, #1
 8002b12:	2203      	movs	r2, #3
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	43db      	mvns	r3, r3
 8002b1a:	69ba      	ldr	r2, [r7, #24]
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	689a      	ldr	r2, [r3, #8]
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	005b      	lsls	r3, r3, #1
 8002b28:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f003 0303 	and.w	r3, r3, #3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d123      	bne.n	8002b8c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	08da      	lsrs	r2, r3, #3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	3208      	adds	r2, #8
 8002b4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	f003 0307 	and.w	r3, r3, #7
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	220f      	movs	r2, #15
 8002b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b60:	43db      	mvns	r3, r3
 8002b62:	69ba      	ldr	r2, [r7, #24]
 8002b64:	4013      	ands	r3, r2
 8002b66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	691a      	ldr	r2, [r3, #16]
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	f003 0307 	and.w	r3, r3, #7
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	fa02 f303 	lsl.w	r3, r2, r3
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	08da      	lsrs	r2, r3, #3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	3208      	adds	r2, #8
 8002b86:	69b9      	ldr	r1, [r7, #24]
 8002b88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	2203      	movs	r2, #3
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	43db      	mvns	r3, r3
 8002b9e:	69ba      	ldr	r2, [r7, #24]
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f003 0203 	and.w	r2, r3, #3
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	f000 80be 	beq.w	8002d4a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bce:	4b66      	ldr	r3, [pc, #408]	; (8002d68 <HAL_GPIO_Init+0x324>)
 8002bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd2:	4a65      	ldr	r2, [pc, #404]	; (8002d68 <HAL_GPIO_Init+0x324>)
 8002bd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bd8:	6453      	str	r3, [r2, #68]	; 0x44
 8002bda:	4b63      	ldr	r3, [pc, #396]	; (8002d68 <HAL_GPIO_Init+0x324>)
 8002bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002be2:	60fb      	str	r3, [r7, #12]
 8002be4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002be6:	4a61      	ldr	r2, [pc, #388]	; (8002d6c <HAL_GPIO_Init+0x328>)
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	089b      	lsrs	r3, r3, #2
 8002bec:	3302      	adds	r3, #2
 8002bee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	f003 0303 	and.w	r3, r3, #3
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	220f      	movs	r2, #15
 8002bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002c02:	43db      	mvns	r3, r3
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	4013      	ands	r3, r2
 8002c08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a58      	ldr	r2, [pc, #352]	; (8002d70 <HAL_GPIO_Init+0x32c>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d037      	beq.n	8002c82 <HAL_GPIO_Init+0x23e>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a57      	ldr	r2, [pc, #348]	; (8002d74 <HAL_GPIO_Init+0x330>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d031      	beq.n	8002c7e <HAL_GPIO_Init+0x23a>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a56      	ldr	r2, [pc, #344]	; (8002d78 <HAL_GPIO_Init+0x334>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d02b      	beq.n	8002c7a <HAL_GPIO_Init+0x236>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a55      	ldr	r2, [pc, #340]	; (8002d7c <HAL_GPIO_Init+0x338>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d025      	beq.n	8002c76 <HAL_GPIO_Init+0x232>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a54      	ldr	r2, [pc, #336]	; (8002d80 <HAL_GPIO_Init+0x33c>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d01f      	beq.n	8002c72 <HAL_GPIO_Init+0x22e>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a53      	ldr	r2, [pc, #332]	; (8002d84 <HAL_GPIO_Init+0x340>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d019      	beq.n	8002c6e <HAL_GPIO_Init+0x22a>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a52      	ldr	r2, [pc, #328]	; (8002d88 <HAL_GPIO_Init+0x344>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d013      	beq.n	8002c6a <HAL_GPIO_Init+0x226>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a51      	ldr	r2, [pc, #324]	; (8002d8c <HAL_GPIO_Init+0x348>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d00d      	beq.n	8002c66 <HAL_GPIO_Init+0x222>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a50      	ldr	r2, [pc, #320]	; (8002d90 <HAL_GPIO_Init+0x34c>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d007      	beq.n	8002c62 <HAL_GPIO_Init+0x21e>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a4f      	ldr	r2, [pc, #316]	; (8002d94 <HAL_GPIO_Init+0x350>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d101      	bne.n	8002c5e <HAL_GPIO_Init+0x21a>
 8002c5a:	2309      	movs	r3, #9
 8002c5c:	e012      	b.n	8002c84 <HAL_GPIO_Init+0x240>
 8002c5e:	230a      	movs	r3, #10
 8002c60:	e010      	b.n	8002c84 <HAL_GPIO_Init+0x240>
 8002c62:	2308      	movs	r3, #8
 8002c64:	e00e      	b.n	8002c84 <HAL_GPIO_Init+0x240>
 8002c66:	2307      	movs	r3, #7
 8002c68:	e00c      	b.n	8002c84 <HAL_GPIO_Init+0x240>
 8002c6a:	2306      	movs	r3, #6
 8002c6c:	e00a      	b.n	8002c84 <HAL_GPIO_Init+0x240>
 8002c6e:	2305      	movs	r3, #5
 8002c70:	e008      	b.n	8002c84 <HAL_GPIO_Init+0x240>
 8002c72:	2304      	movs	r3, #4
 8002c74:	e006      	b.n	8002c84 <HAL_GPIO_Init+0x240>
 8002c76:	2303      	movs	r3, #3
 8002c78:	e004      	b.n	8002c84 <HAL_GPIO_Init+0x240>
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	e002      	b.n	8002c84 <HAL_GPIO_Init+0x240>
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e000      	b.n	8002c84 <HAL_GPIO_Init+0x240>
 8002c82:	2300      	movs	r3, #0
 8002c84:	69fa      	ldr	r2, [r7, #28]
 8002c86:	f002 0203 	and.w	r2, r2, #3
 8002c8a:	0092      	lsls	r2, r2, #2
 8002c8c:	4093      	lsls	r3, r2
 8002c8e:	69ba      	ldr	r2, [r7, #24]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002c94:	4935      	ldr	r1, [pc, #212]	; (8002d6c <HAL_GPIO_Init+0x328>)
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	089b      	lsrs	r3, r3, #2
 8002c9a:	3302      	adds	r3, #2
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ca2:	4b3d      	ldr	r3, [pc, #244]	; (8002d98 <HAL_GPIO_Init+0x354>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	43db      	mvns	r3, r3
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	4013      	ands	r3, r2
 8002cb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d003      	beq.n	8002cc6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002cbe:	69ba      	ldr	r2, [r7, #24]
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cc6:	4a34      	ldr	r2, [pc, #208]	; (8002d98 <HAL_GPIO_Init+0x354>)
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ccc:	4b32      	ldr	r3, [pc, #200]	; (8002d98 <HAL_GPIO_Init+0x354>)
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	43db      	mvns	r3, r3
 8002cd6:	69ba      	ldr	r2, [r7, #24]
 8002cd8:	4013      	ands	r3, r2
 8002cda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d003      	beq.n	8002cf0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002ce8:	69ba      	ldr	r2, [r7, #24]
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cf0:	4a29      	ldr	r2, [pc, #164]	; (8002d98 <HAL_GPIO_Init+0x354>)
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002cf6:	4b28      	ldr	r3, [pc, #160]	; (8002d98 <HAL_GPIO_Init+0x354>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	43db      	mvns	r3, r3
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	4013      	ands	r3, r2
 8002d04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d003      	beq.n	8002d1a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002d12:	69ba      	ldr	r2, [r7, #24]
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d1a:	4a1f      	ldr	r2, [pc, #124]	; (8002d98 <HAL_GPIO_Init+0x354>)
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d20:	4b1d      	ldr	r3, [pc, #116]	; (8002d98 <HAL_GPIO_Init+0x354>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	43db      	mvns	r3, r3
 8002d2a:	69ba      	ldr	r2, [r7, #24]
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d003      	beq.n	8002d44 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d44:	4a14      	ldr	r2, [pc, #80]	; (8002d98 <HAL_GPIO_Init+0x354>)
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	61fb      	str	r3, [r7, #28]
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	2b0f      	cmp	r3, #15
 8002d54:	f67f ae86 	bls.w	8002a64 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002d58:	bf00      	nop
 8002d5a:	bf00      	nop
 8002d5c:	3724      	adds	r7, #36	; 0x24
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	40023800 	.word	0x40023800
 8002d6c:	40013800 	.word	0x40013800
 8002d70:	40020000 	.word	0x40020000
 8002d74:	40020400 	.word	0x40020400
 8002d78:	40020800 	.word	0x40020800
 8002d7c:	40020c00 	.word	0x40020c00
 8002d80:	40021000 	.word	0x40021000
 8002d84:	40021400 	.word	0x40021400
 8002d88:	40021800 	.word	0x40021800
 8002d8c:	40021c00 	.word	0x40021c00
 8002d90:	40022000 	.word	0x40022000
 8002d94:	40022400 	.word	0x40022400
 8002d98:	40013c00 	.word	0x40013c00

08002d9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	460b      	mov	r3, r1
 8002da6:	807b      	strh	r3, [r7, #2]
 8002da8:	4613      	mov	r3, r2
 8002daa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002dac:	787b      	ldrb	r3, [r7, #1]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d003      	beq.n	8002dba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002db2:	887a      	ldrh	r2, [r7, #2]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002db8:	e003      	b.n	8002dc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002dba:	887b      	ldrh	r3, [r7, #2]
 8002dbc:	041a      	lsls	r2, r3, #16
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	619a      	str	r2, [r3, #24]
}
 8002dc2:	bf00      	nop
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr

08002dce <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002dce:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dd0:	b08f      	sub	sp, #60	; 0x3c
 8002dd2:	af0a      	add	r7, sp, #40	; 0x28
 8002dd4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d101      	bne.n	8002de0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e116      	b.n	800300e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d106      	bne.n	8002e00 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f7ff f810 	bl	8001e20 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2203      	movs	r2, #3
 8002e04:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d102      	bne.n	8002e1a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f003 fa68 	bl	80062f4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	603b      	str	r3, [r7, #0]
 8002e2a:	687e      	ldr	r6, [r7, #4]
 8002e2c:	466d      	mov	r5, sp
 8002e2e:	f106 0410 	add.w	r4, r6, #16
 8002e32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e3a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e3e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e42:	1d33      	adds	r3, r6, #4
 8002e44:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e46:	6838      	ldr	r0, [r7, #0]
 8002e48:	f003 f9fc 	bl	8006244 <USB_CoreInit>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d005      	beq.n	8002e5e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2202      	movs	r2, #2
 8002e56:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e0d7      	b.n	800300e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2100      	movs	r1, #0
 8002e64:	4618      	mov	r0, r3
 8002e66:	f003 fa56 	bl	8006316 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	73fb      	strb	r3, [r7, #15]
 8002e6e:	e04a      	b.n	8002f06 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002e70:	7bfa      	ldrb	r2, [r7, #15]
 8002e72:	6879      	ldr	r1, [r7, #4]
 8002e74:	4613      	mov	r3, r2
 8002e76:	00db      	lsls	r3, r3, #3
 8002e78:	1a9b      	subs	r3, r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	440b      	add	r3, r1
 8002e7e:	333d      	adds	r3, #61	; 0x3d
 8002e80:	2201      	movs	r2, #1
 8002e82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002e84:	7bfa      	ldrb	r2, [r7, #15]
 8002e86:	6879      	ldr	r1, [r7, #4]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	00db      	lsls	r3, r3, #3
 8002e8c:	1a9b      	subs	r3, r3, r2
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	440b      	add	r3, r1
 8002e92:	333c      	adds	r3, #60	; 0x3c
 8002e94:	7bfa      	ldrb	r2, [r7, #15]
 8002e96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002e98:	7bfa      	ldrb	r2, [r7, #15]
 8002e9a:	7bfb      	ldrb	r3, [r7, #15]
 8002e9c:	b298      	uxth	r0, r3
 8002e9e:	6879      	ldr	r1, [r7, #4]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	1a9b      	subs	r3, r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	440b      	add	r3, r1
 8002eaa:	3342      	adds	r3, #66	; 0x42
 8002eac:	4602      	mov	r2, r0
 8002eae:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002eb0:	7bfa      	ldrb	r2, [r7, #15]
 8002eb2:	6879      	ldr	r1, [r7, #4]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	00db      	lsls	r3, r3, #3
 8002eb8:	1a9b      	subs	r3, r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	440b      	add	r3, r1
 8002ebe:	333f      	adds	r3, #63	; 0x3f
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002ec4:	7bfa      	ldrb	r2, [r7, #15]
 8002ec6:	6879      	ldr	r1, [r7, #4]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	00db      	lsls	r3, r3, #3
 8002ecc:	1a9b      	subs	r3, r3, r2
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	440b      	add	r3, r1
 8002ed2:	3344      	adds	r3, #68	; 0x44
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ed8:	7bfa      	ldrb	r2, [r7, #15]
 8002eda:	6879      	ldr	r1, [r7, #4]
 8002edc:	4613      	mov	r3, r2
 8002ede:	00db      	lsls	r3, r3, #3
 8002ee0:	1a9b      	subs	r3, r3, r2
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	440b      	add	r3, r1
 8002ee6:	3348      	adds	r3, #72	; 0x48
 8002ee8:	2200      	movs	r2, #0
 8002eea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002eec:	7bfa      	ldrb	r2, [r7, #15]
 8002eee:	6879      	ldr	r1, [r7, #4]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	00db      	lsls	r3, r3, #3
 8002ef4:	1a9b      	subs	r3, r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	440b      	add	r3, r1
 8002efa:	3350      	adds	r3, #80	; 0x50
 8002efc:	2200      	movs	r2, #0
 8002efe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f00:	7bfb      	ldrb	r3, [r7, #15]
 8002f02:	3301      	adds	r3, #1
 8002f04:	73fb      	strb	r3, [r7, #15]
 8002f06:	7bfa      	ldrb	r2, [r7, #15]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d3af      	bcc.n	8002e70 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f10:	2300      	movs	r3, #0
 8002f12:	73fb      	strb	r3, [r7, #15]
 8002f14:	e044      	b.n	8002fa0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002f16:	7bfa      	ldrb	r2, [r7, #15]
 8002f18:	6879      	ldr	r1, [r7, #4]
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	00db      	lsls	r3, r3, #3
 8002f1e:	1a9b      	subs	r3, r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	440b      	add	r3, r1
 8002f24:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002f28:	2200      	movs	r2, #0
 8002f2a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002f2c:	7bfa      	ldrb	r2, [r7, #15]
 8002f2e:	6879      	ldr	r1, [r7, #4]
 8002f30:	4613      	mov	r3, r2
 8002f32:	00db      	lsls	r3, r3, #3
 8002f34:	1a9b      	subs	r3, r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	440b      	add	r3, r1
 8002f3a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002f3e:	7bfa      	ldrb	r2, [r7, #15]
 8002f40:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002f42:	7bfa      	ldrb	r2, [r7, #15]
 8002f44:	6879      	ldr	r1, [r7, #4]
 8002f46:	4613      	mov	r3, r2
 8002f48:	00db      	lsls	r3, r3, #3
 8002f4a:	1a9b      	subs	r3, r3, r2
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	440b      	add	r3, r1
 8002f50:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002f54:	2200      	movs	r2, #0
 8002f56:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002f58:	7bfa      	ldrb	r2, [r7, #15]
 8002f5a:	6879      	ldr	r1, [r7, #4]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	00db      	lsls	r3, r3, #3
 8002f60:	1a9b      	subs	r3, r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	440b      	add	r3, r1
 8002f66:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002f6e:	7bfa      	ldrb	r2, [r7, #15]
 8002f70:	6879      	ldr	r1, [r7, #4]
 8002f72:	4613      	mov	r3, r2
 8002f74:	00db      	lsls	r3, r3, #3
 8002f76:	1a9b      	subs	r3, r3, r2
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	440b      	add	r3, r1
 8002f7c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002f80:	2200      	movs	r2, #0
 8002f82:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002f84:	7bfa      	ldrb	r2, [r7, #15]
 8002f86:	6879      	ldr	r1, [r7, #4]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	00db      	lsls	r3, r3, #3
 8002f8c:	1a9b      	subs	r3, r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	440b      	add	r3, r1
 8002f92:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002f96:	2200      	movs	r2, #0
 8002f98:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f9a:	7bfb      	ldrb	r3, [r7, #15]
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	73fb      	strb	r3, [r7, #15]
 8002fa0:	7bfa      	ldrb	r2, [r7, #15]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d3b5      	bcc.n	8002f16 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	603b      	str	r3, [r7, #0]
 8002fb0:	687e      	ldr	r6, [r7, #4]
 8002fb2:	466d      	mov	r5, sp
 8002fb4:	f106 0410 	add.w	r4, r6, #16
 8002fb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fc0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002fc4:	e885 0003 	stmia.w	r5, {r0, r1}
 8002fc8:	1d33      	adds	r3, r6, #4
 8002fca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fcc:	6838      	ldr	r0, [r7, #0]
 8002fce:	f003 f9ef 	bl	80063b0 <USB_DevInit>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d005      	beq.n	8002fe4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2202      	movs	r2, #2
 8002fdc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e014      	b.n	800300e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d102      	bne.n	8003002 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f000 f80b 	bl	8003018 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4618      	mov	r0, r3
 8003008:	f003 fba9 	bl	800675e <USB_DevDisconnect>

  return HAL_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3714      	adds	r7, #20
 8003012:	46bd      	mov	sp, r7
 8003014:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003018 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003018:	b480      	push	{r7}
 800301a:	b085      	sub	sp, #20
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2201      	movs	r2, #1
 800302a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003046:	4b05      	ldr	r3, [pc, #20]	; (800305c <HAL_PCDEx_ActivateLPM+0x44>)
 8003048:	4313      	orrs	r3, r2
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800304e:	2300      	movs	r3, #0
}
 8003050:	4618      	mov	r0, r3
 8003052:	3714      	adds	r7, #20
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr
 800305c:	10000003 	.word	0x10000003

08003060 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003060:	b480      	push	{r7}
 8003062:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003064:	4b05      	ldr	r3, [pc, #20]	; (800307c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a04      	ldr	r2, [pc, #16]	; (800307c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800306a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800306e:	6013      	str	r3, [r2, #0]
}
 8003070:	bf00      	nop
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	40007000 	.word	0x40007000

08003080 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b086      	sub	sp, #24
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003088:	2300      	movs	r3, #0
 800308a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d101      	bne.n	8003096 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e291      	b.n	80035ba <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0301 	and.w	r3, r3, #1
 800309e:	2b00      	cmp	r3, #0
 80030a0:	f000 8087 	beq.w	80031b2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030a4:	4b96      	ldr	r3, [pc, #600]	; (8003300 <HAL_RCC_OscConfig+0x280>)
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f003 030c 	and.w	r3, r3, #12
 80030ac:	2b04      	cmp	r3, #4
 80030ae:	d00c      	beq.n	80030ca <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030b0:	4b93      	ldr	r3, [pc, #588]	; (8003300 <HAL_RCC_OscConfig+0x280>)
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f003 030c 	and.w	r3, r3, #12
 80030b8:	2b08      	cmp	r3, #8
 80030ba:	d112      	bne.n	80030e2 <HAL_RCC_OscConfig+0x62>
 80030bc:	4b90      	ldr	r3, [pc, #576]	; (8003300 <HAL_RCC_OscConfig+0x280>)
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030c8:	d10b      	bne.n	80030e2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030ca:	4b8d      	ldr	r3, [pc, #564]	; (8003300 <HAL_RCC_OscConfig+0x280>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d06c      	beq.n	80031b0 <HAL_RCC_OscConfig+0x130>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d168      	bne.n	80031b0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e26b      	b.n	80035ba <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030ea:	d106      	bne.n	80030fa <HAL_RCC_OscConfig+0x7a>
 80030ec:	4b84      	ldr	r3, [pc, #528]	; (8003300 <HAL_RCC_OscConfig+0x280>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a83      	ldr	r2, [pc, #524]	; (8003300 <HAL_RCC_OscConfig+0x280>)
 80030f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030f6:	6013      	str	r3, [r2, #0]
 80030f8:	e02e      	b.n	8003158 <HAL_RCC_OscConfig+0xd8>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d10c      	bne.n	800311c <HAL_RCC_OscConfig+0x9c>
 8003102:	4b7f      	ldr	r3, [pc, #508]	; (8003300 <HAL_RCC_OscConfig+0x280>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a7e      	ldr	r2, [pc, #504]	; (8003300 <HAL_RCC_OscConfig+0x280>)
 8003108:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800310c:	6013      	str	r3, [r2, #0]
 800310e:	4b7c      	ldr	r3, [pc, #496]	; (8003300 <HAL_RCC_OscConfig+0x280>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a7b      	ldr	r2, [pc, #492]	; (8003300 <HAL_RCC_OscConfig+0x280>)
 8003114:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003118:	6013      	str	r3, [r2, #0]
 800311a:	e01d      	b.n	8003158 <HAL_RCC_OscConfig+0xd8>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003124:	d10c      	bne.n	8003140 <HAL_RCC_OscConfig+0xc0>
 8003126:	4b76      	ldr	r3, [pc, #472]	; (8003300 <HAL_RCC_OscConfig+0x280>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a75      	ldr	r2, [pc, #468]	; (8003300 <HAL_RCC_OscConfig+0x280>)
 800312c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003130:	6013      	str	r3, [r2, #0]
 8003132:	4b73      	ldr	r3, [pc, #460]	; (8003300 <HAL_RCC_OscConfig+0x280>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a72      	ldr	r2, [pc, #456]	; (8003300 <HAL_RCC_OscConfig+0x280>)
 8003138:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800313c:	6013      	str	r3, [r2, #0]
 800313e:	e00b      	b.n	8003158 <HAL_RCC_OscConfig+0xd8>
 8003140:	4b6f      	ldr	r3, [pc, #444]	; (8003300 <HAL_RCC_OscConfig+0x280>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a6e      	ldr	r2, [pc, #440]	; (8003300 <HAL_RCC_OscConfig+0x280>)
 8003146:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800314a:	6013      	str	r3, [r2, #0]
 800314c:	4b6c      	ldr	r3, [pc, #432]	; (8003300 <HAL_RCC_OscConfig+0x280>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a6b      	ldr	r2, [pc, #428]	; (8003300 <HAL_RCC_OscConfig+0x280>)
 8003152:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003156:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d013      	beq.n	8003188 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003160:	f7fe ff34 	bl	8001fcc <HAL_GetTick>
 8003164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003166:	e008      	b.n	800317a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003168:	f7fe ff30 	bl	8001fcc <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b64      	cmp	r3, #100	; 0x64
 8003174:	d901      	bls.n	800317a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e21f      	b.n	80035ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800317a:	4b61      	ldr	r3, [pc, #388]	; (8003300 <HAL_RCC_OscConfig+0x280>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d0f0      	beq.n	8003168 <HAL_RCC_OscConfig+0xe8>
 8003186:	e014      	b.n	80031b2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003188:	f7fe ff20 	bl	8001fcc <HAL_GetTick>
 800318c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800318e:	e008      	b.n	80031a2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003190:	f7fe ff1c 	bl	8001fcc <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b64      	cmp	r3, #100	; 0x64
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e20b      	b.n	80035ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031a2:	4b57      	ldr	r3, [pc, #348]	; (8003300 <HAL_RCC_OscConfig+0x280>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d1f0      	bne.n	8003190 <HAL_RCC_OscConfig+0x110>
 80031ae:	e000      	b.n	80031b2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0302 	and.w	r3, r3, #2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d069      	beq.n	8003292 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80031be:	4b50      	ldr	r3, [pc, #320]	; (8003300 <HAL_RCC_OscConfig+0x280>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f003 030c 	and.w	r3, r3, #12
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d00b      	beq.n	80031e2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031ca:	4b4d      	ldr	r3, [pc, #308]	; (8003300 <HAL_RCC_OscConfig+0x280>)
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f003 030c 	and.w	r3, r3, #12
 80031d2:	2b08      	cmp	r3, #8
 80031d4:	d11c      	bne.n	8003210 <HAL_RCC_OscConfig+0x190>
 80031d6:	4b4a      	ldr	r3, [pc, #296]	; (8003300 <HAL_RCC_OscConfig+0x280>)
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d116      	bne.n	8003210 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031e2:	4b47      	ldr	r3, [pc, #284]	; (8003300 <HAL_RCC_OscConfig+0x280>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0302 	and.w	r3, r3, #2
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d005      	beq.n	80031fa <HAL_RCC_OscConfig+0x17a>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d001      	beq.n	80031fa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e1df      	b.n	80035ba <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031fa:	4b41      	ldr	r3, [pc, #260]	; (8003300 <HAL_RCC_OscConfig+0x280>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	00db      	lsls	r3, r3, #3
 8003208:	493d      	ldr	r1, [pc, #244]	; (8003300 <HAL_RCC_OscConfig+0x280>)
 800320a:	4313      	orrs	r3, r2
 800320c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800320e:	e040      	b.n	8003292 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d023      	beq.n	8003260 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003218:	4b39      	ldr	r3, [pc, #228]	; (8003300 <HAL_RCC_OscConfig+0x280>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a38      	ldr	r2, [pc, #224]	; (8003300 <HAL_RCC_OscConfig+0x280>)
 800321e:	f043 0301 	orr.w	r3, r3, #1
 8003222:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003224:	f7fe fed2 	bl	8001fcc <HAL_GetTick>
 8003228:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800322a:	e008      	b.n	800323e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800322c:	f7fe fece 	bl	8001fcc <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	2b02      	cmp	r3, #2
 8003238:	d901      	bls.n	800323e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e1bd      	b.n	80035ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800323e:	4b30      	ldr	r3, [pc, #192]	; (8003300 <HAL_RCC_OscConfig+0x280>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d0f0      	beq.n	800322c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800324a:	4b2d      	ldr	r3, [pc, #180]	; (8003300 <HAL_RCC_OscConfig+0x280>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	4929      	ldr	r1, [pc, #164]	; (8003300 <HAL_RCC_OscConfig+0x280>)
 800325a:	4313      	orrs	r3, r2
 800325c:	600b      	str	r3, [r1, #0]
 800325e:	e018      	b.n	8003292 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003260:	4b27      	ldr	r3, [pc, #156]	; (8003300 <HAL_RCC_OscConfig+0x280>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a26      	ldr	r2, [pc, #152]	; (8003300 <HAL_RCC_OscConfig+0x280>)
 8003266:	f023 0301 	bic.w	r3, r3, #1
 800326a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800326c:	f7fe feae 	bl	8001fcc <HAL_GetTick>
 8003270:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003272:	e008      	b.n	8003286 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003274:	f7fe feaa 	bl	8001fcc <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b02      	cmp	r3, #2
 8003280:	d901      	bls.n	8003286 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e199      	b.n	80035ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003286:	4b1e      	ldr	r3, [pc, #120]	; (8003300 <HAL_RCC_OscConfig+0x280>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0302 	and.w	r3, r3, #2
 800328e:	2b00      	cmp	r3, #0
 8003290:	d1f0      	bne.n	8003274 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0308 	and.w	r3, r3, #8
 800329a:	2b00      	cmp	r3, #0
 800329c:	d038      	beq.n	8003310 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d019      	beq.n	80032da <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032a6:	4b16      	ldr	r3, [pc, #88]	; (8003300 <HAL_RCC_OscConfig+0x280>)
 80032a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032aa:	4a15      	ldr	r2, [pc, #84]	; (8003300 <HAL_RCC_OscConfig+0x280>)
 80032ac:	f043 0301 	orr.w	r3, r3, #1
 80032b0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032b2:	f7fe fe8b 	bl	8001fcc <HAL_GetTick>
 80032b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032b8:	e008      	b.n	80032cc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032ba:	f7fe fe87 	bl	8001fcc <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d901      	bls.n	80032cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e176      	b.n	80035ba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032cc:	4b0c      	ldr	r3, [pc, #48]	; (8003300 <HAL_RCC_OscConfig+0x280>)
 80032ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032d0:	f003 0302 	and.w	r3, r3, #2
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d0f0      	beq.n	80032ba <HAL_RCC_OscConfig+0x23a>
 80032d8:	e01a      	b.n	8003310 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032da:	4b09      	ldr	r3, [pc, #36]	; (8003300 <HAL_RCC_OscConfig+0x280>)
 80032dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032de:	4a08      	ldr	r2, [pc, #32]	; (8003300 <HAL_RCC_OscConfig+0x280>)
 80032e0:	f023 0301 	bic.w	r3, r3, #1
 80032e4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032e6:	f7fe fe71 	bl	8001fcc <HAL_GetTick>
 80032ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032ec:	e00a      	b.n	8003304 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032ee:	f7fe fe6d 	bl	8001fcc <HAL_GetTick>
 80032f2:	4602      	mov	r2, r0
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d903      	bls.n	8003304 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80032fc:	2303      	movs	r3, #3
 80032fe:	e15c      	b.n	80035ba <HAL_RCC_OscConfig+0x53a>
 8003300:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003304:	4b91      	ldr	r3, [pc, #580]	; (800354c <HAL_RCC_OscConfig+0x4cc>)
 8003306:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003308:	f003 0302 	and.w	r3, r3, #2
 800330c:	2b00      	cmp	r3, #0
 800330e:	d1ee      	bne.n	80032ee <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0304 	and.w	r3, r3, #4
 8003318:	2b00      	cmp	r3, #0
 800331a:	f000 80a4 	beq.w	8003466 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800331e:	4b8b      	ldr	r3, [pc, #556]	; (800354c <HAL_RCC_OscConfig+0x4cc>)
 8003320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d10d      	bne.n	8003346 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800332a:	4b88      	ldr	r3, [pc, #544]	; (800354c <HAL_RCC_OscConfig+0x4cc>)
 800332c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332e:	4a87      	ldr	r2, [pc, #540]	; (800354c <HAL_RCC_OscConfig+0x4cc>)
 8003330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003334:	6413      	str	r3, [r2, #64]	; 0x40
 8003336:	4b85      	ldr	r3, [pc, #532]	; (800354c <HAL_RCC_OscConfig+0x4cc>)
 8003338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800333e:	60bb      	str	r3, [r7, #8]
 8003340:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003342:	2301      	movs	r3, #1
 8003344:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003346:	4b82      	ldr	r3, [pc, #520]	; (8003550 <HAL_RCC_OscConfig+0x4d0>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800334e:	2b00      	cmp	r3, #0
 8003350:	d118      	bne.n	8003384 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003352:	4b7f      	ldr	r3, [pc, #508]	; (8003550 <HAL_RCC_OscConfig+0x4d0>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a7e      	ldr	r2, [pc, #504]	; (8003550 <HAL_RCC_OscConfig+0x4d0>)
 8003358:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800335c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800335e:	f7fe fe35 	bl	8001fcc <HAL_GetTick>
 8003362:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003364:	e008      	b.n	8003378 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003366:	f7fe fe31 	bl	8001fcc <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	2b64      	cmp	r3, #100	; 0x64
 8003372:	d901      	bls.n	8003378 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e120      	b.n	80035ba <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003378:	4b75      	ldr	r3, [pc, #468]	; (8003550 <HAL_RCC_OscConfig+0x4d0>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003380:	2b00      	cmp	r3, #0
 8003382:	d0f0      	beq.n	8003366 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	2b01      	cmp	r3, #1
 800338a:	d106      	bne.n	800339a <HAL_RCC_OscConfig+0x31a>
 800338c:	4b6f      	ldr	r3, [pc, #444]	; (800354c <HAL_RCC_OscConfig+0x4cc>)
 800338e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003390:	4a6e      	ldr	r2, [pc, #440]	; (800354c <HAL_RCC_OscConfig+0x4cc>)
 8003392:	f043 0301 	orr.w	r3, r3, #1
 8003396:	6713      	str	r3, [r2, #112]	; 0x70
 8003398:	e02d      	b.n	80033f6 <HAL_RCC_OscConfig+0x376>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d10c      	bne.n	80033bc <HAL_RCC_OscConfig+0x33c>
 80033a2:	4b6a      	ldr	r3, [pc, #424]	; (800354c <HAL_RCC_OscConfig+0x4cc>)
 80033a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a6:	4a69      	ldr	r2, [pc, #420]	; (800354c <HAL_RCC_OscConfig+0x4cc>)
 80033a8:	f023 0301 	bic.w	r3, r3, #1
 80033ac:	6713      	str	r3, [r2, #112]	; 0x70
 80033ae:	4b67      	ldr	r3, [pc, #412]	; (800354c <HAL_RCC_OscConfig+0x4cc>)
 80033b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b2:	4a66      	ldr	r2, [pc, #408]	; (800354c <HAL_RCC_OscConfig+0x4cc>)
 80033b4:	f023 0304 	bic.w	r3, r3, #4
 80033b8:	6713      	str	r3, [r2, #112]	; 0x70
 80033ba:	e01c      	b.n	80033f6 <HAL_RCC_OscConfig+0x376>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	2b05      	cmp	r3, #5
 80033c2:	d10c      	bne.n	80033de <HAL_RCC_OscConfig+0x35e>
 80033c4:	4b61      	ldr	r3, [pc, #388]	; (800354c <HAL_RCC_OscConfig+0x4cc>)
 80033c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c8:	4a60      	ldr	r2, [pc, #384]	; (800354c <HAL_RCC_OscConfig+0x4cc>)
 80033ca:	f043 0304 	orr.w	r3, r3, #4
 80033ce:	6713      	str	r3, [r2, #112]	; 0x70
 80033d0:	4b5e      	ldr	r3, [pc, #376]	; (800354c <HAL_RCC_OscConfig+0x4cc>)
 80033d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d4:	4a5d      	ldr	r2, [pc, #372]	; (800354c <HAL_RCC_OscConfig+0x4cc>)
 80033d6:	f043 0301 	orr.w	r3, r3, #1
 80033da:	6713      	str	r3, [r2, #112]	; 0x70
 80033dc:	e00b      	b.n	80033f6 <HAL_RCC_OscConfig+0x376>
 80033de:	4b5b      	ldr	r3, [pc, #364]	; (800354c <HAL_RCC_OscConfig+0x4cc>)
 80033e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e2:	4a5a      	ldr	r2, [pc, #360]	; (800354c <HAL_RCC_OscConfig+0x4cc>)
 80033e4:	f023 0301 	bic.w	r3, r3, #1
 80033e8:	6713      	str	r3, [r2, #112]	; 0x70
 80033ea:	4b58      	ldr	r3, [pc, #352]	; (800354c <HAL_RCC_OscConfig+0x4cc>)
 80033ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ee:	4a57      	ldr	r2, [pc, #348]	; (800354c <HAL_RCC_OscConfig+0x4cc>)
 80033f0:	f023 0304 	bic.w	r3, r3, #4
 80033f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d015      	beq.n	800342a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033fe:	f7fe fde5 	bl	8001fcc <HAL_GetTick>
 8003402:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003404:	e00a      	b.n	800341c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003406:	f7fe fde1 	bl	8001fcc <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	f241 3288 	movw	r2, #5000	; 0x1388
 8003414:	4293      	cmp	r3, r2
 8003416:	d901      	bls.n	800341c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e0ce      	b.n	80035ba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800341c:	4b4b      	ldr	r3, [pc, #300]	; (800354c <HAL_RCC_OscConfig+0x4cc>)
 800341e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b00      	cmp	r3, #0
 8003426:	d0ee      	beq.n	8003406 <HAL_RCC_OscConfig+0x386>
 8003428:	e014      	b.n	8003454 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800342a:	f7fe fdcf 	bl	8001fcc <HAL_GetTick>
 800342e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003430:	e00a      	b.n	8003448 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003432:	f7fe fdcb 	bl	8001fcc <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003440:	4293      	cmp	r3, r2
 8003442:	d901      	bls.n	8003448 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	e0b8      	b.n	80035ba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003448:	4b40      	ldr	r3, [pc, #256]	; (800354c <HAL_RCC_OscConfig+0x4cc>)
 800344a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800344c:	f003 0302 	and.w	r3, r3, #2
 8003450:	2b00      	cmp	r3, #0
 8003452:	d1ee      	bne.n	8003432 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003454:	7dfb      	ldrb	r3, [r7, #23]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d105      	bne.n	8003466 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800345a:	4b3c      	ldr	r3, [pc, #240]	; (800354c <HAL_RCC_OscConfig+0x4cc>)
 800345c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345e:	4a3b      	ldr	r2, [pc, #236]	; (800354c <HAL_RCC_OscConfig+0x4cc>)
 8003460:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003464:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	699b      	ldr	r3, [r3, #24]
 800346a:	2b00      	cmp	r3, #0
 800346c:	f000 80a4 	beq.w	80035b8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003470:	4b36      	ldr	r3, [pc, #216]	; (800354c <HAL_RCC_OscConfig+0x4cc>)
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f003 030c 	and.w	r3, r3, #12
 8003478:	2b08      	cmp	r3, #8
 800347a:	d06b      	beq.n	8003554 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	2b02      	cmp	r3, #2
 8003482:	d149      	bne.n	8003518 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003484:	4b31      	ldr	r3, [pc, #196]	; (800354c <HAL_RCC_OscConfig+0x4cc>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a30      	ldr	r2, [pc, #192]	; (800354c <HAL_RCC_OscConfig+0x4cc>)
 800348a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800348e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003490:	f7fe fd9c 	bl	8001fcc <HAL_GetTick>
 8003494:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003496:	e008      	b.n	80034aa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003498:	f7fe fd98 	bl	8001fcc <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e087      	b.n	80035ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034aa:	4b28      	ldr	r3, [pc, #160]	; (800354c <HAL_RCC_OscConfig+0x4cc>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1f0      	bne.n	8003498 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	69da      	ldr	r2, [r3, #28]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a1b      	ldr	r3, [r3, #32]
 80034be:	431a      	orrs	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c4:	019b      	lsls	r3, r3, #6
 80034c6:	431a      	orrs	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034cc:	085b      	lsrs	r3, r3, #1
 80034ce:	3b01      	subs	r3, #1
 80034d0:	041b      	lsls	r3, r3, #16
 80034d2:	431a      	orrs	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d8:	061b      	lsls	r3, r3, #24
 80034da:	4313      	orrs	r3, r2
 80034dc:	4a1b      	ldr	r2, [pc, #108]	; (800354c <HAL_RCC_OscConfig+0x4cc>)
 80034de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80034e2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034e4:	4b19      	ldr	r3, [pc, #100]	; (800354c <HAL_RCC_OscConfig+0x4cc>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a18      	ldr	r2, [pc, #96]	; (800354c <HAL_RCC_OscConfig+0x4cc>)
 80034ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f0:	f7fe fd6c 	bl	8001fcc <HAL_GetTick>
 80034f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034f6:	e008      	b.n	800350a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034f8:	f7fe fd68 	bl	8001fcc <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b02      	cmp	r3, #2
 8003504:	d901      	bls.n	800350a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e057      	b.n	80035ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800350a:	4b10      	ldr	r3, [pc, #64]	; (800354c <HAL_RCC_OscConfig+0x4cc>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d0f0      	beq.n	80034f8 <HAL_RCC_OscConfig+0x478>
 8003516:	e04f      	b.n	80035b8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003518:	4b0c      	ldr	r3, [pc, #48]	; (800354c <HAL_RCC_OscConfig+0x4cc>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a0b      	ldr	r2, [pc, #44]	; (800354c <HAL_RCC_OscConfig+0x4cc>)
 800351e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003522:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003524:	f7fe fd52 	bl	8001fcc <HAL_GetTick>
 8003528:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800352a:	e008      	b.n	800353e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800352c:	f7fe fd4e 	bl	8001fcc <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	2b02      	cmp	r3, #2
 8003538:	d901      	bls.n	800353e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e03d      	b.n	80035ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800353e:	4b03      	ldr	r3, [pc, #12]	; (800354c <HAL_RCC_OscConfig+0x4cc>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d1f0      	bne.n	800352c <HAL_RCC_OscConfig+0x4ac>
 800354a:	e035      	b.n	80035b8 <HAL_RCC_OscConfig+0x538>
 800354c:	40023800 	.word	0x40023800
 8003550:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003554:	4b1b      	ldr	r3, [pc, #108]	; (80035c4 <HAL_RCC_OscConfig+0x544>)
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	2b01      	cmp	r3, #1
 8003560:	d028      	beq.n	80035b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800356c:	429a      	cmp	r2, r3
 800356e:	d121      	bne.n	80035b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800357a:	429a      	cmp	r2, r3
 800357c:	d11a      	bne.n	80035b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800357e:	68fa      	ldr	r2, [r7, #12]
 8003580:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003584:	4013      	ands	r3, r2
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800358a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800358c:	4293      	cmp	r3, r2
 800358e:	d111      	bne.n	80035b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800359a:	085b      	lsrs	r3, r3, #1
 800359c:	3b01      	subs	r3, #1
 800359e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d107      	bne.n	80035b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ae:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d001      	beq.n	80035b8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e000      	b.n	80035ba <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3718      	adds	r7, #24
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	40023800 	.word	0x40023800

080035c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80035d2:	2300      	movs	r3, #0
 80035d4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d101      	bne.n	80035e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e0d0      	b.n	8003782 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035e0:	4b6a      	ldr	r3, [pc, #424]	; (800378c <HAL_RCC_ClockConfig+0x1c4>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 030f 	and.w	r3, r3, #15
 80035e8:	683a      	ldr	r2, [r7, #0]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d910      	bls.n	8003610 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ee:	4b67      	ldr	r3, [pc, #412]	; (800378c <HAL_RCC_ClockConfig+0x1c4>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f023 020f 	bic.w	r2, r3, #15
 80035f6:	4965      	ldr	r1, [pc, #404]	; (800378c <HAL_RCC_ClockConfig+0x1c4>)
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035fe:	4b63      	ldr	r3, [pc, #396]	; (800378c <HAL_RCC_ClockConfig+0x1c4>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 030f 	and.w	r3, r3, #15
 8003606:	683a      	ldr	r2, [r7, #0]
 8003608:	429a      	cmp	r2, r3
 800360a:	d001      	beq.n	8003610 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e0b8      	b.n	8003782 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0302 	and.w	r3, r3, #2
 8003618:	2b00      	cmp	r3, #0
 800361a:	d020      	beq.n	800365e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0304 	and.w	r3, r3, #4
 8003624:	2b00      	cmp	r3, #0
 8003626:	d005      	beq.n	8003634 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003628:	4b59      	ldr	r3, [pc, #356]	; (8003790 <HAL_RCC_ClockConfig+0x1c8>)
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	4a58      	ldr	r2, [pc, #352]	; (8003790 <HAL_RCC_ClockConfig+0x1c8>)
 800362e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003632:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0308 	and.w	r3, r3, #8
 800363c:	2b00      	cmp	r3, #0
 800363e:	d005      	beq.n	800364c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003640:	4b53      	ldr	r3, [pc, #332]	; (8003790 <HAL_RCC_ClockConfig+0x1c8>)
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	4a52      	ldr	r2, [pc, #328]	; (8003790 <HAL_RCC_ClockConfig+0x1c8>)
 8003646:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800364a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800364c:	4b50      	ldr	r3, [pc, #320]	; (8003790 <HAL_RCC_ClockConfig+0x1c8>)
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	494d      	ldr	r1, [pc, #308]	; (8003790 <HAL_RCC_ClockConfig+0x1c8>)
 800365a:	4313      	orrs	r3, r2
 800365c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	2b00      	cmp	r3, #0
 8003668:	d040      	beq.n	80036ec <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	2b01      	cmp	r3, #1
 8003670:	d107      	bne.n	8003682 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003672:	4b47      	ldr	r3, [pc, #284]	; (8003790 <HAL_RCC_ClockConfig+0x1c8>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d115      	bne.n	80036aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e07f      	b.n	8003782 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	2b02      	cmp	r3, #2
 8003688:	d107      	bne.n	800369a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800368a:	4b41      	ldr	r3, [pc, #260]	; (8003790 <HAL_RCC_ClockConfig+0x1c8>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d109      	bne.n	80036aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e073      	b.n	8003782 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800369a:	4b3d      	ldr	r3, [pc, #244]	; (8003790 <HAL_RCC_ClockConfig+0x1c8>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d101      	bne.n	80036aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e06b      	b.n	8003782 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036aa:	4b39      	ldr	r3, [pc, #228]	; (8003790 <HAL_RCC_ClockConfig+0x1c8>)
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f023 0203 	bic.w	r2, r3, #3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	4936      	ldr	r1, [pc, #216]	; (8003790 <HAL_RCC_ClockConfig+0x1c8>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036bc:	f7fe fc86 	bl	8001fcc <HAL_GetTick>
 80036c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036c2:	e00a      	b.n	80036da <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036c4:	f7fe fc82 	bl	8001fcc <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d901      	bls.n	80036da <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e053      	b.n	8003782 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036da:	4b2d      	ldr	r3, [pc, #180]	; (8003790 <HAL_RCC_ClockConfig+0x1c8>)
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f003 020c 	and.w	r2, r3, #12
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d1eb      	bne.n	80036c4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036ec:	4b27      	ldr	r3, [pc, #156]	; (800378c <HAL_RCC_ClockConfig+0x1c4>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 030f 	and.w	r3, r3, #15
 80036f4:	683a      	ldr	r2, [r7, #0]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d210      	bcs.n	800371c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036fa:	4b24      	ldr	r3, [pc, #144]	; (800378c <HAL_RCC_ClockConfig+0x1c4>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f023 020f 	bic.w	r2, r3, #15
 8003702:	4922      	ldr	r1, [pc, #136]	; (800378c <HAL_RCC_ClockConfig+0x1c4>)
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	4313      	orrs	r3, r2
 8003708:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800370a:	4b20      	ldr	r3, [pc, #128]	; (800378c <HAL_RCC_ClockConfig+0x1c4>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 030f 	and.w	r3, r3, #15
 8003712:	683a      	ldr	r2, [r7, #0]
 8003714:	429a      	cmp	r2, r3
 8003716:	d001      	beq.n	800371c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e032      	b.n	8003782 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0304 	and.w	r3, r3, #4
 8003724:	2b00      	cmp	r3, #0
 8003726:	d008      	beq.n	800373a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003728:	4b19      	ldr	r3, [pc, #100]	; (8003790 <HAL_RCC_ClockConfig+0x1c8>)
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	4916      	ldr	r1, [pc, #88]	; (8003790 <HAL_RCC_ClockConfig+0x1c8>)
 8003736:	4313      	orrs	r3, r2
 8003738:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0308 	and.w	r3, r3, #8
 8003742:	2b00      	cmp	r3, #0
 8003744:	d009      	beq.n	800375a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003746:	4b12      	ldr	r3, [pc, #72]	; (8003790 <HAL_RCC_ClockConfig+0x1c8>)
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	00db      	lsls	r3, r3, #3
 8003754:	490e      	ldr	r1, [pc, #56]	; (8003790 <HAL_RCC_ClockConfig+0x1c8>)
 8003756:	4313      	orrs	r3, r2
 8003758:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800375a:	f000 f821 	bl	80037a0 <HAL_RCC_GetSysClockFreq>
 800375e:	4602      	mov	r2, r0
 8003760:	4b0b      	ldr	r3, [pc, #44]	; (8003790 <HAL_RCC_ClockConfig+0x1c8>)
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	091b      	lsrs	r3, r3, #4
 8003766:	f003 030f 	and.w	r3, r3, #15
 800376a:	490a      	ldr	r1, [pc, #40]	; (8003794 <HAL_RCC_ClockConfig+0x1cc>)
 800376c:	5ccb      	ldrb	r3, [r1, r3]
 800376e:	fa22 f303 	lsr.w	r3, r2, r3
 8003772:	4a09      	ldr	r2, [pc, #36]	; (8003798 <HAL_RCC_ClockConfig+0x1d0>)
 8003774:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003776:	4b09      	ldr	r3, [pc, #36]	; (800379c <HAL_RCC_ClockConfig+0x1d4>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4618      	mov	r0, r3
 800377c:	f7fe fbe2 	bl	8001f44 <HAL_InitTick>

  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3710      	adds	r7, #16
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	40023c00 	.word	0x40023c00
 8003790:	40023800 	.word	0x40023800
 8003794:	08007140 	.word	0x08007140
 8003798:	20000000 	.word	0x20000000
 800379c:	20000004 	.word	0x20000004

080037a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80037a4:	b084      	sub	sp, #16
 80037a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80037a8:	2300      	movs	r3, #0
 80037aa:	607b      	str	r3, [r7, #4]
 80037ac:	2300      	movs	r3, #0
 80037ae:	60fb      	str	r3, [r7, #12]
 80037b0:	2300      	movs	r3, #0
 80037b2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80037b4:	2300      	movs	r3, #0
 80037b6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037b8:	4b67      	ldr	r3, [pc, #412]	; (8003958 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	f003 030c 	and.w	r3, r3, #12
 80037c0:	2b08      	cmp	r3, #8
 80037c2:	d00d      	beq.n	80037e0 <HAL_RCC_GetSysClockFreq+0x40>
 80037c4:	2b08      	cmp	r3, #8
 80037c6:	f200 80bd 	bhi.w	8003944 <HAL_RCC_GetSysClockFreq+0x1a4>
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d002      	beq.n	80037d4 <HAL_RCC_GetSysClockFreq+0x34>
 80037ce:	2b04      	cmp	r3, #4
 80037d0:	d003      	beq.n	80037da <HAL_RCC_GetSysClockFreq+0x3a>
 80037d2:	e0b7      	b.n	8003944 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037d4:	4b61      	ldr	r3, [pc, #388]	; (800395c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80037d6:	60bb      	str	r3, [r7, #8]
      break;
 80037d8:	e0b7      	b.n	800394a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037da:	4b61      	ldr	r3, [pc, #388]	; (8003960 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80037dc:	60bb      	str	r3, [r7, #8]
      break;
 80037de:	e0b4      	b.n	800394a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037e0:	4b5d      	ldr	r3, [pc, #372]	; (8003958 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037e8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80037ea:	4b5b      	ldr	r3, [pc, #364]	; (8003958 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d04d      	beq.n	8003892 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037f6:	4b58      	ldr	r3, [pc, #352]	; (8003958 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	099b      	lsrs	r3, r3, #6
 80037fc:	461a      	mov	r2, r3
 80037fe:	f04f 0300 	mov.w	r3, #0
 8003802:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003806:	f04f 0100 	mov.w	r1, #0
 800380a:	ea02 0800 	and.w	r8, r2, r0
 800380e:	ea03 0901 	and.w	r9, r3, r1
 8003812:	4640      	mov	r0, r8
 8003814:	4649      	mov	r1, r9
 8003816:	f04f 0200 	mov.w	r2, #0
 800381a:	f04f 0300 	mov.w	r3, #0
 800381e:	014b      	lsls	r3, r1, #5
 8003820:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003824:	0142      	lsls	r2, r0, #5
 8003826:	4610      	mov	r0, r2
 8003828:	4619      	mov	r1, r3
 800382a:	ebb0 0008 	subs.w	r0, r0, r8
 800382e:	eb61 0109 	sbc.w	r1, r1, r9
 8003832:	f04f 0200 	mov.w	r2, #0
 8003836:	f04f 0300 	mov.w	r3, #0
 800383a:	018b      	lsls	r3, r1, #6
 800383c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003840:	0182      	lsls	r2, r0, #6
 8003842:	1a12      	subs	r2, r2, r0
 8003844:	eb63 0301 	sbc.w	r3, r3, r1
 8003848:	f04f 0000 	mov.w	r0, #0
 800384c:	f04f 0100 	mov.w	r1, #0
 8003850:	00d9      	lsls	r1, r3, #3
 8003852:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003856:	00d0      	lsls	r0, r2, #3
 8003858:	4602      	mov	r2, r0
 800385a:	460b      	mov	r3, r1
 800385c:	eb12 0208 	adds.w	r2, r2, r8
 8003860:	eb43 0309 	adc.w	r3, r3, r9
 8003864:	f04f 0000 	mov.w	r0, #0
 8003868:	f04f 0100 	mov.w	r1, #0
 800386c:	0259      	lsls	r1, r3, #9
 800386e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003872:	0250      	lsls	r0, r2, #9
 8003874:	4602      	mov	r2, r0
 8003876:	460b      	mov	r3, r1
 8003878:	4610      	mov	r0, r2
 800387a:	4619      	mov	r1, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	461a      	mov	r2, r3
 8003880:	f04f 0300 	mov.w	r3, #0
 8003884:	f7fd f932 	bl	8000aec <__aeabi_uldivmod>
 8003888:	4602      	mov	r2, r0
 800388a:	460b      	mov	r3, r1
 800388c:	4613      	mov	r3, r2
 800388e:	60fb      	str	r3, [r7, #12]
 8003890:	e04a      	b.n	8003928 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003892:	4b31      	ldr	r3, [pc, #196]	; (8003958 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	099b      	lsrs	r3, r3, #6
 8003898:	461a      	mov	r2, r3
 800389a:	f04f 0300 	mov.w	r3, #0
 800389e:	f240 10ff 	movw	r0, #511	; 0x1ff
 80038a2:	f04f 0100 	mov.w	r1, #0
 80038a6:	ea02 0400 	and.w	r4, r2, r0
 80038aa:	ea03 0501 	and.w	r5, r3, r1
 80038ae:	4620      	mov	r0, r4
 80038b0:	4629      	mov	r1, r5
 80038b2:	f04f 0200 	mov.w	r2, #0
 80038b6:	f04f 0300 	mov.w	r3, #0
 80038ba:	014b      	lsls	r3, r1, #5
 80038bc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80038c0:	0142      	lsls	r2, r0, #5
 80038c2:	4610      	mov	r0, r2
 80038c4:	4619      	mov	r1, r3
 80038c6:	1b00      	subs	r0, r0, r4
 80038c8:	eb61 0105 	sbc.w	r1, r1, r5
 80038cc:	f04f 0200 	mov.w	r2, #0
 80038d0:	f04f 0300 	mov.w	r3, #0
 80038d4:	018b      	lsls	r3, r1, #6
 80038d6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80038da:	0182      	lsls	r2, r0, #6
 80038dc:	1a12      	subs	r2, r2, r0
 80038de:	eb63 0301 	sbc.w	r3, r3, r1
 80038e2:	f04f 0000 	mov.w	r0, #0
 80038e6:	f04f 0100 	mov.w	r1, #0
 80038ea:	00d9      	lsls	r1, r3, #3
 80038ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80038f0:	00d0      	lsls	r0, r2, #3
 80038f2:	4602      	mov	r2, r0
 80038f4:	460b      	mov	r3, r1
 80038f6:	1912      	adds	r2, r2, r4
 80038f8:	eb45 0303 	adc.w	r3, r5, r3
 80038fc:	f04f 0000 	mov.w	r0, #0
 8003900:	f04f 0100 	mov.w	r1, #0
 8003904:	0299      	lsls	r1, r3, #10
 8003906:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800390a:	0290      	lsls	r0, r2, #10
 800390c:	4602      	mov	r2, r0
 800390e:	460b      	mov	r3, r1
 8003910:	4610      	mov	r0, r2
 8003912:	4619      	mov	r1, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	461a      	mov	r2, r3
 8003918:	f04f 0300 	mov.w	r3, #0
 800391c:	f7fd f8e6 	bl	8000aec <__aeabi_uldivmod>
 8003920:	4602      	mov	r2, r0
 8003922:	460b      	mov	r3, r1
 8003924:	4613      	mov	r3, r2
 8003926:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003928:	4b0b      	ldr	r3, [pc, #44]	; (8003958 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	0c1b      	lsrs	r3, r3, #16
 800392e:	f003 0303 	and.w	r3, r3, #3
 8003932:	3301      	adds	r3, #1
 8003934:	005b      	lsls	r3, r3, #1
 8003936:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003938:	68fa      	ldr	r2, [r7, #12]
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003940:	60bb      	str	r3, [r7, #8]
      break;
 8003942:	e002      	b.n	800394a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003944:	4b05      	ldr	r3, [pc, #20]	; (800395c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003946:	60bb      	str	r3, [r7, #8]
      break;
 8003948:	bf00      	nop
    }
  }
  return sysclockfreq;
 800394a:	68bb      	ldr	r3, [r7, #8]
}
 800394c:	4618      	mov	r0, r3
 800394e:	3710      	adds	r7, #16
 8003950:	46bd      	mov	sp, r7
 8003952:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003956:	bf00      	nop
 8003958:	40023800 	.word	0x40023800
 800395c:	00f42400 	.word	0x00f42400
 8003960:	007a1200 	.word	0x007a1200

08003964 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003964:	b480      	push	{r7}
 8003966:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003968:	4b03      	ldr	r3, [pc, #12]	; (8003978 <HAL_RCC_GetHCLKFreq+0x14>)
 800396a:	681b      	ldr	r3, [r3, #0]
}
 800396c:	4618      	mov	r0, r3
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr
 8003976:	bf00      	nop
 8003978:	20000000 	.word	0x20000000

0800397c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003980:	f7ff fff0 	bl	8003964 <HAL_RCC_GetHCLKFreq>
 8003984:	4602      	mov	r2, r0
 8003986:	4b05      	ldr	r3, [pc, #20]	; (800399c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	0a9b      	lsrs	r3, r3, #10
 800398c:	f003 0307 	and.w	r3, r3, #7
 8003990:	4903      	ldr	r1, [pc, #12]	; (80039a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003992:	5ccb      	ldrb	r3, [r1, r3]
 8003994:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003998:	4618      	mov	r0, r3
 800399a:	bd80      	pop	{r7, pc}
 800399c:	40023800 	.word	0x40023800
 80039a0:	08007150 	.word	0x08007150

080039a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80039a8:	f7ff ffdc 	bl	8003964 <HAL_RCC_GetHCLKFreq>
 80039ac:	4602      	mov	r2, r0
 80039ae:	4b05      	ldr	r3, [pc, #20]	; (80039c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	0b5b      	lsrs	r3, r3, #13
 80039b4:	f003 0307 	and.w	r3, r3, #7
 80039b8:	4903      	ldr	r1, [pc, #12]	; (80039c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039ba:	5ccb      	ldrb	r3, [r1, r3]
 80039bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	40023800 	.word	0x40023800
 80039c8:	08007150 	.word	0x08007150

080039cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b088      	sub	sp, #32
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80039d4:	2300      	movs	r3, #0
 80039d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80039d8:	2300      	movs	r3, #0
 80039da:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80039dc:	2300      	movs	r3, #0
 80039de:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80039e0:	2300      	movs	r3, #0
 80039e2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80039e4:	2300      	movs	r3, #0
 80039e6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0301 	and.w	r3, r3, #1
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d012      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80039f4:	4b69      	ldr	r3, [pc, #420]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	4a68      	ldr	r2, [pc, #416]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039fa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80039fe:	6093      	str	r3, [r2, #8]
 8003a00:	4b66      	ldr	r3, [pc, #408]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a02:	689a      	ldr	r2, [r3, #8]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a08:	4964      	ldr	r1, [pc, #400]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d101      	bne.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003a16:	2301      	movs	r3, #1
 8003a18:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d017      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a26:	4b5d      	ldr	r3, [pc, #372]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a2c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a34:	4959      	ldr	r1, [pc, #356]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a44:	d101      	bne.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003a46:	2301      	movs	r3, #1
 8003a48:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d101      	bne.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003a52:	2301      	movs	r3, #1
 8003a54:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d017      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a62:	4b4e      	ldr	r3, [pc, #312]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a68:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a70:	494a      	ldr	r1, [pc, #296]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a80:	d101      	bne.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003a82:	2301      	movs	r3, #1
 8003a84:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d101      	bne.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d001      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0320 	and.w	r3, r3, #32
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	f000 808b 	beq.w	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ab0:	4b3a      	ldr	r3, [pc, #232]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab4:	4a39      	ldr	r2, [pc, #228]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ab6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aba:	6413      	str	r3, [r2, #64]	; 0x40
 8003abc:	4b37      	ldr	r3, [pc, #220]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ac4:	60bb      	str	r3, [r7, #8]
 8003ac6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003ac8:	4b35      	ldr	r3, [pc, #212]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a34      	ldr	r2, [pc, #208]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ace:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ad2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ad4:	f7fe fa7a 	bl	8001fcc <HAL_GetTick>
 8003ad8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003ada:	e008      	b.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003adc:	f7fe fa76 	bl	8001fcc <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	2b64      	cmp	r3, #100	; 0x64
 8003ae8:	d901      	bls.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e357      	b.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003aee:	4b2c      	ldr	r3, [pc, #176]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d0f0      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003afa:	4b28      	ldr	r3, [pc, #160]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003afe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b02:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d035      	beq.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b12:	693a      	ldr	r2, [r7, #16]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d02e      	beq.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b18:	4b20      	ldr	r3, [pc, #128]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b20:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b22:	4b1e      	ldr	r3, [pc, #120]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b26:	4a1d      	ldr	r2, [pc, #116]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b2c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b2e:	4b1b      	ldr	r3, [pc, #108]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b32:	4a1a      	ldr	r2, [pc, #104]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b38:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003b3a:	4a18      	ldr	r2, [pc, #96]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003b40:	4b16      	ldr	r3, [pc, #88]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b44:	f003 0301 	and.w	r3, r3, #1
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d114      	bne.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b4c:	f7fe fa3e 	bl	8001fcc <HAL_GetTick>
 8003b50:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b52:	e00a      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b54:	f7fe fa3a 	bl	8001fcc <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d901      	bls.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e319      	b.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b6a:	4b0c      	ldr	r3, [pc, #48]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b6e:	f003 0302 	and.w	r3, r3, #2
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d0ee      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b82:	d111      	bne.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003b84:	4b05      	ldr	r3, [pc, #20]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003b90:	4b04      	ldr	r3, [pc, #16]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003b92:	400b      	ands	r3, r1
 8003b94:	4901      	ldr	r1, [pc, #4]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	608b      	str	r3, [r1, #8]
 8003b9a:	e00b      	b.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003b9c:	40023800 	.word	0x40023800
 8003ba0:	40007000 	.word	0x40007000
 8003ba4:	0ffffcff 	.word	0x0ffffcff
 8003ba8:	4bb1      	ldr	r3, [pc, #708]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	4ab0      	ldr	r2, [pc, #704]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003bae:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003bb2:	6093      	str	r3, [r2, #8]
 8003bb4:	4bae      	ldr	r3, [pc, #696]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003bb6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bc0:	49ab      	ldr	r1, [pc, #684]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0310 	and.w	r3, r3, #16
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d010      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003bd2:	4ba7      	ldr	r3, [pc, #668]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003bd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bd8:	4aa5      	ldr	r2, [pc, #660]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003bda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bde:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003be2:	4ba3      	ldr	r3, [pc, #652]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003be4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bec:	49a0      	ldr	r1, [pc, #640]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d00a      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c00:	4b9b      	ldr	r3, [pc, #620]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c06:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c0e:	4998      	ldr	r1, [pc, #608]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00a      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c22:	4b93      	ldr	r3, [pc, #588]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c28:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c30:	498f      	ldr	r1, [pc, #572]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d00a      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c44:	4b8a      	ldr	r3, [pc, #552]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c4a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c52:	4987      	ldr	r1, [pc, #540]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00a      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003c66:	4b82      	ldr	r3, [pc, #520]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c6c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c74:	497e      	ldr	r1, [pc, #504]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d00a      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c88:	4b79      	ldr	r3, [pc, #484]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c8e:	f023 0203 	bic.w	r2, r3, #3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c96:	4976      	ldr	r1, [pc, #472]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00a      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003caa:	4b71      	ldr	r3, [pc, #452]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb0:	f023 020c 	bic.w	r2, r3, #12
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cb8:	496d      	ldr	r1, [pc, #436]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d00a      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ccc:	4b68      	ldr	r3, [pc, #416]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cd2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cda:	4965      	ldr	r1, [pc, #404]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d00a      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003cee:	4b60      	ldr	r3, [pc, #384]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cf4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cfc:	495c      	ldr	r1, [pc, #368]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d00a      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d10:	4b57      	ldr	r3, [pc, #348]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d16:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d1e:	4954      	ldr	r1, [pc, #336]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d00a      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003d32:	4b4f      	ldr	r3, [pc, #316]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d38:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d40:	494b      	ldr	r1, [pc, #300]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003d42:	4313      	orrs	r3, r2
 8003d44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d00a      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003d54:	4b46      	ldr	r3, [pc, #280]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d5a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d62:	4943      	ldr	r1, [pc, #268]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003d64:	4313      	orrs	r3, r2
 8003d66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00a      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003d76:	4b3e      	ldr	r3, [pc, #248]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d7c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d84:	493a      	ldr	r1, [pc, #232]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003d86:	4313      	orrs	r3, r2
 8003d88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d00a      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003d98:	4b35      	ldr	r3, [pc, #212]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d9e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003da6:	4932      	ldr	r1, [pc, #200]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003da8:	4313      	orrs	r3, r2
 8003daa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d011      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003dba:	4b2d      	ldr	r3, [pc, #180]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dc0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003dc8:	4929      	ldr	r1, [pc, #164]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003dd4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003dd8:	d101      	bne.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0308 	and.w	r3, r3, #8
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d001      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003dea:	2301      	movs	r3, #1
 8003dec:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00a      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003dfa:	4b1d      	ldr	r3, [pc, #116]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e00:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e08:	4919      	ldr	r1, [pc, #100]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d00b      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003e1c:	4b14      	ldr	r3, [pc, #80]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e22:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e2c:	4910      	ldr	r1, [pc, #64]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d006      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	f000 80d9 	beq.w	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003e48:	4b09      	ldr	r3, [pc, #36]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a08      	ldr	r2, [pc, #32]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003e4e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e54:	f7fe f8ba 	bl	8001fcc <HAL_GetTick>
 8003e58:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e5a:	e00b      	b.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003e5c:	f7fe f8b6 	bl	8001fcc <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	2b64      	cmp	r3, #100	; 0x64
 8003e68:	d904      	bls.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e197      	b.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003e6e:	bf00      	nop
 8003e70:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e74:	4b6c      	ldr	r3, [pc, #432]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d1ed      	bne.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0301 	and.w	r3, r3, #1
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d021      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d11d      	bne.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003e94:	4b64      	ldr	r3, [pc, #400]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e9a:	0c1b      	lsrs	r3, r3, #16
 8003e9c:	f003 0303 	and.w	r3, r3, #3
 8003ea0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003ea2:	4b61      	ldr	r3, [pc, #388]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ea4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ea8:	0e1b      	lsrs	r3, r3, #24
 8003eaa:	f003 030f 	and.w	r3, r3, #15
 8003eae:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	019a      	lsls	r2, r3, #6
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	041b      	lsls	r3, r3, #16
 8003eba:	431a      	orrs	r2, r3
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	061b      	lsls	r3, r3, #24
 8003ec0:	431a      	orrs	r2, r3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	071b      	lsls	r3, r3, #28
 8003ec8:	4957      	ldr	r1, [pc, #348]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d004      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ee0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ee4:	d00a      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d02e      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003efa:	d129      	bne.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003efc:	4b4a      	ldr	r3, [pc, #296]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003efe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f02:	0c1b      	lsrs	r3, r3, #16
 8003f04:	f003 0303 	and.w	r3, r3, #3
 8003f08:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003f0a:	4b47      	ldr	r3, [pc, #284]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f10:	0f1b      	lsrs	r3, r3, #28
 8003f12:	f003 0307 	and.w	r3, r3, #7
 8003f16:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	019a      	lsls	r2, r3, #6
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	041b      	lsls	r3, r3, #16
 8003f22:	431a      	orrs	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	061b      	lsls	r3, r3, #24
 8003f2a:	431a      	orrs	r2, r3
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	071b      	lsls	r3, r3, #28
 8003f30:	493d      	ldr	r1, [pc, #244]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f32:	4313      	orrs	r3, r2
 8003f34:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003f38:	4b3b      	ldr	r3, [pc, #236]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f3e:	f023 021f 	bic.w	r2, r3, #31
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f46:	3b01      	subs	r3, #1
 8003f48:	4937      	ldr	r1, [pc, #220]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d01d      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003f5c:	4b32      	ldr	r3, [pc, #200]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f62:	0e1b      	lsrs	r3, r3, #24
 8003f64:	f003 030f 	and.w	r3, r3, #15
 8003f68:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003f6a:	4b2f      	ldr	r3, [pc, #188]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f70:	0f1b      	lsrs	r3, r3, #28
 8003f72:	f003 0307 	and.w	r3, r3, #7
 8003f76:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	019a      	lsls	r2, r3, #6
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	041b      	lsls	r3, r3, #16
 8003f84:	431a      	orrs	r2, r3
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	061b      	lsls	r3, r3, #24
 8003f8a:	431a      	orrs	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	071b      	lsls	r3, r3, #28
 8003f90:	4925      	ldr	r1, [pc, #148]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f92:	4313      	orrs	r3, r2
 8003f94:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d011      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	019a      	lsls	r2, r3, #6
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	041b      	lsls	r3, r3, #16
 8003fb0:	431a      	orrs	r2, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	061b      	lsls	r3, r3, #24
 8003fb8:	431a      	orrs	r2, r3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	071b      	lsls	r3, r3, #28
 8003fc0:	4919      	ldr	r1, [pc, #100]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003fc8:	4b17      	ldr	r3, [pc, #92]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a16      	ldr	r2, [pc, #88]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003fd2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fd4:	f7fd fffa 	bl	8001fcc <HAL_GetTick>
 8003fd8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003fda:	e008      	b.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003fdc:	f7fd fff6 	bl	8001fcc <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	2b64      	cmp	r3, #100	; 0x64
 8003fe8:	d901      	bls.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e0d7      	b.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003fee:	4b0e      	ldr	r3, [pc, #56]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d0f0      	beq.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	f040 80cd 	bne.w	800419c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004002:	4b09      	ldr	r3, [pc, #36]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a08      	ldr	r2, [pc, #32]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004008:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800400c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800400e:	f7fd ffdd 	bl	8001fcc <HAL_GetTick>
 8004012:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004014:	e00a      	b.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004016:	f7fd ffd9 	bl	8001fcc <HAL_GetTick>
 800401a:	4602      	mov	r2, r0
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	2b64      	cmp	r3, #100	; 0x64
 8004022:	d903      	bls.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004024:	2303      	movs	r3, #3
 8004026:	e0ba      	b.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004028:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800402c:	4b5e      	ldr	r3, [pc, #376]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004034:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004038:	d0ed      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d003      	beq.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800404a:	2b00      	cmp	r3, #0
 800404c:	d009      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004056:	2b00      	cmp	r3, #0
 8004058:	d02e      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405e:	2b00      	cmp	r3, #0
 8004060:	d12a      	bne.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004062:	4b51      	ldr	r3, [pc, #324]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004068:	0c1b      	lsrs	r3, r3, #16
 800406a:	f003 0303 	and.w	r3, r3, #3
 800406e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004070:	4b4d      	ldr	r3, [pc, #308]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004076:	0f1b      	lsrs	r3, r3, #28
 8004078:	f003 0307 	and.w	r3, r3, #7
 800407c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	695b      	ldr	r3, [r3, #20]
 8004082:	019a      	lsls	r2, r3, #6
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	041b      	lsls	r3, r3, #16
 8004088:	431a      	orrs	r2, r3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	699b      	ldr	r3, [r3, #24]
 800408e:	061b      	lsls	r3, r3, #24
 8004090:	431a      	orrs	r2, r3
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	071b      	lsls	r3, r3, #28
 8004096:	4944      	ldr	r1, [pc, #272]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004098:	4313      	orrs	r3, r2
 800409a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800409e:	4b42      	ldr	r3, [pc, #264]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040a4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ac:	3b01      	subs	r3, #1
 80040ae:	021b      	lsls	r3, r3, #8
 80040b0:	493d      	ldr	r1, [pc, #244]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d022      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040cc:	d11d      	bne.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80040ce:	4b36      	ldr	r3, [pc, #216]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040d4:	0e1b      	lsrs	r3, r3, #24
 80040d6:	f003 030f 	and.w	r3, r3, #15
 80040da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80040dc:	4b32      	ldr	r3, [pc, #200]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040e2:	0f1b      	lsrs	r3, r3, #28
 80040e4:	f003 0307 	and.w	r3, r3, #7
 80040e8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	695b      	ldr	r3, [r3, #20]
 80040ee:	019a      	lsls	r2, r3, #6
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a1b      	ldr	r3, [r3, #32]
 80040f4:	041b      	lsls	r3, r3, #16
 80040f6:	431a      	orrs	r2, r3
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	061b      	lsls	r3, r3, #24
 80040fc:	431a      	orrs	r2, r3
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	071b      	lsls	r3, r3, #28
 8004102:	4929      	ldr	r1, [pc, #164]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004104:	4313      	orrs	r3, r2
 8004106:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0308 	and.w	r3, r3, #8
 8004112:	2b00      	cmp	r3, #0
 8004114:	d028      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004116:	4b24      	ldr	r3, [pc, #144]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004118:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800411c:	0e1b      	lsrs	r3, r3, #24
 800411e:	f003 030f 	and.w	r3, r3, #15
 8004122:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004124:	4b20      	ldr	r3, [pc, #128]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800412a:	0c1b      	lsrs	r3, r3, #16
 800412c:	f003 0303 	and.w	r3, r3, #3
 8004130:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	019a      	lsls	r2, r3, #6
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	041b      	lsls	r3, r3, #16
 800413c:	431a      	orrs	r2, r3
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	061b      	lsls	r3, r3, #24
 8004142:	431a      	orrs	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	69db      	ldr	r3, [r3, #28]
 8004148:	071b      	lsls	r3, r3, #28
 800414a:	4917      	ldr	r1, [pc, #92]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800414c:	4313      	orrs	r3, r2
 800414e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004152:	4b15      	ldr	r3, [pc, #84]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004154:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004158:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004160:	4911      	ldr	r1, [pc, #68]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004162:	4313      	orrs	r3, r2
 8004164:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004168:	4b0f      	ldr	r3, [pc, #60]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a0e      	ldr	r2, [pc, #56]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800416e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004172:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004174:	f7fd ff2a 	bl	8001fcc <HAL_GetTick>
 8004178:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800417a:	e008      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800417c:	f7fd ff26 	bl	8001fcc <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	2b64      	cmp	r3, #100	; 0x64
 8004188:	d901      	bls.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e007      	b.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800418e:	4b06      	ldr	r3, [pc, #24]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004196:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800419a:	d1ef      	bne.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3720      	adds	r7, #32
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	40023800 	.word	0x40023800

080041ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d101      	bne.n	80041be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e049      	b.n	8004252 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d106      	bne.n	80041d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f7fd fad2 	bl	800177c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2202      	movs	r2, #2
 80041dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	3304      	adds	r3, #4
 80041e8:	4619      	mov	r1, r3
 80041ea:	4610      	mov	r0, r2
 80041ec:	f000 fe64 	bl	8004eb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	3708      	adds	r7, #8
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
	...

0800425c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800425c:	b480      	push	{r7}
 800425e:	b085      	sub	sp, #20
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800426a:	b2db      	uxtb	r3, r3
 800426c:	2b01      	cmp	r3, #1
 800426e:	d001      	beq.n	8004274 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e054      	b.n	800431e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2202      	movs	r2, #2
 8004278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	68da      	ldr	r2, [r3, #12]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f042 0201 	orr.w	r2, r2, #1
 800428a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a26      	ldr	r2, [pc, #152]	; (800432c <HAL_TIM_Base_Start_IT+0xd0>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d022      	beq.n	80042dc <HAL_TIM_Base_Start_IT+0x80>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800429e:	d01d      	beq.n	80042dc <HAL_TIM_Base_Start_IT+0x80>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a22      	ldr	r2, [pc, #136]	; (8004330 <HAL_TIM_Base_Start_IT+0xd4>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d018      	beq.n	80042dc <HAL_TIM_Base_Start_IT+0x80>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a21      	ldr	r2, [pc, #132]	; (8004334 <HAL_TIM_Base_Start_IT+0xd8>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d013      	beq.n	80042dc <HAL_TIM_Base_Start_IT+0x80>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a1f      	ldr	r2, [pc, #124]	; (8004338 <HAL_TIM_Base_Start_IT+0xdc>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d00e      	beq.n	80042dc <HAL_TIM_Base_Start_IT+0x80>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a1e      	ldr	r2, [pc, #120]	; (800433c <HAL_TIM_Base_Start_IT+0xe0>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d009      	beq.n	80042dc <HAL_TIM_Base_Start_IT+0x80>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a1c      	ldr	r2, [pc, #112]	; (8004340 <HAL_TIM_Base_Start_IT+0xe4>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d004      	beq.n	80042dc <HAL_TIM_Base_Start_IT+0x80>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a1b      	ldr	r2, [pc, #108]	; (8004344 <HAL_TIM_Base_Start_IT+0xe8>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d115      	bne.n	8004308 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	689a      	ldr	r2, [r3, #8]
 80042e2:	4b19      	ldr	r3, [pc, #100]	; (8004348 <HAL_TIM_Base_Start_IT+0xec>)
 80042e4:	4013      	ands	r3, r2
 80042e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2b06      	cmp	r3, #6
 80042ec:	d015      	beq.n	800431a <HAL_TIM_Base_Start_IT+0xbe>
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042f4:	d011      	beq.n	800431a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f042 0201 	orr.w	r2, r2, #1
 8004304:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004306:	e008      	b.n	800431a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f042 0201 	orr.w	r2, r2, #1
 8004316:	601a      	str	r2, [r3, #0]
 8004318:	e000      	b.n	800431c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800431a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800431c:	2300      	movs	r3, #0
}
 800431e:	4618      	mov	r0, r3
 8004320:	3714      	adds	r7, #20
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	40010000 	.word	0x40010000
 8004330:	40000400 	.word	0x40000400
 8004334:	40000800 	.word	0x40000800
 8004338:	40000c00 	.word	0x40000c00
 800433c:	40010400 	.word	0x40010400
 8004340:	40014000 	.word	0x40014000
 8004344:	40001800 	.word	0x40001800
 8004348:	00010007 	.word	0x00010007

0800434c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b082      	sub	sp, #8
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d101      	bne.n	800435e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e049      	b.n	80043f2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004364:	b2db      	uxtb	r3, r3
 8004366:	2b00      	cmp	r3, #0
 8004368:	d106      	bne.n	8004378 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 f841 	bl	80043fa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2202      	movs	r2, #2
 800437c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	3304      	adds	r3, #4
 8004388:	4619      	mov	r1, r3
 800438a:	4610      	mov	r0, r2
 800438c:	f000 fd94 	bl	8004eb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3708      	adds	r7, #8
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}

080043fa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80043fa:	b480      	push	{r7}
 80043fc:	b083      	sub	sp, #12
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004402:	bf00      	nop
 8004404:	370c      	adds	r7, #12
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr
	...

08004410 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d109      	bne.n	8004434 <HAL_TIM_PWM_Start+0x24>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004426:	b2db      	uxtb	r3, r3
 8004428:	2b01      	cmp	r3, #1
 800442a:	bf14      	ite	ne
 800442c:	2301      	movne	r3, #1
 800442e:	2300      	moveq	r3, #0
 8004430:	b2db      	uxtb	r3, r3
 8004432:	e03c      	b.n	80044ae <HAL_TIM_PWM_Start+0x9e>
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	2b04      	cmp	r3, #4
 8004438:	d109      	bne.n	800444e <HAL_TIM_PWM_Start+0x3e>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004440:	b2db      	uxtb	r3, r3
 8004442:	2b01      	cmp	r3, #1
 8004444:	bf14      	ite	ne
 8004446:	2301      	movne	r3, #1
 8004448:	2300      	moveq	r3, #0
 800444a:	b2db      	uxtb	r3, r3
 800444c:	e02f      	b.n	80044ae <HAL_TIM_PWM_Start+0x9e>
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	2b08      	cmp	r3, #8
 8004452:	d109      	bne.n	8004468 <HAL_TIM_PWM_Start+0x58>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800445a:	b2db      	uxtb	r3, r3
 800445c:	2b01      	cmp	r3, #1
 800445e:	bf14      	ite	ne
 8004460:	2301      	movne	r3, #1
 8004462:	2300      	moveq	r3, #0
 8004464:	b2db      	uxtb	r3, r3
 8004466:	e022      	b.n	80044ae <HAL_TIM_PWM_Start+0x9e>
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	2b0c      	cmp	r3, #12
 800446c:	d109      	bne.n	8004482 <HAL_TIM_PWM_Start+0x72>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004474:	b2db      	uxtb	r3, r3
 8004476:	2b01      	cmp	r3, #1
 8004478:	bf14      	ite	ne
 800447a:	2301      	movne	r3, #1
 800447c:	2300      	moveq	r3, #0
 800447e:	b2db      	uxtb	r3, r3
 8004480:	e015      	b.n	80044ae <HAL_TIM_PWM_Start+0x9e>
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	2b10      	cmp	r3, #16
 8004486:	d109      	bne.n	800449c <HAL_TIM_PWM_Start+0x8c>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800448e:	b2db      	uxtb	r3, r3
 8004490:	2b01      	cmp	r3, #1
 8004492:	bf14      	ite	ne
 8004494:	2301      	movne	r3, #1
 8004496:	2300      	moveq	r3, #0
 8004498:	b2db      	uxtb	r3, r3
 800449a:	e008      	b.n	80044ae <HAL_TIM_PWM_Start+0x9e>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	bf14      	ite	ne
 80044a8:	2301      	movne	r3, #1
 80044aa:	2300      	moveq	r3, #0
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d001      	beq.n	80044b6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e092      	b.n	80045dc <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d104      	bne.n	80044c6 <HAL_TIM_PWM_Start+0xb6>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2202      	movs	r2, #2
 80044c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044c4:	e023      	b.n	800450e <HAL_TIM_PWM_Start+0xfe>
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	2b04      	cmp	r3, #4
 80044ca:	d104      	bne.n	80044d6 <HAL_TIM_PWM_Start+0xc6>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2202      	movs	r2, #2
 80044d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044d4:	e01b      	b.n	800450e <HAL_TIM_PWM_Start+0xfe>
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	2b08      	cmp	r3, #8
 80044da:	d104      	bne.n	80044e6 <HAL_TIM_PWM_Start+0xd6>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2202      	movs	r2, #2
 80044e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044e4:	e013      	b.n	800450e <HAL_TIM_PWM_Start+0xfe>
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	2b0c      	cmp	r3, #12
 80044ea:	d104      	bne.n	80044f6 <HAL_TIM_PWM_Start+0xe6>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2202      	movs	r2, #2
 80044f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80044f4:	e00b      	b.n	800450e <HAL_TIM_PWM_Start+0xfe>
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	2b10      	cmp	r3, #16
 80044fa:	d104      	bne.n	8004506 <HAL_TIM_PWM_Start+0xf6>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2202      	movs	r2, #2
 8004500:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004504:	e003      	b.n	800450e <HAL_TIM_PWM_Start+0xfe>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2202      	movs	r2, #2
 800450a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	2201      	movs	r2, #1
 8004514:	6839      	ldr	r1, [r7, #0]
 8004516:	4618      	mov	r0, r3
 8004518:	f001 f866 	bl	80055e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a30      	ldr	r2, [pc, #192]	; (80045e4 <HAL_TIM_PWM_Start+0x1d4>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d004      	beq.n	8004530 <HAL_TIM_PWM_Start+0x120>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a2f      	ldr	r2, [pc, #188]	; (80045e8 <HAL_TIM_PWM_Start+0x1d8>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d101      	bne.n	8004534 <HAL_TIM_PWM_Start+0x124>
 8004530:	2301      	movs	r3, #1
 8004532:	e000      	b.n	8004536 <HAL_TIM_PWM_Start+0x126>
 8004534:	2300      	movs	r3, #0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d007      	beq.n	800454a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004548:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a25      	ldr	r2, [pc, #148]	; (80045e4 <HAL_TIM_PWM_Start+0x1d4>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d022      	beq.n	800459a <HAL_TIM_PWM_Start+0x18a>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800455c:	d01d      	beq.n	800459a <HAL_TIM_PWM_Start+0x18a>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a22      	ldr	r2, [pc, #136]	; (80045ec <HAL_TIM_PWM_Start+0x1dc>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d018      	beq.n	800459a <HAL_TIM_PWM_Start+0x18a>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a20      	ldr	r2, [pc, #128]	; (80045f0 <HAL_TIM_PWM_Start+0x1e0>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d013      	beq.n	800459a <HAL_TIM_PWM_Start+0x18a>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a1f      	ldr	r2, [pc, #124]	; (80045f4 <HAL_TIM_PWM_Start+0x1e4>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d00e      	beq.n	800459a <HAL_TIM_PWM_Start+0x18a>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a19      	ldr	r2, [pc, #100]	; (80045e8 <HAL_TIM_PWM_Start+0x1d8>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d009      	beq.n	800459a <HAL_TIM_PWM_Start+0x18a>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a1b      	ldr	r2, [pc, #108]	; (80045f8 <HAL_TIM_PWM_Start+0x1e8>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d004      	beq.n	800459a <HAL_TIM_PWM_Start+0x18a>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a19      	ldr	r2, [pc, #100]	; (80045fc <HAL_TIM_PWM_Start+0x1ec>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d115      	bne.n	80045c6 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	689a      	ldr	r2, [r3, #8]
 80045a0:	4b17      	ldr	r3, [pc, #92]	; (8004600 <HAL_TIM_PWM_Start+0x1f0>)
 80045a2:	4013      	ands	r3, r2
 80045a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2b06      	cmp	r3, #6
 80045aa:	d015      	beq.n	80045d8 <HAL_TIM_PWM_Start+0x1c8>
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045b2:	d011      	beq.n	80045d8 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f042 0201 	orr.w	r2, r2, #1
 80045c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045c4:	e008      	b.n	80045d8 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f042 0201 	orr.w	r2, r2, #1
 80045d4:	601a      	str	r2, [r3, #0]
 80045d6:	e000      	b.n	80045da <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045d8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80045da:	2300      	movs	r3, #0
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3710      	adds	r7, #16
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	40010000 	.word	0x40010000
 80045e8:	40010400 	.word	0x40010400
 80045ec:	40000400 	.word	0x40000400
 80045f0:	40000800 	.word	0x40000800
 80045f4:	40000c00 	.word	0x40000c00
 80045f8:	40014000 	.word	0x40014000
 80045fc:	40001800 	.word	0x40001800
 8004600:	00010007 	.word	0x00010007

08004604 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b086      	sub	sp, #24
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d101      	bne.n	8004618 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e08f      	b.n	8004738 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800461e:	b2db      	uxtb	r3, r3
 8004620:	2b00      	cmp	r3, #0
 8004622:	d106      	bne.n	8004632 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f7fd f903 	bl	8001838 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2202      	movs	r2, #2
 8004636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	6899      	ldr	r1, [r3, #8]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	4b3e      	ldr	r3, [pc, #248]	; (8004740 <HAL_TIM_Encoder_Init+0x13c>)
 8004646:	400b      	ands	r3, r1
 8004648:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	3304      	adds	r3, #4
 8004652:	4619      	mov	r1, r3
 8004654:	4610      	mov	r0, r2
 8004656:	f000 fc2f 	bl	8004eb8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	699b      	ldr	r3, [r3, #24]
 8004668:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	6a1b      	ldr	r3, [r3, #32]
 8004670:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	697a      	ldr	r2, [r7, #20]
 8004678:	4313      	orrs	r3, r2
 800467a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800467c:	693a      	ldr	r2, [r7, #16]
 800467e:	4b31      	ldr	r3, [pc, #196]	; (8004744 <HAL_TIM_Encoder_Init+0x140>)
 8004680:	4013      	ands	r3, r2
 8004682:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	689a      	ldr	r2, [r3, #8]
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	699b      	ldr	r3, [r3, #24]
 800468c:	021b      	lsls	r3, r3, #8
 800468e:	4313      	orrs	r3, r2
 8004690:	693a      	ldr	r2, [r7, #16]
 8004692:	4313      	orrs	r3, r2
 8004694:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004696:	693a      	ldr	r2, [r7, #16]
 8004698:	4b2b      	ldr	r3, [pc, #172]	; (8004748 <HAL_TIM_Encoder_Init+0x144>)
 800469a:	4013      	ands	r3, r2
 800469c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800469e:	693a      	ldr	r2, [r7, #16]
 80046a0:	4b2a      	ldr	r3, [pc, #168]	; (800474c <HAL_TIM_Encoder_Init+0x148>)
 80046a2:	4013      	ands	r3, r2
 80046a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	68da      	ldr	r2, [r3, #12]
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	69db      	ldr	r3, [r3, #28]
 80046ae:	021b      	lsls	r3, r3, #8
 80046b0:	4313      	orrs	r3, r2
 80046b2:	693a      	ldr	r2, [r7, #16]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	691b      	ldr	r3, [r3, #16]
 80046bc:	011a      	lsls	r2, r3, #4
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	6a1b      	ldr	r3, [r3, #32]
 80046c2:	031b      	lsls	r3, r3, #12
 80046c4:	4313      	orrs	r3, r2
 80046c6:	693a      	ldr	r2, [r7, #16]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80046d2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80046da:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	685a      	ldr	r2, [r3, #4]
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	695b      	ldr	r3, [r3, #20]
 80046e4:	011b      	lsls	r3, r3, #4
 80046e6:	4313      	orrs	r3, r2
 80046e8:	68fa      	ldr	r2, [r7, #12]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	697a      	ldr	r2, [r7, #20]
 80046f4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	693a      	ldr	r2, [r7, #16]
 80046fc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2201      	movs	r2, #1
 800470a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2201      	movs	r2, #1
 8004712:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2201      	movs	r2, #1
 800471a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2201      	movs	r2, #1
 8004722:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2201      	movs	r2, #1
 800472a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2201      	movs	r2, #1
 8004732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004736:	2300      	movs	r3, #0
}
 8004738:	4618      	mov	r0, r3
 800473a:	3718      	adds	r7, #24
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}
 8004740:	fffebff8 	.word	0xfffebff8
 8004744:	fffffcfc 	.word	0xfffffcfc
 8004748:	fffff3f3 	.word	0xfffff3f3
 800474c:	ffff0f0f 	.word	0xffff0f0f

08004750 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004760:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004768:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004770:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004778:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d110      	bne.n	80047a2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004780:	7bfb      	ldrb	r3, [r7, #15]
 8004782:	2b01      	cmp	r3, #1
 8004784:	d102      	bne.n	800478c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004786:	7b7b      	ldrb	r3, [r7, #13]
 8004788:	2b01      	cmp	r3, #1
 800478a:	d001      	beq.n	8004790 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e069      	b.n	8004864 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2202      	movs	r2, #2
 8004794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2202      	movs	r2, #2
 800479c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047a0:	e031      	b.n	8004806 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	2b04      	cmp	r3, #4
 80047a6:	d110      	bne.n	80047ca <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80047a8:	7bbb      	ldrb	r3, [r7, #14]
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d102      	bne.n	80047b4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80047ae:	7b3b      	ldrb	r3, [r7, #12]
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d001      	beq.n	80047b8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e055      	b.n	8004864 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2202      	movs	r2, #2
 80047bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2202      	movs	r2, #2
 80047c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047c8:	e01d      	b.n	8004806 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80047ca:	7bfb      	ldrb	r3, [r7, #15]
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d108      	bne.n	80047e2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80047d0:	7bbb      	ldrb	r3, [r7, #14]
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d105      	bne.n	80047e2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80047d6:	7b7b      	ldrb	r3, [r7, #13]
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d102      	bne.n	80047e2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80047dc:	7b3b      	ldrb	r3, [r7, #12]
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d001      	beq.n	80047e6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e03e      	b.n	8004864 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2202      	movs	r2, #2
 80047ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2202      	movs	r2, #2
 80047f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2202      	movs	r2, #2
 80047fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2202      	movs	r2, #2
 8004802:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d003      	beq.n	8004814 <HAL_TIM_Encoder_Start+0xc4>
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	2b04      	cmp	r3, #4
 8004810:	d008      	beq.n	8004824 <HAL_TIM_Encoder_Start+0xd4>
 8004812:	e00f      	b.n	8004834 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2201      	movs	r2, #1
 800481a:	2100      	movs	r1, #0
 800481c:	4618      	mov	r0, r3
 800481e:	f000 fee3 	bl	80055e8 <TIM_CCxChannelCmd>
      break;
 8004822:	e016      	b.n	8004852 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2201      	movs	r2, #1
 800482a:	2104      	movs	r1, #4
 800482c:	4618      	mov	r0, r3
 800482e:	f000 fedb 	bl	80055e8 <TIM_CCxChannelCmd>
      break;
 8004832:	e00e      	b.n	8004852 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2201      	movs	r2, #1
 800483a:	2100      	movs	r1, #0
 800483c:	4618      	mov	r0, r3
 800483e:	f000 fed3 	bl	80055e8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2201      	movs	r2, #1
 8004848:	2104      	movs	r1, #4
 800484a:	4618      	mov	r0, r3
 800484c:	f000 fecc 	bl	80055e8 <TIM_CCxChannelCmd>
      break;
 8004850:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f042 0201 	orr.w	r2, r2, #1
 8004860:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004862:	2300      	movs	r3, #0
}
 8004864:	4618      	mov	r0, r3
 8004866:	3710      	adds	r7, #16
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}

0800486c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b082      	sub	sp, #8
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	f003 0302 	and.w	r3, r3, #2
 800487e:	2b02      	cmp	r3, #2
 8004880:	d122      	bne.n	80048c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	f003 0302 	and.w	r3, r3, #2
 800488c:	2b02      	cmp	r3, #2
 800488e:	d11b      	bne.n	80048c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f06f 0202 	mvn.w	r2, #2
 8004898:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2201      	movs	r2, #1
 800489e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	699b      	ldr	r3, [r3, #24]
 80048a6:	f003 0303 	and.w	r3, r3, #3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d003      	beq.n	80048b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 fae4 	bl	8004e7c <HAL_TIM_IC_CaptureCallback>
 80048b4:	e005      	b.n	80048c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 fad6 	bl	8004e68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f000 fae7 	bl	8004e90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	f003 0304 	and.w	r3, r3, #4
 80048d2:	2b04      	cmp	r3, #4
 80048d4:	d122      	bne.n	800491c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	f003 0304 	and.w	r3, r3, #4
 80048e0:	2b04      	cmp	r3, #4
 80048e2:	d11b      	bne.n	800491c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f06f 0204 	mvn.w	r2, #4
 80048ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2202      	movs	r2, #2
 80048f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	699b      	ldr	r3, [r3, #24]
 80048fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d003      	beq.n	800490a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 faba 	bl	8004e7c <HAL_TIM_IC_CaptureCallback>
 8004908:	e005      	b.n	8004916 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 faac 	bl	8004e68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f000 fabd 	bl	8004e90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	691b      	ldr	r3, [r3, #16]
 8004922:	f003 0308 	and.w	r3, r3, #8
 8004926:	2b08      	cmp	r3, #8
 8004928:	d122      	bne.n	8004970 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	f003 0308 	and.w	r3, r3, #8
 8004934:	2b08      	cmp	r3, #8
 8004936:	d11b      	bne.n	8004970 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f06f 0208 	mvn.w	r2, #8
 8004940:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2204      	movs	r2, #4
 8004946:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	69db      	ldr	r3, [r3, #28]
 800494e:	f003 0303 	and.w	r3, r3, #3
 8004952:	2b00      	cmp	r3, #0
 8004954:	d003      	beq.n	800495e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 fa90 	bl	8004e7c <HAL_TIM_IC_CaptureCallback>
 800495c:	e005      	b.n	800496a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f000 fa82 	bl	8004e68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f000 fa93 	bl	8004e90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	f003 0310 	and.w	r3, r3, #16
 800497a:	2b10      	cmp	r3, #16
 800497c:	d122      	bne.n	80049c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	f003 0310 	and.w	r3, r3, #16
 8004988:	2b10      	cmp	r3, #16
 800498a:	d11b      	bne.n	80049c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f06f 0210 	mvn.w	r2, #16
 8004994:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2208      	movs	r2, #8
 800499a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	69db      	ldr	r3, [r3, #28]
 80049a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d003      	beq.n	80049b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f000 fa66 	bl	8004e7c <HAL_TIM_IC_CaptureCallback>
 80049b0:	e005      	b.n	80049be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 fa58 	bl	8004e68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f000 fa69 	bl	8004e90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	f003 0301 	and.w	r3, r3, #1
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d10e      	bne.n	80049f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	f003 0301 	and.w	r3, r3, #1
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d107      	bne.n	80049f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f06f 0201 	mvn.w	r2, #1
 80049e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f7fc ffc0 	bl	8001970 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049fa:	2b80      	cmp	r3, #128	; 0x80
 80049fc:	d10e      	bne.n	8004a1c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a08:	2b80      	cmp	r3, #128	; 0x80
 8004a0a:	d107      	bne.n	8004a1c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 ff22 	bl	8005860 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a2a:	d10e      	bne.n	8004a4a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a36:	2b80      	cmp	r3, #128	; 0x80
 8004a38:	d107      	bne.n	8004a4a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004a42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f000 ff15 	bl	8005874 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	691b      	ldr	r3, [r3, #16]
 8004a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a54:	2b40      	cmp	r3, #64	; 0x40
 8004a56:	d10e      	bne.n	8004a76 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a62:	2b40      	cmp	r3, #64	; 0x40
 8004a64:	d107      	bne.n	8004a76 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f000 fa17 	bl	8004ea4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	691b      	ldr	r3, [r3, #16]
 8004a7c:	f003 0320 	and.w	r3, r3, #32
 8004a80:	2b20      	cmp	r3, #32
 8004a82:	d10e      	bne.n	8004aa2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	f003 0320 	and.w	r3, r3, #32
 8004a8e:	2b20      	cmp	r3, #32
 8004a90:	d107      	bne.n	8004aa2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f06f 0220 	mvn.w	r2, #32
 8004a9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f000 fed5 	bl	800584c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004aa2:	bf00      	nop
 8004aa4:	3708      	adds	r7, #8
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
	...

08004aac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b086      	sub	sp, #24
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d101      	bne.n	8004aca <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004ac6:	2302      	movs	r3, #2
 8004ac8:	e0ff      	b.n	8004cca <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2201      	movs	r2, #1
 8004ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2b14      	cmp	r3, #20
 8004ad6:	f200 80f0 	bhi.w	8004cba <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004ada:	a201      	add	r2, pc, #4	; (adr r2, 8004ae0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae0:	08004b35 	.word	0x08004b35
 8004ae4:	08004cbb 	.word	0x08004cbb
 8004ae8:	08004cbb 	.word	0x08004cbb
 8004aec:	08004cbb 	.word	0x08004cbb
 8004af0:	08004b75 	.word	0x08004b75
 8004af4:	08004cbb 	.word	0x08004cbb
 8004af8:	08004cbb 	.word	0x08004cbb
 8004afc:	08004cbb 	.word	0x08004cbb
 8004b00:	08004bb7 	.word	0x08004bb7
 8004b04:	08004cbb 	.word	0x08004cbb
 8004b08:	08004cbb 	.word	0x08004cbb
 8004b0c:	08004cbb 	.word	0x08004cbb
 8004b10:	08004bf7 	.word	0x08004bf7
 8004b14:	08004cbb 	.word	0x08004cbb
 8004b18:	08004cbb 	.word	0x08004cbb
 8004b1c:	08004cbb 	.word	0x08004cbb
 8004b20:	08004c39 	.word	0x08004c39
 8004b24:	08004cbb 	.word	0x08004cbb
 8004b28:	08004cbb 	.word	0x08004cbb
 8004b2c:	08004cbb 	.word	0x08004cbb
 8004b30:	08004c79 	.word	0x08004c79
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	68b9      	ldr	r1, [r7, #8]
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f000 fa5c 	bl	8004ff8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	699a      	ldr	r2, [r3, #24]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f042 0208 	orr.w	r2, r2, #8
 8004b4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	699a      	ldr	r2, [r3, #24]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f022 0204 	bic.w	r2, r2, #4
 8004b5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	6999      	ldr	r1, [r3, #24]
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	691a      	ldr	r2, [r3, #16]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	430a      	orrs	r2, r1
 8004b70:	619a      	str	r2, [r3, #24]
      break;
 8004b72:	e0a5      	b.n	8004cc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	68b9      	ldr	r1, [r7, #8]
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f000 faae 	bl	80050dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	699a      	ldr	r2, [r3, #24]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	699a      	ldr	r2, [r3, #24]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	6999      	ldr	r1, [r3, #24]
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	021a      	lsls	r2, r3, #8
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	430a      	orrs	r2, r1
 8004bb2:	619a      	str	r2, [r3, #24]
      break;
 8004bb4:	e084      	b.n	8004cc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	68b9      	ldr	r1, [r7, #8]
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f000 fb05 	bl	80051cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	69da      	ldr	r2, [r3, #28]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f042 0208 	orr.w	r2, r2, #8
 8004bd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	69da      	ldr	r2, [r3, #28]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f022 0204 	bic.w	r2, r2, #4
 8004be0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	69d9      	ldr	r1, [r3, #28]
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	691a      	ldr	r2, [r3, #16]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	430a      	orrs	r2, r1
 8004bf2:	61da      	str	r2, [r3, #28]
      break;
 8004bf4:	e064      	b.n	8004cc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68b9      	ldr	r1, [r7, #8]
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f000 fb5b 	bl	80052b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	69da      	ldr	r2, [r3, #28]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	69da      	ldr	r2, [r3, #28]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	69d9      	ldr	r1, [r3, #28]
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	691b      	ldr	r3, [r3, #16]
 8004c2c:	021a      	lsls	r2, r3, #8
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	430a      	orrs	r2, r1
 8004c34:	61da      	str	r2, [r3, #28]
      break;
 8004c36:	e043      	b.n	8004cc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68b9      	ldr	r1, [r7, #8]
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f000 fb92 	bl	8005368 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f042 0208 	orr.w	r2, r2, #8
 8004c52:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f022 0204 	bic.w	r2, r2, #4
 8004c62:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	691a      	ldr	r2, [r3, #16]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	430a      	orrs	r2, r1
 8004c74:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004c76:	e023      	b.n	8004cc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68b9      	ldr	r1, [r7, #8]
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f000 fbc4 	bl	800540c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c92:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ca2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	021a      	lsls	r2, r3, #8
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	430a      	orrs	r2, r1
 8004cb6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004cb8:	e002      	b.n	8004cc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	75fb      	strb	r3, [r7, #23]
      break;
 8004cbe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004cc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3718      	adds	r7, #24
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop

08004cd4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b084      	sub	sp, #16
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d101      	bne.n	8004cf0 <HAL_TIM_ConfigClockSource+0x1c>
 8004cec:	2302      	movs	r3, #2
 8004cee:	e0b4      	b.n	8004e5a <HAL_TIM_ConfigClockSource+0x186>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2202      	movs	r2, #2
 8004cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d08:	68ba      	ldr	r2, [r7, #8]
 8004d0a:	4b56      	ldr	r3, [pc, #344]	; (8004e64 <HAL_TIM_ConfigClockSource+0x190>)
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	68ba      	ldr	r2, [r7, #8]
 8004d1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d28:	d03e      	beq.n	8004da8 <HAL_TIM_ConfigClockSource+0xd4>
 8004d2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d2e:	f200 8087 	bhi.w	8004e40 <HAL_TIM_ConfigClockSource+0x16c>
 8004d32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d36:	f000 8086 	beq.w	8004e46 <HAL_TIM_ConfigClockSource+0x172>
 8004d3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d3e:	d87f      	bhi.n	8004e40 <HAL_TIM_ConfigClockSource+0x16c>
 8004d40:	2b70      	cmp	r3, #112	; 0x70
 8004d42:	d01a      	beq.n	8004d7a <HAL_TIM_ConfigClockSource+0xa6>
 8004d44:	2b70      	cmp	r3, #112	; 0x70
 8004d46:	d87b      	bhi.n	8004e40 <HAL_TIM_ConfigClockSource+0x16c>
 8004d48:	2b60      	cmp	r3, #96	; 0x60
 8004d4a:	d050      	beq.n	8004dee <HAL_TIM_ConfigClockSource+0x11a>
 8004d4c:	2b60      	cmp	r3, #96	; 0x60
 8004d4e:	d877      	bhi.n	8004e40 <HAL_TIM_ConfigClockSource+0x16c>
 8004d50:	2b50      	cmp	r3, #80	; 0x50
 8004d52:	d03c      	beq.n	8004dce <HAL_TIM_ConfigClockSource+0xfa>
 8004d54:	2b50      	cmp	r3, #80	; 0x50
 8004d56:	d873      	bhi.n	8004e40 <HAL_TIM_ConfigClockSource+0x16c>
 8004d58:	2b40      	cmp	r3, #64	; 0x40
 8004d5a:	d058      	beq.n	8004e0e <HAL_TIM_ConfigClockSource+0x13a>
 8004d5c:	2b40      	cmp	r3, #64	; 0x40
 8004d5e:	d86f      	bhi.n	8004e40 <HAL_TIM_ConfigClockSource+0x16c>
 8004d60:	2b30      	cmp	r3, #48	; 0x30
 8004d62:	d064      	beq.n	8004e2e <HAL_TIM_ConfigClockSource+0x15a>
 8004d64:	2b30      	cmp	r3, #48	; 0x30
 8004d66:	d86b      	bhi.n	8004e40 <HAL_TIM_ConfigClockSource+0x16c>
 8004d68:	2b20      	cmp	r3, #32
 8004d6a:	d060      	beq.n	8004e2e <HAL_TIM_ConfigClockSource+0x15a>
 8004d6c:	2b20      	cmp	r3, #32
 8004d6e:	d867      	bhi.n	8004e40 <HAL_TIM_ConfigClockSource+0x16c>
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d05c      	beq.n	8004e2e <HAL_TIM_ConfigClockSource+0x15a>
 8004d74:	2b10      	cmp	r3, #16
 8004d76:	d05a      	beq.n	8004e2e <HAL_TIM_ConfigClockSource+0x15a>
 8004d78:	e062      	b.n	8004e40 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6818      	ldr	r0, [r3, #0]
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	6899      	ldr	r1, [r3, #8]
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	685a      	ldr	r2, [r3, #4]
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	f000 fc0d 	bl	80055a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004d9c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68ba      	ldr	r2, [r7, #8]
 8004da4:	609a      	str	r2, [r3, #8]
      break;
 8004da6:	e04f      	b.n	8004e48 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6818      	ldr	r0, [r3, #0]
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	6899      	ldr	r1, [r3, #8]
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	685a      	ldr	r2, [r3, #4]
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	f000 fbf6 	bl	80055a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	689a      	ldr	r2, [r3, #8]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004dca:	609a      	str	r2, [r3, #8]
      break;
 8004dcc:	e03c      	b.n	8004e48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6818      	ldr	r0, [r3, #0]
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	6859      	ldr	r1, [r3, #4]
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	461a      	mov	r2, r3
 8004ddc:	f000 fb6a 	bl	80054b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2150      	movs	r1, #80	; 0x50
 8004de6:	4618      	mov	r0, r3
 8004de8:	f000 fbc3 	bl	8005572 <TIM_ITRx_SetConfig>
      break;
 8004dec:	e02c      	b.n	8004e48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6818      	ldr	r0, [r3, #0]
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	6859      	ldr	r1, [r3, #4]
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	f000 fb89 	bl	8005512 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2160      	movs	r1, #96	; 0x60
 8004e06:	4618      	mov	r0, r3
 8004e08:	f000 fbb3 	bl	8005572 <TIM_ITRx_SetConfig>
      break;
 8004e0c:	e01c      	b.n	8004e48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6818      	ldr	r0, [r3, #0]
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	6859      	ldr	r1, [r3, #4]
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	f000 fb4a 	bl	80054b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2140      	movs	r1, #64	; 0x40
 8004e26:	4618      	mov	r0, r3
 8004e28:	f000 fba3 	bl	8005572 <TIM_ITRx_SetConfig>
      break;
 8004e2c:	e00c      	b.n	8004e48 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4619      	mov	r1, r3
 8004e38:	4610      	mov	r0, r2
 8004e3a:	f000 fb9a 	bl	8005572 <TIM_ITRx_SetConfig>
      break;
 8004e3e:	e003      	b.n	8004e48 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	73fb      	strb	r3, [r7, #15]
      break;
 8004e44:	e000      	b.n	8004e48 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004e46:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3710      	adds	r7, #16
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	bf00      	nop
 8004e64:	fffeff88 	.word	0xfffeff88

08004e68 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e70:	bf00      	nop
 8004e72:	370c      	adds	r7, #12
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e84:	bf00      	nop
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b083      	sub	sp, #12
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e98:	bf00      	nop
 8004e9a:	370c      	adds	r7, #12
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004eac:	bf00      	nop
 8004eae:	370c      	adds	r7, #12
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr

08004eb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b085      	sub	sp, #20
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4a40      	ldr	r2, [pc, #256]	; (8004fcc <TIM_Base_SetConfig+0x114>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d013      	beq.n	8004ef8 <TIM_Base_SetConfig+0x40>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ed6:	d00f      	beq.n	8004ef8 <TIM_Base_SetConfig+0x40>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4a3d      	ldr	r2, [pc, #244]	; (8004fd0 <TIM_Base_SetConfig+0x118>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d00b      	beq.n	8004ef8 <TIM_Base_SetConfig+0x40>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4a3c      	ldr	r2, [pc, #240]	; (8004fd4 <TIM_Base_SetConfig+0x11c>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d007      	beq.n	8004ef8 <TIM_Base_SetConfig+0x40>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4a3b      	ldr	r2, [pc, #236]	; (8004fd8 <TIM_Base_SetConfig+0x120>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d003      	beq.n	8004ef8 <TIM_Base_SetConfig+0x40>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4a3a      	ldr	r2, [pc, #232]	; (8004fdc <TIM_Base_SetConfig+0x124>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d108      	bne.n	8004f0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004efe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	68fa      	ldr	r2, [r7, #12]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a2f      	ldr	r2, [pc, #188]	; (8004fcc <TIM_Base_SetConfig+0x114>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d02b      	beq.n	8004f6a <TIM_Base_SetConfig+0xb2>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f18:	d027      	beq.n	8004f6a <TIM_Base_SetConfig+0xb2>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4a2c      	ldr	r2, [pc, #176]	; (8004fd0 <TIM_Base_SetConfig+0x118>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d023      	beq.n	8004f6a <TIM_Base_SetConfig+0xb2>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4a2b      	ldr	r2, [pc, #172]	; (8004fd4 <TIM_Base_SetConfig+0x11c>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d01f      	beq.n	8004f6a <TIM_Base_SetConfig+0xb2>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a2a      	ldr	r2, [pc, #168]	; (8004fd8 <TIM_Base_SetConfig+0x120>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d01b      	beq.n	8004f6a <TIM_Base_SetConfig+0xb2>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a29      	ldr	r2, [pc, #164]	; (8004fdc <TIM_Base_SetConfig+0x124>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d017      	beq.n	8004f6a <TIM_Base_SetConfig+0xb2>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a28      	ldr	r2, [pc, #160]	; (8004fe0 <TIM_Base_SetConfig+0x128>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d013      	beq.n	8004f6a <TIM_Base_SetConfig+0xb2>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a27      	ldr	r2, [pc, #156]	; (8004fe4 <TIM_Base_SetConfig+0x12c>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d00f      	beq.n	8004f6a <TIM_Base_SetConfig+0xb2>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a26      	ldr	r2, [pc, #152]	; (8004fe8 <TIM_Base_SetConfig+0x130>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d00b      	beq.n	8004f6a <TIM_Base_SetConfig+0xb2>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a25      	ldr	r2, [pc, #148]	; (8004fec <TIM_Base_SetConfig+0x134>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d007      	beq.n	8004f6a <TIM_Base_SetConfig+0xb2>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a24      	ldr	r2, [pc, #144]	; (8004ff0 <TIM_Base_SetConfig+0x138>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d003      	beq.n	8004f6a <TIM_Base_SetConfig+0xb2>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a23      	ldr	r2, [pc, #140]	; (8004ff4 <TIM_Base_SetConfig+0x13c>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d108      	bne.n	8004f7c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	695b      	ldr	r3, [r3, #20]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	68fa      	ldr	r2, [r7, #12]
 8004f8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	689a      	ldr	r2, [r3, #8]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4a0a      	ldr	r2, [pc, #40]	; (8004fcc <TIM_Base_SetConfig+0x114>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d003      	beq.n	8004fb0 <TIM_Base_SetConfig+0xf8>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4a0c      	ldr	r2, [pc, #48]	; (8004fdc <TIM_Base_SetConfig+0x124>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d103      	bne.n	8004fb8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	691a      	ldr	r2, [r3, #16]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	615a      	str	r2, [r3, #20]
}
 8004fbe:	bf00      	nop
 8004fc0:	3714      	adds	r7, #20
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr
 8004fca:	bf00      	nop
 8004fcc:	40010000 	.word	0x40010000
 8004fd0:	40000400 	.word	0x40000400
 8004fd4:	40000800 	.word	0x40000800
 8004fd8:	40000c00 	.word	0x40000c00
 8004fdc:	40010400 	.word	0x40010400
 8004fe0:	40014000 	.word	0x40014000
 8004fe4:	40014400 	.word	0x40014400
 8004fe8:	40014800 	.word	0x40014800
 8004fec:	40001800 	.word	0x40001800
 8004ff0:	40001c00 	.word	0x40001c00
 8004ff4:	40002000 	.word	0x40002000

08004ff8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b087      	sub	sp, #28
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a1b      	ldr	r3, [r3, #32]
 8005006:	f023 0201 	bic.w	r2, r3, #1
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a1b      	ldr	r3, [r3, #32]
 8005012:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005020:	68fa      	ldr	r2, [r7, #12]
 8005022:	4b2b      	ldr	r3, [pc, #172]	; (80050d0 <TIM_OC1_SetConfig+0xd8>)
 8005024:	4013      	ands	r3, r2
 8005026:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f023 0303 	bic.w	r3, r3, #3
 800502e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	68fa      	ldr	r2, [r7, #12]
 8005036:	4313      	orrs	r3, r2
 8005038:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	f023 0302 	bic.w	r3, r3, #2
 8005040:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	697a      	ldr	r2, [r7, #20]
 8005048:	4313      	orrs	r3, r2
 800504a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	4a21      	ldr	r2, [pc, #132]	; (80050d4 <TIM_OC1_SetConfig+0xdc>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d003      	beq.n	800505c <TIM_OC1_SetConfig+0x64>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4a20      	ldr	r2, [pc, #128]	; (80050d8 <TIM_OC1_SetConfig+0xe0>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d10c      	bne.n	8005076 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	f023 0308 	bic.w	r3, r3, #8
 8005062:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	697a      	ldr	r2, [r7, #20]
 800506a:	4313      	orrs	r3, r2
 800506c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	f023 0304 	bic.w	r3, r3, #4
 8005074:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a16      	ldr	r2, [pc, #88]	; (80050d4 <TIM_OC1_SetConfig+0xdc>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d003      	beq.n	8005086 <TIM_OC1_SetConfig+0x8e>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a15      	ldr	r2, [pc, #84]	; (80050d8 <TIM_OC1_SetConfig+0xe0>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d111      	bne.n	80050aa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800508c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005094:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	695b      	ldr	r3, [r3, #20]
 800509a:	693a      	ldr	r2, [r7, #16]
 800509c:	4313      	orrs	r3, r2
 800509e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	699b      	ldr	r3, [r3, #24]
 80050a4:	693a      	ldr	r2, [r7, #16]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	693a      	ldr	r2, [r7, #16]
 80050ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	68fa      	ldr	r2, [r7, #12]
 80050b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	685a      	ldr	r2, [r3, #4]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	697a      	ldr	r2, [r7, #20]
 80050c2:	621a      	str	r2, [r3, #32]
}
 80050c4:	bf00      	nop
 80050c6:	371c      	adds	r7, #28
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr
 80050d0:	fffeff8f 	.word	0xfffeff8f
 80050d4:	40010000 	.word	0x40010000
 80050d8:	40010400 	.word	0x40010400

080050dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050dc:	b480      	push	{r7}
 80050de:	b087      	sub	sp, #28
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a1b      	ldr	r3, [r3, #32]
 80050ea:	f023 0210 	bic.w	r2, r3, #16
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a1b      	ldr	r3, [r3, #32]
 80050f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	699b      	ldr	r3, [r3, #24]
 8005102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005104:	68fa      	ldr	r2, [r7, #12]
 8005106:	4b2e      	ldr	r3, [pc, #184]	; (80051c0 <TIM_OC2_SetConfig+0xe4>)
 8005108:	4013      	ands	r3, r2
 800510a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005112:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	021b      	lsls	r3, r3, #8
 800511a:	68fa      	ldr	r2, [r7, #12]
 800511c:	4313      	orrs	r3, r2
 800511e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	f023 0320 	bic.w	r3, r3, #32
 8005126:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	011b      	lsls	r3, r3, #4
 800512e:	697a      	ldr	r2, [r7, #20]
 8005130:	4313      	orrs	r3, r2
 8005132:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	4a23      	ldr	r2, [pc, #140]	; (80051c4 <TIM_OC2_SetConfig+0xe8>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d003      	beq.n	8005144 <TIM_OC2_SetConfig+0x68>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4a22      	ldr	r2, [pc, #136]	; (80051c8 <TIM_OC2_SetConfig+0xec>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d10d      	bne.n	8005160 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800514a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	011b      	lsls	r3, r3, #4
 8005152:	697a      	ldr	r2, [r7, #20]
 8005154:	4313      	orrs	r3, r2
 8005156:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800515e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	4a18      	ldr	r2, [pc, #96]	; (80051c4 <TIM_OC2_SetConfig+0xe8>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d003      	beq.n	8005170 <TIM_OC2_SetConfig+0x94>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	4a17      	ldr	r2, [pc, #92]	; (80051c8 <TIM_OC2_SetConfig+0xec>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d113      	bne.n	8005198 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005176:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800517e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	695b      	ldr	r3, [r3, #20]
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	693a      	ldr	r2, [r7, #16]
 8005188:	4313      	orrs	r3, r2
 800518a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	699b      	ldr	r3, [r3, #24]
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	693a      	ldr	r2, [r7, #16]
 8005194:	4313      	orrs	r3, r2
 8005196:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	693a      	ldr	r2, [r7, #16]
 800519c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	68fa      	ldr	r2, [r7, #12]
 80051a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	685a      	ldr	r2, [r3, #4]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	697a      	ldr	r2, [r7, #20]
 80051b0:	621a      	str	r2, [r3, #32]
}
 80051b2:	bf00      	nop
 80051b4:	371c      	adds	r7, #28
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop
 80051c0:	feff8fff 	.word	0xfeff8fff
 80051c4:	40010000 	.word	0x40010000
 80051c8:	40010400 	.word	0x40010400

080051cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b087      	sub	sp, #28
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6a1b      	ldr	r3, [r3, #32]
 80051da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a1b      	ldr	r3, [r3, #32]
 80051e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	69db      	ldr	r3, [r3, #28]
 80051f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80051f4:	68fa      	ldr	r2, [r7, #12]
 80051f6:	4b2d      	ldr	r3, [pc, #180]	; (80052ac <TIM_OC3_SetConfig+0xe0>)
 80051f8:	4013      	ands	r3, r2
 80051fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f023 0303 	bic.w	r3, r3, #3
 8005202:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	4313      	orrs	r3, r2
 800520c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005214:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	021b      	lsls	r3, r3, #8
 800521c:	697a      	ldr	r2, [r7, #20]
 800521e:	4313      	orrs	r3, r2
 8005220:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a22      	ldr	r2, [pc, #136]	; (80052b0 <TIM_OC3_SetConfig+0xe4>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d003      	beq.n	8005232 <TIM_OC3_SetConfig+0x66>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a21      	ldr	r2, [pc, #132]	; (80052b4 <TIM_OC3_SetConfig+0xe8>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d10d      	bne.n	800524e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005238:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	021b      	lsls	r3, r3, #8
 8005240:	697a      	ldr	r2, [r7, #20]
 8005242:	4313      	orrs	r3, r2
 8005244:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800524c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a17      	ldr	r2, [pc, #92]	; (80052b0 <TIM_OC3_SetConfig+0xe4>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d003      	beq.n	800525e <TIM_OC3_SetConfig+0x92>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a16      	ldr	r2, [pc, #88]	; (80052b4 <TIM_OC3_SetConfig+0xe8>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d113      	bne.n	8005286 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005264:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800526c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	695b      	ldr	r3, [r3, #20]
 8005272:	011b      	lsls	r3, r3, #4
 8005274:	693a      	ldr	r2, [r7, #16]
 8005276:	4313      	orrs	r3, r2
 8005278:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	699b      	ldr	r3, [r3, #24]
 800527e:	011b      	lsls	r3, r3, #4
 8005280:	693a      	ldr	r2, [r7, #16]
 8005282:	4313      	orrs	r3, r2
 8005284:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	693a      	ldr	r2, [r7, #16]
 800528a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	685a      	ldr	r2, [r3, #4]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	697a      	ldr	r2, [r7, #20]
 800529e:	621a      	str	r2, [r3, #32]
}
 80052a0:	bf00      	nop
 80052a2:	371c      	adds	r7, #28
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr
 80052ac:	fffeff8f 	.word	0xfffeff8f
 80052b0:	40010000 	.word	0x40010000
 80052b4:	40010400 	.word	0x40010400

080052b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b087      	sub	sp, #28
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a1b      	ldr	r3, [r3, #32]
 80052c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a1b      	ldr	r3, [r3, #32]
 80052d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	69db      	ldr	r3, [r3, #28]
 80052de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80052e0:	68fa      	ldr	r2, [r7, #12]
 80052e2:	4b1e      	ldr	r3, [pc, #120]	; (800535c <TIM_OC4_SetConfig+0xa4>)
 80052e4:	4013      	ands	r3, r2
 80052e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	021b      	lsls	r3, r3, #8
 80052f6:	68fa      	ldr	r2, [r7, #12]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005302:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	031b      	lsls	r3, r3, #12
 800530a:	693a      	ldr	r2, [r7, #16]
 800530c:	4313      	orrs	r3, r2
 800530e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	4a13      	ldr	r2, [pc, #76]	; (8005360 <TIM_OC4_SetConfig+0xa8>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d003      	beq.n	8005320 <TIM_OC4_SetConfig+0x68>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4a12      	ldr	r2, [pc, #72]	; (8005364 <TIM_OC4_SetConfig+0xac>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d109      	bne.n	8005334 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005326:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	695b      	ldr	r3, [r3, #20]
 800532c:	019b      	lsls	r3, r3, #6
 800532e:	697a      	ldr	r2, [r7, #20]
 8005330:	4313      	orrs	r3, r2
 8005332:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	697a      	ldr	r2, [r7, #20]
 8005338:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	68fa      	ldr	r2, [r7, #12]
 800533e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	685a      	ldr	r2, [r3, #4]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	693a      	ldr	r2, [r7, #16]
 800534c:	621a      	str	r2, [r3, #32]
}
 800534e:	bf00      	nop
 8005350:	371c      	adds	r7, #28
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr
 800535a:	bf00      	nop
 800535c:	feff8fff 	.word	0xfeff8fff
 8005360:	40010000 	.word	0x40010000
 8005364:	40010400 	.word	0x40010400

08005368 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005368:	b480      	push	{r7}
 800536a:	b087      	sub	sp, #28
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a1b      	ldr	r3, [r3, #32]
 8005376:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a1b      	ldr	r3, [r3, #32]
 8005382:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800538e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005390:	68fa      	ldr	r2, [r7, #12]
 8005392:	4b1b      	ldr	r3, [pc, #108]	; (8005400 <TIM_OC5_SetConfig+0x98>)
 8005394:	4013      	ands	r3, r2
 8005396:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	4313      	orrs	r3, r2
 80053a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80053a8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	041b      	lsls	r3, r3, #16
 80053b0:	693a      	ldr	r2, [r7, #16]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a12      	ldr	r2, [pc, #72]	; (8005404 <TIM_OC5_SetConfig+0x9c>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d003      	beq.n	80053c6 <TIM_OC5_SetConfig+0x5e>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a11      	ldr	r2, [pc, #68]	; (8005408 <TIM_OC5_SetConfig+0xa0>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d109      	bne.n	80053da <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053cc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	695b      	ldr	r3, [r3, #20]
 80053d2:	021b      	lsls	r3, r3, #8
 80053d4:	697a      	ldr	r2, [r7, #20]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	697a      	ldr	r2, [r7, #20]
 80053de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	68fa      	ldr	r2, [r7, #12]
 80053e4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	685a      	ldr	r2, [r3, #4]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	693a      	ldr	r2, [r7, #16]
 80053f2:	621a      	str	r2, [r3, #32]
}
 80053f4:	bf00      	nop
 80053f6:	371c      	adds	r7, #28
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr
 8005400:	fffeff8f 	.word	0xfffeff8f
 8005404:	40010000 	.word	0x40010000
 8005408:	40010400 	.word	0x40010400

0800540c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800540c:	b480      	push	{r7}
 800540e:	b087      	sub	sp, #28
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a1b      	ldr	r3, [r3, #32]
 800541a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a1b      	ldr	r3, [r3, #32]
 8005426:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005434:	68fa      	ldr	r2, [r7, #12]
 8005436:	4b1c      	ldr	r3, [pc, #112]	; (80054a8 <TIM_OC6_SetConfig+0x9c>)
 8005438:	4013      	ands	r3, r2
 800543a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	021b      	lsls	r3, r3, #8
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	4313      	orrs	r3, r2
 8005446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800544e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	051b      	lsls	r3, r3, #20
 8005456:	693a      	ldr	r2, [r7, #16]
 8005458:	4313      	orrs	r3, r2
 800545a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4a13      	ldr	r2, [pc, #76]	; (80054ac <TIM_OC6_SetConfig+0xa0>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d003      	beq.n	800546c <TIM_OC6_SetConfig+0x60>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4a12      	ldr	r2, [pc, #72]	; (80054b0 <TIM_OC6_SetConfig+0xa4>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d109      	bne.n	8005480 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005472:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	695b      	ldr	r3, [r3, #20]
 8005478:	029b      	lsls	r3, r3, #10
 800547a:	697a      	ldr	r2, [r7, #20]
 800547c:	4313      	orrs	r3, r2
 800547e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	697a      	ldr	r2, [r7, #20]
 8005484:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	68fa      	ldr	r2, [r7, #12]
 800548a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	685a      	ldr	r2, [r3, #4]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	693a      	ldr	r2, [r7, #16]
 8005498:	621a      	str	r2, [r3, #32]
}
 800549a:	bf00      	nop
 800549c:	371c      	adds	r7, #28
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr
 80054a6:	bf00      	nop
 80054a8:	feff8fff 	.word	0xfeff8fff
 80054ac:	40010000 	.word	0x40010000
 80054b0:	40010400 	.word	0x40010400

080054b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b087      	sub	sp, #28
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	60b9      	str	r1, [r7, #8]
 80054be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6a1b      	ldr	r3, [r3, #32]
 80054c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6a1b      	ldr	r3, [r3, #32]
 80054ca:	f023 0201 	bic.w	r2, r3, #1
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	699b      	ldr	r3, [r3, #24]
 80054d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	011b      	lsls	r3, r3, #4
 80054e4:	693a      	ldr	r2, [r7, #16]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	f023 030a 	bic.w	r3, r3, #10
 80054f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80054f2:	697a      	ldr	r2, [r7, #20]
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	693a      	ldr	r2, [r7, #16]
 80054fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	697a      	ldr	r2, [r7, #20]
 8005504:	621a      	str	r2, [r3, #32]
}
 8005506:	bf00      	nop
 8005508:	371c      	adds	r7, #28
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr

08005512 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005512:	b480      	push	{r7}
 8005514:	b087      	sub	sp, #28
 8005516:	af00      	add	r7, sp, #0
 8005518:	60f8      	str	r0, [r7, #12]
 800551a:	60b9      	str	r1, [r7, #8]
 800551c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6a1b      	ldr	r3, [r3, #32]
 8005522:	f023 0210 	bic.w	r2, r3, #16
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	699b      	ldr	r3, [r3, #24]
 800552e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	6a1b      	ldr	r3, [r3, #32]
 8005534:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800553c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	031b      	lsls	r3, r3, #12
 8005542:	697a      	ldr	r2, [r7, #20]
 8005544:	4313      	orrs	r3, r2
 8005546:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800554e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	011b      	lsls	r3, r3, #4
 8005554:	693a      	ldr	r2, [r7, #16]
 8005556:	4313      	orrs	r3, r2
 8005558:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	697a      	ldr	r2, [r7, #20]
 800555e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	693a      	ldr	r2, [r7, #16]
 8005564:	621a      	str	r2, [r3, #32]
}
 8005566:	bf00      	nop
 8005568:	371c      	adds	r7, #28
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr

08005572 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005572:	b480      	push	{r7}
 8005574:	b085      	sub	sp, #20
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
 800557a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005588:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800558a:	683a      	ldr	r2, [r7, #0]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	4313      	orrs	r3, r2
 8005590:	f043 0307 	orr.w	r3, r3, #7
 8005594:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	68fa      	ldr	r2, [r7, #12]
 800559a:	609a      	str	r2, [r3, #8]
}
 800559c:	bf00      	nop
 800559e:	3714      	adds	r7, #20
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b087      	sub	sp, #28
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	607a      	str	r2, [r7, #4]
 80055b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	021a      	lsls	r2, r3, #8
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	431a      	orrs	r2, r3
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	697a      	ldr	r2, [r7, #20]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	697a      	ldr	r2, [r7, #20]
 80055da:	609a      	str	r2, [r3, #8]
}
 80055dc:	bf00      	nop
 80055de:	371c      	adds	r7, #28
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr

080055e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b087      	sub	sp, #28
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	60b9      	str	r1, [r7, #8]
 80055f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	f003 031f 	and.w	r3, r3, #31
 80055fa:	2201      	movs	r2, #1
 80055fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005600:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6a1a      	ldr	r2, [r3, #32]
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	43db      	mvns	r3, r3
 800560a:	401a      	ands	r2, r3
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6a1a      	ldr	r2, [r3, #32]
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	f003 031f 	and.w	r3, r3, #31
 800561a:	6879      	ldr	r1, [r7, #4]
 800561c:	fa01 f303 	lsl.w	r3, r1, r3
 8005620:	431a      	orrs	r2, r3
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	621a      	str	r2, [r3, #32]
}
 8005626:	bf00      	nop
 8005628:	371c      	adds	r7, #28
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr
	...

08005634 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005634:	b480      	push	{r7}
 8005636:	b085      	sub	sp, #20
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005644:	2b01      	cmp	r3, #1
 8005646:	d101      	bne.n	800564c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005648:	2302      	movs	r3, #2
 800564a:	e06d      	b.n	8005728 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2202      	movs	r2, #2
 8005658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a30      	ldr	r2, [pc, #192]	; (8005734 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d004      	beq.n	8005680 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a2f      	ldr	r2, [pc, #188]	; (8005738 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d108      	bne.n	8005692 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005686:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	68fa      	ldr	r2, [r7, #12]
 800568e:	4313      	orrs	r3, r2
 8005690:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005698:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	68fa      	ldr	r2, [r7, #12]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	68fa      	ldr	r2, [r7, #12]
 80056aa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a20      	ldr	r2, [pc, #128]	; (8005734 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d022      	beq.n	80056fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056be:	d01d      	beq.n	80056fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a1d      	ldr	r2, [pc, #116]	; (800573c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d018      	beq.n	80056fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a1c      	ldr	r2, [pc, #112]	; (8005740 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d013      	beq.n	80056fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a1a      	ldr	r2, [pc, #104]	; (8005744 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d00e      	beq.n	80056fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a15      	ldr	r2, [pc, #84]	; (8005738 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d009      	beq.n	80056fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a16      	ldr	r2, [pc, #88]	; (8005748 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d004      	beq.n	80056fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a15      	ldr	r2, [pc, #84]	; (800574c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d10c      	bne.n	8005716 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005702:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	68ba      	ldr	r2, [r7, #8]
 800570a:	4313      	orrs	r3, r2
 800570c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	68ba      	ldr	r2, [r7, #8]
 8005714:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2201      	movs	r2, #1
 800571a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005726:	2300      	movs	r3, #0
}
 8005728:	4618      	mov	r0, r3
 800572a:	3714      	adds	r7, #20
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr
 8005734:	40010000 	.word	0x40010000
 8005738:	40010400 	.word	0x40010400
 800573c:	40000400 	.word	0x40000400
 8005740:	40000800 	.word	0x40000800
 8005744:	40000c00 	.word	0x40000c00
 8005748:	40014000 	.word	0x40014000
 800574c:	40001800 	.word	0x40001800

08005750 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005750:	b480      	push	{r7}
 8005752:	b085      	sub	sp, #20
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800575a:	2300      	movs	r3, #0
 800575c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005764:	2b01      	cmp	r3, #1
 8005766:	d101      	bne.n	800576c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005768:	2302      	movs	r3, #2
 800576a:	e065      	b.n	8005838 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	4313      	orrs	r3, r2
 8005780:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	4313      	orrs	r3, r2
 800578e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	4313      	orrs	r3, r2
 800579c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4313      	orrs	r3, r2
 80057aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	695b      	ldr	r3, [r3, #20]
 80057c4:	4313      	orrs	r3, r2
 80057c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057d2:	4313      	orrs	r3, r2
 80057d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	699b      	ldr	r3, [r3, #24]
 80057e0:	041b      	lsls	r3, r3, #16
 80057e2:	4313      	orrs	r3, r2
 80057e4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a16      	ldr	r2, [pc, #88]	; (8005844 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d004      	beq.n	80057fa <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a14      	ldr	r2, [pc, #80]	; (8005848 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d115      	bne.n	8005826 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005804:	051b      	lsls	r3, r3, #20
 8005806:	4313      	orrs	r3, r2
 8005808:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	69db      	ldr	r3, [r3, #28]
 8005814:	4313      	orrs	r3, r2
 8005816:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	6a1b      	ldr	r3, [r3, #32]
 8005822:	4313      	orrs	r3, r2
 8005824:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68fa      	ldr	r2, [r7, #12]
 800582c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005836:	2300      	movs	r3, #0
}
 8005838:	4618      	mov	r0, r3
 800583a:	3714      	adds	r7, #20
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr
 8005844:	40010000 	.word	0x40010000
 8005848:	40010400 	.word	0x40010400

0800584c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800584c:	b480      	push	{r7}
 800584e:	b083      	sub	sp, #12
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005854:	bf00      	nop
 8005856:	370c      	adds	r7, #12
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr

08005860 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005860:	b480      	push	{r7}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005868:	bf00      	nop
 800586a:	370c      	adds	r7, #12
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr

08005874 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005874:	b480      	push	{r7}
 8005876:	b083      	sub	sp, #12
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800587c:	bf00      	nop
 800587e:	370c      	adds	r7, #12
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr

08005888 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b082      	sub	sp, #8
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d101      	bne.n	800589a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e040      	b.n	800591c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d106      	bne.n	80058b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f7fc fa46 	bl	8001d3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2224      	movs	r2, #36	; 0x24
 80058b4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f022 0201 	bic.w	r2, r2, #1
 80058c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 f8c0 	bl	8005a4c <UART_SetConfig>
 80058cc:	4603      	mov	r3, r0
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d101      	bne.n	80058d6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e022      	b.n	800591c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d002      	beq.n	80058e4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 fb16 	bl	8005f10 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	685a      	ldr	r2, [r3, #4]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	689a      	ldr	r2, [r3, #8]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005902:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f042 0201 	orr.w	r2, r2, #1
 8005912:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f000 fb9d 	bl	8006054 <UART_CheckIdleState>
 800591a:	4603      	mov	r3, r0
}
 800591c:	4618      	mov	r0, r3
 800591e:	3708      	adds	r7, #8
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b08a      	sub	sp, #40	; 0x28
 8005928:	af02      	add	r7, sp, #8
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	603b      	str	r3, [r7, #0]
 8005930:	4613      	mov	r3, r2
 8005932:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005938:	2b20      	cmp	r3, #32
 800593a:	f040 8081 	bne.w	8005a40 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d002      	beq.n	800594a <HAL_UART_Transmit+0x26>
 8005944:	88fb      	ldrh	r3, [r7, #6]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d101      	bne.n	800594e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e079      	b.n	8005a42 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005954:	2b01      	cmp	r3, #1
 8005956:	d101      	bne.n	800595c <HAL_UART_Transmit+0x38>
 8005958:	2302      	movs	r3, #2
 800595a:	e072      	b.n	8005a42 <HAL_UART_Transmit+0x11e>
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2201      	movs	r2, #1
 8005960:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2200      	movs	r2, #0
 8005968:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2221      	movs	r2, #33	; 0x21
 8005970:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005972:	f7fc fb2b 	bl	8001fcc <HAL_GetTick>
 8005976:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	88fa      	ldrh	r2, [r7, #6]
 800597c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	88fa      	ldrh	r2, [r7, #6]
 8005984:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005990:	d108      	bne.n	80059a4 <HAL_UART_Transmit+0x80>
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d104      	bne.n	80059a4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800599a:	2300      	movs	r3, #0
 800599c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	61bb      	str	r3, [r7, #24]
 80059a2:	e003      	b.n	80059ac <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80059a8:	2300      	movs	r3, #0
 80059aa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2200      	movs	r2, #0
 80059b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80059b4:	e02c      	b.n	8005a10 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	9300      	str	r3, [sp, #0]
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	2200      	movs	r2, #0
 80059be:	2180      	movs	r1, #128	; 0x80
 80059c0:	68f8      	ldr	r0, [r7, #12]
 80059c2:	f000 fb7a 	bl	80060ba <UART_WaitOnFlagUntilTimeout>
 80059c6:	4603      	mov	r3, r0
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d001      	beq.n	80059d0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80059cc:	2303      	movs	r3, #3
 80059ce:	e038      	b.n	8005a42 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d10b      	bne.n	80059ee <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80059d6:	69bb      	ldr	r3, [r7, #24]
 80059d8:	881b      	ldrh	r3, [r3, #0]
 80059da:	461a      	mov	r2, r3
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059e4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80059e6:	69bb      	ldr	r3, [r7, #24]
 80059e8:	3302      	adds	r3, #2
 80059ea:	61bb      	str	r3, [r7, #24]
 80059ec:	e007      	b.n	80059fe <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	781a      	ldrb	r2, [r3, #0]
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80059f8:	69fb      	ldr	r3, [r7, #28]
 80059fa:	3301      	adds	r3, #1
 80059fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	3b01      	subs	r3, #1
 8005a08:	b29a      	uxth	r2, r3
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d1cc      	bne.n	80059b6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	9300      	str	r3, [sp, #0]
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	2200      	movs	r2, #0
 8005a24:	2140      	movs	r1, #64	; 0x40
 8005a26:	68f8      	ldr	r0, [r7, #12]
 8005a28:	f000 fb47 	bl	80060ba <UART_WaitOnFlagUntilTimeout>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d001      	beq.n	8005a36 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8005a32:	2303      	movs	r3, #3
 8005a34:	e005      	b.n	8005a42 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2220      	movs	r2, #32
 8005a3a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	e000      	b.n	8005a42 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005a40:	2302      	movs	r3, #2
  }
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3720      	adds	r7, #32
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
	...

08005a4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b088      	sub	sp, #32
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a54:	2300      	movs	r3, #0
 8005a56:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	689a      	ldr	r2, [r3, #8]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	691b      	ldr	r3, [r3, #16]
 8005a60:	431a      	orrs	r2, r3
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	695b      	ldr	r3, [r3, #20]
 8005a66:	431a      	orrs	r2, r3
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	69db      	ldr	r3, [r3, #28]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	4ba7      	ldr	r3, [pc, #668]	; (8005d14 <UART_SetConfig+0x2c8>)
 8005a78:	4013      	ands	r3, r2
 8005a7a:	687a      	ldr	r2, [r7, #4]
 8005a7c:	6812      	ldr	r2, [r2, #0]
 8005a7e:	6979      	ldr	r1, [r7, #20]
 8005a80:	430b      	orrs	r3, r1
 8005a82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	68da      	ldr	r2, [r3, #12]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	430a      	orrs	r2, r1
 8005a98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	699b      	ldr	r3, [r3, #24]
 8005a9e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6a1b      	ldr	r3, [r3, #32]
 8005aa4:	697a      	ldr	r2, [r7, #20]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	697a      	ldr	r2, [r7, #20]
 8005aba:	430a      	orrs	r2, r1
 8005abc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a95      	ldr	r2, [pc, #596]	; (8005d18 <UART_SetConfig+0x2cc>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d120      	bne.n	8005b0a <UART_SetConfig+0xbe>
 8005ac8:	4b94      	ldr	r3, [pc, #592]	; (8005d1c <UART_SetConfig+0x2d0>)
 8005aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ace:	f003 0303 	and.w	r3, r3, #3
 8005ad2:	2b03      	cmp	r3, #3
 8005ad4:	d816      	bhi.n	8005b04 <UART_SetConfig+0xb8>
 8005ad6:	a201      	add	r2, pc, #4	; (adr r2, 8005adc <UART_SetConfig+0x90>)
 8005ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005adc:	08005aed 	.word	0x08005aed
 8005ae0:	08005af9 	.word	0x08005af9
 8005ae4:	08005af3 	.word	0x08005af3
 8005ae8:	08005aff 	.word	0x08005aff
 8005aec:	2301      	movs	r3, #1
 8005aee:	77fb      	strb	r3, [r7, #31]
 8005af0:	e14f      	b.n	8005d92 <UART_SetConfig+0x346>
 8005af2:	2302      	movs	r3, #2
 8005af4:	77fb      	strb	r3, [r7, #31]
 8005af6:	e14c      	b.n	8005d92 <UART_SetConfig+0x346>
 8005af8:	2304      	movs	r3, #4
 8005afa:	77fb      	strb	r3, [r7, #31]
 8005afc:	e149      	b.n	8005d92 <UART_SetConfig+0x346>
 8005afe:	2308      	movs	r3, #8
 8005b00:	77fb      	strb	r3, [r7, #31]
 8005b02:	e146      	b.n	8005d92 <UART_SetConfig+0x346>
 8005b04:	2310      	movs	r3, #16
 8005b06:	77fb      	strb	r3, [r7, #31]
 8005b08:	e143      	b.n	8005d92 <UART_SetConfig+0x346>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a84      	ldr	r2, [pc, #528]	; (8005d20 <UART_SetConfig+0x2d4>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d132      	bne.n	8005b7a <UART_SetConfig+0x12e>
 8005b14:	4b81      	ldr	r3, [pc, #516]	; (8005d1c <UART_SetConfig+0x2d0>)
 8005b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b1a:	f003 030c 	and.w	r3, r3, #12
 8005b1e:	2b0c      	cmp	r3, #12
 8005b20:	d828      	bhi.n	8005b74 <UART_SetConfig+0x128>
 8005b22:	a201      	add	r2, pc, #4	; (adr r2, 8005b28 <UART_SetConfig+0xdc>)
 8005b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b28:	08005b5d 	.word	0x08005b5d
 8005b2c:	08005b75 	.word	0x08005b75
 8005b30:	08005b75 	.word	0x08005b75
 8005b34:	08005b75 	.word	0x08005b75
 8005b38:	08005b69 	.word	0x08005b69
 8005b3c:	08005b75 	.word	0x08005b75
 8005b40:	08005b75 	.word	0x08005b75
 8005b44:	08005b75 	.word	0x08005b75
 8005b48:	08005b63 	.word	0x08005b63
 8005b4c:	08005b75 	.word	0x08005b75
 8005b50:	08005b75 	.word	0x08005b75
 8005b54:	08005b75 	.word	0x08005b75
 8005b58:	08005b6f 	.word	0x08005b6f
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	77fb      	strb	r3, [r7, #31]
 8005b60:	e117      	b.n	8005d92 <UART_SetConfig+0x346>
 8005b62:	2302      	movs	r3, #2
 8005b64:	77fb      	strb	r3, [r7, #31]
 8005b66:	e114      	b.n	8005d92 <UART_SetConfig+0x346>
 8005b68:	2304      	movs	r3, #4
 8005b6a:	77fb      	strb	r3, [r7, #31]
 8005b6c:	e111      	b.n	8005d92 <UART_SetConfig+0x346>
 8005b6e:	2308      	movs	r3, #8
 8005b70:	77fb      	strb	r3, [r7, #31]
 8005b72:	e10e      	b.n	8005d92 <UART_SetConfig+0x346>
 8005b74:	2310      	movs	r3, #16
 8005b76:	77fb      	strb	r3, [r7, #31]
 8005b78:	e10b      	b.n	8005d92 <UART_SetConfig+0x346>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a69      	ldr	r2, [pc, #420]	; (8005d24 <UART_SetConfig+0x2d8>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d120      	bne.n	8005bc6 <UART_SetConfig+0x17a>
 8005b84:	4b65      	ldr	r3, [pc, #404]	; (8005d1c <UART_SetConfig+0x2d0>)
 8005b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b8a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005b8e:	2b30      	cmp	r3, #48	; 0x30
 8005b90:	d013      	beq.n	8005bba <UART_SetConfig+0x16e>
 8005b92:	2b30      	cmp	r3, #48	; 0x30
 8005b94:	d814      	bhi.n	8005bc0 <UART_SetConfig+0x174>
 8005b96:	2b20      	cmp	r3, #32
 8005b98:	d009      	beq.n	8005bae <UART_SetConfig+0x162>
 8005b9a:	2b20      	cmp	r3, #32
 8005b9c:	d810      	bhi.n	8005bc0 <UART_SetConfig+0x174>
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d002      	beq.n	8005ba8 <UART_SetConfig+0x15c>
 8005ba2:	2b10      	cmp	r3, #16
 8005ba4:	d006      	beq.n	8005bb4 <UART_SetConfig+0x168>
 8005ba6:	e00b      	b.n	8005bc0 <UART_SetConfig+0x174>
 8005ba8:	2300      	movs	r3, #0
 8005baa:	77fb      	strb	r3, [r7, #31]
 8005bac:	e0f1      	b.n	8005d92 <UART_SetConfig+0x346>
 8005bae:	2302      	movs	r3, #2
 8005bb0:	77fb      	strb	r3, [r7, #31]
 8005bb2:	e0ee      	b.n	8005d92 <UART_SetConfig+0x346>
 8005bb4:	2304      	movs	r3, #4
 8005bb6:	77fb      	strb	r3, [r7, #31]
 8005bb8:	e0eb      	b.n	8005d92 <UART_SetConfig+0x346>
 8005bba:	2308      	movs	r3, #8
 8005bbc:	77fb      	strb	r3, [r7, #31]
 8005bbe:	e0e8      	b.n	8005d92 <UART_SetConfig+0x346>
 8005bc0:	2310      	movs	r3, #16
 8005bc2:	77fb      	strb	r3, [r7, #31]
 8005bc4:	e0e5      	b.n	8005d92 <UART_SetConfig+0x346>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a57      	ldr	r2, [pc, #348]	; (8005d28 <UART_SetConfig+0x2dc>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d120      	bne.n	8005c12 <UART_SetConfig+0x1c6>
 8005bd0:	4b52      	ldr	r3, [pc, #328]	; (8005d1c <UART_SetConfig+0x2d0>)
 8005bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bd6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005bda:	2bc0      	cmp	r3, #192	; 0xc0
 8005bdc:	d013      	beq.n	8005c06 <UART_SetConfig+0x1ba>
 8005bde:	2bc0      	cmp	r3, #192	; 0xc0
 8005be0:	d814      	bhi.n	8005c0c <UART_SetConfig+0x1c0>
 8005be2:	2b80      	cmp	r3, #128	; 0x80
 8005be4:	d009      	beq.n	8005bfa <UART_SetConfig+0x1ae>
 8005be6:	2b80      	cmp	r3, #128	; 0x80
 8005be8:	d810      	bhi.n	8005c0c <UART_SetConfig+0x1c0>
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d002      	beq.n	8005bf4 <UART_SetConfig+0x1a8>
 8005bee:	2b40      	cmp	r3, #64	; 0x40
 8005bf0:	d006      	beq.n	8005c00 <UART_SetConfig+0x1b4>
 8005bf2:	e00b      	b.n	8005c0c <UART_SetConfig+0x1c0>
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	77fb      	strb	r3, [r7, #31]
 8005bf8:	e0cb      	b.n	8005d92 <UART_SetConfig+0x346>
 8005bfa:	2302      	movs	r3, #2
 8005bfc:	77fb      	strb	r3, [r7, #31]
 8005bfe:	e0c8      	b.n	8005d92 <UART_SetConfig+0x346>
 8005c00:	2304      	movs	r3, #4
 8005c02:	77fb      	strb	r3, [r7, #31]
 8005c04:	e0c5      	b.n	8005d92 <UART_SetConfig+0x346>
 8005c06:	2308      	movs	r3, #8
 8005c08:	77fb      	strb	r3, [r7, #31]
 8005c0a:	e0c2      	b.n	8005d92 <UART_SetConfig+0x346>
 8005c0c:	2310      	movs	r3, #16
 8005c0e:	77fb      	strb	r3, [r7, #31]
 8005c10:	e0bf      	b.n	8005d92 <UART_SetConfig+0x346>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a45      	ldr	r2, [pc, #276]	; (8005d2c <UART_SetConfig+0x2e0>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d125      	bne.n	8005c68 <UART_SetConfig+0x21c>
 8005c1c:	4b3f      	ldr	r3, [pc, #252]	; (8005d1c <UART_SetConfig+0x2d0>)
 8005c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c2a:	d017      	beq.n	8005c5c <UART_SetConfig+0x210>
 8005c2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c30:	d817      	bhi.n	8005c62 <UART_SetConfig+0x216>
 8005c32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c36:	d00b      	beq.n	8005c50 <UART_SetConfig+0x204>
 8005c38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c3c:	d811      	bhi.n	8005c62 <UART_SetConfig+0x216>
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d003      	beq.n	8005c4a <UART_SetConfig+0x1fe>
 8005c42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c46:	d006      	beq.n	8005c56 <UART_SetConfig+0x20a>
 8005c48:	e00b      	b.n	8005c62 <UART_SetConfig+0x216>
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	77fb      	strb	r3, [r7, #31]
 8005c4e:	e0a0      	b.n	8005d92 <UART_SetConfig+0x346>
 8005c50:	2302      	movs	r3, #2
 8005c52:	77fb      	strb	r3, [r7, #31]
 8005c54:	e09d      	b.n	8005d92 <UART_SetConfig+0x346>
 8005c56:	2304      	movs	r3, #4
 8005c58:	77fb      	strb	r3, [r7, #31]
 8005c5a:	e09a      	b.n	8005d92 <UART_SetConfig+0x346>
 8005c5c:	2308      	movs	r3, #8
 8005c5e:	77fb      	strb	r3, [r7, #31]
 8005c60:	e097      	b.n	8005d92 <UART_SetConfig+0x346>
 8005c62:	2310      	movs	r3, #16
 8005c64:	77fb      	strb	r3, [r7, #31]
 8005c66:	e094      	b.n	8005d92 <UART_SetConfig+0x346>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a30      	ldr	r2, [pc, #192]	; (8005d30 <UART_SetConfig+0x2e4>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d125      	bne.n	8005cbe <UART_SetConfig+0x272>
 8005c72:	4b2a      	ldr	r3, [pc, #168]	; (8005d1c <UART_SetConfig+0x2d0>)
 8005c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c78:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005c7c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c80:	d017      	beq.n	8005cb2 <UART_SetConfig+0x266>
 8005c82:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c86:	d817      	bhi.n	8005cb8 <UART_SetConfig+0x26c>
 8005c88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c8c:	d00b      	beq.n	8005ca6 <UART_SetConfig+0x25a>
 8005c8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c92:	d811      	bhi.n	8005cb8 <UART_SetConfig+0x26c>
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d003      	beq.n	8005ca0 <UART_SetConfig+0x254>
 8005c98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c9c:	d006      	beq.n	8005cac <UART_SetConfig+0x260>
 8005c9e:	e00b      	b.n	8005cb8 <UART_SetConfig+0x26c>
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	77fb      	strb	r3, [r7, #31]
 8005ca4:	e075      	b.n	8005d92 <UART_SetConfig+0x346>
 8005ca6:	2302      	movs	r3, #2
 8005ca8:	77fb      	strb	r3, [r7, #31]
 8005caa:	e072      	b.n	8005d92 <UART_SetConfig+0x346>
 8005cac:	2304      	movs	r3, #4
 8005cae:	77fb      	strb	r3, [r7, #31]
 8005cb0:	e06f      	b.n	8005d92 <UART_SetConfig+0x346>
 8005cb2:	2308      	movs	r3, #8
 8005cb4:	77fb      	strb	r3, [r7, #31]
 8005cb6:	e06c      	b.n	8005d92 <UART_SetConfig+0x346>
 8005cb8:	2310      	movs	r3, #16
 8005cba:	77fb      	strb	r3, [r7, #31]
 8005cbc:	e069      	b.n	8005d92 <UART_SetConfig+0x346>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a1c      	ldr	r2, [pc, #112]	; (8005d34 <UART_SetConfig+0x2e8>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d137      	bne.n	8005d38 <UART_SetConfig+0x2ec>
 8005cc8:	4b14      	ldr	r3, [pc, #80]	; (8005d1c <UART_SetConfig+0x2d0>)
 8005cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cce:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005cd2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005cd6:	d017      	beq.n	8005d08 <UART_SetConfig+0x2bc>
 8005cd8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005cdc:	d817      	bhi.n	8005d0e <UART_SetConfig+0x2c2>
 8005cde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ce2:	d00b      	beq.n	8005cfc <UART_SetConfig+0x2b0>
 8005ce4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ce8:	d811      	bhi.n	8005d0e <UART_SetConfig+0x2c2>
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d003      	beq.n	8005cf6 <UART_SetConfig+0x2aa>
 8005cee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cf2:	d006      	beq.n	8005d02 <UART_SetConfig+0x2b6>
 8005cf4:	e00b      	b.n	8005d0e <UART_SetConfig+0x2c2>
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	77fb      	strb	r3, [r7, #31]
 8005cfa:	e04a      	b.n	8005d92 <UART_SetConfig+0x346>
 8005cfc:	2302      	movs	r3, #2
 8005cfe:	77fb      	strb	r3, [r7, #31]
 8005d00:	e047      	b.n	8005d92 <UART_SetConfig+0x346>
 8005d02:	2304      	movs	r3, #4
 8005d04:	77fb      	strb	r3, [r7, #31]
 8005d06:	e044      	b.n	8005d92 <UART_SetConfig+0x346>
 8005d08:	2308      	movs	r3, #8
 8005d0a:	77fb      	strb	r3, [r7, #31]
 8005d0c:	e041      	b.n	8005d92 <UART_SetConfig+0x346>
 8005d0e:	2310      	movs	r3, #16
 8005d10:	77fb      	strb	r3, [r7, #31]
 8005d12:	e03e      	b.n	8005d92 <UART_SetConfig+0x346>
 8005d14:	efff69f3 	.word	0xefff69f3
 8005d18:	40011000 	.word	0x40011000
 8005d1c:	40023800 	.word	0x40023800
 8005d20:	40004400 	.word	0x40004400
 8005d24:	40004800 	.word	0x40004800
 8005d28:	40004c00 	.word	0x40004c00
 8005d2c:	40005000 	.word	0x40005000
 8005d30:	40011400 	.word	0x40011400
 8005d34:	40007800 	.word	0x40007800
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a71      	ldr	r2, [pc, #452]	; (8005f04 <UART_SetConfig+0x4b8>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d125      	bne.n	8005d8e <UART_SetConfig+0x342>
 8005d42:	4b71      	ldr	r3, [pc, #452]	; (8005f08 <UART_SetConfig+0x4bc>)
 8005d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d48:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005d4c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005d50:	d017      	beq.n	8005d82 <UART_SetConfig+0x336>
 8005d52:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005d56:	d817      	bhi.n	8005d88 <UART_SetConfig+0x33c>
 8005d58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d5c:	d00b      	beq.n	8005d76 <UART_SetConfig+0x32a>
 8005d5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d62:	d811      	bhi.n	8005d88 <UART_SetConfig+0x33c>
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d003      	beq.n	8005d70 <UART_SetConfig+0x324>
 8005d68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d6c:	d006      	beq.n	8005d7c <UART_SetConfig+0x330>
 8005d6e:	e00b      	b.n	8005d88 <UART_SetConfig+0x33c>
 8005d70:	2300      	movs	r3, #0
 8005d72:	77fb      	strb	r3, [r7, #31]
 8005d74:	e00d      	b.n	8005d92 <UART_SetConfig+0x346>
 8005d76:	2302      	movs	r3, #2
 8005d78:	77fb      	strb	r3, [r7, #31]
 8005d7a:	e00a      	b.n	8005d92 <UART_SetConfig+0x346>
 8005d7c:	2304      	movs	r3, #4
 8005d7e:	77fb      	strb	r3, [r7, #31]
 8005d80:	e007      	b.n	8005d92 <UART_SetConfig+0x346>
 8005d82:	2308      	movs	r3, #8
 8005d84:	77fb      	strb	r3, [r7, #31]
 8005d86:	e004      	b.n	8005d92 <UART_SetConfig+0x346>
 8005d88:	2310      	movs	r3, #16
 8005d8a:	77fb      	strb	r3, [r7, #31]
 8005d8c:	e001      	b.n	8005d92 <UART_SetConfig+0x346>
 8005d8e:	2310      	movs	r3, #16
 8005d90:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	69db      	ldr	r3, [r3, #28]
 8005d96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d9a:	d15a      	bne.n	8005e52 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8005d9c:	7ffb      	ldrb	r3, [r7, #31]
 8005d9e:	2b08      	cmp	r3, #8
 8005da0:	d827      	bhi.n	8005df2 <UART_SetConfig+0x3a6>
 8005da2:	a201      	add	r2, pc, #4	; (adr r2, 8005da8 <UART_SetConfig+0x35c>)
 8005da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005da8:	08005dcd 	.word	0x08005dcd
 8005dac:	08005dd5 	.word	0x08005dd5
 8005db0:	08005ddd 	.word	0x08005ddd
 8005db4:	08005df3 	.word	0x08005df3
 8005db8:	08005de3 	.word	0x08005de3
 8005dbc:	08005df3 	.word	0x08005df3
 8005dc0:	08005df3 	.word	0x08005df3
 8005dc4:	08005df3 	.word	0x08005df3
 8005dc8:	08005deb 	.word	0x08005deb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005dcc:	f7fd fdd6 	bl	800397c <HAL_RCC_GetPCLK1Freq>
 8005dd0:	61b8      	str	r0, [r7, #24]
        break;
 8005dd2:	e013      	b.n	8005dfc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005dd4:	f7fd fde6 	bl	80039a4 <HAL_RCC_GetPCLK2Freq>
 8005dd8:	61b8      	str	r0, [r7, #24]
        break;
 8005dda:	e00f      	b.n	8005dfc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ddc:	4b4b      	ldr	r3, [pc, #300]	; (8005f0c <UART_SetConfig+0x4c0>)
 8005dde:	61bb      	str	r3, [r7, #24]
        break;
 8005de0:	e00c      	b.n	8005dfc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005de2:	f7fd fcdd 	bl	80037a0 <HAL_RCC_GetSysClockFreq>
 8005de6:	61b8      	str	r0, [r7, #24]
        break;
 8005de8:	e008      	b.n	8005dfc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dee:	61bb      	str	r3, [r7, #24]
        break;
 8005df0:	e004      	b.n	8005dfc <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8005df2:	2300      	movs	r3, #0
 8005df4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	77bb      	strb	r3, [r7, #30]
        break;
 8005dfa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005dfc:	69bb      	ldr	r3, [r7, #24]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d074      	beq.n	8005eec <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005e02:	69bb      	ldr	r3, [r7, #24]
 8005e04:	005a      	lsls	r2, r3, #1
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	085b      	lsrs	r3, r3, #1
 8005e0c:	441a      	add	r2, r3
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e16:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	2b0f      	cmp	r3, #15
 8005e1c:	d916      	bls.n	8005e4c <UART_SetConfig+0x400>
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e24:	d212      	bcs.n	8005e4c <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	f023 030f 	bic.w	r3, r3, #15
 8005e2e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	085b      	lsrs	r3, r3, #1
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	f003 0307 	and.w	r3, r3, #7
 8005e3a:	b29a      	uxth	r2, r3
 8005e3c:	89fb      	ldrh	r3, [r7, #14]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	89fa      	ldrh	r2, [r7, #14]
 8005e48:	60da      	str	r2, [r3, #12]
 8005e4a:	e04f      	b.n	8005eec <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	77bb      	strb	r3, [r7, #30]
 8005e50:	e04c      	b.n	8005eec <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e52:	7ffb      	ldrb	r3, [r7, #31]
 8005e54:	2b08      	cmp	r3, #8
 8005e56:	d828      	bhi.n	8005eaa <UART_SetConfig+0x45e>
 8005e58:	a201      	add	r2, pc, #4	; (adr r2, 8005e60 <UART_SetConfig+0x414>)
 8005e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e5e:	bf00      	nop
 8005e60:	08005e85 	.word	0x08005e85
 8005e64:	08005e8d 	.word	0x08005e8d
 8005e68:	08005e95 	.word	0x08005e95
 8005e6c:	08005eab 	.word	0x08005eab
 8005e70:	08005e9b 	.word	0x08005e9b
 8005e74:	08005eab 	.word	0x08005eab
 8005e78:	08005eab 	.word	0x08005eab
 8005e7c:	08005eab 	.word	0x08005eab
 8005e80:	08005ea3 	.word	0x08005ea3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e84:	f7fd fd7a 	bl	800397c <HAL_RCC_GetPCLK1Freq>
 8005e88:	61b8      	str	r0, [r7, #24]
        break;
 8005e8a:	e013      	b.n	8005eb4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e8c:	f7fd fd8a 	bl	80039a4 <HAL_RCC_GetPCLK2Freq>
 8005e90:	61b8      	str	r0, [r7, #24]
        break;
 8005e92:	e00f      	b.n	8005eb4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e94:	4b1d      	ldr	r3, [pc, #116]	; (8005f0c <UART_SetConfig+0x4c0>)
 8005e96:	61bb      	str	r3, [r7, #24]
        break;
 8005e98:	e00c      	b.n	8005eb4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e9a:	f7fd fc81 	bl	80037a0 <HAL_RCC_GetSysClockFreq>
 8005e9e:	61b8      	str	r0, [r7, #24]
        break;
 8005ea0:	e008      	b.n	8005eb4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ea2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ea6:	61bb      	str	r3, [r7, #24]
        break;
 8005ea8:	e004      	b.n	8005eb4 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	77bb      	strb	r3, [r7, #30]
        break;
 8005eb2:	bf00      	nop
    }

    if (pclk != 0U)
 8005eb4:	69bb      	ldr	r3, [r7, #24]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d018      	beq.n	8005eec <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	085a      	lsrs	r2, r3, #1
 8005ec0:	69bb      	ldr	r3, [r7, #24]
 8005ec2:	441a      	add	r2, r3
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ecc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	2b0f      	cmp	r3, #15
 8005ed2:	d909      	bls.n	8005ee8 <UART_SetConfig+0x49c>
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005eda:	d205      	bcs.n	8005ee8 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	b29a      	uxth	r2, r3
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	60da      	str	r2, [r3, #12]
 8005ee6:	e001      	b.n	8005eec <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005ef8:	7fbb      	ldrb	r3, [r7, #30]
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3720      	adds	r7, #32
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}
 8005f02:	bf00      	nop
 8005f04:	40007c00 	.word	0x40007c00
 8005f08:	40023800 	.word	0x40023800
 8005f0c:	00f42400 	.word	0x00f42400

08005f10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b083      	sub	sp, #12
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f1c:	f003 0301 	and.w	r3, r3, #1
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d00a      	beq.n	8005f3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	430a      	orrs	r2, r1
 8005f38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3e:	f003 0302 	and.w	r3, r3, #2
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d00a      	beq.n	8005f5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	430a      	orrs	r2, r1
 8005f5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f60:	f003 0304 	and.w	r3, r3, #4
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d00a      	beq.n	8005f7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	430a      	orrs	r2, r1
 8005f7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f82:	f003 0308 	and.w	r3, r3, #8
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d00a      	beq.n	8005fa0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	430a      	orrs	r2, r1
 8005f9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa4:	f003 0310 	and.w	r3, r3, #16
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d00a      	beq.n	8005fc2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	430a      	orrs	r2, r1
 8005fc0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc6:	f003 0320 	and.w	r3, r3, #32
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d00a      	beq.n	8005fe4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	430a      	orrs	r2, r1
 8005fe2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d01a      	beq.n	8006026 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	430a      	orrs	r2, r1
 8006004:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800600a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800600e:	d10a      	bne.n	8006026 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	430a      	orrs	r2, r1
 8006024:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800602e:	2b00      	cmp	r3, #0
 8006030:	d00a      	beq.n	8006048 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	430a      	orrs	r2, r1
 8006046:	605a      	str	r2, [r3, #4]
  }
}
 8006048:	bf00      	nop
 800604a:	370c      	adds	r7, #12
 800604c:	46bd      	mov	sp, r7
 800604e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006052:	4770      	bx	lr

08006054 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b086      	sub	sp, #24
 8006058:	af02      	add	r7, sp, #8
 800605a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006064:	f7fb ffb2 	bl	8001fcc <HAL_GetTick>
 8006068:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f003 0308 	and.w	r3, r3, #8
 8006074:	2b08      	cmp	r3, #8
 8006076:	d10e      	bne.n	8006096 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006078:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800607c:	9300      	str	r3, [sp, #0]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2200      	movs	r2, #0
 8006082:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 f817 	bl	80060ba <UART_WaitOnFlagUntilTimeout>
 800608c:	4603      	mov	r3, r0
 800608e:	2b00      	cmp	r3, #0
 8006090:	d001      	beq.n	8006096 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006092:	2303      	movs	r3, #3
 8006094:	e00d      	b.n	80060b2 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2220      	movs	r2, #32
 800609a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2220      	movs	r2, #32
 80060a0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2200      	movs	r2, #0
 80060ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80060b0:	2300      	movs	r3, #0
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3710      	adds	r7, #16
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}

080060ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80060ba:	b580      	push	{r7, lr}
 80060bc:	b09c      	sub	sp, #112	; 0x70
 80060be:	af00      	add	r7, sp, #0
 80060c0:	60f8      	str	r0, [r7, #12]
 80060c2:	60b9      	str	r1, [r7, #8]
 80060c4:	603b      	str	r3, [r7, #0]
 80060c6:	4613      	mov	r3, r2
 80060c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060ca:	e0a5      	b.n	8006218 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80060ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060d2:	f000 80a1 	beq.w	8006218 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060d6:	f7fb ff79 	bl	8001fcc <HAL_GetTick>
 80060da:	4602      	mov	r2, r0
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	1ad3      	subs	r3, r2, r3
 80060e0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d302      	bcc.n	80060ec <UART_WaitOnFlagUntilTimeout+0x32>
 80060e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d13e      	bne.n	800616a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060f4:	e853 3f00 	ldrex	r3, [r3]
 80060f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80060fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006100:	667b      	str	r3, [r7, #100]	; 0x64
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	461a      	mov	r2, r3
 8006108:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800610a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800610c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800610e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006110:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006112:	e841 2300 	strex	r3, r2, [r1]
 8006116:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006118:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800611a:	2b00      	cmp	r3, #0
 800611c:	d1e6      	bne.n	80060ec <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	3308      	adds	r3, #8
 8006124:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006126:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006128:	e853 3f00 	ldrex	r3, [r3]
 800612c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800612e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006130:	f023 0301 	bic.w	r3, r3, #1
 8006134:	663b      	str	r3, [r7, #96]	; 0x60
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	3308      	adds	r3, #8
 800613c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800613e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006140:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006142:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006144:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006146:	e841 2300 	strex	r3, r2, [r1]
 800614a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800614c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800614e:	2b00      	cmp	r3, #0
 8006150:	d1e5      	bne.n	800611e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2220      	movs	r2, #32
 8006156:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2220      	movs	r2, #32
 800615c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2200      	movs	r2, #0
 8006162:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006166:	2303      	movs	r3, #3
 8006168:	e067      	b.n	800623a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f003 0304 	and.w	r3, r3, #4
 8006174:	2b00      	cmp	r3, #0
 8006176:	d04f      	beq.n	8006218 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	69db      	ldr	r3, [r3, #28]
 800617e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006182:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006186:	d147      	bne.n	8006218 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006190:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800619a:	e853 3f00 	ldrex	r3, [r3]
 800619e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80061a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80061a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	461a      	mov	r2, r3
 80061ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061b0:	637b      	str	r3, [r7, #52]	; 0x34
 80061b2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80061b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061b8:	e841 2300 	strex	r3, r2, [r1]
 80061bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80061be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d1e6      	bne.n	8006192 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	3308      	adds	r3, #8
 80061ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	e853 3f00 	ldrex	r3, [r3]
 80061d2:	613b      	str	r3, [r7, #16]
   return(result);
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	f023 0301 	bic.w	r3, r3, #1
 80061da:	66bb      	str	r3, [r7, #104]	; 0x68
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	3308      	adds	r3, #8
 80061e2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80061e4:	623a      	str	r2, [r7, #32]
 80061e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e8:	69f9      	ldr	r1, [r7, #28]
 80061ea:	6a3a      	ldr	r2, [r7, #32]
 80061ec:	e841 2300 	strex	r3, r2, [r1]
 80061f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80061f2:	69bb      	ldr	r3, [r7, #24]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d1e5      	bne.n	80061c4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2220      	movs	r2, #32
 80061fc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2220      	movs	r2, #32
 8006202:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2220      	movs	r2, #32
 8006208:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2200      	movs	r2, #0
 8006210:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006214:	2303      	movs	r3, #3
 8006216:	e010      	b.n	800623a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	69da      	ldr	r2, [r3, #28]
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	4013      	ands	r3, r2
 8006222:	68ba      	ldr	r2, [r7, #8]
 8006224:	429a      	cmp	r2, r3
 8006226:	bf0c      	ite	eq
 8006228:	2301      	moveq	r3, #1
 800622a:	2300      	movne	r3, #0
 800622c:	b2db      	uxtb	r3, r3
 800622e:	461a      	mov	r2, r3
 8006230:	79fb      	ldrb	r3, [r7, #7]
 8006232:	429a      	cmp	r2, r3
 8006234:	f43f af4a 	beq.w	80060cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006238:	2300      	movs	r3, #0
}
 800623a:	4618      	mov	r0, r3
 800623c:	3770      	adds	r7, #112	; 0x70
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}
	...

08006244 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006244:	b084      	sub	sp, #16
 8006246:	b580      	push	{r7, lr}
 8006248:	b084      	sub	sp, #16
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
 800624e:	f107 001c 	add.w	r0, r7, #28
 8006252:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006258:	2b01      	cmp	r3, #1
 800625a:	d120      	bne.n	800629e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006260:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	68da      	ldr	r2, [r3, #12]
 800626c:	4b20      	ldr	r3, [pc, #128]	; (80062f0 <USB_CoreInit+0xac>)
 800626e:	4013      	ands	r3, r2
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	68db      	ldr	r3, [r3, #12]
 8006278:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006280:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006282:	2b01      	cmp	r3, #1
 8006284:	d105      	bne.n	8006292 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	68db      	ldr	r3, [r3, #12]
 800628a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 fa92 	bl	80067bc <USB_CoreReset>
 8006298:	4603      	mov	r3, r0
 800629a:	73fb      	strb	r3, [r7, #15]
 800629c:	e010      	b.n	80062c0 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	68db      	ldr	r3, [r3, #12]
 80062a2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 fa86 	bl	80067bc <USB_CoreReset>
 80062b0:	4603      	mov	r3, r0
 80062b2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80062c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c2:	2b01      	cmp	r3, #1
 80062c4:	d10b      	bne.n	80062de <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	f043 0206 	orr.w	r2, r3, #6
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	f043 0220 	orr.w	r2, r3, #32
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80062de:	7bfb      	ldrb	r3, [r7, #15]
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3710      	adds	r7, #16
 80062e4:	46bd      	mov	sp, r7
 80062e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80062ea:	b004      	add	sp, #16
 80062ec:	4770      	bx	lr
 80062ee:	bf00      	nop
 80062f0:	ffbdffbf 	.word	0xffbdffbf

080062f4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b083      	sub	sp, #12
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	f023 0201 	bic.w	r2, r3, #1
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006308:	2300      	movs	r3, #0
}
 800630a:	4618      	mov	r0, r3
 800630c:	370c      	adds	r7, #12
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr

08006316 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006316:	b580      	push	{r7, lr}
 8006318:	b084      	sub	sp, #16
 800631a:	af00      	add	r7, sp, #0
 800631c:	6078      	str	r0, [r7, #4]
 800631e:	460b      	mov	r3, r1
 8006320:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006322:	2300      	movs	r3, #0
 8006324:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	68db      	ldr	r3, [r3, #12]
 800632a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006332:	78fb      	ldrb	r3, [r7, #3]
 8006334:	2b01      	cmp	r3, #1
 8006336:	d115      	bne.n	8006364 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006344:	2001      	movs	r0, #1
 8006346:	f7fb fe4d 	bl	8001fe4 <HAL_Delay>
      ms++;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	3301      	adds	r3, #1
 800634e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f000 fa25 	bl	80067a0 <USB_GetMode>
 8006356:	4603      	mov	r3, r0
 8006358:	2b01      	cmp	r3, #1
 800635a:	d01e      	beq.n	800639a <USB_SetCurrentMode+0x84>
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2b31      	cmp	r3, #49	; 0x31
 8006360:	d9f0      	bls.n	8006344 <USB_SetCurrentMode+0x2e>
 8006362:	e01a      	b.n	800639a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006364:	78fb      	ldrb	r3, [r7, #3]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d115      	bne.n	8006396 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	68db      	ldr	r3, [r3, #12]
 800636e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006376:	2001      	movs	r0, #1
 8006378:	f7fb fe34 	bl	8001fe4 <HAL_Delay>
      ms++;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	3301      	adds	r3, #1
 8006380:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f000 fa0c 	bl	80067a0 <USB_GetMode>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d005      	beq.n	800639a <USB_SetCurrentMode+0x84>
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2b31      	cmp	r3, #49	; 0x31
 8006392:	d9f0      	bls.n	8006376 <USB_SetCurrentMode+0x60>
 8006394:	e001      	b.n	800639a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e005      	b.n	80063a6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2b32      	cmp	r3, #50	; 0x32
 800639e:	d101      	bne.n	80063a4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80063a0:	2301      	movs	r3, #1
 80063a2:	e000      	b.n	80063a6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80063a4:	2300      	movs	r3, #0
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3710      	adds	r7, #16
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}
	...

080063b0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80063b0:	b084      	sub	sp, #16
 80063b2:	b580      	push	{r7, lr}
 80063b4:	b086      	sub	sp, #24
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	6078      	str	r0, [r7, #4]
 80063ba:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80063be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80063c2:	2300      	movs	r3, #0
 80063c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80063ca:	2300      	movs	r3, #0
 80063cc:	613b      	str	r3, [r7, #16]
 80063ce:	e009      	b.n	80063e4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	3340      	adds	r3, #64	; 0x40
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	4413      	add	r3, r2
 80063da:	2200      	movs	r2, #0
 80063dc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	3301      	adds	r3, #1
 80063e2:	613b      	str	r3, [r7, #16]
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	2b0e      	cmp	r3, #14
 80063e8:	d9f2      	bls.n	80063d0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80063ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d11c      	bne.n	800642a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	68fa      	ldr	r2, [r7, #12]
 80063fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063fe:	f043 0302 	orr.w	r3, r3, #2
 8006402:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006408:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	601a      	str	r2, [r3, #0]
 8006428:	e005      	b.n	8006436 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800642e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800643c:	461a      	mov	r2, r3
 800643e:	2300      	movs	r3, #0
 8006440:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006448:	4619      	mov	r1, r3
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006450:	461a      	mov	r2, r3
 8006452:	680b      	ldr	r3, [r1, #0]
 8006454:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006458:	2b01      	cmp	r3, #1
 800645a:	d10c      	bne.n	8006476 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800645c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800645e:	2b00      	cmp	r3, #0
 8006460:	d104      	bne.n	800646c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006462:	2100      	movs	r1, #0
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f000 f961 	bl	800672c <USB_SetDevSpeed>
 800646a:	e008      	b.n	800647e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800646c:	2101      	movs	r1, #1
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 f95c 	bl	800672c <USB_SetDevSpeed>
 8006474:	e003      	b.n	800647e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006476:	2103      	movs	r1, #3
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f000 f957 	bl	800672c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800647e:	2110      	movs	r1, #16
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f000 f8f3 	bl	800666c <USB_FlushTxFifo>
 8006486:	4603      	mov	r3, r0
 8006488:	2b00      	cmp	r3, #0
 800648a:	d001      	beq.n	8006490 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800648c:	2301      	movs	r3, #1
 800648e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f000 f91d 	bl	80066d0 <USB_FlushRxFifo>
 8006496:	4603      	mov	r3, r0
 8006498:	2b00      	cmp	r3, #0
 800649a:	d001      	beq.n	80064a0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064a6:	461a      	mov	r2, r3
 80064a8:	2300      	movs	r3, #0
 80064aa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064b2:	461a      	mov	r2, r3
 80064b4:	2300      	movs	r3, #0
 80064b6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064be:	461a      	mov	r2, r3
 80064c0:	2300      	movs	r3, #0
 80064c2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80064c4:	2300      	movs	r3, #0
 80064c6:	613b      	str	r3, [r7, #16]
 80064c8:	e043      	b.n	8006552 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	015a      	lsls	r2, r3, #5
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	4413      	add	r3, r2
 80064d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064e0:	d118      	bne.n	8006514 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d10a      	bne.n	80064fe <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	015a      	lsls	r2, r3, #5
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	4413      	add	r3, r2
 80064f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064f4:	461a      	mov	r2, r3
 80064f6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80064fa:	6013      	str	r3, [r2, #0]
 80064fc:	e013      	b.n	8006526 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	015a      	lsls	r2, r3, #5
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	4413      	add	r3, r2
 8006506:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800650a:	461a      	mov	r2, r3
 800650c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006510:	6013      	str	r3, [r2, #0]
 8006512:	e008      	b.n	8006526 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	015a      	lsls	r2, r3, #5
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	4413      	add	r3, r2
 800651c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006520:	461a      	mov	r2, r3
 8006522:	2300      	movs	r3, #0
 8006524:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	015a      	lsls	r2, r3, #5
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	4413      	add	r3, r2
 800652e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006532:	461a      	mov	r2, r3
 8006534:	2300      	movs	r3, #0
 8006536:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	015a      	lsls	r2, r3, #5
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	4413      	add	r3, r2
 8006540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006544:	461a      	mov	r2, r3
 8006546:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800654a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	3301      	adds	r3, #1
 8006550:	613b      	str	r3, [r7, #16]
 8006552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006554:	693a      	ldr	r2, [r7, #16]
 8006556:	429a      	cmp	r2, r3
 8006558:	d3b7      	bcc.n	80064ca <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800655a:	2300      	movs	r3, #0
 800655c:	613b      	str	r3, [r7, #16]
 800655e:	e043      	b.n	80065e8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	015a      	lsls	r2, r3, #5
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	4413      	add	r3, r2
 8006568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006572:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006576:	d118      	bne.n	80065aa <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d10a      	bne.n	8006594 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	015a      	lsls	r2, r3, #5
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	4413      	add	r3, r2
 8006586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800658a:	461a      	mov	r2, r3
 800658c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006590:	6013      	str	r3, [r2, #0]
 8006592:	e013      	b.n	80065bc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	015a      	lsls	r2, r3, #5
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	4413      	add	r3, r2
 800659c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065a0:	461a      	mov	r2, r3
 80065a2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80065a6:	6013      	str	r3, [r2, #0]
 80065a8:	e008      	b.n	80065bc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	015a      	lsls	r2, r3, #5
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	4413      	add	r3, r2
 80065b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065b6:	461a      	mov	r2, r3
 80065b8:	2300      	movs	r3, #0
 80065ba:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	015a      	lsls	r2, r3, #5
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	4413      	add	r3, r2
 80065c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065c8:	461a      	mov	r2, r3
 80065ca:	2300      	movs	r3, #0
 80065cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	015a      	lsls	r2, r3, #5
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	4413      	add	r3, r2
 80065d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065da:	461a      	mov	r2, r3
 80065dc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80065e0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	3301      	adds	r3, #1
 80065e6:	613b      	str	r3, [r7, #16]
 80065e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ea:	693a      	ldr	r2, [r7, #16]
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d3b7      	bcc.n	8006560 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065f6:	691b      	ldr	r3, [r3, #16]
 80065f8:	68fa      	ldr	r2, [r7, #12]
 80065fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006602:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2200      	movs	r2, #0
 8006608:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006610:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006614:	2b00      	cmp	r3, #0
 8006616:	d105      	bne.n	8006624 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	699b      	ldr	r3, [r3, #24]
 800661c:	f043 0210 	orr.w	r2, r3, #16
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	699a      	ldr	r2, [r3, #24]
 8006628:	4b0e      	ldr	r3, [pc, #56]	; (8006664 <USB_DevInit+0x2b4>)
 800662a:	4313      	orrs	r3, r2
 800662c:	687a      	ldr	r2, [r7, #4]
 800662e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006630:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006632:	2b00      	cmp	r3, #0
 8006634:	d005      	beq.n	8006642 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	699b      	ldr	r3, [r3, #24]
 800663a:	f043 0208 	orr.w	r2, r3, #8
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006642:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006644:	2b01      	cmp	r3, #1
 8006646:	d105      	bne.n	8006654 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	699a      	ldr	r2, [r3, #24]
 800664c:	4b06      	ldr	r3, [pc, #24]	; (8006668 <USB_DevInit+0x2b8>)
 800664e:	4313      	orrs	r3, r2
 8006650:	687a      	ldr	r2, [r7, #4]
 8006652:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006654:	7dfb      	ldrb	r3, [r7, #23]
}
 8006656:	4618      	mov	r0, r3
 8006658:	3718      	adds	r7, #24
 800665a:	46bd      	mov	sp, r7
 800665c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006660:	b004      	add	sp, #16
 8006662:	4770      	bx	lr
 8006664:	803c3800 	.word	0x803c3800
 8006668:	40000004 	.word	0x40000004

0800666c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800666c:	b480      	push	{r7}
 800666e:	b085      	sub	sp, #20
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006676:	2300      	movs	r3, #0
 8006678:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	3301      	adds	r3, #1
 800667e:	60fb      	str	r3, [r7, #12]
 8006680:	4a12      	ldr	r2, [pc, #72]	; (80066cc <USB_FlushTxFifo+0x60>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d901      	bls.n	800668a <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006686:	2303      	movs	r3, #3
 8006688:	e01a      	b.n	80066c0 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	691b      	ldr	r3, [r3, #16]
 800668e:	2b00      	cmp	r3, #0
 8006690:	daf3      	bge.n	800667a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006692:	2300      	movs	r3, #0
 8006694:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	019b      	lsls	r3, r3, #6
 800669a:	f043 0220 	orr.w	r2, r3, #32
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	3301      	adds	r3, #1
 80066a6:	60fb      	str	r3, [r7, #12]
 80066a8:	4a08      	ldr	r2, [pc, #32]	; (80066cc <USB_FlushTxFifo+0x60>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d901      	bls.n	80066b2 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 80066ae:	2303      	movs	r3, #3
 80066b0:	e006      	b.n	80066c0 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	691b      	ldr	r3, [r3, #16]
 80066b6:	f003 0320 	and.w	r3, r3, #32
 80066ba:	2b20      	cmp	r3, #32
 80066bc:	d0f1      	beq.n	80066a2 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 80066be:	2300      	movs	r3, #0
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3714      	adds	r7, #20
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr
 80066cc:	00030d40 	.word	0x00030d40

080066d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b085      	sub	sp, #20
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80066d8:	2300      	movs	r3, #0
 80066da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	3301      	adds	r3, #1
 80066e0:	60fb      	str	r3, [r7, #12]
 80066e2:	4a11      	ldr	r2, [pc, #68]	; (8006728 <USB_FlushRxFifo+0x58>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d901      	bls.n	80066ec <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 80066e8:	2303      	movs	r3, #3
 80066ea:	e017      	b.n	800671c <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	691b      	ldr	r3, [r3, #16]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	daf3      	bge.n	80066dc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80066f4:	2300      	movs	r3, #0
 80066f6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2210      	movs	r2, #16
 80066fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	3301      	adds	r3, #1
 8006702:	60fb      	str	r3, [r7, #12]
 8006704:	4a08      	ldr	r2, [pc, #32]	; (8006728 <USB_FlushRxFifo+0x58>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d901      	bls.n	800670e <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 800670a:	2303      	movs	r3, #3
 800670c:	e006      	b.n	800671c <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	691b      	ldr	r3, [r3, #16]
 8006712:	f003 0310 	and.w	r3, r3, #16
 8006716:	2b10      	cmp	r3, #16
 8006718:	d0f1      	beq.n	80066fe <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 800671a:	2300      	movs	r3, #0
}
 800671c:	4618      	mov	r0, r3
 800671e:	3714      	adds	r7, #20
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr
 8006728:	00030d40 	.word	0x00030d40

0800672c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800672c:	b480      	push	{r7}
 800672e:	b085      	sub	sp, #20
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	460b      	mov	r3, r1
 8006736:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	78fb      	ldrb	r3, [r7, #3]
 8006746:	68f9      	ldr	r1, [r7, #12]
 8006748:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800674c:	4313      	orrs	r3, r2
 800674e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006750:	2300      	movs	r3, #0
}
 8006752:	4618      	mov	r0, r3
 8006754:	3714      	adds	r7, #20
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr

0800675e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800675e:	b480      	push	{r7}
 8006760:	b085      	sub	sp, #20
 8006762:	af00      	add	r7, sp, #0
 8006764:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	68fa      	ldr	r2, [r7, #12]
 8006774:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006778:	f023 0303 	bic.w	r3, r3, #3
 800677c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	68fa      	ldr	r2, [r7, #12]
 8006788:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800678c:	f043 0302 	orr.w	r3, r3, #2
 8006790:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006792:	2300      	movs	r3, #0
}
 8006794:	4618      	mov	r0, r3
 8006796:	3714      	adds	r7, #20
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr

080067a0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b083      	sub	sp, #12
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	695b      	ldr	r3, [r3, #20]
 80067ac:	f003 0301 	and.w	r3, r3, #1
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	370c      	adds	r7, #12
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr

080067bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80067bc:	b480      	push	{r7}
 80067be:	b085      	sub	sp, #20
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80067c4:	2300      	movs	r3, #0
 80067c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	3301      	adds	r3, #1
 80067cc:	60fb      	str	r3, [r7, #12]
 80067ce:	4a13      	ldr	r2, [pc, #76]	; (800681c <USB_CoreReset+0x60>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d901      	bls.n	80067d8 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80067d4:	2303      	movs	r3, #3
 80067d6:	e01a      	b.n	800680e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	691b      	ldr	r3, [r3, #16]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	daf3      	bge.n	80067c8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80067e0:	2300      	movs	r3, #0
 80067e2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	691b      	ldr	r3, [r3, #16]
 80067e8:	f043 0201 	orr.w	r2, r3, #1
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	3301      	adds	r3, #1
 80067f4:	60fb      	str	r3, [r7, #12]
 80067f6:	4a09      	ldr	r2, [pc, #36]	; (800681c <USB_CoreReset+0x60>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d901      	bls.n	8006800 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80067fc:	2303      	movs	r3, #3
 80067fe:	e006      	b.n	800680e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	691b      	ldr	r3, [r3, #16]
 8006804:	f003 0301 	and.w	r3, r3, #1
 8006808:	2b01      	cmp	r3, #1
 800680a:	d0f1      	beq.n	80067f0 <USB_CoreReset+0x34>

  return HAL_OK;
 800680c:	2300      	movs	r3, #0
}
 800680e:	4618      	mov	r0, r3
 8006810:	3714      	adds	r7, #20
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr
 800681a:	bf00      	nop
 800681c:	00030d40 	.word	0x00030d40

08006820 <calloc>:
 8006820:	4b02      	ldr	r3, [pc, #8]	; (800682c <calloc+0xc>)
 8006822:	460a      	mov	r2, r1
 8006824:	4601      	mov	r1, r0
 8006826:	6818      	ldr	r0, [r3, #0]
 8006828:	f000 b83c 	b.w	80068a4 <_calloc_r>
 800682c:	2000000c 	.word	0x2000000c

08006830 <__errno>:
 8006830:	4b01      	ldr	r3, [pc, #4]	; (8006838 <__errno+0x8>)
 8006832:	6818      	ldr	r0, [r3, #0]
 8006834:	4770      	bx	lr
 8006836:	bf00      	nop
 8006838:	2000000c 	.word	0x2000000c

0800683c <__libc_init_array>:
 800683c:	b570      	push	{r4, r5, r6, lr}
 800683e:	4d0d      	ldr	r5, [pc, #52]	; (8006874 <__libc_init_array+0x38>)
 8006840:	4c0d      	ldr	r4, [pc, #52]	; (8006878 <__libc_init_array+0x3c>)
 8006842:	1b64      	subs	r4, r4, r5
 8006844:	10a4      	asrs	r4, r4, #2
 8006846:	2600      	movs	r6, #0
 8006848:	42a6      	cmp	r6, r4
 800684a:	d109      	bne.n	8006860 <__libc_init_array+0x24>
 800684c:	4d0b      	ldr	r5, [pc, #44]	; (800687c <__libc_init_array+0x40>)
 800684e:	4c0c      	ldr	r4, [pc, #48]	; (8006880 <__libc_init_array+0x44>)
 8006850:	f000 fc66 	bl	8007120 <_init>
 8006854:	1b64      	subs	r4, r4, r5
 8006856:	10a4      	asrs	r4, r4, #2
 8006858:	2600      	movs	r6, #0
 800685a:	42a6      	cmp	r6, r4
 800685c:	d105      	bne.n	800686a <__libc_init_array+0x2e>
 800685e:	bd70      	pop	{r4, r5, r6, pc}
 8006860:	f855 3b04 	ldr.w	r3, [r5], #4
 8006864:	4798      	blx	r3
 8006866:	3601      	adds	r6, #1
 8006868:	e7ee      	b.n	8006848 <__libc_init_array+0xc>
 800686a:	f855 3b04 	ldr.w	r3, [r5], #4
 800686e:	4798      	blx	r3
 8006870:	3601      	adds	r6, #1
 8006872:	e7f2      	b.n	800685a <__libc_init_array+0x1e>
 8006874:	08007194 	.word	0x08007194
 8006878:	08007194 	.word	0x08007194
 800687c:	08007194 	.word	0x08007194
 8006880:	08007198 	.word	0x08007198

08006884 <free>:
 8006884:	4b02      	ldr	r3, [pc, #8]	; (8006890 <free+0xc>)
 8006886:	4601      	mov	r1, r0
 8006888:	6818      	ldr	r0, [r3, #0]
 800688a:	f000 b81b 	b.w	80068c4 <_free_r>
 800688e:	bf00      	nop
 8006890:	2000000c 	.word	0x2000000c

08006894 <memset>:
 8006894:	4402      	add	r2, r0
 8006896:	4603      	mov	r3, r0
 8006898:	4293      	cmp	r3, r2
 800689a:	d100      	bne.n	800689e <memset+0xa>
 800689c:	4770      	bx	lr
 800689e:	f803 1b01 	strb.w	r1, [r3], #1
 80068a2:	e7f9      	b.n	8006898 <memset+0x4>

080068a4 <_calloc_r>:
 80068a4:	b513      	push	{r0, r1, r4, lr}
 80068a6:	434a      	muls	r2, r1
 80068a8:	4611      	mov	r1, r2
 80068aa:	9201      	str	r2, [sp, #4]
 80068ac:	f000 f85a 	bl	8006964 <_malloc_r>
 80068b0:	4604      	mov	r4, r0
 80068b2:	b118      	cbz	r0, 80068bc <_calloc_r+0x18>
 80068b4:	9a01      	ldr	r2, [sp, #4]
 80068b6:	2100      	movs	r1, #0
 80068b8:	f7ff ffec 	bl	8006894 <memset>
 80068bc:	4620      	mov	r0, r4
 80068be:	b002      	add	sp, #8
 80068c0:	bd10      	pop	{r4, pc}
	...

080068c4 <_free_r>:
 80068c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80068c6:	2900      	cmp	r1, #0
 80068c8:	d048      	beq.n	800695c <_free_r+0x98>
 80068ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068ce:	9001      	str	r0, [sp, #4]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	f1a1 0404 	sub.w	r4, r1, #4
 80068d6:	bfb8      	it	lt
 80068d8:	18e4      	addlt	r4, r4, r3
 80068da:	f000 f8cd 	bl	8006a78 <__malloc_lock>
 80068de:	4a20      	ldr	r2, [pc, #128]	; (8006960 <_free_r+0x9c>)
 80068e0:	9801      	ldr	r0, [sp, #4]
 80068e2:	6813      	ldr	r3, [r2, #0]
 80068e4:	4615      	mov	r5, r2
 80068e6:	b933      	cbnz	r3, 80068f6 <_free_r+0x32>
 80068e8:	6063      	str	r3, [r4, #4]
 80068ea:	6014      	str	r4, [r2, #0]
 80068ec:	b003      	add	sp, #12
 80068ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80068f2:	f000 b8c7 	b.w	8006a84 <__malloc_unlock>
 80068f6:	42a3      	cmp	r3, r4
 80068f8:	d90b      	bls.n	8006912 <_free_r+0x4e>
 80068fa:	6821      	ldr	r1, [r4, #0]
 80068fc:	1862      	adds	r2, r4, r1
 80068fe:	4293      	cmp	r3, r2
 8006900:	bf04      	itt	eq
 8006902:	681a      	ldreq	r2, [r3, #0]
 8006904:	685b      	ldreq	r3, [r3, #4]
 8006906:	6063      	str	r3, [r4, #4]
 8006908:	bf04      	itt	eq
 800690a:	1852      	addeq	r2, r2, r1
 800690c:	6022      	streq	r2, [r4, #0]
 800690e:	602c      	str	r4, [r5, #0]
 8006910:	e7ec      	b.n	80068ec <_free_r+0x28>
 8006912:	461a      	mov	r2, r3
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	b10b      	cbz	r3, 800691c <_free_r+0x58>
 8006918:	42a3      	cmp	r3, r4
 800691a:	d9fa      	bls.n	8006912 <_free_r+0x4e>
 800691c:	6811      	ldr	r1, [r2, #0]
 800691e:	1855      	adds	r5, r2, r1
 8006920:	42a5      	cmp	r5, r4
 8006922:	d10b      	bne.n	800693c <_free_r+0x78>
 8006924:	6824      	ldr	r4, [r4, #0]
 8006926:	4421      	add	r1, r4
 8006928:	1854      	adds	r4, r2, r1
 800692a:	42a3      	cmp	r3, r4
 800692c:	6011      	str	r1, [r2, #0]
 800692e:	d1dd      	bne.n	80068ec <_free_r+0x28>
 8006930:	681c      	ldr	r4, [r3, #0]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	6053      	str	r3, [r2, #4]
 8006936:	4421      	add	r1, r4
 8006938:	6011      	str	r1, [r2, #0]
 800693a:	e7d7      	b.n	80068ec <_free_r+0x28>
 800693c:	d902      	bls.n	8006944 <_free_r+0x80>
 800693e:	230c      	movs	r3, #12
 8006940:	6003      	str	r3, [r0, #0]
 8006942:	e7d3      	b.n	80068ec <_free_r+0x28>
 8006944:	6825      	ldr	r5, [r4, #0]
 8006946:	1961      	adds	r1, r4, r5
 8006948:	428b      	cmp	r3, r1
 800694a:	bf04      	itt	eq
 800694c:	6819      	ldreq	r1, [r3, #0]
 800694e:	685b      	ldreq	r3, [r3, #4]
 8006950:	6063      	str	r3, [r4, #4]
 8006952:	bf04      	itt	eq
 8006954:	1949      	addeq	r1, r1, r5
 8006956:	6021      	streq	r1, [r4, #0]
 8006958:	6054      	str	r4, [r2, #4]
 800695a:	e7c7      	b.n	80068ec <_free_r+0x28>
 800695c:	b003      	add	sp, #12
 800695e:	bd30      	pop	{r4, r5, pc}
 8006960:	200000f4 	.word	0x200000f4

08006964 <_malloc_r>:
 8006964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006966:	1ccd      	adds	r5, r1, #3
 8006968:	f025 0503 	bic.w	r5, r5, #3
 800696c:	3508      	adds	r5, #8
 800696e:	2d0c      	cmp	r5, #12
 8006970:	bf38      	it	cc
 8006972:	250c      	movcc	r5, #12
 8006974:	2d00      	cmp	r5, #0
 8006976:	4606      	mov	r6, r0
 8006978:	db01      	blt.n	800697e <_malloc_r+0x1a>
 800697a:	42a9      	cmp	r1, r5
 800697c:	d903      	bls.n	8006986 <_malloc_r+0x22>
 800697e:	230c      	movs	r3, #12
 8006980:	6033      	str	r3, [r6, #0]
 8006982:	2000      	movs	r0, #0
 8006984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006986:	f000 f877 	bl	8006a78 <__malloc_lock>
 800698a:	4921      	ldr	r1, [pc, #132]	; (8006a10 <_malloc_r+0xac>)
 800698c:	680a      	ldr	r2, [r1, #0]
 800698e:	4614      	mov	r4, r2
 8006990:	b99c      	cbnz	r4, 80069ba <_malloc_r+0x56>
 8006992:	4f20      	ldr	r7, [pc, #128]	; (8006a14 <_malloc_r+0xb0>)
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	b923      	cbnz	r3, 80069a2 <_malloc_r+0x3e>
 8006998:	4621      	mov	r1, r4
 800699a:	4630      	mov	r0, r6
 800699c:	f000 f83c 	bl	8006a18 <_sbrk_r>
 80069a0:	6038      	str	r0, [r7, #0]
 80069a2:	4629      	mov	r1, r5
 80069a4:	4630      	mov	r0, r6
 80069a6:	f000 f837 	bl	8006a18 <_sbrk_r>
 80069aa:	1c43      	adds	r3, r0, #1
 80069ac:	d123      	bne.n	80069f6 <_malloc_r+0x92>
 80069ae:	230c      	movs	r3, #12
 80069b0:	6033      	str	r3, [r6, #0]
 80069b2:	4630      	mov	r0, r6
 80069b4:	f000 f866 	bl	8006a84 <__malloc_unlock>
 80069b8:	e7e3      	b.n	8006982 <_malloc_r+0x1e>
 80069ba:	6823      	ldr	r3, [r4, #0]
 80069bc:	1b5b      	subs	r3, r3, r5
 80069be:	d417      	bmi.n	80069f0 <_malloc_r+0x8c>
 80069c0:	2b0b      	cmp	r3, #11
 80069c2:	d903      	bls.n	80069cc <_malloc_r+0x68>
 80069c4:	6023      	str	r3, [r4, #0]
 80069c6:	441c      	add	r4, r3
 80069c8:	6025      	str	r5, [r4, #0]
 80069ca:	e004      	b.n	80069d6 <_malloc_r+0x72>
 80069cc:	6863      	ldr	r3, [r4, #4]
 80069ce:	42a2      	cmp	r2, r4
 80069d0:	bf0c      	ite	eq
 80069d2:	600b      	streq	r3, [r1, #0]
 80069d4:	6053      	strne	r3, [r2, #4]
 80069d6:	4630      	mov	r0, r6
 80069d8:	f000 f854 	bl	8006a84 <__malloc_unlock>
 80069dc:	f104 000b 	add.w	r0, r4, #11
 80069e0:	1d23      	adds	r3, r4, #4
 80069e2:	f020 0007 	bic.w	r0, r0, #7
 80069e6:	1ac2      	subs	r2, r0, r3
 80069e8:	d0cc      	beq.n	8006984 <_malloc_r+0x20>
 80069ea:	1a1b      	subs	r3, r3, r0
 80069ec:	50a3      	str	r3, [r4, r2]
 80069ee:	e7c9      	b.n	8006984 <_malloc_r+0x20>
 80069f0:	4622      	mov	r2, r4
 80069f2:	6864      	ldr	r4, [r4, #4]
 80069f4:	e7cc      	b.n	8006990 <_malloc_r+0x2c>
 80069f6:	1cc4      	adds	r4, r0, #3
 80069f8:	f024 0403 	bic.w	r4, r4, #3
 80069fc:	42a0      	cmp	r0, r4
 80069fe:	d0e3      	beq.n	80069c8 <_malloc_r+0x64>
 8006a00:	1a21      	subs	r1, r4, r0
 8006a02:	4630      	mov	r0, r6
 8006a04:	f000 f808 	bl	8006a18 <_sbrk_r>
 8006a08:	3001      	adds	r0, #1
 8006a0a:	d1dd      	bne.n	80069c8 <_malloc_r+0x64>
 8006a0c:	e7cf      	b.n	80069ae <_malloc_r+0x4a>
 8006a0e:	bf00      	nop
 8006a10:	200000f4 	.word	0x200000f4
 8006a14:	200000f8 	.word	0x200000f8

08006a18 <_sbrk_r>:
 8006a18:	b538      	push	{r3, r4, r5, lr}
 8006a1a:	4d06      	ldr	r5, [pc, #24]	; (8006a34 <_sbrk_r+0x1c>)
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	4604      	mov	r4, r0
 8006a20:	4608      	mov	r0, r1
 8006a22:	602b      	str	r3, [r5, #0]
 8006a24:	f7fa fcd8 	bl	80013d8 <_sbrk>
 8006a28:	1c43      	adds	r3, r0, #1
 8006a2a:	d102      	bne.n	8006a32 <_sbrk_r+0x1a>
 8006a2c:	682b      	ldr	r3, [r5, #0]
 8006a2e:	b103      	cbz	r3, 8006a32 <_sbrk_r+0x1a>
 8006a30:	6023      	str	r3, [r4, #0]
 8006a32:	bd38      	pop	{r3, r4, r5, pc}
 8006a34:	20000774 	.word	0x20000774

08006a38 <siprintf>:
 8006a38:	b40e      	push	{r1, r2, r3}
 8006a3a:	b500      	push	{lr}
 8006a3c:	b09c      	sub	sp, #112	; 0x70
 8006a3e:	ab1d      	add	r3, sp, #116	; 0x74
 8006a40:	9002      	str	r0, [sp, #8]
 8006a42:	9006      	str	r0, [sp, #24]
 8006a44:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006a48:	4809      	ldr	r0, [pc, #36]	; (8006a70 <siprintf+0x38>)
 8006a4a:	9107      	str	r1, [sp, #28]
 8006a4c:	9104      	str	r1, [sp, #16]
 8006a4e:	4909      	ldr	r1, [pc, #36]	; (8006a74 <siprintf+0x3c>)
 8006a50:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a54:	9105      	str	r1, [sp, #20]
 8006a56:	6800      	ldr	r0, [r0, #0]
 8006a58:	9301      	str	r3, [sp, #4]
 8006a5a:	a902      	add	r1, sp, #8
 8006a5c:	f000 f874 	bl	8006b48 <_svfiprintf_r>
 8006a60:	9b02      	ldr	r3, [sp, #8]
 8006a62:	2200      	movs	r2, #0
 8006a64:	701a      	strb	r2, [r3, #0]
 8006a66:	b01c      	add	sp, #112	; 0x70
 8006a68:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a6c:	b003      	add	sp, #12
 8006a6e:	4770      	bx	lr
 8006a70:	2000000c 	.word	0x2000000c
 8006a74:	ffff0208 	.word	0xffff0208

08006a78 <__malloc_lock>:
 8006a78:	4801      	ldr	r0, [pc, #4]	; (8006a80 <__malloc_lock+0x8>)
 8006a7a:	f000 baf9 	b.w	8007070 <__retarget_lock_acquire_recursive>
 8006a7e:	bf00      	nop
 8006a80:	2000077c 	.word	0x2000077c

08006a84 <__malloc_unlock>:
 8006a84:	4801      	ldr	r0, [pc, #4]	; (8006a8c <__malloc_unlock+0x8>)
 8006a86:	f000 baf4 	b.w	8007072 <__retarget_lock_release_recursive>
 8006a8a:	bf00      	nop
 8006a8c:	2000077c 	.word	0x2000077c

08006a90 <__ssputs_r>:
 8006a90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a94:	688e      	ldr	r6, [r1, #8]
 8006a96:	429e      	cmp	r6, r3
 8006a98:	4682      	mov	sl, r0
 8006a9a:	460c      	mov	r4, r1
 8006a9c:	4690      	mov	r8, r2
 8006a9e:	461f      	mov	r7, r3
 8006aa0:	d838      	bhi.n	8006b14 <__ssputs_r+0x84>
 8006aa2:	898a      	ldrh	r2, [r1, #12]
 8006aa4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006aa8:	d032      	beq.n	8006b10 <__ssputs_r+0x80>
 8006aaa:	6825      	ldr	r5, [r4, #0]
 8006aac:	6909      	ldr	r1, [r1, #16]
 8006aae:	eba5 0901 	sub.w	r9, r5, r1
 8006ab2:	6965      	ldr	r5, [r4, #20]
 8006ab4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006ab8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006abc:	3301      	adds	r3, #1
 8006abe:	444b      	add	r3, r9
 8006ac0:	106d      	asrs	r5, r5, #1
 8006ac2:	429d      	cmp	r5, r3
 8006ac4:	bf38      	it	cc
 8006ac6:	461d      	movcc	r5, r3
 8006ac8:	0553      	lsls	r3, r2, #21
 8006aca:	d531      	bpl.n	8006b30 <__ssputs_r+0xa0>
 8006acc:	4629      	mov	r1, r5
 8006ace:	f7ff ff49 	bl	8006964 <_malloc_r>
 8006ad2:	4606      	mov	r6, r0
 8006ad4:	b950      	cbnz	r0, 8006aec <__ssputs_r+0x5c>
 8006ad6:	230c      	movs	r3, #12
 8006ad8:	f8ca 3000 	str.w	r3, [sl]
 8006adc:	89a3      	ldrh	r3, [r4, #12]
 8006ade:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ae2:	81a3      	strh	r3, [r4, #12]
 8006ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006aec:	6921      	ldr	r1, [r4, #16]
 8006aee:	464a      	mov	r2, r9
 8006af0:	f000 fac0 	bl	8007074 <memcpy>
 8006af4:	89a3      	ldrh	r3, [r4, #12]
 8006af6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006afa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006afe:	81a3      	strh	r3, [r4, #12]
 8006b00:	6126      	str	r6, [r4, #16]
 8006b02:	6165      	str	r5, [r4, #20]
 8006b04:	444e      	add	r6, r9
 8006b06:	eba5 0509 	sub.w	r5, r5, r9
 8006b0a:	6026      	str	r6, [r4, #0]
 8006b0c:	60a5      	str	r5, [r4, #8]
 8006b0e:	463e      	mov	r6, r7
 8006b10:	42be      	cmp	r6, r7
 8006b12:	d900      	bls.n	8006b16 <__ssputs_r+0x86>
 8006b14:	463e      	mov	r6, r7
 8006b16:	4632      	mov	r2, r6
 8006b18:	6820      	ldr	r0, [r4, #0]
 8006b1a:	4641      	mov	r1, r8
 8006b1c:	f000 fab8 	bl	8007090 <memmove>
 8006b20:	68a3      	ldr	r3, [r4, #8]
 8006b22:	6822      	ldr	r2, [r4, #0]
 8006b24:	1b9b      	subs	r3, r3, r6
 8006b26:	4432      	add	r2, r6
 8006b28:	60a3      	str	r3, [r4, #8]
 8006b2a:	6022      	str	r2, [r4, #0]
 8006b2c:	2000      	movs	r0, #0
 8006b2e:	e7db      	b.n	8006ae8 <__ssputs_r+0x58>
 8006b30:	462a      	mov	r2, r5
 8006b32:	f000 fac7 	bl	80070c4 <_realloc_r>
 8006b36:	4606      	mov	r6, r0
 8006b38:	2800      	cmp	r0, #0
 8006b3a:	d1e1      	bne.n	8006b00 <__ssputs_r+0x70>
 8006b3c:	6921      	ldr	r1, [r4, #16]
 8006b3e:	4650      	mov	r0, sl
 8006b40:	f7ff fec0 	bl	80068c4 <_free_r>
 8006b44:	e7c7      	b.n	8006ad6 <__ssputs_r+0x46>
	...

08006b48 <_svfiprintf_r>:
 8006b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b4c:	4698      	mov	r8, r3
 8006b4e:	898b      	ldrh	r3, [r1, #12]
 8006b50:	061b      	lsls	r3, r3, #24
 8006b52:	b09d      	sub	sp, #116	; 0x74
 8006b54:	4607      	mov	r7, r0
 8006b56:	460d      	mov	r5, r1
 8006b58:	4614      	mov	r4, r2
 8006b5a:	d50e      	bpl.n	8006b7a <_svfiprintf_r+0x32>
 8006b5c:	690b      	ldr	r3, [r1, #16]
 8006b5e:	b963      	cbnz	r3, 8006b7a <_svfiprintf_r+0x32>
 8006b60:	2140      	movs	r1, #64	; 0x40
 8006b62:	f7ff feff 	bl	8006964 <_malloc_r>
 8006b66:	6028      	str	r0, [r5, #0]
 8006b68:	6128      	str	r0, [r5, #16]
 8006b6a:	b920      	cbnz	r0, 8006b76 <_svfiprintf_r+0x2e>
 8006b6c:	230c      	movs	r3, #12
 8006b6e:	603b      	str	r3, [r7, #0]
 8006b70:	f04f 30ff 	mov.w	r0, #4294967295
 8006b74:	e0d1      	b.n	8006d1a <_svfiprintf_r+0x1d2>
 8006b76:	2340      	movs	r3, #64	; 0x40
 8006b78:	616b      	str	r3, [r5, #20]
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	9309      	str	r3, [sp, #36]	; 0x24
 8006b7e:	2320      	movs	r3, #32
 8006b80:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006b84:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b88:	2330      	movs	r3, #48	; 0x30
 8006b8a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006d34 <_svfiprintf_r+0x1ec>
 8006b8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006b92:	f04f 0901 	mov.w	r9, #1
 8006b96:	4623      	mov	r3, r4
 8006b98:	469a      	mov	sl, r3
 8006b9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b9e:	b10a      	cbz	r2, 8006ba4 <_svfiprintf_r+0x5c>
 8006ba0:	2a25      	cmp	r2, #37	; 0x25
 8006ba2:	d1f9      	bne.n	8006b98 <_svfiprintf_r+0x50>
 8006ba4:	ebba 0b04 	subs.w	fp, sl, r4
 8006ba8:	d00b      	beq.n	8006bc2 <_svfiprintf_r+0x7a>
 8006baa:	465b      	mov	r3, fp
 8006bac:	4622      	mov	r2, r4
 8006bae:	4629      	mov	r1, r5
 8006bb0:	4638      	mov	r0, r7
 8006bb2:	f7ff ff6d 	bl	8006a90 <__ssputs_r>
 8006bb6:	3001      	adds	r0, #1
 8006bb8:	f000 80aa 	beq.w	8006d10 <_svfiprintf_r+0x1c8>
 8006bbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006bbe:	445a      	add	r2, fp
 8006bc0:	9209      	str	r2, [sp, #36]	; 0x24
 8006bc2:	f89a 3000 	ldrb.w	r3, [sl]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	f000 80a2 	beq.w	8006d10 <_svfiprintf_r+0x1c8>
 8006bcc:	2300      	movs	r3, #0
 8006bce:	f04f 32ff 	mov.w	r2, #4294967295
 8006bd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006bd6:	f10a 0a01 	add.w	sl, sl, #1
 8006bda:	9304      	str	r3, [sp, #16]
 8006bdc:	9307      	str	r3, [sp, #28]
 8006bde:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006be2:	931a      	str	r3, [sp, #104]	; 0x68
 8006be4:	4654      	mov	r4, sl
 8006be6:	2205      	movs	r2, #5
 8006be8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bec:	4851      	ldr	r0, [pc, #324]	; (8006d34 <_svfiprintf_r+0x1ec>)
 8006bee:	f7f9 fb17 	bl	8000220 <memchr>
 8006bf2:	9a04      	ldr	r2, [sp, #16]
 8006bf4:	b9d8      	cbnz	r0, 8006c2e <_svfiprintf_r+0xe6>
 8006bf6:	06d0      	lsls	r0, r2, #27
 8006bf8:	bf44      	itt	mi
 8006bfa:	2320      	movmi	r3, #32
 8006bfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c00:	0711      	lsls	r1, r2, #28
 8006c02:	bf44      	itt	mi
 8006c04:	232b      	movmi	r3, #43	; 0x2b
 8006c06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c0a:	f89a 3000 	ldrb.w	r3, [sl]
 8006c0e:	2b2a      	cmp	r3, #42	; 0x2a
 8006c10:	d015      	beq.n	8006c3e <_svfiprintf_r+0xf6>
 8006c12:	9a07      	ldr	r2, [sp, #28]
 8006c14:	4654      	mov	r4, sl
 8006c16:	2000      	movs	r0, #0
 8006c18:	f04f 0c0a 	mov.w	ip, #10
 8006c1c:	4621      	mov	r1, r4
 8006c1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c22:	3b30      	subs	r3, #48	; 0x30
 8006c24:	2b09      	cmp	r3, #9
 8006c26:	d94e      	bls.n	8006cc6 <_svfiprintf_r+0x17e>
 8006c28:	b1b0      	cbz	r0, 8006c58 <_svfiprintf_r+0x110>
 8006c2a:	9207      	str	r2, [sp, #28]
 8006c2c:	e014      	b.n	8006c58 <_svfiprintf_r+0x110>
 8006c2e:	eba0 0308 	sub.w	r3, r0, r8
 8006c32:	fa09 f303 	lsl.w	r3, r9, r3
 8006c36:	4313      	orrs	r3, r2
 8006c38:	9304      	str	r3, [sp, #16]
 8006c3a:	46a2      	mov	sl, r4
 8006c3c:	e7d2      	b.n	8006be4 <_svfiprintf_r+0x9c>
 8006c3e:	9b03      	ldr	r3, [sp, #12]
 8006c40:	1d19      	adds	r1, r3, #4
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	9103      	str	r1, [sp, #12]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	bfbb      	ittet	lt
 8006c4a:	425b      	neglt	r3, r3
 8006c4c:	f042 0202 	orrlt.w	r2, r2, #2
 8006c50:	9307      	strge	r3, [sp, #28]
 8006c52:	9307      	strlt	r3, [sp, #28]
 8006c54:	bfb8      	it	lt
 8006c56:	9204      	strlt	r2, [sp, #16]
 8006c58:	7823      	ldrb	r3, [r4, #0]
 8006c5a:	2b2e      	cmp	r3, #46	; 0x2e
 8006c5c:	d10c      	bne.n	8006c78 <_svfiprintf_r+0x130>
 8006c5e:	7863      	ldrb	r3, [r4, #1]
 8006c60:	2b2a      	cmp	r3, #42	; 0x2a
 8006c62:	d135      	bne.n	8006cd0 <_svfiprintf_r+0x188>
 8006c64:	9b03      	ldr	r3, [sp, #12]
 8006c66:	1d1a      	adds	r2, r3, #4
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	9203      	str	r2, [sp, #12]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	bfb8      	it	lt
 8006c70:	f04f 33ff 	movlt.w	r3, #4294967295
 8006c74:	3402      	adds	r4, #2
 8006c76:	9305      	str	r3, [sp, #20]
 8006c78:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006d44 <_svfiprintf_r+0x1fc>
 8006c7c:	7821      	ldrb	r1, [r4, #0]
 8006c7e:	2203      	movs	r2, #3
 8006c80:	4650      	mov	r0, sl
 8006c82:	f7f9 facd 	bl	8000220 <memchr>
 8006c86:	b140      	cbz	r0, 8006c9a <_svfiprintf_r+0x152>
 8006c88:	2340      	movs	r3, #64	; 0x40
 8006c8a:	eba0 000a 	sub.w	r0, r0, sl
 8006c8e:	fa03 f000 	lsl.w	r0, r3, r0
 8006c92:	9b04      	ldr	r3, [sp, #16]
 8006c94:	4303      	orrs	r3, r0
 8006c96:	3401      	adds	r4, #1
 8006c98:	9304      	str	r3, [sp, #16]
 8006c9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c9e:	4826      	ldr	r0, [pc, #152]	; (8006d38 <_svfiprintf_r+0x1f0>)
 8006ca0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006ca4:	2206      	movs	r2, #6
 8006ca6:	f7f9 fabb 	bl	8000220 <memchr>
 8006caa:	2800      	cmp	r0, #0
 8006cac:	d038      	beq.n	8006d20 <_svfiprintf_r+0x1d8>
 8006cae:	4b23      	ldr	r3, [pc, #140]	; (8006d3c <_svfiprintf_r+0x1f4>)
 8006cb0:	bb1b      	cbnz	r3, 8006cfa <_svfiprintf_r+0x1b2>
 8006cb2:	9b03      	ldr	r3, [sp, #12]
 8006cb4:	3307      	adds	r3, #7
 8006cb6:	f023 0307 	bic.w	r3, r3, #7
 8006cba:	3308      	adds	r3, #8
 8006cbc:	9303      	str	r3, [sp, #12]
 8006cbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cc0:	4433      	add	r3, r6
 8006cc2:	9309      	str	r3, [sp, #36]	; 0x24
 8006cc4:	e767      	b.n	8006b96 <_svfiprintf_r+0x4e>
 8006cc6:	fb0c 3202 	mla	r2, ip, r2, r3
 8006cca:	460c      	mov	r4, r1
 8006ccc:	2001      	movs	r0, #1
 8006cce:	e7a5      	b.n	8006c1c <_svfiprintf_r+0xd4>
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	3401      	adds	r4, #1
 8006cd4:	9305      	str	r3, [sp, #20]
 8006cd6:	4619      	mov	r1, r3
 8006cd8:	f04f 0c0a 	mov.w	ip, #10
 8006cdc:	4620      	mov	r0, r4
 8006cde:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ce2:	3a30      	subs	r2, #48	; 0x30
 8006ce4:	2a09      	cmp	r2, #9
 8006ce6:	d903      	bls.n	8006cf0 <_svfiprintf_r+0x1a8>
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d0c5      	beq.n	8006c78 <_svfiprintf_r+0x130>
 8006cec:	9105      	str	r1, [sp, #20]
 8006cee:	e7c3      	b.n	8006c78 <_svfiprintf_r+0x130>
 8006cf0:	fb0c 2101 	mla	r1, ip, r1, r2
 8006cf4:	4604      	mov	r4, r0
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	e7f0      	b.n	8006cdc <_svfiprintf_r+0x194>
 8006cfa:	ab03      	add	r3, sp, #12
 8006cfc:	9300      	str	r3, [sp, #0]
 8006cfe:	462a      	mov	r2, r5
 8006d00:	4b0f      	ldr	r3, [pc, #60]	; (8006d40 <_svfiprintf_r+0x1f8>)
 8006d02:	a904      	add	r1, sp, #16
 8006d04:	4638      	mov	r0, r7
 8006d06:	f3af 8000 	nop.w
 8006d0a:	1c42      	adds	r2, r0, #1
 8006d0c:	4606      	mov	r6, r0
 8006d0e:	d1d6      	bne.n	8006cbe <_svfiprintf_r+0x176>
 8006d10:	89ab      	ldrh	r3, [r5, #12]
 8006d12:	065b      	lsls	r3, r3, #25
 8006d14:	f53f af2c 	bmi.w	8006b70 <_svfiprintf_r+0x28>
 8006d18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d1a:	b01d      	add	sp, #116	; 0x74
 8006d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d20:	ab03      	add	r3, sp, #12
 8006d22:	9300      	str	r3, [sp, #0]
 8006d24:	462a      	mov	r2, r5
 8006d26:	4b06      	ldr	r3, [pc, #24]	; (8006d40 <_svfiprintf_r+0x1f8>)
 8006d28:	a904      	add	r1, sp, #16
 8006d2a:	4638      	mov	r0, r7
 8006d2c:	f000 f87a 	bl	8006e24 <_printf_i>
 8006d30:	e7eb      	b.n	8006d0a <_svfiprintf_r+0x1c2>
 8006d32:	bf00      	nop
 8006d34:	08007158 	.word	0x08007158
 8006d38:	08007162 	.word	0x08007162
 8006d3c:	00000000 	.word	0x00000000
 8006d40:	08006a91 	.word	0x08006a91
 8006d44:	0800715e 	.word	0x0800715e

08006d48 <_printf_common>:
 8006d48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d4c:	4616      	mov	r6, r2
 8006d4e:	4699      	mov	r9, r3
 8006d50:	688a      	ldr	r2, [r1, #8]
 8006d52:	690b      	ldr	r3, [r1, #16]
 8006d54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	bfb8      	it	lt
 8006d5c:	4613      	movlt	r3, r2
 8006d5e:	6033      	str	r3, [r6, #0]
 8006d60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006d64:	4607      	mov	r7, r0
 8006d66:	460c      	mov	r4, r1
 8006d68:	b10a      	cbz	r2, 8006d6e <_printf_common+0x26>
 8006d6a:	3301      	adds	r3, #1
 8006d6c:	6033      	str	r3, [r6, #0]
 8006d6e:	6823      	ldr	r3, [r4, #0]
 8006d70:	0699      	lsls	r1, r3, #26
 8006d72:	bf42      	ittt	mi
 8006d74:	6833      	ldrmi	r3, [r6, #0]
 8006d76:	3302      	addmi	r3, #2
 8006d78:	6033      	strmi	r3, [r6, #0]
 8006d7a:	6825      	ldr	r5, [r4, #0]
 8006d7c:	f015 0506 	ands.w	r5, r5, #6
 8006d80:	d106      	bne.n	8006d90 <_printf_common+0x48>
 8006d82:	f104 0a19 	add.w	sl, r4, #25
 8006d86:	68e3      	ldr	r3, [r4, #12]
 8006d88:	6832      	ldr	r2, [r6, #0]
 8006d8a:	1a9b      	subs	r3, r3, r2
 8006d8c:	42ab      	cmp	r3, r5
 8006d8e:	dc26      	bgt.n	8006dde <_printf_common+0x96>
 8006d90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006d94:	1e13      	subs	r3, r2, #0
 8006d96:	6822      	ldr	r2, [r4, #0]
 8006d98:	bf18      	it	ne
 8006d9a:	2301      	movne	r3, #1
 8006d9c:	0692      	lsls	r2, r2, #26
 8006d9e:	d42b      	bmi.n	8006df8 <_printf_common+0xb0>
 8006da0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006da4:	4649      	mov	r1, r9
 8006da6:	4638      	mov	r0, r7
 8006da8:	47c0      	blx	r8
 8006daa:	3001      	adds	r0, #1
 8006dac:	d01e      	beq.n	8006dec <_printf_common+0xa4>
 8006dae:	6823      	ldr	r3, [r4, #0]
 8006db0:	68e5      	ldr	r5, [r4, #12]
 8006db2:	6832      	ldr	r2, [r6, #0]
 8006db4:	f003 0306 	and.w	r3, r3, #6
 8006db8:	2b04      	cmp	r3, #4
 8006dba:	bf08      	it	eq
 8006dbc:	1aad      	subeq	r5, r5, r2
 8006dbe:	68a3      	ldr	r3, [r4, #8]
 8006dc0:	6922      	ldr	r2, [r4, #16]
 8006dc2:	bf0c      	ite	eq
 8006dc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006dc8:	2500      	movne	r5, #0
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	bfc4      	itt	gt
 8006dce:	1a9b      	subgt	r3, r3, r2
 8006dd0:	18ed      	addgt	r5, r5, r3
 8006dd2:	2600      	movs	r6, #0
 8006dd4:	341a      	adds	r4, #26
 8006dd6:	42b5      	cmp	r5, r6
 8006dd8:	d11a      	bne.n	8006e10 <_printf_common+0xc8>
 8006dda:	2000      	movs	r0, #0
 8006ddc:	e008      	b.n	8006df0 <_printf_common+0xa8>
 8006dde:	2301      	movs	r3, #1
 8006de0:	4652      	mov	r2, sl
 8006de2:	4649      	mov	r1, r9
 8006de4:	4638      	mov	r0, r7
 8006de6:	47c0      	blx	r8
 8006de8:	3001      	adds	r0, #1
 8006dea:	d103      	bne.n	8006df4 <_printf_common+0xac>
 8006dec:	f04f 30ff 	mov.w	r0, #4294967295
 8006df0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006df4:	3501      	adds	r5, #1
 8006df6:	e7c6      	b.n	8006d86 <_printf_common+0x3e>
 8006df8:	18e1      	adds	r1, r4, r3
 8006dfa:	1c5a      	adds	r2, r3, #1
 8006dfc:	2030      	movs	r0, #48	; 0x30
 8006dfe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006e02:	4422      	add	r2, r4
 8006e04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006e08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006e0c:	3302      	adds	r3, #2
 8006e0e:	e7c7      	b.n	8006da0 <_printf_common+0x58>
 8006e10:	2301      	movs	r3, #1
 8006e12:	4622      	mov	r2, r4
 8006e14:	4649      	mov	r1, r9
 8006e16:	4638      	mov	r0, r7
 8006e18:	47c0      	blx	r8
 8006e1a:	3001      	adds	r0, #1
 8006e1c:	d0e6      	beq.n	8006dec <_printf_common+0xa4>
 8006e1e:	3601      	adds	r6, #1
 8006e20:	e7d9      	b.n	8006dd6 <_printf_common+0x8e>
	...

08006e24 <_printf_i>:
 8006e24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e28:	460c      	mov	r4, r1
 8006e2a:	4691      	mov	r9, r2
 8006e2c:	7e27      	ldrb	r7, [r4, #24]
 8006e2e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006e30:	2f78      	cmp	r7, #120	; 0x78
 8006e32:	4680      	mov	r8, r0
 8006e34:	469a      	mov	sl, r3
 8006e36:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e3a:	d807      	bhi.n	8006e4c <_printf_i+0x28>
 8006e3c:	2f62      	cmp	r7, #98	; 0x62
 8006e3e:	d80a      	bhi.n	8006e56 <_printf_i+0x32>
 8006e40:	2f00      	cmp	r7, #0
 8006e42:	f000 80d8 	beq.w	8006ff6 <_printf_i+0x1d2>
 8006e46:	2f58      	cmp	r7, #88	; 0x58
 8006e48:	f000 80a3 	beq.w	8006f92 <_printf_i+0x16e>
 8006e4c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006e50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006e54:	e03a      	b.n	8006ecc <_printf_i+0xa8>
 8006e56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006e5a:	2b15      	cmp	r3, #21
 8006e5c:	d8f6      	bhi.n	8006e4c <_printf_i+0x28>
 8006e5e:	a001      	add	r0, pc, #4	; (adr r0, 8006e64 <_printf_i+0x40>)
 8006e60:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006e64:	08006ebd 	.word	0x08006ebd
 8006e68:	08006ed1 	.word	0x08006ed1
 8006e6c:	08006e4d 	.word	0x08006e4d
 8006e70:	08006e4d 	.word	0x08006e4d
 8006e74:	08006e4d 	.word	0x08006e4d
 8006e78:	08006e4d 	.word	0x08006e4d
 8006e7c:	08006ed1 	.word	0x08006ed1
 8006e80:	08006e4d 	.word	0x08006e4d
 8006e84:	08006e4d 	.word	0x08006e4d
 8006e88:	08006e4d 	.word	0x08006e4d
 8006e8c:	08006e4d 	.word	0x08006e4d
 8006e90:	08006fdd 	.word	0x08006fdd
 8006e94:	08006f01 	.word	0x08006f01
 8006e98:	08006fbf 	.word	0x08006fbf
 8006e9c:	08006e4d 	.word	0x08006e4d
 8006ea0:	08006e4d 	.word	0x08006e4d
 8006ea4:	08006fff 	.word	0x08006fff
 8006ea8:	08006e4d 	.word	0x08006e4d
 8006eac:	08006f01 	.word	0x08006f01
 8006eb0:	08006e4d 	.word	0x08006e4d
 8006eb4:	08006e4d 	.word	0x08006e4d
 8006eb8:	08006fc7 	.word	0x08006fc7
 8006ebc:	680b      	ldr	r3, [r1, #0]
 8006ebe:	1d1a      	adds	r2, r3, #4
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	600a      	str	r2, [r1, #0]
 8006ec4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006ec8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ecc:	2301      	movs	r3, #1
 8006ece:	e0a3      	b.n	8007018 <_printf_i+0x1f4>
 8006ed0:	6825      	ldr	r5, [r4, #0]
 8006ed2:	6808      	ldr	r0, [r1, #0]
 8006ed4:	062e      	lsls	r6, r5, #24
 8006ed6:	f100 0304 	add.w	r3, r0, #4
 8006eda:	d50a      	bpl.n	8006ef2 <_printf_i+0xce>
 8006edc:	6805      	ldr	r5, [r0, #0]
 8006ede:	600b      	str	r3, [r1, #0]
 8006ee0:	2d00      	cmp	r5, #0
 8006ee2:	da03      	bge.n	8006eec <_printf_i+0xc8>
 8006ee4:	232d      	movs	r3, #45	; 0x2d
 8006ee6:	426d      	negs	r5, r5
 8006ee8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006eec:	485e      	ldr	r0, [pc, #376]	; (8007068 <_printf_i+0x244>)
 8006eee:	230a      	movs	r3, #10
 8006ef0:	e019      	b.n	8006f26 <_printf_i+0x102>
 8006ef2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006ef6:	6805      	ldr	r5, [r0, #0]
 8006ef8:	600b      	str	r3, [r1, #0]
 8006efa:	bf18      	it	ne
 8006efc:	b22d      	sxthne	r5, r5
 8006efe:	e7ef      	b.n	8006ee0 <_printf_i+0xbc>
 8006f00:	680b      	ldr	r3, [r1, #0]
 8006f02:	6825      	ldr	r5, [r4, #0]
 8006f04:	1d18      	adds	r0, r3, #4
 8006f06:	6008      	str	r0, [r1, #0]
 8006f08:	0628      	lsls	r0, r5, #24
 8006f0a:	d501      	bpl.n	8006f10 <_printf_i+0xec>
 8006f0c:	681d      	ldr	r5, [r3, #0]
 8006f0e:	e002      	b.n	8006f16 <_printf_i+0xf2>
 8006f10:	0669      	lsls	r1, r5, #25
 8006f12:	d5fb      	bpl.n	8006f0c <_printf_i+0xe8>
 8006f14:	881d      	ldrh	r5, [r3, #0]
 8006f16:	4854      	ldr	r0, [pc, #336]	; (8007068 <_printf_i+0x244>)
 8006f18:	2f6f      	cmp	r7, #111	; 0x6f
 8006f1a:	bf0c      	ite	eq
 8006f1c:	2308      	moveq	r3, #8
 8006f1e:	230a      	movne	r3, #10
 8006f20:	2100      	movs	r1, #0
 8006f22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006f26:	6866      	ldr	r6, [r4, #4]
 8006f28:	60a6      	str	r6, [r4, #8]
 8006f2a:	2e00      	cmp	r6, #0
 8006f2c:	bfa2      	ittt	ge
 8006f2e:	6821      	ldrge	r1, [r4, #0]
 8006f30:	f021 0104 	bicge.w	r1, r1, #4
 8006f34:	6021      	strge	r1, [r4, #0]
 8006f36:	b90d      	cbnz	r5, 8006f3c <_printf_i+0x118>
 8006f38:	2e00      	cmp	r6, #0
 8006f3a:	d04d      	beq.n	8006fd8 <_printf_i+0x1b4>
 8006f3c:	4616      	mov	r6, r2
 8006f3e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006f42:	fb03 5711 	mls	r7, r3, r1, r5
 8006f46:	5dc7      	ldrb	r7, [r0, r7]
 8006f48:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006f4c:	462f      	mov	r7, r5
 8006f4e:	42bb      	cmp	r3, r7
 8006f50:	460d      	mov	r5, r1
 8006f52:	d9f4      	bls.n	8006f3e <_printf_i+0x11a>
 8006f54:	2b08      	cmp	r3, #8
 8006f56:	d10b      	bne.n	8006f70 <_printf_i+0x14c>
 8006f58:	6823      	ldr	r3, [r4, #0]
 8006f5a:	07df      	lsls	r7, r3, #31
 8006f5c:	d508      	bpl.n	8006f70 <_printf_i+0x14c>
 8006f5e:	6923      	ldr	r3, [r4, #16]
 8006f60:	6861      	ldr	r1, [r4, #4]
 8006f62:	4299      	cmp	r1, r3
 8006f64:	bfde      	ittt	le
 8006f66:	2330      	movle	r3, #48	; 0x30
 8006f68:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006f6c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006f70:	1b92      	subs	r2, r2, r6
 8006f72:	6122      	str	r2, [r4, #16]
 8006f74:	f8cd a000 	str.w	sl, [sp]
 8006f78:	464b      	mov	r3, r9
 8006f7a:	aa03      	add	r2, sp, #12
 8006f7c:	4621      	mov	r1, r4
 8006f7e:	4640      	mov	r0, r8
 8006f80:	f7ff fee2 	bl	8006d48 <_printf_common>
 8006f84:	3001      	adds	r0, #1
 8006f86:	d14c      	bne.n	8007022 <_printf_i+0x1fe>
 8006f88:	f04f 30ff 	mov.w	r0, #4294967295
 8006f8c:	b004      	add	sp, #16
 8006f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f92:	4835      	ldr	r0, [pc, #212]	; (8007068 <_printf_i+0x244>)
 8006f94:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006f98:	6823      	ldr	r3, [r4, #0]
 8006f9a:	680e      	ldr	r6, [r1, #0]
 8006f9c:	061f      	lsls	r7, r3, #24
 8006f9e:	f856 5b04 	ldr.w	r5, [r6], #4
 8006fa2:	600e      	str	r6, [r1, #0]
 8006fa4:	d514      	bpl.n	8006fd0 <_printf_i+0x1ac>
 8006fa6:	07d9      	lsls	r1, r3, #31
 8006fa8:	bf44      	itt	mi
 8006faa:	f043 0320 	orrmi.w	r3, r3, #32
 8006fae:	6023      	strmi	r3, [r4, #0]
 8006fb0:	b91d      	cbnz	r5, 8006fba <_printf_i+0x196>
 8006fb2:	6823      	ldr	r3, [r4, #0]
 8006fb4:	f023 0320 	bic.w	r3, r3, #32
 8006fb8:	6023      	str	r3, [r4, #0]
 8006fba:	2310      	movs	r3, #16
 8006fbc:	e7b0      	b.n	8006f20 <_printf_i+0xfc>
 8006fbe:	6823      	ldr	r3, [r4, #0]
 8006fc0:	f043 0320 	orr.w	r3, r3, #32
 8006fc4:	6023      	str	r3, [r4, #0]
 8006fc6:	2378      	movs	r3, #120	; 0x78
 8006fc8:	4828      	ldr	r0, [pc, #160]	; (800706c <_printf_i+0x248>)
 8006fca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006fce:	e7e3      	b.n	8006f98 <_printf_i+0x174>
 8006fd0:	065e      	lsls	r6, r3, #25
 8006fd2:	bf48      	it	mi
 8006fd4:	b2ad      	uxthmi	r5, r5
 8006fd6:	e7e6      	b.n	8006fa6 <_printf_i+0x182>
 8006fd8:	4616      	mov	r6, r2
 8006fda:	e7bb      	b.n	8006f54 <_printf_i+0x130>
 8006fdc:	680b      	ldr	r3, [r1, #0]
 8006fde:	6826      	ldr	r6, [r4, #0]
 8006fe0:	6960      	ldr	r0, [r4, #20]
 8006fe2:	1d1d      	adds	r5, r3, #4
 8006fe4:	600d      	str	r5, [r1, #0]
 8006fe6:	0635      	lsls	r5, r6, #24
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	d501      	bpl.n	8006ff0 <_printf_i+0x1cc>
 8006fec:	6018      	str	r0, [r3, #0]
 8006fee:	e002      	b.n	8006ff6 <_printf_i+0x1d2>
 8006ff0:	0671      	lsls	r1, r6, #25
 8006ff2:	d5fb      	bpl.n	8006fec <_printf_i+0x1c8>
 8006ff4:	8018      	strh	r0, [r3, #0]
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	6123      	str	r3, [r4, #16]
 8006ffa:	4616      	mov	r6, r2
 8006ffc:	e7ba      	b.n	8006f74 <_printf_i+0x150>
 8006ffe:	680b      	ldr	r3, [r1, #0]
 8007000:	1d1a      	adds	r2, r3, #4
 8007002:	600a      	str	r2, [r1, #0]
 8007004:	681e      	ldr	r6, [r3, #0]
 8007006:	6862      	ldr	r2, [r4, #4]
 8007008:	2100      	movs	r1, #0
 800700a:	4630      	mov	r0, r6
 800700c:	f7f9 f908 	bl	8000220 <memchr>
 8007010:	b108      	cbz	r0, 8007016 <_printf_i+0x1f2>
 8007012:	1b80      	subs	r0, r0, r6
 8007014:	6060      	str	r0, [r4, #4]
 8007016:	6863      	ldr	r3, [r4, #4]
 8007018:	6123      	str	r3, [r4, #16]
 800701a:	2300      	movs	r3, #0
 800701c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007020:	e7a8      	b.n	8006f74 <_printf_i+0x150>
 8007022:	6923      	ldr	r3, [r4, #16]
 8007024:	4632      	mov	r2, r6
 8007026:	4649      	mov	r1, r9
 8007028:	4640      	mov	r0, r8
 800702a:	47d0      	blx	sl
 800702c:	3001      	adds	r0, #1
 800702e:	d0ab      	beq.n	8006f88 <_printf_i+0x164>
 8007030:	6823      	ldr	r3, [r4, #0]
 8007032:	079b      	lsls	r3, r3, #30
 8007034:	d413      	bmi.n	800705e <_printf_i+0x23a>
 8007036:	68e0      	ldr	r0, [r4, #12]
 8007038:	9b03      	ldr	r3, [sp, #12]
 800703a:	4298      	cmp	r0, r3
 800703c:	bfb8      	it	lt
 800703e:	4618      	movlt	r0, r3
 8007040:	e7a4      	b.n	8006f8c <_printf_i+0x168>
 8007042:	2301      	movs	r3, #1
 8007044:	4632      	mov	r2, r6
 8007046:	4649      	mov	r1, r9
 8007048:	4640      	mov	r0, r8
 800704a:	47d0      	blx	sl
 800704c:	3001      	adds	r0, #1
 800704e:	d09b      	beq.n	8006f88 <_printf_i+0x164>
 8007050:	3501      	adds	r5, #1
 8007052:	68e3      	ldr	r3, [r4, #12]
 8007054:	9903      	ldr	r1, [sp, #12]
 8007056:	1a5b      	subs	r3, r3, r1
 8007058:	42ab      	cmp	r3, r5
 800705a:	dcf2      	bgt.n	8007042 <_printf_i+0x21e>
 800705c:	e7eb      	b.n	8007036 <_printf_i+0x212>
 800705e:	2500      	movs	r5, #0
 8007060:	f104 0619 	add.w	r6, r4, #25
 8007064:	e7f5      	b.n	8007052 <_printf_i+0x22e>
 8007066:	bf00      	nop
 8007068:	08007169 	.word	0x08007169
 800706c:	0800717a 	.word	0x0800717a

08007070 <__retarget_lock_acquire_recursive>:
 8007070:	4770      	bx	lr

08007072 <__retarget_lock_release_recursive>:
 8007072:	4770      	bx	lr

08007074 <memcpy>:
 8007074:	440a      	add	r2, r1
 8007076:	4291      	cmp	r1, r2
 8007078:	f100 33ff 	add.w	r3, r0, #4294967295
 800707c:	d100      	bne.n	8007080 <memcpy+0xc>
 800707e:	4770      	bx	lr
 8007080:	b510      	push	{r4, lr}
 8007082:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007086:	f803 4f01 	strb.w	r4, [r3, #1]!
 800708a:	4291      	cmp	r1, r2
 800708c:	d1f9      	bne.n	8007082 <memcpy+0xe>
 800708e:	bd10      	pop	{r4, pc}

08007090 <memmove>:
 8007090:	4288      	cmp	r0, r1
 8007092:	b510      	push	{r4, lr}
 8007094:	eb01 0402 	add.w	r4, r1, r2
 8007098:	d902      	bls.n	80070a0 <memmove+0x10>
 800709a:	4284      	cmp	r4, r0
 800709c:	4623      	mov	r3, r4
 800709e:	d807      	bhi.n	80070b0 <memmove+0x20>
 80070a0:	1e43      	subs	r3, r0, #1
 80070a2:	42a1      	cmp	r1, r4
 80070a4:	d008      	beq.n	80070b8 <memmove+0x28>
 80070a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80070aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80070ae:	e7f8      	b.n	80070a2 <memmove+0x12>
 80070b0:	4402      	add	r2, r0
 80070b2:	4601      	mov	r1, r0
 80070b4:	428a      	cmp	r2, r1
 80070b6:	d100      	bne.n	80070ba <memmove+0x2a>
 80070b8:	bd10      	pop	{r4, pc}
 80070ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80070be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80070c2:	e7f7      	b.n	80070b4 <memmove+0x24>

080070c4 <_realloc_r>:
 80070c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070c6:	4607      	mov	r7, r0
 80070c8:	4614      	mov	r4, r2
 80070ca:	460e      	mov	r6, r1
 80070cc:	b921      	cbnz	r1, 80070d8 <_realloc_r+0x14>
 80070ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80070d2:	4611      	mov	r1, r2
 80070d4:	f7ff bc46 	b.w	8006964 <_malloc_r>
 80070d8:	b922      	cbnz	r2, 80070e4 <_realloc_r+0x20>
 80070da:	f7ff fbf3 	bl	80068c4 <_free_r>
 80070de:	4625      	mov	r5, r4
 80070e0:	4628      	mov	r0, r5
 80070e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070e4:	f000 f814 	bl	8007110 <_malloc_usable_size_r>
 80070e8:	42a0      	cmp	r0, r4
 80070ea:	d20f      	bcs.n	800710c <_realloc_r+0x48>
 80070ec:	4621      	mov	r1, r4
 80070ee:	4638      	mov	r0, r7
 80070f0:	f7ff fc38 	bl	8006964 <_malloc_r>
 80070f4:	4605      	mov	r5, r0
 80070f6:	2800      	cmp	r0, #0
 80070f8:	d0f2      	beq.n	80070e0 <_realloc_r+0x1c>
 80070fa:	4631      	mov	r1, r6
 80070fc:	4622      	mov	r2, r4
 80070fe:	f7ff ffb9 	bl	8007074 <memcpy>
 8007102:	4631      	mov	r1, r6
 8007104:	4638      	mov	r0, r7
 8007106:	f7ff fbdd 	bl	80068c4 <_free_r>
 800710a:	e7e9      	b.n	80070e0 <_realloc_r+0x1c>
 800710c:	4635      	mov	r5, r6
 800710e:	e7e7      	b.n	80070e0 <_realloc_r+0x1c>

08007110 <_malloc_usable_size_r>:
 8007110:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007114:	1f18      	subs	r0, r3, #4
 8007116:	2b00      	cmp	r3, #0
 8007118:	bfbc      	itt	lt
 800711a:	580b      	ldrlt	r3, [r1, r0]
 800711c:	18c0      	addlt	r0, r0, r3
 800711e:	4770      	bx	lr

08007120 <_init>:
 8007120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007122:	bf00      	nop
 8007124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007126:	bc08      	pop	{r3}
 8007128:	469e      	mov	lr, r3
 800712a:	4770      	bx	lr

0800712c <_fini>:
 800712c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800712e:	bf00      	nop
 8007130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007132:	bc08      	pop	{r3}
 8007134:	469e      	mov	lr, r3
 8007136:	4770      	bx	lr
