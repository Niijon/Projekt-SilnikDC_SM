
Projekt_Cube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a8c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08006c5c  08006c5c  00016c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006cb0  08006cb0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006cb0  08006cb0  00016cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006cb8  08006cb8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006cb8  08006cb8  00016cb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006cbc  08006cbc  00016cbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006cc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001de0  20000070  08006d30  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001e50  08006d30  00021e50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019211  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000314f  00000000  00000000  000392b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e0  00000000  00000000  0003c400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001088  00000000  00000000  0003d5e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027a9e  00000000  00000000  0003e668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000177ce  00000000  00000000  00066106  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f852d  00000000  00000000  0007d8d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00175e01  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fe0  00000000  00000000  00175e54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006c44 	.word	0x08006c44

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08006c44 	.word	0x08006c44

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_uldivmod>:
 8000adc:	b953      	cbnz	r3, 8000af4 <__aeabi_uldivmod+0x18>
 8000ade:	b94a      	cbnz	r2, 8000af4 <__aeabi_uldivmod+0x18>
 8000ae0:	2900      	cmp	r1, #0
 8000ae2:	bf08      	it	eq
 8000ae4:	2800      	cmpeq	r0, #0
 8000ae6:	bf1c      	itt	ne
 8000ae8:	f04f 31ff 	movne.w	r1, #4294967295
 8000aec:	f04f 30ff 	movne.w	r0, #4294967295
 8000af0:	f000 b96e 	b.w	8000dd0 <__aeabi_idiv0>
 8000af4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000af8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000afc:	f000 f806 	bl	8000b0c <__udivmoddi4>
 8000b00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b08:	b004      	add	sp, #16
 8000b0a:	4770      	bx	lr

08000b0c <__udivmoddi4>:
 8000b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b10:	9d08      	ldr	r5, [sp, #32]
 8000b12:	4604      	mov	r4, r0
 8000b14:	468c      	mov	ip, r1
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	f040 8083 	bne.w	8000c22 <__udivmoddi4+0x116>
 8000b1c:	428a      	cmp	r2, r1
 8000b1e:	4617      	mov	r7, r2
 8000b20:	d947      	bls.n	8000bb2 <__udivmoddi4+0xa6>
 8000b22:	fab2 f282 	clz	r2, r2
 8000b26:	b142      	cbz	r2, 8000b3a <__udivmoddi4+0x2e>
 8000b28:	f1c2 0020 	rsb	r0, r2, #32
 8000b2c:	fa24 f000 	lsr.w	r0, r4, r0
 8000b30:	4091      	lsls	r1, r2
 8000b32:	4097      	lsls	r7, r2
 8000b34:	ea40 0c01 	orr.w	ip, r0, r1
 8000b38:	4094      	lsls	r4, r2
 8000b3a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b3e:	0c23      	lsrs	r3, r4, #16
 8000b40:	fbbc f6f8 	udiv	r6, ip, r8
 8000b44:	fa1f fe87 	uxth.w	lr, r7
 8000b48:	fb08 c116 	mls	r1, r8, r6, ip
 8000b4c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b50:	fb06 f10e 	mul.w	r1, r6, lr
 8000b54:	4299      	cmp	r1, r3
 8000b56:	d909      	bls.n	8000b6c <__udivmoddi4+0x60>
 8000b58:	18fb      	adds	r3, r7, r3
 8000b5a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b5e:	f080 8119 	bcs.w	8000d94 <__udivmoddi4+0x288>
 8000b62:	4299      	cmp	r1, r3
 8000b64:	f240 8116 	bls.w	8000d94 <__udivmoddi4+0x288>
 8000b68:	3e02      	subs	r6, #2
 8000b6a:	443b      	add	r3, r7
 8000b6c:	1a5b      	subs	r3, r3, r1
 8000b6e:	b2a4      	uxth	r4, r4
 8000b70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b74:	fb08 3310 	mls	r3, r8, r0, r3
 8000b78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b7c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b80:	45a6      	cmp	lr, r4
 8000b82:	d909      	bls.n	8000b98 <__udivmoddi4+0x8c>
 8000b84:	193c      	adds	r4, r7, r4
 8000b86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b8a:	f080 8105 	bcs.w	8000d98 <__udivmoddi4+0x28c>
 8000b8e:	45a6      	cmp	lr, r4
 8000b90:	f240 8102 	bls.w	8000d98 <__udivmoddi4+0x28c>
 8000b94:	3802      	subs	r0, #2
 8000b96:	443c      	add	r4, r7
 8000b98:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b9c:	eba4 040e 	sub.w	r4, r4, lr
 8000ba0:	2600      	movs	r6, #0
 8000ba2:	b11d      	cbz	r5, 8000bac <__udivmoddi4+0xa0>
 8000ba4:	40d4      	lsrs	r4, r2
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	e9c5 4300 	strd	r4, r3, [r5]
 8000bac:	4631      	mov	r1, r6
 8000bae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb2:	b902      	cbnz	r2, 8000bb6 <__udivmoddi4+0xaa>
 8000bb4:	deff      	udf	#255	; 0xff
 8000bb6:	fab2 f282 	clz	r2, r2
 8000bba:	2a00      	cmp	r2, #0
 8000bbc:	d150      	bne.n	8000c60 <__udivmoddi4+0x154>
 8000bbe:	1bcb      	subs	r3, r1, r7
 8000bc0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bc4:	fa1f f887 	uxth.w	r8, r7
 8000bc8:	2601      	movs	r6, #1
 8000bca:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bce:	0c21      	lsrs	r1, r4, #16
 8000bd0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000bd4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bd8:	fb08 f30c 	mul.w	r3, r8, ip
 8000bdc:	428b      	cmp	r3, r1
 8000bde:	d907      	bls.n	8000bf0 <__udivmoddi4+0xe4>
 8000be0:	1879      	adds	r1, r7, r1
 8000be2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000be6:	d202      	bcs.n	8000bee <__udivmoddi4+0xe2>
 8000be8:	428b      	cmp	r3, r1
 8000bea:	f200 80e9 	bhi.w	8000dc0 <__udivmoddi4+0x2b4>
 8000bee:	4684      	mov	ip, r0
 8000bf0:	1ac9      	subs	r1, r1, r3
 8000bf2:	b2a3      	uxth	r3, r4
 8000bf4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bf8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000bfc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c00:	fb08 f800 	mul.w	r8, r8, r0
 8000c04:	45a0      	cmp	r8, r4
 8000c06:	d907      	bls.n	8000c18 <__udivmoddi4+0x10c>
 8000c08:	193c      	adds	r4, r7, r4
 8000c0a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c0e:	d202      	bcs.n	8000c16 <__udivmoddi4+0x10a>
 8000c10:	45a0      	cmp	r8, r4
 8000c12:	f200 80d9 	bhi.w	8000dc8 <__udivmoddi4+0x2bc>
 8000c16:	4618      	mov	r0, r3
 8000c18:	eba4 0408 	sub.w	r4, r4, r8
 8000c1c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c20:	e7bf      	b.n	8000ba2 <__udivmoddi4+0x96>
 8000c22:	428b      	cmp	r3, r1
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x12e>
 8000c26:	2d00      	cmp	r5, #0
 8000c28:	f000 80b1 	beq.w	8000d8e <__udivmoddi4+0x282>
 8000c2c:	2600      	movs	r6, #0
 8000c2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c32:	4630      	mov	r0, r6
 8000c34:	4631      	mov	r1, r6
 8000c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3a:	fab3 f683 	clz	r6, r3
 8000c3e:	2e00      	cmp	r6, #0
 8000c40:	d14a      	bne.n	8000cd8 <__udivmoddi4+0x1cc>
 8000c42:	428b      	cmp	r3, r1
 8000c44:	d302      	bcc.n	8000c4c <__udivmoddi4+0x140>
 8000c46:	4282      	cmp	r2, r0
 8000c48:	f200 80b8 	bhi.w	8000dbc <__udivmoddi4+0x2b0>
 8000c4c:	1a84      	subs	r4, r0, r2
 8000c4e:	eb61 0103 	sbc.w	r1, r1, r3
 8000c52:	2001      	movs	r0, #1
 8000c54:	468c      	mov	ip, r1
 8000c56:	2d00      	cmp	r5, #0
 8000c58:	d0a8      	beq.n	8000bac <__udivmoddi4+0xa0>
 8000c5a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c5e:	e7a5      	b.n	8000bac <__udivmoddi4+0xa0>
 8000c60:	f1c2 0320 	rsb	r3, r2, #32
 8000c64:	fa20 f603 	lsr.w	r6, r0, r3
 8000c68:	4097      	lsls	r7, r2
 8000c6a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c6e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c72:	40d9      	lsrs	r1, r3
 8000c74:	4330      	orrs	r0, r6
 8000c76:	0c03      	lsrs	r3, r0, #16
 8000c78:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c7c:	fa1f f887 	uxth.w	r8, r7
 8000c80:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c88:	fb06 f108 	mul.w	r1, r6, r8
 8000c8c:	4299      	cmp	r1, r3
 8000c8e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c92:	d909      	bls.n	8000ca8 <__udivmoddi4+0x19c>
 8000c94:	18fb      	adds	r3, r7, r3
 8000c96:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c9a:	f080 808d 	bcs.w	8000db8 <__udivmoddi4+0x2ac>
 8000c9e:	4299      	cmp	r1, r3
 8000ca0:	f240 808a 	bls.w	8000db8 <__udivmoddi4+0x2ac>
 8000ca4:	3e02      	subs	r6, #2
 8000ca6:	443b      	add	r3, r7
 8000ca8:	1a5b      	subs	r3, r3, r1
 8000caa:	b281      	uxth	r1, r0
 8000cac:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cb0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cb4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb8:	fb00 f308 	mul.w	r3, r0, r8
 8000cbc:	428b      	cmp	r3, r1
 8000cbe:	d907      	bls.n	8000cd0 <__udivmoddi4+0x1c4>
 8000cc0:	1879      	adds	r1, r7, r1
 8000cc2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cc6:	d273      	bcs.n	8000db0 <__udivmoddi4+0x2a4>
 8000cc8:	428b      	cmp	r3, r1
 8000cca:	d971      	bls.n	8000db0 <__udivmoddi4+0x2a4>
 8000ccc:	3802      	subs	r0, #2
 8000cce:	4439      	add	r1, r7
 8000cd0:	1acb      	subs	r3, r1, r3
 8000cd2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000cd6:	e778      	b.n	8000bca <__udivmoddi4+0xbe>
 8000cd8:	f1c6 0c20 	rsb	ip, r6, #32
 8000cdc:	fa03 f406 	lsl.w	r4, r3, r6
 8000ce0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ce4:	431c      	orrs	r4, r3
 8000ce6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cea:	fa01 f306 	lsl.w	r3, r1, r6
 8000cee:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000cf2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000cf6:	431f      	orrs	r7, r3
 8000cf8:	0c3b      	lsrs	r3, r7, #16
 8000cfa:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cfe:	fa1f f884 	uxth.w	r8, r4
 8000d02:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d06:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d0a:	fb09 fa08 	mul.w	sl, r9, r8
 8000d0e:	458a      	cmp	sl, r1
 8000d10:	fa02 f206 	lsl.w	r2, r2, r6
 8000d14:	fa00 f306 	lsl.w	r3, r0, r6
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x220>
 8000d1a:	1861      	adds	r1, r4, r1
 8000d1c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d20:	d248      	bcs.n	8000db4 <__udivmoddi4+0x2a8>
 8000d22:	458a      	cmp	sl, r1
 8000d24:	d946      	bls.n	8000db4 <__udivmoddi4+0x2a8>
 8000d26:	f1a9 0902 	sub.w	r9, r9, #2
 8000d2a:	4421      	add	r1, r4
 8000d2c:	eba1 010a 	sub.w	r1, r1, sl
 8000d30:	b2bf      	uxth	r7, r7
 8000d32:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d36:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d3a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d3e:	fb00 f808 	mul.w	r8, r0, r8
 8000d42:	45b8      	cmp	r8, r7
 8000d44:	d907      	bls.n	8000d56 <__udivmoddi4+0x24a>
 8000d46:	19e7      	adds	r7, r4, r7
 8000d48:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d4c:	d22e      	bcs.n	8000dac <__udivmoddi4+0x2a0>
 8000d4e:	45b8      	cmp	r8, r7
 8000d50:	d92c      	bls.n	8000dac <__udivmoddi4+0x2a0>
 8000d52:	3802      	subs	r0, #2
 8000d54:	4427      	add	r7, r4
 8000d56:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d5a:	eba7 0708 	sub.w	r7, r7, r8
 8000d5e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d62:	454f      	cmp	r7, r9
 8000d64:	46c6      	mov	lr, r8
 8000d66:	4649      	mov	r1, r9
 8000d68:	d31a      	bcc.n	8000da0 <__udivmoddi4+0x294>
 8000d6a:	d017      	beq.n	8000d9c <__udivmoddi4+0x290>
 8000d6c:	b15d      	cbz	r5, 8000d86 <__udivmoddi4+0x27a>
 8000d6e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d72:	eb67 0701 	sbc.w	r7, r7, r1
 8000d76:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d7a:	40f2      	lsrs	r2, r6
 8000d7c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d80:	40f7      	lsrs	r7, r6
 8000d82:	e9c5 2700 	strd	r2, r7, [r5]
 8000d86:	2600      	movs	r6, #0
 8000d88:	4631      	mov	r1, r6
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	462e      	mov	r6, r5
 8000d90:	4628      	mov	r0, r5
 8000d92:	e70b      	b.n	8000bac <__udivmoddi4+0xa0>
 8000d94:	4606      	mov	r6, r0
 8000d96:	e6e9      	b.n	8000b6c <__udivmoddi4+0x60>
 8000d98:	4618      	mov	r0, r3
 8000d9a:	e6fd      	b.n	8000b98 <__udivmoddi4+0x8c>
 8000d9c:	4543      	cmp	r3, r8
 8000d9e:	d2e5      	bcs.n	8000d6c <__udivmoddi4+0x260>
 8000da0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000da4:	eb69 0104 	sbc.w	r1, r9, r4
 8000da8:	3801      	subs	r0, #1
 8000daa:	e7df      	b.n	8000d6c <__udivmoddi4+0x260>
 8000dac:	4608      	mov	r0, r1
 8000dae:	e7d2      	b.n	8000d56 <__udivmoddi4+0x24a>
 8000db0:	4660      	mov	r0, ip
 8000db2:	e78d      	b.n	8000cd0 <__udivmoddi4+0x1c4>
 8000db4:	4681      	mov	r9, r0
 8000db6:	e7b9      	b.n	8000d2c <__udivmoddi4+0x220>
 8000db8:	4666      	mov	r6, ip
 8000dba:	e775      	b.n	8000ca8 <__udivmoddi4+0x19c>
 8000dbc:	4630      	mov	r0, r6
 8000dbe:	e74a      	b.n	8000c56 <__udivmoddi4+0x14a>
 8000dc0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dc4:	4439      	add	r1, r7
 8000dc6:	e713      	b.n	8000bf0 <__udivmoddi4+0xe4>
 8000dc8:	3802      	subs	r0, #2
 8000dca:	443c      	add	r4, r7
 8000dcc:	e724      	b.n	8000c18 <__udivmoddi4+0x10c>
 8000dce:	bf00      	nop

08000dd0 <__aeabi_idiv0>:
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop

08000dd4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dda:	463b      	mov	r3, r7
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000de6:	4b21      	ldr	r3, [pc, #132]	; (8000e6c <MX_ADC1_Init+0x98>)
 8000de8:	4a21      	ldr	r2, [pc, #132]	; (8000e70 <MX_ADC1_Init+0x9c>)
 8000dea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000dec:	4b1f      	ldr	r3, [pc, #124]	; (8000e6c <MX_ADC1_Init+0x98>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000df2:	4b1e      	ldr	r3, [pc, #120]	; (8000e6c <MX_ADC1_Init+0x98>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000df8:	4b1c      	ldr	r3, [pc, #112]	; (8000e6c <MX_ADC1_Init+0x98>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000dfe:	4b1b      	ldr	r3, [pc, #108]	; (8000e6c <MX_ADC1_Init+0x98>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e04:	4b19      	ldr	r3, [pc, #100]	; (8000e6c <MX_ADC1_Init+0x98>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e0c:	4b17      	ldr	r3, [pc, #92]	; (8000e6c <MX_ADC1_Init+0x98>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e12:	4b16      	ldr	r3, [pc, #88]	; (8000e6c <MX_ADC1_Init+0x98>)
 8000e14:	4a17      	ldr	r2, [pc, #92]	; (8000e74 <MX_ADC1_Init+0xa0>)
 8000e16:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e18:	4b14      	ldr	r3, [pc, #80]	; (8000e6c <MX_ADC1_Init+0x98>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e1e:	4b13      	ldr	r3, [pc, #76]	; (8000e6c <MX_ADC1_Init+0x98>)
 8000e20:	2201      	movs	r2, #1
 8000e22:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e24:	4b11      	ldr	r3, [pc, #68]	; (8000e6c <MX_ADC1_Init+0x98>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e2c:	4b0f      	ldr	r3, [pc, #60]	; (8000e6c <MX_ADC1_Init+0x98>)
 8000e2e:	2201      	movs	r2, #1
 8000e30:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e32:	480e      	ldr	r0, [pc, #56]	; (8000e6c <MX_ADC1_Init+0x98>)
 8000e34:	f000 ffcc 	bl	8001dd0 <HAL_ADC_Init>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000e3e:	f000 fa87 	bl	8001350 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000e42:	2303      	movs	r3, #3
 8000e44:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e46:	2301      	movs	r3, #1
 8000e48:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e4e:	463b      	mov	r3, r7
 8000e50:	4619      	mov	r1, r3
 8000e52:	4806      	ldr	r0, [pc, #24]	; (8000e6c <MX_ADC1_Init+0x98>)
 8000e54:	f001 f800 	bl	8001e58 <HAL_ADC_ConfigChannel>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000e5e:	f000 fa77 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e62:	bf00      	nop
 8000e64:	3710      	adds	r7, #16
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	200000b8 	.word	0x200000b8
 8000e70:	40012000 	.word	0x40012000
 8000e74:	0f000001 	.word	0x0f000001

08000e78 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08a      	sub	sp, #40	; 0x28
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e80:	f107 0314 	add.w	r3, r7, #20
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
 8000e8e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a15      	ldr	r2, [pc, #84]	; (8000eec <HAL_ADC_MspInit+0x74>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d123      	bne.n	8000ee2 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e9a:	4b15      	ldr	r3, [pc, #84]	; (8000ef0 <HAL_ADC_MspInit+0x78>)
 8000e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9e:	4a14      	ldr	r2, [pc, #80]	; (8000ef0 <HAL_ADC_MspInit+0x78>)
 8000ea0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ea4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ea6:	4b12      	ldr	r3, [pc, #72]	; (8000ef0 <HAL_ADC_MspInit+0x78>)
 8000ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eae:	613b      	str	r3, [r7, #16]
 8000eb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb2:	4b0f      	ldr	r3, [pc, #60]	; (8000ef0 <HAL_ADC_MspInit+0x78>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	4a0e      	ldr	r2, [pc, #56]	; (8000ef0 <HAL_ADC_MspInit+0x78>)
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ebe:	4b0c      	ldr	r3, [pc, #48]	; (8000ef0 <HAL_ADC_MspInit+0x78>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000eca:	2308      	movs	r3, #8
 8000ecc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ece:	2303      	movs	r3, #3
 8000ed0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed6:	f107 0314 	add.w	r3, r7, #20
 8000eda:	4619      	mov	r1, r3
 8000edc:	4805      	ldr	r0, [pc, #20]	; (8000ef4 <HAL_ADC_MspInit+0x7c>)
 8000ede:	f001 fb1d 	bl	800251c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000ee2:	bf00      	nop
 8000ee4:	3728      	adds	r7, #40	; 0x28
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40012000 	.word	0x40012000
 8000ef0:	40023800 	.word	0x40023800
 8000ef4:	40020000 	.word	0x40020000

08000ef8 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b08e      	sub	sp, #56	; 0x38
 8000efc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	605a      	str	r2, [r3, #4]
 8000f08:	609a      	str	r2, [r3, #8]
 8000f0a:	60da      	str	r2, [r3, #12]
 8000f0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f0e:	4b91      	ldr	r3, [pc, #580]	; (8001154 <MX_GPIO_Init+0x25c>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	4a90      	ldr	r2, [pc, #576]	; (8001154 <MX_GPIO_Init+0x25c>)
 8000f14:	f043 0304 	orr.w	r3, r3, #4
 8000f18:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1a:	4b8e      	ldr	r3, [pc, #568]	; (8001154 <MX_GPIO_Init+0x25c>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	f003 0304 	and.w	r3, r3, #4
 8000f22:	623b      	str	r3, [r7, #32]
 8000f24:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f26:	4b8b      	ldr	r3, [pc, #556]	; (8001154 <MX_GPIO_Init+0x25c>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	4a8a      	ldr	r2, [pc, #552]	; (8001154 <MX_GPIO_Init+0x25c>)
 8000f2c:	f043 0320 	orr.w	r3, r3, #32
 8000f30:	6313      	str	r3, [r2, #48]	; 0x30
 8000f32:	4b88      	ldr	r3, [pc, #544]	; (8001154 <MX_GPIO_Init+0x25c>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	f003 0320 	and.w	r3, r3, #32
 8000f3a:	61fb      	str	r3, [r7, #28]
 8000f3c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f3e:	4b85      	ldr	r3, [pc, #532]	; (8001154 <MX_GPIO_Init+0x25c>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	4a84      	ldr	r2, [pc, #528]	; (8001154 <MX_GPIO_Init+0x25c>)
 8000f44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f48:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4a:	4b82      	ldr	r3, [pc, #520]	; (8001154 <MX_GPIO_Init+0x25c>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f52:	61bb      	str	r3, [r7, #24]
 8000f54:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f56:	4b7f      	ldr	r3, [pc, #508]	; (8001154 <MX_GPIO_Init+0x25c>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	4a7e      	ldr	r2, [pc, #504]	; (8001154 <MX_GPIO_Init+0x25c>)
 8000f5c:	f043 0301 	orr.w	r3, r3, #1
 8000f60:	6313      	str	r3, [r2, #48]	; 0x30
 8000f62:	4b7c      	ldr	r3, [pc, #496]	; (8001154 <MX_GPIO_Init+0x25c>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	617b      	str	r3, [r7, #20]
 8000f6c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6e:	4b79      	ldr	r3, [pc, #484]	; (8001154 <MX_GPIO_Init+0x25c>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	4a78      	ldr	r2, [pc, #480]	; (8001154 <MX_GPIO_Init+0x25c>)
 8000f74:	f043 0302 	orr.w	r3, r3, #2
 8000f78:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7a:	4b76      	ldr	r3, [pc, #472]	; (8001154 <MX_GPIO_Init+0x25c>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	f003 0302 	and.w	r3, r3, #2
 8000f82:	613b      	str	r3, [r7, #16]
 8000f84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f86:	4b73      	ldr	r3, [pc, #460]	; (8001154 <MX_GPIO_Init+0x25c>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	4a72      	ldr	r2, [pc, #456]	; (8001154 <MX_GPIO_Init+0x25c>)
 8000f8c:	f043 0310 	orr.w	r3, r3, #16
 8000f90:	6313      	str	r3, [r2, #48]	; 0x30
 8000f92:	4b70      	ldr	r3, [pc, #448]	; (8001154 <MX_GPIO_Init+0x25c>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	f003 0310 	and.w	r3, r3, #16
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f9e:	4b6d      	ldr	r3, [pc, #436]	; (8001154 <MX_GPIO_Init+0x25c>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	4a6c      	ldr	r2, [pc, #432]	; (8001154 <MX_GPIO_Init+0x25c>)
 8000fa4:	f043 0308 	orr.w	r3, r3, #8
 8000fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000faa:	4b6a      	ldr	r3, [pc, #424]	; (8001154 <MX_GPIO_Init+0x25c>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	f003 0308 	and.w	r3, r3, #8
 8000fb2:	60bb      	str	r3, [r7, #8]
 8000fb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fb6:	4b67      	ldr	r3, [pc, #412]	; (8001154 <MX_GPIO_Init+0x25c>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	4a66      	ldr	r2, [pc, #408]	; (8001154 <MX_GPIO_Init+0x25c>)
 8000fbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc2:	4b64      	ldr	r3, [pc, #400]	; (8001154 <MX_GPIO_Init+0x25c>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fca:	607b      	str	r3, [r7, #4]
 8000fcc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, D6_Pin|D7_Pin|RS_Pin, GPIO_PIN_RESET);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f44f 6185 	mov.w	r1, #1064	; 0x428
 8000fd4:	4860      	ldr	r0, [pc, #384]	; (8001158 <MX_GPIO_Init+0x260>)
 8000fd6:	f001 fc4d 	bl	8002874 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, D4_Pin|D5_Pin, GPIO_PIN_RESET);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	2109      	movs	r1, #9
 8000fde:	485f      	ldr	r0, [pc, #380]	; (800115c <MX_GPIO_Init+0x264>)
 8000fe0:	f001 fc48 	bl	8002874 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	f244 0181 	movw	r1, #16513	; 0x4081
 8000fea:	485d      	ldr	r0, [pc, #372]	; (8001160 <MX_GPIO_Init+0x268>)
 8000fec:	f001 fc42 	bl	8002874 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	2140      	movs	r1, #64	; 0x40
 8000ff4:	485b      	ldr	r0, [pc, #364]	; (8001164 <MX_GPIO_Init+0x26c>)
 8000ff6:	f001 fc3d 	bl	8002874 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2180      	movs	r1, #128	; 0x80
 8000ffe:	485a      	ldr	r0, [pc, #360]	; (8001168 <MX_GPIO_Init+0x270>)
 8001000:	f001 fc38 	bl	8002874 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001004:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001008:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800100a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800100e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001014:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001018:	4619      	mov	r1, r3
 800101a:	4850      	ldr	r0, [pc, #320]	; (800115c <MX_GPIO_Init+0x264>)
 800101c:	f001 fa7e 	bl	800251c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = D6_Pin|D7_Pin|RS_Pin;
 8001020:	f44f 6385 	mov.w	r3, #1064	; 0x428
 8001024:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001026:	2301      	movs	r3, #1
 8001028:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102e:	2300      	movs	r3, #0
 8001030:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001032:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001036:	4619      	mov	r1, r3
 8001038:	4847      	ldr	r0, [pc, #284]	; (8001158 <MX_GPIO_Init+0x260>)
 800103a:	f001 fa6f 	bl	800251c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin;
 800103e:	2309      	movs	r3, #9
 8001040:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001042:	2301      	movs	r3, #1
 8001044:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104a:	2300      	movs	r3, #0
 800104c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800104e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001052:	4619      	mov	r1, r3
 8001054:	4841      	ldr	r0, [pc, #260]	; (800115c <MX_GPIO_Init+0x264>)
 8001056:	f001 fa61 	bl	800251c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800105a:	2332      	movs	r3, #50	; 0x32
 800105c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105e:	2302      	movs	r3, #2
 8001060:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001066:	2303      	movs	r3, #3
 8001068:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800106a:	230b      	movs	r3, #11
 800106c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800106e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001072:	4619      	mov	r1, r3
 8001074:	4839      	ldr	r0, [pc, #228]	; (800115c <MX_GPIO_Init+0x264>)
 8001076:	f001 fa51 	bl	800251c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800107a:	2386      	movs	r3, #134	; 0x86
 800107c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107e:	2302      	movs	r3, #2
 8001080:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001086:	2303      	movs	r3, #3
 8001088:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800108a:	230b      	movs	r3, #11
 800108c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001092:	4619      	mov	r1, r3
 8001094:	4835      	ldr	r0, [pc, #212]	; (800116c <MX_GPIO_Init+0x274>)
 8001096:	f001 fa41 	bl	800251c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800109a:	f244 0381 	movw	r3, #16513	; 0x4081
 800109e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a0:	2301      	movs	r3, #1
 80010a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a8:	2300      	movs	r3, #0
 80010aa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010b0:	4619      	mov	r1, r3
 80010b2:	482b      	ldr	r0, [pc, #172]	; (8001160 <MX_GPIO_Init+0x268>)
 80010b4:	f001 fa32 	bl	800251c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80010b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010be:	2302      	movs	r3, #2
 80010c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c6:	2303      	movs	r3, #3
 80010c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010ca:	230b      	movs	r3, #11
 80010cc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80010ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010d2:	4619      	mov	r1, r3
 80010d4:	4822      	ldr	r0, [pc, #136]	; (8001160 <MX_GPIO_Init+0x268>)
 80010d6:	f001 fa21 	bl	800251c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80010da:	2340      	movs	r3, #64	; 0x40
 80010dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010de:	2301      	movs	r3, #1
 80010e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e6:	2300      	movs	r3, #0
 80010e8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80010ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ee:	4619      	mov	r1, r3
 80010f0:	481c      	ldr	r0, [pc, #112]	; (8001164 <MX_GPIO_Init+0x26c>)
 80010f2:	f001 fa13 	bl	800251c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80010f6:	2380      	movs	r3, #128	; 0x80
 80010f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010fa:	2300      	movs	r3, #0
 80010fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001102:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001106:	4619      	mov	r1, r3
 8001108:	4816      	ldr	r0, [pc, #88]	; (8001164 <MX_GPIO_Init+0x26c>)
 800110a:	f001 fa07 	bl	800251c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EN_Pin;
 800110e:	2380      	movs	r3, #128	; 0x80
 8001110:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001112:	2301      	movs	r3, #1
 8001114:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111a:	2300      	movs	r3, #0
 800111c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(EN_GPIO_Port, &GPIO_InitStruct);
 800111e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001122:	4619      	mov	r1, r3
 8001124:	4810      	ldr	r0, [pc, #64]	; (8001168 <MX_GPIO_Init+0x270>)
 8001126:	f001 f9f9 	bl	800251c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800112a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800112e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001130:	2302      	movs	r3, #2
 8001132:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001138:	2303      	movs	r3, #3
 800113a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800113c:	230b      	movs	r3, #11
 800113e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001140:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001144:	4619      	mov	r1, r3
 8001146:	4807      	ldr	r0, [pc, #28]	; (8001164 <MX_GPIO_Init+0x26c>)
 8001148:	f001 f9e8 	bl	800251c <HAL_GPIO_Init>

}
 800114c:	bf00      	nop
 800114e:	3738      	adds	r7, #56	; 0x38
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40023800 	.word	0x40023800
 8001158:	40021400 	.word	0x40021400
 800115c:	40020800 	.word	0x40020800
 8001160:	40020400 	.word	0x40020400
 8001164:	40021800 	.word	0x40021800
 8001168:	40020c00 	.word	0x40020c00
 800116c:	40020000 	.word	0x40020000

08001170 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001176:	f000 fdaa 	bl	8001cce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800117a:	f000 f859 	bl	8001230 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800117e:	f7ff febb 	bl	8000ef8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001182:	f000 fc7d 	bl	8001a80 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001186:	f000 fcef 	bl	8001b68 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM4_Init();
 800118a:	f000 fa89 	bl	80016a0 <MX_TIM4_Init>
  MX_TIM3_Init();
 800118e:	f000 fa31 	bl	80015f4 <MX_TIM3_Init>
  MX_TIM1_Init();
 8001192:	f000 f983 	bl	800149c <MX_TIM1_Init>
  MX_ADC1_Init();
 8001196:	f7ff fe1d 	bl	8000dd4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800119a:	2100      	movs	r1, #0
 800119c:	481d      	ldr	r0, [pc, #116]	; (8001214 <main+0xa4>)
 800119e:	f002 fed1 	bl	8003f44 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim4);
 80011a2:	481d      	ldr	r0, [pc, #116]	; (8001218 <main+0xa8>)
 80011a4:	f002 fdc6 	bl	8003d34 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1);
 80011a8:	2100      	movs	r1, #0
 80011aa:	481c      	ldr	r0, [pc, #112]	; (800121c <main+0xac>)
 80011ac:	f003 f86a 	bl	8004284 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_2);
 80011b0:	2104      	movs	r1, #4
 80011b2:	481a      	ldr	r0, [pc, #104]	; (800121c <main+0xac>)
 80011b4:	f003 f866 	bl	8004284 <HAL_TIM_Encoder_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1) {
//	  HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), 1000);
		HAL_Delay(10);
 80011b8:	200a      	movs	r0, #10
 80011ba:	f000 fde5 	bl	8001d88 <HAL_Delay>
		if (messagesReady) {
 80011be:	4b18      	ldr	r3, [pc, #96]	; (8001220 <main+0xb0>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d022      	beq.n	800120c <main+0x9c>
			HAL_TIM_Base_Stop_IT(&htim4);
 80011c6:	4814      	ldr	r0, [pc, #80]	; (8001218 <main+0xa8>)
 80011c8:	f002 fe2c 	bl	8003e24 <HAL_TIM_Base_Stop_IT>
			for (uint32_t i = 0; i < 1000-1; i++) {
 80011cc:	2300      	movs	r3, #0
 80011ce:	607b      	str	r3, [r7, #4]
 80011d0:	e011      	b.n	80011f6 <main+0x86>
				HAL_UART_Transmit(&huart3, (uint8_t *)&uartMessages[i], 5, 50);
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	4613      	mov	r3, r2
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	4413      	add	r3, r2
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	4a11      	ldr	r2, [pc, #68]	; (8001224 <main+0xb4>)
 80011de:	1899      	adds	r1, r3, r2
 80011e0:	2332      	movs	r3, #50	; 0x32
 80011e2:	2205      	movs	r2, #5
 80011e4:	4810      	ldr	r0, [pc, #64]	; (8001228 <main+0xb8>)
 80011e6:	f004 f937 	bl	8005458 <HAL_UART_Transmit>
				HAL_Delay(20);
 80011ea:	2014      	movs	r0, #20
 80011ec:	f000 fdcc 	bl	8001d88 <HAL_Delay>
			for (uint32_t i = 0; i < 1000-1; i++) {
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	3301      	adds	r3, #1
 80011f4:	607b      	str	r3, [r7, #4]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	f240 32e6 	movw	r2, #998	; 0x3e6
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d9e8      	bls.n	80011d2 <main+0x62>
			}
			messagesReady = false;
 8001200:	4b07      	ldr	r3, [pc, #28]	; (8001220 <main+0xb0>)
 8001202:	2200      	movs	r2, #0
 8001204:	701a      	strb	r2, [r3, #0]
			k = 0;
 8001206:	4b09      	ldr	r3, [pc, #36]	; (800122c <main+0xbc>)
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
		}
		HAL_TIM_Base_Start_IT(&htim4);
 800120c:	4802      	ldr	r0, [pc, #8]	; (8001218 <main+0xa8>)
 800120e:	f002 fd91 	bl	8003d34 <HAL_TIM_Base_Start_IT>
		HAL_Delay(10);
 8001212:	e7d1      	b.n	80011b8 <main+0x48>
 8001214:	20001968 	.word	0x20001968
 8001218:	200018d0 	.word	0x200018d0
 800121c:	2000191c 	.word	0x2000191c
 8001220:	200000ac 	.word	0x200000ac
 8001224:	20000160 	.word	0x20000160
 8001228:	200019b4 	.word	0x200019b4
 800122c:	200000a8 	.word	0x200000a8

08001230 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b0b4      	sub	sp, #208	; 0xd0
 8001234:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001236:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800123a:	2230      	movs	r2, #48	; 0x30
 800123c:	2100      	movs	r1, #0
 800123e:	4618      	mov	r0, r3
 8001240:	f005 f8ba 	bl	80063b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001244:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]
 8001252:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001254:	f107 0308 	add.w	r3, r7, #8
 8001258:	2284      	movs	r2, #132	; 0x84
 800125a:	2100      	movs	r1, #0
 800125c:	4618      	mov	r0, r3
 800125e:	f005 f8ab 	bl	80063b8 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001262:	f001 fc69 	bl	8002b38 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001266:	4b37      	ldr	r3, [pc, #220]	; (8001344 <SystemClock_Config+0x114>)
 8001268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126a:	4a36      	ldr	r2, [pc, #216]	; (8001344 <SystemClock_Config+0x114>)
 800126c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001270:	6413      	str	r3, [r2, #64]	; 0x40
 8001272:	4b34      	ldr	r3, [pc, #208]	; (8001344 <SystemClock_Config+0x114>)
 8001274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800127a:	607b      	str	r3, [r7, #4]
 800127c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800127e:	4b32      	ldr	r3, [pc, #200]	; (8001348 <SystemClock_Config+0x118>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001286:	4a30      	ldr	r2, [pc, #192]	; (8001348 <SystemClock_Config+0x118>)
 8001288:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800128c:	6013      	str	r3, [r2, #0]
 800128e:	4b2e      	ldr	r3, [pc, #184]	; (8001348 <SystemClock_Config+0x118>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001296:	603b      	str	r3, [r7, #0]
 8001298:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800129a:	2301      	movs	r3, #1
 800129c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80012a0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80012a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012a8:	2302      	movs	r3, #2
 80012aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 80012b6:	2304      	movs	r3, #4
 80012b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 80012bc:	2348      	movs	r3, #72	; 0x48
 80012be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012c2:	2302      	movs	r3, #2
 80012c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80012c8:	2303      	movs	r3, #3
 80012ca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012ce:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80012d2:	4618      	mov	r0, r3
 80012d4:	f001 fc40 	bl	8002b58 <HAL_RCC_OscConfig>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80012de:	f000 f837 	bl	8001350 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012e2:	230f      	movs	r3, #15
 80012e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012e8:	2302      	movs	r3, #2
 80012ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ee:	2300      	movs	r3, #0
 80012f0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012fc:	2300      	movs	r3, #0
 80012fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001302:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001306:	2102      	movs	r1, #2
 8001308:	4618      	mov	r0, r3
 800130a:	f001 fec9 	bl	80030a0 <HAL_RCC_ClockConfig>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8001314:	f000 f81c 	bl	8001350 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8001318:	4b0c      	ldr	r3, [pc, #48]	; (800134c <SystemClock_Config+0x11c>)
 800131a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800131c:	2300      	movs	r3, #0
 800131e:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001320:	2300      	movs	r3, #0
 8001322:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001326:	f107 0308 	add.w	r3, r7, #8
 800132a:	4618      	mov	r0, r3
 800132c:	f002 f8ba 	bl	80034a4 <HAL_RCCEx_PeriphCLKConfig>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <SystemClock_Config+0x10a>
  {
    Error_Handler();
 8001336:	f000 f80b 	bl	8001350 <Error_Handler>
  }
}
 800133a:	bf00      	nop
 800133c:	37d0      	adds	r7, #208	; 0xd0
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40023800 	.word	0x40023800
 8001348:	40007000 	.word	0x40007000
 800134c:	00200100 	.word	0x00200100

08001350 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001354:	b672      	cpsid	i
}
 8001356:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001358:	e7fe      	b.n	8001358 <Error_Handler+0x8>
	...

0800135c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001362:	4b0f      	ldr	r3, [pc, #60]	; (80013a0 <HAL_MspInit+0x44>)
 8001364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001366:	4a0e      	ldr	r2, [pc, #56]	; (80013a0 <HAL_MspInit+0x44>)
 8001368:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800136c:	6413      	str	r3, [r2, #64]	; 0x40
 800136e:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <HAL_MspInit+0x44>)
 8001370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001376:	607b      	str	r3, [r7, #4]
 8001378:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800137a:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <HAL_MspInit+0x44>)
 800137c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137e:	4a08      	ldr	r2, [pc, #32]	; (80013a0 <HAL_MspInit+0x44>)
 8001380:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001384:	6453      	str	r3, [r2, #68]	; 0x44
 8001386:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <HAL_MspInit+0x44>)
 8001388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800138e:	603b      	str	r3, [r7, #0]
 8001390:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001392:	bf00      	nop
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	40023800 	.word	0x40023800

080013a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013a8:	e7fe      	b.n	80013a8 <NMI_Handler+0x4>

080013aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013aa:	b480      	push	{r7}
 80013ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ae:	e7fe      	b.n	80013ae <HardFault_Handler+0x4>

080013b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013b4:	e7fe      	b.n	80013b4 <MemManage_Handler+0x4>

080013b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013b6:	b480      	push	{r7}
 80013b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ba:	e7fe      	b.n	80013ba <BusFault_Handler+0x4>

080013bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013c0:	e7fe      	b.n	80013c0 <UsageFault_Handler+0x4>

080013c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013c2:	b480      	push	{r7}
 80013c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013c6:	bf00      	nop
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013d4:	bf00      	nop
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr

080013de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013de:	b480      	push	{r7}
 80013e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013e2:	bf00      	nop
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013f0:	f000 fcaa 	bl	8001d48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013f4:	bf00      	nop
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80013fc:	4802      	ldr	r0, [pc, #8]	; (8001408 <TIM4_IRQHandler+0x10>)
 80013fe:	f002 ffcf 	bl	80043a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	200018d0 	.word	0x200018d0

0800140c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b086      	sub	sp, #24
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001414:	4a14      	ldr	r2, [pc, #80]	; (8001468 <_sbrk+0x5c>)
 8001416:	4b15      	ldr	r3, [pc, #84]	; (800146c <_sbrk+0x60>)
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001420:	4b13      	ldr	r3, [pc, #76]	; (8001470 <_sbrk+0x64>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d102      	bne.n	800142e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001428:	4b11      	ldr	r3, [pc, #68]	; (8001470 <_sbrk+0x64>)
 800142a:	4a12      	ldr	r2, [pc, #72]	; (8001474 <_sbrk+0x68>)
 800142c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800142e:	4b10      	ldr	r3, [pc, #64]	; (8001470 <_sbrk+0x64>)
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4413      	add	r3, r2
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	429a      	cmp	r2, r3
 800143a:	d207      	bcs.n	800144c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800143c:	f004 ff92 	bl	8006364 <__errno>
 8001440:	4603      	mov	r3, r0
 8001442:	220c      	movs	r2, #12
 8001444:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001446:	f04f 33ff 	mov.w	r3, #4294967295
 800144a:	e009      	b.n	8001460 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800144c:	4b08      	ldr	r3, [pc, #32]	; (8001470 <_sbrk+0x64>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001452:	4b07      	ldr	r3, [pc, #28]	; (8001470 <_sbrk+0x64>)
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4413      	add	r3, r2
 800145a:	4a05      	ldr	r2, [pc, #20]	; (8001470 <_sbrk+0x64>)
 800145c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800145e:	68fb      	ldr	r3, [r7, #12]
}
 8001460:	4618      	mov	r0, r3
 8001462:	3718      	adds	r7, #24
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	20050000 	.word	0x20050000
 800146c:	00000400 	.word	0x00000400
 8001470:	2000008c 	.word	0x2000008c
 8001474:	20001e50 	.word	0x20001e50

08001478 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800147c:	4b06      	ldr	r3, [pc, #24]	; (8001498 <SystemInit+0x20>)
 800147e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001482:	4a05      	ldr	r2, [pc, #20]	; (8001498 <SystemInit+0x20>)
 8001484:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001488:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800148c:	bf00      	nop
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	e000ed00 	.word	0xe000ed00

0800149c <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b09a      	sub	sp, #104	; 0x68
 80014a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014a2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	605a      	str	r2, [r3, #4]
 80014ac:	609a      	str	r2, [r3, #8]
 80014ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014b0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
 80014ca:	611a      	str	r2, [r3, #16]
 80014cc:	615a      	str	r2, [r3, #20]
 80014ce:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014d0:	1d3b      	adds	r3, r7, #4
 80014d2:	222c      	movs	r2, #44	; 0x2c
 80014d4:	2100      	movs	r1, #0
 80014d6:	4618      	mov	r0, r3
 80014d8:	f004 ff6e 	bl	80063b8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014dc:	4b43      	ldr	r3, [pc, #268]	; (80015ec <MX_TIM1_Init+0x150>)
 80014de:	4a44      	ldr	r2, [pc, #272]	; (80015f0 <MX_TIM1_Init+0x154>)
 80014e0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80014e2:	4b42      	ldr	r3, [pc, #264]	; (80015ec <MX_TIM1_Init+0x150>)
 80014e4:	2247      	movs	r2, #71	; 0x47
 80014e6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014e8:	4b40      	ldr	r3, [pc, #256]	; (80015ec <MX_TIM1_Init+0x150>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80014ee:	4b3f      	ldr	r3, [pc, #252]	; (80015ec <MX_TIM1_Init+0x150>)
 80014f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014f4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014f6:	4b3d      	ldr	r3, [pc, #244]	; (80015ec <MX_TIM1_Init+0x150>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014fc:	4b3b      	ldr	r3, [pc, #236]	; (80015ec <MX_TIM1_Init+0x150>)
 80014fe:	2200      	movs	r2, #0
 8001500:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001502:	4b3a      	ldr	r3, [pc, #232]	; (80015ec <MX_TIM1_Init+0x150>)
 8001504:	2200      	movs	r2, #0
 8001506:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001508:	4838      	ldr	r0, [pc, #224]	; (80015ec <MX_TIM1_Init+0x150>)
 800150a:	f002 fbbb 	bl	8003c84 <HAL_TIM_Base_Init>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001514:	f7ff ff1c 	bl	8001350 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001518:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800151c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800151e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001522:	4619      	mov	r1, r3
 8001524:	4831      	ldr	r0, [pc, #196]	; (80015ec <MX_TIM1_Init+0x150>)
 8001526:	f003 f96f 	bl	8004808 <HAL_TIM_ConfigClockSource>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001530:	f7ff ff0e 	bl	8001350 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001534:	482d      	ldr	r0, [pc, #180]	; (80015ec <MX_TIM1_Init+0x150>)
 8001536:	f002 fca4 	bl	8003e82 <HAL_TIM_PWM_Init>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001540:	f7ff ff06 	bl	8001350 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001544:	2300      	movs	r3, #0
 8001546:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001548:	2300      	movs	r3, #0
 800154a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800154c:	2300      	movs	r3, #0
 800154e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001550:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001554:	4619      	mov	r1, r3
 8001556:	4825      	ldr	r0, [pc, #148]	; (80015ec <MX_TIM1_Init+0x150>)
 8001558:	f003 fe06 	bl	8005168 <HAL_TIMEx_MasterConfigSynchronization>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001562:	f7ff fef5 	bl	8001350 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001566:	2360      	movs	r3, #96	; 0x60
 8001568:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800156a:	2300      	movs	r3, #0
 800156c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800156e:	2300      	movs	r3, #0
 8001570:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001572:	2300      	movs	r3, #0
 8001574:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001576:	2300      	movs	r3, #0
 8001578:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800157a:	2300      	movs	r3, #0
 800157c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800157e:	2300      	movs	r3, #0
 8001580:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001582:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001586:	2200      	movs	r2, #0
 8001588:	4619      	mov	r1, r3
 800158a:	4818      	ldr	r0, [pc, #96]	; (80015ec <MX_TIM1_Init+0x150>)
 800158c:	f003 f828 	bl	80045e0 <HAL_TIM_PWM_ConfigChannel>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001596:	f7ff fedb 	bl	8001350 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800159a:	2300      	movs	r3, #0
 800159c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800159e:	2300      	movs	r3, #0
 80015a0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015a2:	2300      	movs	r3, #0
 80015a4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015a6:	2300      	movs	r3, #0
 80015a8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015aa:	2300      	movs	r3, #0
 80015ac:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015b2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80015b4:	2300      	movs	r3, #0
 80015b6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80015b8:	2300      	movs	r3, #0
 80015ba:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80015bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015c0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80015c2:	2300      	movs	r3, #0
 80015c4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015c6:	2300      	movs	r3, #0
 80015c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015ca:	1d3b      	adds	r3, r7, #4
 80015cc:	4619      	mov	r1, r3
 80015ce:	4807      	ldr	r0, [pc, #28]	; (80015ec <MX_TIM1_Init+0x150>)
 80015d0:	f003 fe58 	bl	8005284 <HAL_TIMEx_ConfigBreakDeadTime>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80015da:	f7ff feb9 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80015de:	4803      	ldr	r0, [pc, #12]	; (80015ec <MX_TIM1_Init+0x150>)
 80015e0:	f000 f948 	bl	8001874 <HAL_TIM_MspPostInit>

}
 80015e4:	bf00      	nop
 80015e6:	3768      	adds	r7, #104	; 0x68
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	20001968 	.word	0x20001968
 80015f0:	40010000 	.word	0x40010000

080015f4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b08c      	sub	sp, #48	; 0x30
 80015f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80015fa:	f107 030c 	add.w	r3, r7, #12
 80015fe:	2224      	movs	r2, #36	; 0x24
 8001600:	2100      	movs	r1, #0
 8001602:	4618      	mov	r0, r3
 8001604:	f004 fed8 	bl	80063b8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001608:	463b      	mov	r3, r7
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	605a      	str	r2, [r3, #4]
 8001610:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001612:	4b21      	ldr	r3, [pc, #132]	; (8001698 <MX_TIM3_Init+0xa4>)
 8001614:	4a21      	ldr	r2, [pc, #132]	; (800169c <MX_TIM3_Init+0xa8>)
 8001616:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001618:	4b1f      	ldr	r3, [pc, #124]	; (8001698 <MX_TIM3_Init+0xa4>)
 800161a:	2200      	movs	r2, #0
 800161c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800161e:	4b1e      	ldr	r3, [pc, #120]	; (8001698 <MX_TIM3_Init+0xa4>)
 8001620:	2200      	movs	r2, #0
 8001622:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001624:	4b1c      	ldr	r3, [pc, #112]	; (8001698 <MX_TIM3_Init+0xa4>)
 8001626:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800162a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800162c:	4b1a      	ldr	r3, [pc, #104]	; (8001698 <MX_TIM3_Init+0xa4>)
 800162e:	2200      	movs	r2, #0
 8001630:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001632:	4b19      	ldr	r3, [pc, #100]	; (8001698 <MX_TIM3_Init+0xa4>)
 8001634:	2280      	movs	r2, #128	; 0x80
 8001636:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001638:	2303      	movs	r3, #3
 800163a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800163c:	2302      	movs	r3, #2
 800163e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001640:	2301      	movs	r3, #1
 8001642:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001644:	2300      	movs	r3, #0
 8001646:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001648:	2300      	movs	r3, #0
 800164a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800164c:	2302      	movs	r3, #2
 800164e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001650:	2301      	movs	r3, #1
 8001652:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001654:	2300      	movs	r3, #0
 8001656:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001658:	2300      	movs	r3, #0
 800165a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800165c:	f107 030c 	add.w	r3, r7, #12
 8001660:	4619      	mov	r1, r3
 8001662:	480d      	ldr	r0, [pc, #52]	; (8001698 <MX_TIM3_Init+0xa4>)
 8001664:	f002 fd68 	bl	8004138 <HAL_TIM_Encoder_Init>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800166e:	f7ff fe6f 	bl	8001350 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001672:	2300      	movs	r3, #0
 8001674:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001676:	2300      	movs	r3, #0
 8001678:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800167a:	463b      	mov	r3, r7
 800167c:	4619      	mov	r1, r3
 800167e:	4806      	ldr	r0, [pc, #24]	; (8001698 <MX_TIM3_Init+0xa4>)
 8001680:	f003 fd72 	bl	8005168 <HAL_TIMEx_MasterConfigSynchronization>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800168a:	f7ff fe61 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800168e:	bf00      	nop
 8001690:	3730      	adds	r7, #48	; 0x30
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	2000191c 	.word	0x2000191c
 800169c:	40000400 	.word	0x40000400

080016a0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b088      	sub	sp, #32
 80016a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016a6:	f107 0310 	add.w	r3, r7, #16
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	605a      	str	r2, [r3, #4]
 80016b0:	609a      	str	r2, [r3, #8]
 80016b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016b4:	1d3b      	adds	r3, r7, #4
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	605a      	str	r2, [r3, #4]
 80016bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80016be:	4b1d      	ldr	r3, [pc, #116]	; (8001734 <MX_TIM4_Init+0x94>)
 80016c0:	4a1d      	ldr	r2, [pc, #116]	; (8001738 <MX_TIM4_Init+0x98>)
 80016c2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7199;
 80016c4:	4b1b      	ldr	r3, [pc, #108]	; (8001734 <MX_TIM4_Init+0x94>)
 80016c6:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80016ca:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016cc:	4b19      	ldr	r3, [pc, #100]	; (8001734 <MX_TIM4_Init+0x94>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9;
 80016d2:	4b18      	ldr	r3, [pc, #96]	; (8001734 <MX_TIM4_Init+0x94>)
 80016d4:	2209      	movs	r2, #9
 80016d6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016d8:	4b16      	ldr	r3, [pc, #88]	; (8001734 <MX_TIM4_Init+0x94>)
 80016da:	2200      	movs	r2, #0
 80016dc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016de:	4b15      	ldr	r3, [pc, #84]	; (8001734 <MX_TIM4_Init+0x94>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80016e4:	4813      	ldr	r0, [pc, #76]	; (8001734 <MX_TIM4_Init+0x94>)
 80016e6:	f002 facd 	bl	8003c84 <HAL_TIM_Base_Init>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80016f0:	f7ff fe2e 	bl	8001350 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016f8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80016fa:	f107 0310 	add.w	r3, r7, #16
 80016fe:	4619      	mov	r1, r3
 8001700:	480c      	ldr	r0, [pc, #48]	; (8001734 <MX_TIM4_Init+0x94>)
 8001702:	f003 f881 	bl	8004808 <HAL_TIM_ConfigClockSource>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 800170c:	f7ff fe20 	bl	8001350 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001710:	2300      	movs	r3, #0
 8001712:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001714:	2300      	movs	r3, #0
 8001716:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001718:	1d3b      	adds	r3, r7, #4
 800171a:	4619      	mov	r1, r3
 800171c:	4805      	ldr	r0, [pc, #20]	; (8001734 <MX_TIM4_Init+0x94>)
 800171e:	f003 fd23 	bl	8005168 <HAL_TIMEx_MasterConfigSynchronization>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001728:	f7ff fe12 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800172c:	bf00      	nop
 800172e:	3720      	adds	r7, #32
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	200018d0 	.word	0x200018d0
 8001738:	40000800 	.word	0x40000800

0800173c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a16      	ldr	r2, [pc, #88]	; (80017a4 <HAL_TIM_Base_MspInit+0x68>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d10c      	bne.n	8001768 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800174e:	4b16      	ldr	r3, [pc, #88]	; (80017a8 <HAL_TIM_Base_MspInit+0x6c>)
 8001750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001752:	4a15      	ldr	r2, [pc, #84]	; (80017a8 <HAL_TIM_Base_MspInit+0x6c>)
 8001754:	f043 0301 	orr.w	r3, r3, #1
 8001758:	6453      	str	r3, [r2, #68]	; 0x44
 800175a:	4b13      	ldr	r3, [pc, #76]	; (80017a8 <HAL_TIM_Base_MspInit+0x6c>)
 800175c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001766:	e018      	b.n	800179a <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM4)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a0f      	ldr	r2, [pc, #60]	; (80017ac <HAL_TIM_Base_MspInit+0x70>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d113      	bne.n	800179a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001772:	4b0d      	ldr	r3, [pc, #52]	; (80017a8 <HAL_TIM_Base_MspInit+0x6c>)
 8001774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001776:	4a0c      	ldr	r2, [pc, #48]	; (80017a8 <HAL_TIM_Base_MspInit+0x6c>)
 8001778:	f043 0304 	orr.w	r3, r3, #4
 800177c:	6413      	str	r3, [r2, #64]	; 0x40
 800177e:	4b0a      	ldr	r3, [pc, #40]	; (80017a8 <HAL_TIM_Base_MspInit+0x6c>)
 8001780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001782:	f003 0304 	and.w	r3, r3, #4
 8001786:	60bb      	str	r3, [r7, #8]
 8001788:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 3, 0);
 800178a:	2200      	movs	r2, #0
 800178c:	2103      	movs	r1, #3
 800178e:	201e      	movs	r0, #30
 8001790:	f000 fe8d 	bl	80024ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001794:	201e      	movs	r0, #30
 8001796:	f000 fea6 	bl	80024e6 <HAL_NVIC_EnableIRQ>
}
 800179a:	bf00      	nop
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40010000 	.word	0x40010000
 80017a8:	40023800 	.word	0x40023800
 80017ac:	40000800 	.word	0x40000800

080017b0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b08a      	sub	sp, #40	; 0x28
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b8:	f107 0314 	add.w	r3, r7, #20
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	605a      	str	r2, [r3, #4]
 80017c2:	609a      	str	r2, [r3, #8]
 80017c4:	60da      	str	r2, [r3, #12]
 80017c6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a25      	ldr	r2, [pc, #148]	; (8001864 <HAL_TIM_Encoder_MspInit+0xb4>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d143      	bne.n	800185a <HAL_TIM_Encoder_MspInit+0xaa>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017d2:	4b25      	ldr	r3, [pc, #148]	; (8001868 <HAL_TIM_Encoder_MspInit+0xb8>)
 80017d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d6:	4a24      	ldr	r2, [pc, #144]	; (8001868 <HAL_TIM_Encoder_MspInit+0xb8>)
 80017d8:	f043 0302 	orr.w	r3, r3, #2
 80017dc:	6413      	str	r3, [r2, #64]	; 0x40
 80017de:	4b22      	ldr	r3, [pc, #136]	; (8001868 <HAL_TIM_Encoder_MspInit+0xb8>)
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	613b      	str	r3, [r7, #16]
 80017e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ea:	4b1f      	ldr	r3, [pc, #124]	; (8001868 <HAL_TIM_Encoder_MspInit+0xb8>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	4a1e      	ldr	r2, [pc, #120]	; (8001868 <HAL_TIM_Encoder_MspInit+0xb8>)
 80017f0:	f043 0301 	orr.w	r3, r3, #1
 80017f4:	6313      	str	r3, [r2, #48]	; 0x30
 80017f6:	4b1c      	ldr	r3, [pc, #112]	; (8001868 <HAL_TIM_Encoder_MspInit+0xb8>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001802:	4b19      	ldr	r3, [pc, #100]	; (8001868 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	4a18      	ldr	r2, [pc, #96]	; (8001868 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001808:	f043 0304 	orr.w	r3, r3, #4
 800180c:	6313      	str	r3, [r2, #48]	; 0x30
 800180e:	4b16      	ldr	r3, [pc, #88]	; (8001868 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	f003 0304 	and.w	r3, r3, #4
 8001816:	60bb      	str	r3, [r7, #8]
 8001818:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800181a:	2340      	movs	r3, #64	; 0x40
 800181c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181e:	2302      	movs	r3, #2
 8001820:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001822:	2300      	movs	r3, #0
 8001824:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001826:	2300      	movs	r3, #0
 8001828:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800182a:	2302      	movs	r3, #2
 800182c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182e:	f107 0314 	add.w	r3, r7, #20
 8001832:	4619      	mov	r1, r3
 8001834:	480d      	ldr	r0, [pc, #52]	; (800186c <HAL_TIM_Encoder_MspInit+0xbc>)
 8001836:	f000 fe71 	bl	800251c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800183a:	2380      	movs	r3, #128	; 0x80
 800183c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183e:	2302      	movs	r3, #2
 8001840:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001846:	2300      	movs	r3, #0
 8001848:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800184a:	2302      	movs	r3, #2
 800184c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800184e:	f107 0314 	add.w	r3, r7, #20
 8001852:	4619      	mov	r1, r3
 8001854:	4806      	ldr	r0, [pc, #24]	; (8001870 <HAL_TIM_Encoder_MspInit+0xc0>)
 8001856:	f000 fe61 	bl	800251c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800185a:	bf00      	nop
 800185c:	3728      	adds	r7, #40	; 0x28
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40000400 	.word	0x40000400
 8001868:	40023800 	.word	0x40023800
 800186c:	40020000 	.word	0x40020000
 8001870:	40020800 	.word	0x40020800

08001874 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b088      	sub	sp, #32
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800187c:	f107 030c 	add.w	r3, r7, #12
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	605a      	str	r2, [r3, #4]
 8001886:	609a      	str	r2, [r3, #8]
 8001888:	60da      	str	r2, [r3, #12]
 800188a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a11      	ldr	r2, [pc, #68]	; (80018d8 <HAL_TIM_MspPostInit+0x64>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d11c      	bne.n	80018d0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001896:	4b11      	ldr	r3, [pc, #68]	; (80018dc <HAL_TIM_MspPostInit+0x68>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	4a10      	ldr	r2, [pc, #64]	; (80018dc <HAL_TIM_MspPostInit+0x68>)
 800189c:	f043 0310 	orr.w	r3, r3, #16
 80018a0:	6313      	str	r3, [r2, #48]	; 0x30
 80018a2:	4b0e      	ldr	r3, [pc, #56]	; (80018dc <HAL_TIM_MspPostInit+0x68>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	f003 0310 	and.w	r3, r3, #16
 80018aa:	60bb      	str	r3, [r7, #8]
 80018ac:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80018ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018b2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b4:	2302      	movs	r3, #2
 80018b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b8:	2300      	movs	r3, #0
 80018ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018bc:	2300      	movs	r3, #0
 80018be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80018c0:	2301      	movs	r3, #1
 80018c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018c4:	f107 030c 	add.w	r3, r7, #12
 80018c8:	4619      	mov	r1, r3
 80018ca:	4805      	ldr	r0, [pc, #20]	; (80018e0 <HAL_TIM_MspPostInit+0x6c>)
 80018cc:	f000 fe26 	bl	800251c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80018d0:	bf00      	nop
 80018d2:	3720      	adds	r7, #32
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	40010000 	.word	0x40010000
 80018dc:	40023800 	.word	0x40023800
 80018e0:	40021000 	.word	0x40021000
 80018e4:	00000000 	.word	0x00000000

080018e8 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 1 */
void SetPwmValue(uint32_t value){
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, value);
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80018e8:	b590      	push	{r4, r7, lr}
 80018ea:	b087      	sub	sp, #28
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM4) { // 1s timer
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a4e      	ldr	r2, [pc, #312]	; (8001a30 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	f040 8092 	bne.w	8001a20 <HAL_TIM_PeriodElapsedCallback+0x138>
		uint8_t messageLen = 6;
 80018fc:	2306      	movs	r3, #6
 80018fe:	75bb      	strb	r3, [r7, #22]
		if (k >= 999){
 8001900:	4b4c      	ldr	r3, [pc, #304]	; (8001a34 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f240 32e6 	movw	r2, #998	; 0x3e6
 8001908:	4293      	cmp	r3, r2
 800190a:	d902      	bls.n	8001912 <HAL_TIM_PeriodElapsedCallback+0x2a>
			messagesReady = true;
 800190c:	4b4a      	ldr	r3, [pc, #296]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x150>)
 800190e:	2201      	movs	r2, #1
 8001910:	701a      	strb	r2, [r3, #0]
		}
		if (!messagesReady){
 8001912:	4b49      	ldr	r3, [pc, #292]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	f083 0301 	eor.w	r3, r3, #1
 800191a:	b2db      	uxtb	r3, r3
 800191c:	2b00      	cmp	r3, #0
 800191e:	d07a      	beq.n	8001a16 <HAL_TIM_PeriodElapsedCallback+0x12e>
	//		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
	//		ADC_Value = HAL_ADC_GetValue(&hadc1);
	//		HAL_Delay(100);
	//		GetEncoderValue();
	//		SetPwmValue(pulseWidth);
			encoderValue = __HAL_TIM_GET_COUNTER(&htim3);
 8001920:	4b46      	ldr	r3, [pc, #280]	; (8001a3c <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001926:	461a      	mov	r2, r3
 8001928:	4b45      	ldr	r3, [pc, #276]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0x158>)
 800192a:	601a      	str	r2, [r3, #0]
			if(lastEncoder > encoderValue){
 800192c:	4b45      	ldr	r3, [pc, #276]	; (8001a44 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a43      	ldr	r2, [pc, #268]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001932:	6812      	ldr	r2, [r2, #0]
 8001934:	4293      	cmp	r3, r2
 8001936:	d912      	bls.n	800195e <HAL_TIM_PeriodElapsedCallback+0x76>
				lastEncoder = 65535 - lastEncoder;
 8001938:	4b42      	ldr	r3, [pc, #264]	; (8001a44 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001940:	1a9b      	subs	r3, r3, r2
 8001942:	4a40      	ldr	r2, [pc, #256]	; (8001a44 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001944:	6013      	str	r3, [r2, #0]
				encoderValue = encoderValue + lastEncoder;
 8001946:	4b3e      	ldr	r3, [pc, #248]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	461a      	mov	r2, r3
 800194c:	4b3d      	ldr	r3, [pc, #244]	; (8001a44 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4413      	add	r3, r2
 8001952:	461a      	mov	r2, r3
 8001954:	4b3a      	ldr	r3, [pc, #232]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001956:	601a      	str	r2, [r3, #0]
				lastEncoder = 0;
 8001958:	4b3a      	ldr	r3, [pc, #232]	; (8001a44 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]
			}
			char *message = calloc(1,6);
 800195e:	2106      	movs	r1, #6
 8001960:	2001      	movs	r0, #1
 8001962:	f004 fcf7 	bl	8006354 <calloc>
 8001966:	4603      	mov	r3, r0
 8001968:	613b      	str	r3, [r7, #16]
			difference = encoderValue - lastEncoder;
 800196a:	4b35      	ldr	r3, [pc, #212]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0x158>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	461a      	mov	r2, r3
 8001970:	4b34      	ldr	r3, [pc, #208]	; (8001a44 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	4a34      	ldr	r2, [pc, #208]	; (8001a48 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001978:	6013      	str	r3, [r2, #0]
			RPM = (difference) * scaler / 1928.0;
 800197a:	4b33      	ldr	r3, [pc, #204]	; (8001a48 <HAL_TIM_PeriodElapsedCallback+0x160>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4618      	mov	r0, r3
 8001980:	f7fe fdd8 	bl	8000534 <__aeabi_ui2d>
 8001984:	a328      	add	r3, pc, #160	; (adr r3, 8001a28 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800198a:	f7fe fe4d 	bl	8000628 <__aeabi_dmul>
 800198e:	4602      	mov	r2, r0
 8001990:	460b      	mov	r3, r1
 8001992:	4610      	mov	r0, r2
 8001994:	4619      	mov	r1, r3
 8001996:	f04f 0200 	mov.w	r2, #0
 800199a:	4b2c      	ldr	r3, [pc, #176]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0x164>)
 800199c:	f7fe ff6e 	bl	800087c <__aeabi_ddiv>
 80019a0:	4602      	mov	r2, r0
 80019a2:	460b      	mov	r3, r1
 80019a4:	492a      	ldr	r1, [pc, #168]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80019a6:	e9c1 2300 	strd	r2, r3, [r1]
			int RPMInt = (int)(RPM);
 80019aa:	4b29      	ldr	r3, [pc, #164]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80019ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b0:	4610      	mov	r0, r2
 80019b2:	4619      	mov	r1, r3
 80019b4:	f7ff f84a 	bl	8000a4c <__aeabi_d2iz>
 80019b8:	4603      	mov	r3, r0
 80019ba:	60fb      	str	r3, [r7, #12]
			sprintf((char *)message, "%03i\n\r", RPMInt);
 80019bc:	68fa      	ldr	r2, [r7, #12]
 80019be:	4925      	ldr	r1, [pc, #148]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80019c0:	6938      	ldr	r0, [r7, #16]
 80019c2:	f004 fd7b 	bl	80064bc <siprintf>
//			sprintf((char *)message, "%d\n\r", killme);
			for(uint8_t i = 0; i < messageLen; i++){
 80019c6:	2300      	movs	r3, #0
 80019c8:	75fb      	strb	r3, [r7, #23]
 80019ca:	e012      	b.n	80019f2 <HAL_TIM_PeriodElapsedCallback+0x10a>
				uartMessages[k][i] = (message)[i];
 80019cc:	7dfb      	ldrb	r3, [r7, #23]
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	4413      	add	r3, r2
 80019d2:	4a18      	ldr	r2, [pc, #96]	; (8001a34 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80019d4:	6812      	ldr	r2, [r2, #0]
 80019d6:	7df9      	ldrb	r1, [r7, #23]
 80019d8:	781c      	ldrb	r4, [r3, #0]
 80019da:	481f      	ldr	r0, [pc, #124]	; (8001a58 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80019dc:	4613      	mov	r3, r2
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	4413      	add	r3, r2
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	4403      	add	r3, r0
 80019e6:	440b      	add	r3, r1
 80019e8:	4622      	mov	r2, r4
 80019ea:	701a      	strb	r2, [r3, #0]
			for(uint8_t i = 0; i < messageLen; i++){
 80019ec:	7dfb      	ldrb	r3, [r7, #23]
 80019ee:	3301      	adds	r3, #1
 80019f0:	75fb      	strb	r3, [r7, #23]
 80019f2:	7dfa      	ldrb	r2, [r7, #23]
 80019f4:	7dbb      	ldrb	r3, [r7, #22]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d3e8      	bcc.n	80019cc <HAL_TIM_PeriodElapsedCallback+0xe4>
			}

			//HAL_UART_Transmit(&huart3, (uint8_t *)message, strlen(message), 50);
			lastEncoder = encoderValue;
 80019fa:	4b11      	ldr	r3, [pc, #68]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	461a      	mov	r2, r3
 8001a00:	4b10      	ldr	r3, [pc, #64]	; (8001a44 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001a02:	601a      	str	r2, [r3, #0]
			GetEncoderValue(RPM);
 8001a04:	4b12      	ldr	r3, [pc, #72]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001a06:	ed93 7b00 	vldr	d7, [r3]
 8001a0a:	eeb0 0a47 	vmov.f32	s0, s14
 8001a0e:	eef0 0a67 	vmov.f32	s1, s15
 8001a12:	f000 f823 	bl	8001a5c <GetEncoderValue>
		}
		k++;
 8001a16:	4b07      	ldr	r3, [pc, #28]	; (8001a34 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	4a05      	ldr	r2, [pc, #20]	; (8001a34 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001a1e:	6013      	str	r3, [r2, #0]
	}
}
 8001a20:	bf00      	nop
 8001a22:	371c      	adds	r7, #28
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd90      	pop	{r4, r7, pc}
 8001a28:	00000000 	.word	0x00000000
 8001a2c:	40ed4c00 	.word	0x40ed4c00
 8001a30:	40000800 	.word	0x40000800
 8001a34:	200000a8 	.word	0x200000a8
 8001a38:	200000ac 	.word	0x200000ac
 8001a3c:	2000191c 	.word	0x2000191c
 8001a40:	20000090 	.word	0x20000090
 8001a44:	200000a0 	.word	0x200000a0
 8001a48:	200000a4 	.word	0x200000a4
 8001a4c:	409e2000 	.word	0x409e2000
 8001a50:	20000098 	.word	0x20000098
 8001a54:	08006c5c 	.word	0x08006c5c
 8001a58:	20000160 	.word	0x20000160

08001a5c <GetEncoderValue>:

void GetEncoderValue(double RPM){
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	ed87 0b00 	vstr	d0, [r7]
	// Calculate RPM
	pidController.measuredSpeed = RPM;
 8001a66:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a6a:	f7ff f817 	bl	8000a9c <__aeabi_d2uiz>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	4a02      	ldr	r2, [pc, #8]	; (8001a7c <GetEncoderValue+0x20>)
 8001a72:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001a74:	bf00      	nop
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	20000100 	.word	0x20000100

08001a80 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a84:	4b14      	ldr	r3, [pc, #80]	; (8001ad8 <MX_USART3_UART_Init+0x58>)
 8001a86:	4a15      	ldr	r2, [pc, #84]	; (8001adc <MX_USART3_UART_Init+0x5c>)
 8001a88:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001a8a:	4b13      	ldr	r3, [pc, #76]	; (8001ad8 <MX_USART3_UART_Init+0x58>)
 8001a8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a90:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a92:	4b11      	ldr	r3, [pc, #68]	; (8001ad8 <MX_USART3_UART_Init+0x58>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a98:	4b0f      	ldr	r3, [pc, #60]	; (8001ad8 <MX_USART3_UART_Init+0x58>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a9e:	4b0e      	ldr	r3, [pc, #56]	; (8001ad8 <MX_USART3_UART_Init+0x58>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001aa4:	4b0c      	ldr	r3, [pc, #48]	; (8001ad8 <MX_USART3_UART_Init+0x58>)
 8001aa6:	220c      	movs	r2, #12
 8001aa8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aaa:	4b0b      	ldr	r3, [pc, #44]	; (8001ad8 <MX_USART3_UART_Init+0x58>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ab0:	4b09      	ldr	r3, [pc, #36]	; (8001ad8 <MX_USART3_UART_Init+0x58>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ab6:	4b08      	ldr	r3, [pc, #32]	; (8001ad8 <MX_USART3_UART_Init+0x58>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001abc:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <MX_USART3_UART_Init+0x58>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ac2:	4805      	ldr	r0, [pc, #20]	; (8001ad8 <MX_USART3_UART_Init+0x58>)
 8001ac4:	f003 fc7a 	bl	80053bc <HAL_UART_Init>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001ace:	f7ff fc3f 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001ad2:	bf00      	nop
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	200019b4 	.word	0x200019b4
 8001adc:	40004800 	.word	0x40004800

08001ae0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b08a      	sub	sp, #40	; 0x28
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae8:	f107 0314 	add.w	r3, r7, #20
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	605a      	str	r2, [r3, #4]
 8001af2:	609a      	str	r2, [r3, #8]
 8001af4:	60da      	str	r2, [r3, #12]
 8001af6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a17      	ldr	r2, [pc, #92]	; (8001b5c <HAL_UART_MspInit+0x7c>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d128      	bne.n	8001b54 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b02:	4b17      	ldr	r3, [pc, #92]	; (8001b60 <HAL_UART_MspInit+0x80>)
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	4a16      	ldr	r2, [pc, #88]	; (8001b60 <HAL_UART_MspInit+0x80>)
 8001b08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b0e:	4b14      	ldr	r3, [pc, #80]	; (8001b60 <HAL_UART_MspInit+0x80>)
 8001b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b16:	613b      	str	r3, [r7, #16]
 8001b18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b1a:	4b11      	ldr	r3, [pc, #68]	; (8001b60 <HAL_UART_MspInit+0x80>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	4a10      	ldr	r2, [pc, #64]	; (8001b60 <HAL_UART_MspInit+0x80>)
 8001b20:	f043 0308 	orr.w	r3, r3, #8
 8001b24:	6313      	str	r3, [r2, #48]	; 0x30
 8001b26:	4b0e      	ldr	r3, [pc, #56]	; (8001b60 <HAL_UART_MspInit+0x80>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	f003 0308 	and.w	r3, r3, #8
 8001b2e:	60fb      	str	r3, [r7, #12]
 8001b30:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001b32:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b38:	2302      	movs	r3, #2
 8001b3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b40:	2303      	movs	r3, #3
 8001b42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b44:	2307      	movs	r3, #7
 8001b46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b48:	f107 0314 	add.w	r3, r7, #20
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4805      	ldr	r0, [pc, #20]	; (8001b64 <HAL_UART_MspInit+0x84>)
 8001b50:	f000 fce4 	bl	800251c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001b54:	bf00      	nop
 8001b56:	3728      	adds	r7, #40	; 0x28
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	40004800 	.word	0x40004800
 8001b60:	40023800 	.word	0x40023800
 8001b64:	40020c00 	.word	0x40020c00

08001b68 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001b6c:	4b14      	ldr	r3, [pc, #80]	; (8001bc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b6e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001b72:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001b74:	4b12      	ldr	r3, [pc, #72]	; (8001bc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b76:	2206      	movs	r2, #6
 8001b78:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001b7a:	4b11      	ldr	r3, [pc, #68]	; (8001bc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b7c:	2202      	movs	r2, #2
 8001b7e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001b80:	4b0f      	ldr	r3, [pc, #60]	; (8001bc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001b86:	4b0e      	ldr	r3, [pc, #56]	; (8001bc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b88:	2202      	movs	r2, #2
 8001b8a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001b8c:	4b0c      	ldr	r3, [pc, #48]	; (8001bc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b8e:	2201      	movs	r2, #1
 8001b90:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001b92:	4b0b      	ldr	r3, [pc, #44]	; (8001bc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001b98:	4b09      	ldr	r3, [pc, #36]	; (8001bc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001b9e:	4b08      	ldr	r3, [pc, #32]	; (8001bc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001ba4:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001baa:	4805      	ldr	r0, [pc, #20]	; (8001bc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001bac:	f000 fe7b 	bl	80028a6 <HAL_PCD_Init>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001bb6:	f7ff fbcb 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001bba:	bf00      	nop
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	20001a38 	.word	0x20001a38

08001bc4 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b08a      	sub	sp, #40	; 0x28
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bcc:	f107 0314 	add.w	r3, r7, #20
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	605a      	str	r2, [r3, #4]
 8001bd6:	609a      	str	r2, [r3, #8]
 8001bd8:	60da      	str	r2, [r3, #12]
 8001bda:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001be4:	d141      	bne.n	8001c6a <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be6:	4b23      	ldr	r3, [pc, #140]	; (8001c74 <HAL_PCD_MspInit+0xb0>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	4a22      	ldr	r2, [pc, #136]	; (8001c74 <HAL_PCD_MspInit+0xb0>)
 8001bec:	f043 0301 	orr.w	r3, r3, #1
 8001bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf2:	4b20      	ldr	r3, [pc, #128]	; (8001c74 <HAL_PCD_MspInit+0xb0>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	613b      	str	r3, [r7, #16]
 8001bfc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001bfe:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001c02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c04:	2302      	movs	r3, #2
 8001c06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001c10:	230a      	movs	r3, #10
 8001c12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c14:	f107 0314 	add.w	r3, r7, #20
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4817      	ldr	r0, [pc, #92]	; (8001c78 <HAL_PCD_MspInit+0xb4>)
 8001c1c:	f000 fc7e 	bl	800251c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001c20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c26:	2300      	movs	r3, #0
 8001c28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001c2e:	f107 0314 	add.w	r3, r7, #20
 8001c32:	4619      	mov	r1, r3
 8001c34:	4810      	ldr	r0, [pc, #64]	; (8001c78 <HAL_PCD_MspInit+0xb4>)
 8001c36:	f000 fc71 	bl	800251c <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001c3a:	4b0e      	ldr	r3, [pc, #56]	; (8001c74 <HAL_PCD_MspInit+0xb0>)
 8001c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c3e:	4a0d      	ldr	r2, [pc, #52]	; (8001c74 <HAL_PCD_MspInit+0xb0>)
 8001c40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c44:	6353      	str	r3, [r2, #52]	; 0x34
 8001c46:	4b0b      	ldr	r3, [pc, #44]	; (8001c74 <HAL_PCD_MspInit+0xb0>)
 8001c48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c4e:	60fb      	str	r3, [r7, #12]
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	4b08      	ldr	r3, [pc, #32]	; (8001c74 <HAL_PCD_MspInit+0xb0>)
 8001c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c56:	4a07      	ldr	r2, [pc, #28]	; (8001c74 <HAL_PCD_MspInit+0xb0>)
 8001c58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c5e:	4b05      	ldr	r3, [pc, #20]	; (8001c74 <HAL_PCD_MspInit+0xb0>)
 8001c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c66:	60bb      	str	r3, [r7, #8]
 8001c68:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001c6a:	bf00      	nop
 8001c6c:	3728      	adds	r7, #40	; 0x28
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	40023800 	.word	0x40023800
 8001c78:	40020000 	.word	0x40020000

08001c7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cb4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c80:	480d      	ldr	r0, [pc, #52]	; (8001cb8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c82:	490e      	ldr	r1, [pc, #56]	; (8001cbc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c84:	4a0e      	ldr	r2, [pc, #56]	; (8001cc0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c88:	e002      	b.n	8001c90 <LoopCopyDataInit>

08001c8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c8e:	3304      	adds	r3, #4

08001c90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c94:	d3f9      	bcc.n	8001c8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c96:	4a0b      	ldr	r2, [pc, #44]	; (8001cc4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c98:	4c0b      	ldr	r4, [pc, #44]	; (8001cc8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c9c:	e001      	b.n	8001ca2 <LoopFillZerobss>

08001c9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ca0:	3204      	adds	r2, #4

08001ca2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ca2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ca4:	d3fb      	bcc.n	8001c9e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ca6:	f7ff fbe7 	bl	8001478 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001caa:	f004 fb61 	bl	8006370 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cae:	f7ff fa5f 	bl	8001170 <main>
  bx  lr    
 8001cb2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001cb4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001cb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cbc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001cc0:	08006cc0 	.word	0x08006cc0
  ldr r2, =_sbss
 8001cc4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001cc8:	20001e50 	.word	0x20001e50

08001ccc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ccc:	e7fe      	b.n	8001ccc <ADC_IRQHandler>

08001cce <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cd2:	2003      	movs	r0, #3
 8001cd4:	f000 fbe0 	bl	8002498 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cd8:	2000      	movs	r0, #0
 8001cda:	f000 f805 	bl	8001ce8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cde:	f7ff fb3d 	bl	800135c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ce2:	2300      	movs	r3, #0
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cf0:	4b12      	ldr	r3, [pc, #72]	; (8001d3c <HAL_InitTick+0x54>)
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	4b12      	ldr	r3, [pc, #72]	; (8001d40 <HAL_InitTick+0x58>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d06:	4618      	mov	r0, r3
 8001d08:	f000 fbfb 	bl	8002502 <HAL_SYSTICK_Config>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e00e      	b.n	8001d34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2b0f      	cmp	r3, #15
 8001d1a:	d80a      	bhi.n	8001d32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	6879      	ldr	r1, [r7, #4]
 8001d20:	f04f 30ff 	mov.w	r0, #4294967295
 8001d24:	f000 fbc3 	bl	80024ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d28:	4a06      	ldr	r2, [pc, #24]	; (8001d44 <HAL_InitTick+0x5c>)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	e000      	b.n	8001d34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3708      	adds	r7, #8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	20000000 	.word	0x20000000
 8001d40:	20000008 	.word	0x20000008
 8001d44:	20000004 	.word	0x20000004

08001d48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d4c:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <HAL_IncTick+0x20>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	461a      	mov	r2, r3
 8001d52:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <HAL_IncTick+0x24>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4413      	add	r3, r2
 8001d58:	4a04      	ldr	r2, [pc, #16]	; (8001d6c <HAL_IncTick+0x24>)
 8001d5a:	6013      	str	r3, [r2, #0]
}
 8001d5c:	bf00      	nop
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	20000008 	.word	0x20000008
 8001d6c:	20001e3c 	.word	0x20001e3c

08001d70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  return uwTick;
 8001d74:	4b03      	ldr	r3, [pc, #12]	; (8001d84 <HAL_GetTick+0x14>)
 8001d76:	681b      	ldr	r3, [r3, #0]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	20001e3c 	.word	0x20001e3c

08001d88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d90:	f7ff ffee 	bl	8001d70 <HAL_GetTick>
 8001d94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001da0:	d005      	beq.n	8001dae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001da2:	4b0a      	ldr	r3, [pc, #40]	; (8001dcc <HAL_Delay+0x44>)
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	461a      	mov	r2, r3
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	4413      	add	r3, r2
 8001dac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001dae:	bf00      	nop
 8001db0:	f7ff ffde 	bl	8001d70 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	68fa      	ldr	r2, [r7, #12]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d8f7      	bhi.n	8001db0 <HAL_Delay+0x28>
  {
  }
}
 8001dc0:	bf00      	nop
 8001dc2:	bf00      	nop
 8001dc4:	3710      	adds	r7, #16
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	20000008 	.word	0x20000008

08001dd0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d101      	bne.n	8001de6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e031      	b.n	8001e4a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d109      	bne.n	8001e02 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f7ff f842 	bl	8000e78 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2200      	movs	r2, #0
 8001df8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e06:	f003 0310 	and.w	r3, r3, #16
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d116      	bne.n	8001e3c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e12:	4b10      	ldr	r3, [pc, #64]	; (8001e54 <HAL_ADC_Init+0x84>)
 8001e14:	4013      	ands	r3, r2
 8001e16:	f043 0202 	orr.w	r2, r3, #2
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f000 f970 	bl	8002104 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2e:	f023 0303 	bic.w	r3, r3, #3
 8001e32:	f043 0201 	orr.w	r2, r3, #1
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	641a      	str	r2, [r3, #64]	; 0x40
 8001e3a:	e001      	b.n	8001e40 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2200      	movs	r2, #0
 8001e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3710      	adds	r7, #16
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	ffffeefd 	.word	0xffffeefd

08001e58 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b085      	sub	sp, #20
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001e62:	2300      	movs	r3, #0
 8001e64:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d101      	bne.n	8001e74 <HAL_ADC_ConfigChannel+0x1c>
 8001e70:	2302      	movs	r3, #2
 8001e72:	e136      	b.n	80020e2 <HAL_ADC_ConfigChannel+0x28a>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2b09      	cmp	r3, #9
 8001e82:	d93a      	bls.n	8001efa <HAL_ADC_ConfigChannel+0xa2>
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001e8c:	d035      	beq.n	8001efa <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	68d9      	ldr	r1, [r3, #12]
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	4413      	add	r3, r2
 8001ea2:	3b1e      	subs	r3, #30
 8001ea4:	2207      	movs	r2, #7
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	43da      	mvns	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	400a      	ands	r2, r1
 8001eb2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a8d      	ldr	r2, [pc, #564]	; (80020f0 <HAL_ADC_ConfigChannel+0x298>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d10a      	bne.n	8001ed4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	68d9      	ldr	r1, [r3, #12]
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	061a      	lsls	r2, r3, #24
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ed2:	e035      	b.n	8001f40 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	68d9      	ldr	r1, [r3, #12]
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	689a      	ldr	r2, [r3, #8]
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	4403      	add	r3, r0
 8001eec:	3b1e      	subs	r3, #30
 8001eee:	409a      	lsls	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	430a      	orrs	r2, r1
 8001ef6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ef8:	e022      	b.n	8001f40 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	6919      	ldr	r1, [r3, #16]
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	461a      	mov	r2, r3
 8001f08:	4613      	mov	r3, r2
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	4413      	add	r3, r2
 8001f0e:	2207      	movs	r2, #7
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	43da      	mvns	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	400a      	ands	r2, r1
 8001f1c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	6919      	ldr	r1, [r3, #16]
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	689a      	ldr	r2, [r3, #8]
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	4618      	mov	r0, r3
 8001f30:	4603      	mov	r3, r0
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	4403      	add	r3, r0
 8001f36:	409a      	lsls	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	2b06      	cmp	r3, #6
 8001f46:	d824      	bhi.n	8001f92 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685a      	ldr	r2, [r3, #4]
 8001f52:	4613      	mov	r3, r2
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	4413      	add	r3, r2
 8001f58:	3b05      	subs	r3, #5
 8001f5a:	221f      	movs	r2, #31
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	43da      	mvns	r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	400a      	ands	r2, r1
 8001f68:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	4618      	mov	r0, r3
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685a      	ldr	r2, [r3, #4]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	4413      	add	r3, r2
 8001f82:	3b05      	subs	r3, #5
 8001f84:	fa00 f203 	lsl.w	r2, r0, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	635a      	str	r2, [r3, #52]	; 0x34
 8001f90:	e04c      	b.n	800202c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	2b0c      	cmp	r3, #12
 8001f98:	d824      	bhi.n	8001fe4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685a      	ldr	r2, [r3, #4]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	4413      	add	r3, r2
 8001faa:	3b23      	subs	r3, #35	; 0x23
 8001fac:	221f      	movs	r2, #31
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	43da      	mvns	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	400a      	ands	r2, r1
 8001fba:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	4618      	mov	r0, r3
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685a      	ldr	r2, [r3, #4]
 8001fce:	4613      	mov	r3, r2
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	4413      	add	r3, r2
 8001fd4:	3b23      	subs	r3, #35	; 0x23
 8001fd6:	fa00 f203 	lsl.w	r2, r0, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	631a      	str	r2, [r3, #48]	; 0x30
 8001fe2:	e023      	b.n	800202c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685a      	ldr	r2, [r3, #4]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	4413      	add	r3, r2
 8001ff4:	3b41      	subs	r3, #65	; 0x41
 8001ff6:	221f      	movs	r2, #31
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	43da      	mvns	r2, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	400a      	ands	r2, r1
 8002004:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	b29b      	uxth	r3, r3
 8002012:	4618      	mov	r0, r3
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685a      	ldr	r2, [r3, #4]
 8002018:	4613      	mov	r3, r2
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	4413      	add	r3, r2
 800201e:	3b41      	subs	r3, #65	; 0x41
 8002020:	fa00 f203 	lsl.w	r2, r0, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	430a      	orrs	r2, r1
 800202a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a30      	ldr	r2, [pc, #192]	; (80020f4 <HAL_ADC_ConfigChannel+0x29c>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d10a      	bne.n	800204c <HAL_ADC_ConfigChannel+0x1f4>
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800203e:	d105      	bne.n	800204c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002040:	4b2d      	ldr	r3, [pc, #180]	; (80020f8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	4a2c      	ldr	r2, [pc, #176]	; (80020f8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002046:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800204a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a28      	ldr	r2, [pc, #160]	; (80020f4 <HAL_ADC_ConfigChannel+0x29c>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d10f      	bne.n	8002076 <HAL_ADC_ConfigChannel+0x21e>
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	2b12      	cmp	r3, #18
 800205c:	d10b      	bne.n	8002076 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800205e:	4b26      	ldr	r3, [pc, #152]	; (80020f8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	4a25      	ldr	r2, [pc, #148]	; (80020f8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002064:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002068:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800206a:	4b23      	ldr	r3, [pc, #140]	; (80020f8 <HAL_ADC_ConfigChannel+0x2a0>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	4a22      	ldr	r2, [pc, #136]	; (80020f8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002070:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002074:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a1e      	ldr	r2, [pc, #120]	; (80020f4 <HAL_ADC_ConfigChannel+0x29c>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d12b      	bne.n	80020d8 <HAL_ADC_ConfigChannel+0x280>
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a1a      	ldr	r2, [pc, #104]	; (80020f0 <HAL_ADC_ConfigChannel+0x298>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d003      	beq.n	8002092 <HAL_ADC_ConfigChannel+0x23a>
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2b11      	cmp	r3, #17
 8002090:	d122      	bne.n	80020d8 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002092:	4b19      	ldr	r3, [pc, #100]	; (80020f8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	4a18      	ldr	r2, [pc, #96]	; (80020f8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002098:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800209c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800209e:	4b16      	ldr	r3, [pc, #88]	; (80020f8 <HAL_ADC_ConfigChannel+0x2a0>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	4a15      	ldr	r2, [pc, #84]	; (80020f8 <HAL_ADC_ConfigChannel+0x2a0>)
 80020a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80020a8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a10      	ldr	r2, [pc, #64]	; (80020f0 <HAL_ADC_ConfigChannel+0x298>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d111      	bne.n	80020d8 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80020b4:	4b11      	ldr	r3, [pc, #68]	; (80020fc <HAL_ADC_ConfigChannel+0x2a4>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a11      	ldr	r2, [pc, #68]	; (8002100 <HAL_ADC_ConfigChannel+0x2a8>)
 80020ba:	fba2 2303 	umull	r2, r3, r2, r3
 80020be:	0c9a      	lsrs	r2, r3, #18
 80020c0:	4613      	mov	r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	4413      	add	r3, r2
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80020ca:	e002      	b.n	80020d2 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	3b01      	subs	r3, #1
 80020d0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d1f9      	bne.n	80020cc <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3714      	adds	r7, #20
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	10000012 	.word	0x10000012
 80020f4:	40012000 	.word	0x40012000
 80020f8:	40012300 	.word	0x40012300
 80020fc:	20000000 	.word	0x20000000
 8002100:	431bde83 	.word	0x431bde83

08002104 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800210c:	4b78      	ldr	r3, [pc, #480]	; (80022f0 <ADC_Init+0x1ec>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	4a77      	ldr	r2, [pc, #476]	; (80022f0 <ADC_Init+0x1ec>)
 8002112:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002116:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002118:	4b75      	ldr	r3, [pc, #468]	; (80022f0 <ADC_Init+0x1ec>)
 800211a:	685a      	ldr	r2, [r3, #4]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	4973      	ldr	r1, [pc, #460]	; (80022f0 <ADC_Init+0x1ec>)
 8002122:	4313      	orrs	r3, r2
 8002124:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	685a      	ldr	r2, [r3, #4]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002134:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	6859      	ldr	r1, [r3, #4]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	691b      	ldr	r3, [r3, #16]
 8002140:	021a      	lsls	r2, r3, #8
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	430a      	orrs	r2, r1
 8002148:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	685a      	ldr	r2, [r3, #4]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002158:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	6859      	ldr	r1, [r3, #4]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689a      	ldr	r2, [r3, #8]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	430a      	orrs	r2, r1
 800216a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	689a      	ldr	r2, [r3, #8]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800217a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	6899      	ldr	r1, [r3, #8]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	68da      	ldr	r2, [r3, #12]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	430a      	orrs	r2, r1
 800218c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002192:	4a58      	ldr	r2, [pc, #352]	; (80022f4 <ADC_Init+0x1f0>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d022      	beq.n	80021de <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	689a      	ldr	r2, [r3, #8]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021a6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	6899      	ldr	r1, [r3, #8]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	430a      	orrs	r2, r1
 80021b8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	689a      	ldr	r2, [r3, #8]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	6899      	ldr	r1, [r3, #8]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	430a      	orrs	r2, r1
 80021da:	609a      	str	r2, [r3, #8]
 80021dc:	e00f      	b.n	80021fe <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	689a      	ldr	r2, [r3, #8]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	689a      	ldr	r2, [r3, #8]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021fc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	689a      	ldr	r2, [r3, #8]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f022 0202 	bic.w	r2, r2, #2
 800220c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	6899      	ldr	r1, [r3, #8]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	005a      	lsls	r2, r3, #1
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	430a      	orrs	r2, r1
 8002220:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d01b      	beq.n	8002264 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	685a      	ldr	r2, [r3, #4]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800223a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	685a      	ldr	r2, [r3, #4]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800224a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	6859      	ldr	r1, [r3, #4]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002256:	3b01      	subs	r3, #1
 8002258:	035a      	lsls	r2, r3, #13
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	430a      	orrs	r2, r1
 8002260:	605a      	str	r2, [r3, #4]
 8002262:	e007      	b.n	8002274 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	685a      	ldr	r2, [r3, #4]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002272:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002282:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	69db      	ldr	r3, [r3, #28]
 800228e:	3b01      	subs	r3, #1
 8002290:	051a      	lsls	r2, r3, #20
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	430a      	orrs	r2, r1
 8002298:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	689a      	ldr	r2, [r3, #8]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80022a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	6899      	ldr	r1, [r3, #8]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80022b6:	025a      	lsls	r2, r3, #9
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	430a      	orrs	r2, r1
 80022be:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	689a      	ldr	r2, [r3, #8]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	6899      	ldr	r1, [r3, #8]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	695b      	ldr	r3, [r3, #20]
 80022da:	029a      	lsls	r2, r3, #10
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	430a      	orrs	r2, r1
 80022e2:	609a      	str	r2, [r3, #8]
}
 80022e4:	bf00      	nop
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr
 80022f0:	40012300 	.word	0x40012300
 80022f4:	0f000001 	.word	0x0f000001

080022f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b085      	sub	sp, #20
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f003 0307 	and.w	r3, r3, #7
 8002306:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002308:	4b0b      	ldr	r3, [pc, #44]	; (8002338 <__NVIC_SetPriorityGrouping+0x40>)
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800230e:	68ba      	ldr	r2, [r7, #8]
 8002310:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002314:	4013      	ands	r3, r2
 8002316:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002320:	4b06      	ldr	r3, [pc, #24]	; (800233c <__NVIC_SetPriorityGrouping+0x44>)
 8002322:	4313      	orrs	r3, r2
 8002324:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002326:	4a04      	ldr	r2, [pc, #16]	; (8002338 <__NVIC_SetPriorityGrouping+0x40>)
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	60d3      	str	r3, [r2, #12]
}
 800232c:	bf00      	nop
 800232e:	3714      	adds	r7, #20
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr
 8002338:	e000ed00 	.word	0xe000ed00
 800233c:	05fa0000 	.word	0x05fa0000

08002340 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002344:	4b04      	ldr	r3, [pc, #16]	; (8002358 <__NVIC_GetPriorityGrouping+0x18>)
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	0a1b      	lsrs	r3, r3, #8
 800234a:	f003 0307 	and.w	r3, r3, #7
}
 800234e:	4618      	mov	r0, r3
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr
 8002358:	e000ed00 	.word	0xe000ed00

0800235c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	4603      	mov	r3, r0
 8002364:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236a:	2b00      	cmp	r3, #0
 800236c:	db0b      	blt.n	8002386 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800236e:	79fb      	ldrb	r3, [r7, #7]
 8002370:	f003 021f 	and.w	r2, r3, #31
 8002374:	4907      	ldr	r1, [pc, #28]	; (8002394 <__NVIC_EnableIRQ+0x38>)
 8002376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237a:	095b      	lsrs	r3, r3, #5
 800237c:	2001      	movs	r0, #1
 800237e:	fa00 f202 	lsl.w	r2, r0, r2
 8002382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002386:	bf00      	nop
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	e000e100 	.word	0xe000e100

08002398 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	4603      	mov	r3, r0
 80023a0:	6039      	str	r1, [r7, #0]
 80023a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	db0a      	blt.n	80023c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	b2da      	uxtb	r2, r3
 80023b0:	490c      	ldr	r1, [pc, #48]	; (80023e4 <__NVIC_SetPriority+0x4c>)
 80023b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b6:	0112      	lsls	r2, r2, #4
 80023b8:	b2d2      	uxtb	r2, r2
 80023ba:	440b      	add	r3, r1
 80023bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023c0:	e00a      	b.n	80023d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	b2da      	uxtb	r2, r3
 80023c6:	4908      	ldr	r1, [pc, #32]	; (80023e8 <__NVIC_SetPriority+0x50>)
 80023c8:	79fb      	ldrb	r3, [r7, #7]
 80023ca:	f003 030f 	and.w	r3, r3, #15
 80023ce:	3b04      	subs	r3, #4
 80023d0:	0112      	lsls	r2, r2, #4
 80023d2:	b2d2      	uxtb	r2, r2
 80023d4:	440b      	add	r3, r1
 80023d6:	761a      	strb	r2, [r3, #24]
}
 80023d8:	bf00      	nop
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr
 80023e4:	e000e100 	.word	0xe000e100
 80023e8:	e000ed00 	.word	0xe000ed00

080023ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b089      	sub	sp, #36	; 0x24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f003 0307 	and.w	r3, r3, #7
 80023fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	f1c3 0307 	rsb	r3, r3, #7
 8002406:	2b04      	cmp	r3, #4
 8002408:	bf28      	it	cs
 800240a:	2304      	movcs	r3, #4
 800240c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	3304      	adds	r3, #4
 8002412:	2b06      	cmp	r3, #6
 8002414:	d902      	bls.n	800241c <NVIC_EncodePriority+0x30>
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	3b03      	subs	r3, #3
 800241a:	e000      	b.n	800241e <NVIC_EncodePriority+0x32>
 800241c:	2300      	movs	r3, #0
 800241e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002420:	f04f 32ff 	mov.w	r2, #4294967295
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	fa02 f303 	lsl.w	r3, r2, r3
 800242a:	43da      	mvns	r2, r3
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	401a      	ands	r2, r3
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002434:	f04f 31ff 	mov.w	r1, #4294967295
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	fa01 f303 	lsl.w	r3, r1, r3
 800243e:	43d9      	mvns	r1, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002444:	4313      	orrs	r3, r2
         );
}
 8002446:	4618      	mov	r0, r3
 8002448:	3724      	adds	r7, #36	; 0x24
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
	...

08002454 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	3b01      	subs	r3, #1
 8002460:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002464:	d301      	bcc.n	800246a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002466:	2301      	movs	r3, #1
 8002468:	e00f      	b.n	800248a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800246a:	4a0a      	ldr	r2, [pc, #40]	; (8002494 <SysTick_Config+0x40>)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	3b01      	subs	r3, #1
 8002470:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002472:	210f      	movs	r1, #15
 8002474:	f04f 30ff 	mov.w	r0, #4294967295
 8002478:	f7ff ff8e 	bl	8002398 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800247c:	4b05      	ldr	r3, [pc, #20]	; (8002494 <SysTick_Config+0x40>)
 800247e:	2200      	movs	r2, #0
 8002480:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002482:	4b04      	ldr	r3, [pc, #16]	; (8002494 <SysTick_Config+0x40>)
 8002484:	2207      	movs	r2, #7
 8002486:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3708      	adds	r7, #8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	e000e010 	.word	0xe000e010

08002498 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f7ff ff29 	bl	80022f8 <__NVIC_SetPriorityGrouping>
}
 80024a6:	bf00      	nop
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}

080024ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b086      	sub	sp, #24
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	4603      	mov	r3, r0
 80024b6:	60b9      	str	r1, [r7, #8]
 80024b8:	607a      	str	r2, [r7, #4]
 80024ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80024bc:	2300      	movs	r3, #0
 80024be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024c0:	f7ff ff3e 	bl	8002340 <__NVIC_GetPriorityGrouping>
 80024c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	68b9      	ldr	r1, [r7, #8]
 80024ca:	6978      	ldr	r0, [r7, #20]
 80024cc:	f7ff ff8e 	bl	80023ec <NVIC_EncodePriority>
 80024d0:	4602      	mov	r2, r0
 80024d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024d6:	4611      	mov	r1, r2
 80024d8:	4618      	mov	r0, r3
 80024da:	f7ff ff5d 	bl	8002398 <__NVIC_SetPriority>
}
 80024de:	bf00      	nop
 80024e0:	3718      	adds	r7, #24
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b082      	sub	sp, #8
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	4603      	mov	r3, r0
 80024ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7ff ff31 	bl	800235c <__NVIC_EnableIRQ>
}
 80024fa:	bf00      	nop
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	b082      	sub	sp, #8
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f7ff ffa2 	bl	8002454 <SysTick_Config>
 8002510:	4603      	mov	r3, r0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
	...

0800251c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800251c:	b480      	push	{r7}
 800251e:	b089      	sub	sp, #36	; 0x24
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002526:	2300      	movs	r3, #0
 8002528:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800252a:	2300      	movs	r3, #0
 800252c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800252e:	2300      	movs	r3, #0
 8002530:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002532:	2300      	movs	r3, #0
 8002534:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002536:	2300      	movs	r3, #0
 8002538:	61fb      	str	r3, [r7, #28]
 800253a:	e175      	b.n	8002828 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800253c:	2201      	movs	r2, #1
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	697a      	ldr	r2, [r7, #20]
 800254c:	4013      	ands	r3, r2
 800254e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002550:	693a      	ldr	r2, [r7, #16]
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	429a      	cmp	r2, r3
 8002556:	f040 8164 	bne.w	8002822 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f003 0303 	and.w	r3, r3, #3
 8002562:	2b01      	cmp	r3, #1
 8002564:	d005      	beq.n	8002572 <HAL_GPIO_Init+0x56>
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f003 0303 	and.w	r3, r3, #3
 800256e:	2b02      	cmp	r3, #2
 8002570:	d130      	bne.n	80025d4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	2203      	movs	r2, #3
 800257e:	fa02 f303 	lsl.w	r3, r2, r3
 8002582:	43db      	mvns	r3, r3
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	4013      	ands	r3, r2
 8002588:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	68da      	ldr	r2, [r3, #12]
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	fa02 f303 	lsl.w	r3, r2, r3
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	4313      	orrs	r3, r2
 800259a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	69ba      	ldr	r2, [r7, #24]
 80025a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025a8:	2201      	movs	r2, #1
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	43db      	mvns	r3, r3
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	4013      	ands	r3, r2
 80025b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	091b      	lsrs	r3, r3, #4
 80025be:	f003 0201 	and.w	r2, r3, #1
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f003 0303 	and.w	r3, r3, #3
 80025dc:	2b03      	cmp	r3, #3
 80025de:	d017      	beq.n	8002610 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	2203      	movs	r2, #3
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	43db      	mvns	r3, r3
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	4013      	ands	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	689a      	ldr	r2, [r3, #8]
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	4313      	orrs	r3, r2
 8002608:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f003 0303 	and.w	r3, r3, #3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d123      	bne.n	8002664 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	08da      	lsrs	r2, r3, #3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	3208      	adds	r2, #8
 8002624:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002628:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	f003 0307 	and.w	r3, r3, #7
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	220f      	movs	r2, #15
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	43db      	mvns	r3, r3
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	4013      	ands	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	691a      	ldr	r2, [r3, #16]
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	f003 0307 	and.w	r3, r3, #7
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	4313      	orrs	r3, r2
 8002654:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	08da      	lsrs	r2, r3, #3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	3208      	adds	r2, #8
 800265e:	69b9      	ldr	r1, [r7, #24]
 8002660:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	2203      	movs	r2, #3
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	43db      	mvns	r3, r3
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	4013      	ands	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f003 0203 	and.w	r2, r3, #3
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	4313      	orrs	r3, r2
 8002690:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	f000 80be 	beq.w	8002822 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026a6:	4b66      	ldr	r3, [pc, #408]	; (8002840 <HAL_GPIO_Init+0x324>)
 80026a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026aa:	4a65      	ldr	r2, [pc, #404]	; (8002840 <HAL_GPIO_Init+0x324>)
 80026ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026b0:	6453      	str	r3, [r2, #68]	; 0x44
 80026b2:	4b63      	ldr	r3, [pc, #396]	; (8002840 <HAL_GPIO_Init+0x324>)
 80026b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ba:	60fb      	str	r3, [r7, #12]
 80026bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80026be:	4a61      	ldr	r2, [pc, #388]	; (8002844 <HAL_GPIO_Init+0x328>)
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	089b      	lsrs	r3, r3, #2
 80026c4:	3302      	adds	r3, #2
 80026c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	f003 0303 	and.w	r3, r3, #3
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	220f      	movs	r2, #15
 80026d6:	fa02 f303 	lsl.w	r3, r2, r3
 80026da:	43db      	mvns	r3, r3
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	4013      	ands	r3, r2
 80026e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a58      	ldr	r2, [pc, #352]	; (8002848 <HAL_GPIO_Init+0x32c>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d037      	beq.n	800275a <HAL_GPIO_Init+0x23e>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a57      	ldr	r2, [pc, #348]	; (800284c <HAL_GPIO_Init+0x330>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d031      	beq.n	8002756 <HAL_GPIO_Init+0x23a>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a56      	ldr	r2, [pc, #344]	; (8002850 <HAL_GPIO_Init+0x334>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d02b      	beq.n	8002752 <HAL_GPIO_Init+0x236>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a55      	ldr	r2, [pc, #340]	; (8002854 <HAL_GPIO_Init+0x338>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d025      	beq.n	800274e <HAL_GPIO_Init+0x232>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a54      	ldr	r2, [pc, #336]	; (8002858 <HAL_GPIO_Init+0x33c>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d01f      	beq.n	800274a <HAL_GPIO_Init+0x22e>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a53      	ldr	r2, [pc, #332]	; (800285c <HAL_GPIO_Init+0x340>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d019      	beq.n	8002746 <HAL_GPIO_Init+0x22a>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a52      	ldr	r2, [pc, #328]	; (8002860 <HAL_GPIO_Init+0x344>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d013      	beq.n	8002742 <HAL_GPIO_Init+0x226>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a51      	ldr	r2, [pc, #324]	; (8002864 <HAL_GPIO_Init+0x348>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d00d      	beq.n	800273e <HAL_GPIO_Init+0x222>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a50      	ldr	r2, [pc, #320]	; (8002868 <HAL_GPIO_Init+0x34c>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d007      	beq.n	800273a <HAL_GPIO_Init+0x21e>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a4f      	ldr	r2, [pc, #316]	; (800286c <HAL_GPIO_Init+0x350>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d101      	bne.n	8002736 <HAL_GPIO_Init+0x21a>
 8002732:	2309      	movs	r3, #9
 8002734:	e012      	b.n	800275c <HAL_GPIO_Init+0x240>
 8002736:	230a      	movs	r3, #10
 8002738:	e010      	b.n	800275c <HAL_GPIO_Init+0x240>
 800273a:	2308      	movs	r3, #8
 800273c:	e00e      	b.n	800275c <HAL_GPIO_Init+0x240>
 800273e:	2307      	movs	r3, #7
 8002740:	e00c      	b.n	800275c <HAL_GPIO_Init+0x240>
 8002742:	2306      	movs	r3, #6
 8002744:	e00a      	b.n	800275c <HAL_GPIO_Init+0x240>
 8002746:	2305      	movs	r3, #5
 8002748:	e008      	b.n	800275c <HAL_GPIO_Init+0x240>
 800274a:	2304      	movs	r3, #4
 800274c:	e006      	b.n	800275c <HAL_GPIO_Init+0x240>
 800274e:	2303      	movs	r3, #3
 8002750:	e004      	b.n	800275c <HAL_GPIO_Init+0x240>
 8002752:	2302      	movs	r3, #2
 8002754:	e002      	b.n	800275c <HAL_GPIO_Init+0x240>
 8002756:	2301      	movs	r3, #1
 8002758:	e000      	b.n	800275c <HAL_GPIO_Init+0x240>
 800275a:	2300      	movs	r3, #0
 800275c:	69fa      	ldr	r2, [r7, #28]
 800275e:	f002 0203 	and.w	r2, r2, #3
 8002762:	0092      	lsls	r2, r2, #2
 8002764:	4093      	lsls	r3, r2
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	4313      	orrs	r3, r2
 800276a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800276c:	4935      	ldr	r1, [pc, #212]	; (8002844 <HAL_GPIO_Init+0x328>)
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	089b      	lsrs	r3, r3, #2
 8002772:	3302      	adds	r3, #2
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800277a:	4b3d      	ldr	r3, [pc, #244]	; (8002870 <HAL_GPIO_Init+0x354>)
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	43db      	mvns	r3, r3
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	4013      	ands	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d003      	beq.n	800279e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	4313      	orrs	r3, r2
 800279c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800279e:	4a34      	ldr	r2, [pc, #208]	; (8002870 <HAL_GPIO_Init+0x354>)
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027a4:	4b32      	ldr	r3, [pc, #200]	; (8002870 <HAL_GPIO_Init+0x354>)
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	43db      	mvns	r3, r3
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	4013      	ands	r3, r2
 80027b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d003      	beq.n	80027c8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027c8:	4a29      	ldr	r2, [pc, #164]	; (8002870 <HAL_GPIO_Init+0x354>)
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027ce:	4b28      	ldr	r3, [pc, #160]	; (8002870 <HAL_GPIO_Init+0x354>)
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	43db      	mvns	r3, r3
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	4013      	ands	r3, r2
 80027dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d003      	beq.n	80027f2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027f2:	4a1f      	ldr	r2, [pc, #124]	; (8002870 <HAL_GPIO_Init+0x354>)
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027f8:	4b1d      	ldr	r3, [pc, #116]	; (8002870 <HAL_GPIO_Init+0x354>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	43db      	mvns	r3, r3
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	4013      	ands	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d003      	beq.n	800281c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	4313      	orrs	r3, r2
 800281a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800281c:	4a14      	ldr	r2, [pc, #80]	; (8002870 <HAL_GPIO_Init+0x354>)
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	3301      	adds	r3, #1
 8002826:	61fb      	str	r3, [r7, #28]
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	2b0f      	cmp	r3, #15
 800282c:	f67f ae86 	bls.w	800253c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002830:	bf00      	nop
 8002832:	bf00      	nop
 8002834:	3724      	adds	r7, #36	; 0x24
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	40023800 	.word	0x40023800
 8002844:	40013800 	.word	0x40013800
 8002848:	40020000 	.word	0x40020000
 800284c:	40020400 	.word	0x40020400
 8002850:	40020800 	.word	0x40020800
 8002854:	40020c00 	.word	0x40020c00
 8002858:	40021000 	.word	0x40021000
 800285c:	40021400 	.word	0x40021400
 8002860:	40021800 	.word	0x40021800
 8002864:	40021c00 	.word	0x40021c00
 8002868:	40022000 	.word	0x40022000
 800286c:	40022400 	.word	0x40022400
 8002870:	40013c00 	.word	0x40013c00

08002874 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	460b      	mov	r3, r1
 800287e:	807b      	strh	r3, [r7, #2]
 8002880:	4613      	mov	r3, r2
 8002882:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002884:	787b      	ldrb	r3, [r7, #1]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d003      	beq.n	8002892 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800288a:	887a      	ldrh	r2, [r7, #2]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002890:	e003      	b.n	800289a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002892:	887b      	ldrh	r3, [r7, #2]
 8002894:	041a      	lsls	r2, r3, #16
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	619a      	str	r2, [r3, #24]
}
 800289a:	bf00      	nop
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr

080028a6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80028a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028a8:	b08f      	sub	sp, #60	; 0x3c
 80028aa:	af0a      	add	r7, sp, #40	; 0x28
 80028ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d101      	bne.n	80028b8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e116      	b.n	8002ae6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d106      	bne.n	80028d8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f7ff f976 	bl	8001bc4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2203      	movs	r2, #3
 80028dc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d102      	bne.n	80028f2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f003 fa96 	bl	8005e28 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	603b      	str	r3, [r7, #0]
 8002902:	687e      	ldr	r6, [r7, #4]
 8002904:	466d      	mov	r5, sp
 8002906:	f106 0410 	add.w	r4, r6, #16
 800290a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800290c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800290e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002910:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002912:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002916:	e885 0003 	stmia.w	r5, {r0, r1}
 800291a:	1d33      	adds	r3, r6, #4
 800291c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800291e:	6838      	ldr	r0, [r7, #0]
 8002920:	f003 fa2a 	bl	8005d78 <USB_CoreInit>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d005      	beq.n	8002936 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2202      	movs	r2, #2
 800292e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e0d7      	b.n	8002ae6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2100      	movs	r1, #0
 800293c:	4618      	mov	r0, r3
 800293e:	f003 fa84 	bl	8005e4a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002942:	2300      	movs	r3, #0
 8002944:	73fb      	strb	r3, [r7, #15]
 8002946:	e04a      	b.n	80029de <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002948:	7bfa      	ldrb	r2, [r7, #15]
 800294a:	6879      	ldr	r1, [r7, #4]
 800294c:	4613      	mov	r3, r2
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	1a9b      	subs	r3, r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	440b      	add	r3, r1
 8002956:	333d      	adds	r3, #61	; 0x3d
 8002958:	2201      	movs	r2, #1
 800295a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800295c:	7bfa      	ldrb	r2, [r7, #15]
 800295e:	6879      	ldr	r1, [r7, #4]
 8002960:	4613      	mov	r3, r2
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	1a9b      	subs	r3, r3, r2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	440b      	add	r3, r1
 800296a:	333c      	adds	r3, #60	; 0x3c
 800296c:	7bfa      	ldrb	r2, [r7, #15]
 800296e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002970:	7bfa      	ldrb	r2, [r7, #15]
 8002972:	7bfb      	ldrb	r3, [r7, #15]
 8002974:	b298      	uxth	r0, r3
 8002976:	6879      	ldr	r1, [r7, #4]
 8002978:	4613      	mov	r3, r2
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	1a9b      	subs	r3, r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	440b      	add	r3, r1
 8002982:	3342      	adds	r3, #66	; 0x42
 8002984:	4602      	mov	r2, r0
 8002986:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002988:	7bfa      	ldrb	r2, [r7, #15]
 800298a:	6879      	ldr	r1, [r7, #4]
 800298c:	4613      	mov	r3, r2
 800298e:	00db      	lsls	r3, r3, #3
 8002990:	1a9b      	subs	r3, r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	440b      	add	r3, r1
 8002996:	333f      	adds	r3, #63	; 0x3f
 8002998:	2200      	movs	r2, #0
 800299a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800299c:	7bfa      	ldrb	r2, [r7, #15]
 800299e:	6879      	ldr	r1, [r7, #4]
 80029a0:	4613      	mov	r3, r2
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	1a9b      	subs	r3, r3, r2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	440b      	add	r3, r1
 80029aa:	3344      	adds	r3, #68	; 0x44
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80029b0:	7bfa      	ldrb	r2, [r7, #15]
 80029b2:	6879      	ldr	r1, [r7, #4]
 80029b4:	4613      	mov	r3, r2
 80029b6:	00db      	lsls	r3, r3, #3
 80029b8:	1a9b      	subs	r3, r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	440b      	add	r3, r1
 80029be:	3348      	adds	r3, #72	; 0x48
 80029c0:	2200      	movs	r2, #0
 80029c2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80029c4:	7bfa      	ldrb	r2, [r7, #15]
 80029c6:	6879      	ldr	r1, [r7, #4]
 80029c8:	4613      	mov	r3, r2
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	1a9b      	subs	r3, r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	440b      	add	r3, r1
 80029d2:	3350      	adds	r3, #80	; 0x50
 80029d4:	2200      	movs	r2, #0
 80029d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029d8:	7bfb      	ldrb	r3, [r7, #15]
 80029da:	3301      	adds	r3, #1
 80029dc:	73fb      	strb	r3, [r7, #15]
 80029de:	7bfa      	ldrb	r2, [r7, #15]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d3af      	bcc.n	8002948 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029e8:	2300      	movs	r3, #0
 80029ea:	73fb      	strb	r3, [r7, #15]
 80029ec:	e044      	b.n	8002a78 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80029ee:	7bfa      	ldrb	r2, [r7, #15]
 80029f0:	6879      	ldr	r1, [r7, #4]
 80029f2:	4613      	mov	r3, r2
 80029f4:	00db      	lsls	r3, r3, #3
 80029f6:	1a9b      	subs	r3, r3, r2
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	440b      	add	r3, r1
 80029fc:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002a00:	2200      	movs	r2, #0
 8002a02:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a04:	7bfa      	ldrb	r2, [r7, #15]
 8002a06:	6879      	ldr	r1, [r7, #4]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	00db      	lsls	r3, r3, #3
 8002a0c:	1a9b      	subs	r3, r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	440b      	add	r3, r1
 8002a12:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002a16:	7bfa      	ldrb	r2, [r7, #15]
 8002a18:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a1a:	7bfa      	ldrb	r2, [r7, #15]
 8002a1c:	6879      	ldr	r1, [r7, #4]
 8002a1e:	4613      	mov	r3, r2
 8002a20:	00db      	lsls	r3, r3, #3
 8002a22:	1a9b      	subs	r3, r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	440b      	add	r3, r1
 8002a28:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a30:	7bfa      	ldrb	r2, [r7, #15]
 8002a32:	6879      	ldr	r1, [r7, #4]
 8002a34:	4613      	mov	r3, r2
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	1a9b      	subs	r3, r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	440b      	add	r3, r1
 8002a3e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002a42:	2200      	movs	r2, #0
 8002a44:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a46:	7bfa      	ldrb	r2, [r7, #15]
 8002a48:	6879      	ldr	r1, [r7, #4]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	00db      	lsls	r3, r3, #3
 8002a4e:	1a9b      	subs	r3, r3, r2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	440b      	add	r3, r1
 8002a54:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002a58:	2200      	movs	r2, #0
 8002a5a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a5c:	7bfa      	ldrb	r2, [r7, #15]
 8002a5e:	6879      	ldr	r1, [r7, #4]
 8002a60:	4613      	mov	r3, r2
 8002a62:	00db      	lsls	r3, r3, #3
 8002a64:	1a9b      	subs	r3, r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	440b      	add	r3, r1
 8002a6a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002a6e:	2200      	movs	r2, #0
 8002a70:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a72:	7bfb      	ldrb	r3, [r7, #15]
 8002a74:	3301      	adds	r3, #1
 8002a76:	73fb      	strb	r3, [r7, #15]
 8002a78:	7bfa      	ldrb	r2, [r7, #15]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d3b5      	bcc.n	80029ee <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	603b      	str	r3, [r7, #0]
 8002a88:	687e      	ldr	r6, [r7, #4]
 8002a8a:	466d      	mov	r5, sp
 8002a8c:	f106 0410 	add.w	r4, r6, #16
 8002a90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a98:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a9c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002aa0:	1d33      	adds	r3, r6, #4
 8002aa2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002aa4:	6838      	ldr	r0, [r7, #0]
 8002aa6:	f003 fa1d 	bl	8005ee4 <USB_DevInit>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d005      	beq.n	8002abc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2202      	movs	r2, #2
 8002ab4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e014      	b.n	8002ae6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d102      	bne.n	8002ada <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f000 f80b 	bl	8002af0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f003 fbd7 	bl	8006292 <USB_DevDisconnect>

  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3714      	adds	r7, #20
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002af0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b085      	sub	sp, #20
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	699b      	ldr	r3, [r3, #24]
 8002b12:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b1e:	4b05      	ldr	r3, [pc, #20]	; (8002b34 <HAL_PCDEx_ActivateLPM+0x44>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	68fa      	ldr	r2, [r7, #12]
 8002b24:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002b26:	2300      	movs	r3, #0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3714      	adds	r7, #20
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr
 8002b34:	10000003 	.word	0x10000003

08002b38 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b3c:	4b05      	ldr	r3, [pc, #20]	; (8002b54 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a04      	ldr	r2, [pc, #16]	; (8002b54 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b46:	6013      	str	r3, [r2, #0]
}
 8002b48:	bf00      	nop
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	40007000 	.word	0x40007000

08002b58 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b086      	sub	sp, #24
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002b60:	2300      	movs	r3, #0
 8002b62:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d101      	bne.n	8002b6e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e291      	b.n	8003092 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	f000 8087 	beq.w	8002c8a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b7c:	4b96      	ldr	r3, [pc, #600]	; (8002dd8 <HAL_RCC_OscConfig+0x280>)
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f003 030c 	and.w	r3, r3, #12
 8002b84:	2b04      	cmp	r3, #4
 8002b86:	d00c      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b88:	4b93      	ldr	r3, [pc, #588]	; (8002dd8 <HAL_RCC_OscConfig+0x280>)
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f003 030c 	and.w	r3, r3, #12
 8002b90:	2b08      	cmp	r3, #8
 8002b92:	d112      	bne.n	8002bba <HAL_RCC_OscConfig+0x62>
 8002b94:	4b90      	ldr	r3, [pc, #576]	; (8002dd8 <HAL_RCC_OscConfig+0x280>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ba0:	d10b      	bne.n	8002bba <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ba2:	4b8d      	ldr	r3, [pc, #564]	; (8002dd8 <HAL_RCC_OscConfig+0x280>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d06c      	beq.n	8002c88 <HAL_RCC_OscConfig+0x130>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d168      	bne.n	8002c88 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e26b      	b.n	8003092 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bc2:	d106      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x7a>
 8002bc4:	4b84      	ldr	r3, [pc, #528]	; (8002dd8 <HAL_RCC_OscConfig+0x280>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a83      	ldr	r2, [pc, #524]	; (8002dd8 <HAL_RCC_OscConfig+0x280>)
 8002bca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bce:	6013      	str	r3, [r2, #0]
 8002bd0:	e02e      	b.n	8002c30 <HAL_RCC_OscConfig+0xd8>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d10c      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x9c>
 8002bda:	4b7f      	ldr	r3, [pc, #508]	; (8002dd8 <HAL_RCC_OscConfig+0x280>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a7e      	ldr	r2, [pc, #504]	; (8002dd8 <HAL_RCC_OscConfig+0x280>)
 8002be0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002be4:	6013      	str	r3, [r2, #0]
 8002be6:	4b7c      	ldr	r3, [pc, #496]	; (8002dd8 <HAL_RCC_OscConfig+0x280>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a7b      	ldr	r2, [pc, #492]	; (8002dd8 <HAL_RCC_OscConfig+0x280>)
 8002bec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bf0:	6013      	str	r3, [r2, #0]
 8002bf2:	e01d      	b.n	8002c30 <HAL_RCC_OscConfig+0xd8>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bfc:	d10c      	bne.n	8002c18 <HAL_RCC_OscConfig+0xc0>
 8002bfe:	4b76      	ldr	r3, [pc, #472]	; (8002dd8 <HAL_RCC_OscConfig+0x280>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a75      	ldr	r2, [pc, #468]	; (8002dd8 <HAL_RCC_OscConfig+0x280>)
 8002c04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c08:	6013      	str	r3, [r2, #0]
 8002c0a:	4b73      	ldr	r3, [pc, #460]	; (8002dd8 <HAL_RCC_OscConfig+0x280>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a72      	ldr	r2, [pc, #456]	; (8002dd8 <HAL_RCC_OscConfig+0x280>)
 8002c10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c14:	6013      	str	r3, [r2, #0]
 8002c16:	e00b      	b.n	8002c30 <HAL_RCC_OscConfig+0xd8>
 8002c18:	4b6f      	ldr	r3, [pc, #444]	; (8002dd8 <HAL_RCC_OscConfig+0x280>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a6e      	ldr	r2, [pc, #440]	; (8002dd8 <HAL_RCC_OscConfig+0x280>)
 8002c1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c22:	6013      	str	r3, [r2, #0]
 8002c24:	4b6c      	ldr	r3, [pc, #432]	; (8002dd8 <HAL_RCC_OscConfig+0x280>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a6b      	ldr	r2, [pc, #428]	; (8002dd8 <HAL_RCC_OscConfig+0x280>)
 8002c2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d013      	beq.n	8002c60 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c38:	f7ff f89a 	bl	8001d70 <HAL_GetTick>
 8002c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c3e:	e008      	b.n	8002c52 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c40:	f7ff f896 	bl	8001d70 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	2b64      	cmp	r3, #100	; 0x64
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e21f      	b.n	8003092 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c52:	4b61      	ldr	r3, [pc, #388]	; (8002dd8 <HAL_RCC_OscConfig+0x280>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d0f0      	beq.n	8002c40 <HAL_RCC_OscConfig+0xe8>
 8002c5e:	e014      	b.n	8002c8a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c60:	f7ff f886 	bl	8001d70 <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c66:	e008      	b.n	8002c7a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c68:	f7ff f882 	bl	8001d70 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b64      	cmp	r3, #100	; 0x64
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e20b      	b.n	8003092 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c7a:	4b57      	ldr	r3, [pc, #348]	; (8002dd8 <HAL_RCC_OscConfig+0x280>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1f0      	bne.n	8002c68 <HAL_RCC_OscConfig+0x110>
 8002c86:	e000      	b.n	8002c8a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d069      	beq.n	8002d6a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c96:	4b50      	ldr	r3, [pc, #320]	; (8002dd8 <HAL_RCC_OscConfig+0x280>)
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f003 030c 	and.w	r3, r3, #12
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00b      	beq.n	8002cba <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ca2:	4b4d      	ldr	r3, [pc, #308]	; (8002dd8 <HAL_RCC_OscConfig+0x280>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f003 030c 	and.w	r3, r3, #12
 8002caa:	2b08      	cmp	r3, #8
 8002cac:	d11c      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x190>
 8002cae:	4b4a      	ldr	r3, [pc, #296]	; (8002dd8 <HAL_RCC_OscConfig+0x280>)
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d116      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cba:	4b47      	ldr	r3, [pc, #284]	; (8002dd8 <HAL_RCC_OscConfig+0x280>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d005      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x17a>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d001      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e1df      	b.n	8003092 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cd2:	4b41      	ldr	r3, [pc, #260]	; (8002dd8 <HAL_RCC_OscConfig+0x280>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	493d      	ldr	r1, [pc, #244]	; (8002dd8 <HAL_RCC_OscConfig+0x280>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ce6:	e040      	b.n	8002d6a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d023      	beq.n	8002d38 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cf0:	4b39      	ldr	r3, [pc, #228]	; (8002dd8 <HAL_RCC_OscConfig+0x280>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a38      	ldr	r2, [pc, #224]	; (8002dd8 <HAL_RCC_OscConfig+0x280>)
 8002cf6:	f043 0301 	orr.w	r3, r3, #1
 8002cfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cfc:	f7ff f838 	bl	8001d70 <HAL_GetTick>
 8002d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d02:	e008      	b.n	8002d16 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d04:	f7ff f834 	bl	8001d70 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e1bd      	b.n	8003092 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d16:	4b30      	ldr	r3, [pc, #192]	; (8002dd8 <HAL_RCC_OscConfig+0x280>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d0f0      	beq.n	8002d04 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d22:	4b2d      	ldr	r3, [pc, #180]	; (8002dd8 <HAL_RCC_OscConfig+0x280>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	4929      	ldr	r1, [pc, #164]	; (8002dd8 <HAL_RCC_OscConfig+0x280>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	600b      	str	r3, [r1, #0]
 8002d36:	e018      	b.n	8002d6a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d38:	4b27      	ldr	r3, [pc, #156]	; (8002dd8 <HAL_RCC_OscConfig+0x280>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a26      	ldr	r2, [pc, #152]	; (8002dd8 <HAL_RCC_OscConfig+0x280>)
 8002d3e:	f023 0301 	bic.w	r3, r3, #1
 8002d42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d44:	f7ff f814 	bl	8001d70 <HAL_GetTick>
 8002d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d4a:	e008      	b.n	8002d5e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d4c:	f7ff f810 	bl	8001d70 <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e199      	b.n	8003092 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d5e:	4b1e      	ldr	r3, [pc, #120]	; (8002dd8 <HAL_RCC_OscConfig+0x280>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0302 	and.w	r3, r3, #2
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1f0      	bne.n	8002d4c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0308 	and.w	r3, r3, #8
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d038      	beq.n	8002de8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	695b      	ldr	r3, [r3, #20]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d019      	beq.n	8002db2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d7e:	4b16      	ldr	r3, [pc, #88]	; (8002dd8 <HAL_RCC_OscConfig+0x280>)
 8002d80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d82:	4a15      	ldr	r2, [pc, #84]	; (8002dd8 <HAL_RCC_OscConfig+0x280>)
 8002d84:	f043 0301 	orr.w	r3, r3, #1
 8002d88:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d8a:	f7fe fff1 	bl	8001d70 <HAL_GetTick>
 8002d8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d90:	e008      	b.n	8002da4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d92:	f7fe ffed 	bl	8001d70 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d901      	bls.n	8002da4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e176      	b.n	8003092 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002da4:	4b0c      	ldr	r3, [pc, #48]	; (8002dd8 <HAL_RCC_OscConfig+0x280>)
 8002da6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d0f0      	beq.n	8002d92 <HAL_RCC_OscConfig+0x23a>
 8002db0:	e01a      	b.n	8002de8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002db2:	4b09      	ldr	r3, [pc, #36]	; (8002dd8 <HAL_RCC_OscConfig+0x280>)
 8002db4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002db6:	4a08      	ldr	r2, [pc, #32]	; (8002dd8 <HAL_RCC_OscConfig+0x280>)
 8002db8:	f023 0301 	bic.w	r3, r3, #1
 8002dbc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dbe:	f7fe ffd7 	bl	8001d70 <HAL_GetTick>
 8002dc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dc4:	e00a      	b.n	8002ddc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dc6:	f7fe ffd3 	bl	8001d70 <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d903      	bls.n	8002ddc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e15c      	b.n	8003092 <HAL_RCC_OscConfig+0x53a>
 8002dd8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ddc:	4b91      	ldr	r3, [pc, #580]	; (8003024 <HAL_RCC_OscConfig+0x4cc>)
 8002dde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002de0:	f003 0302 	and.w	r3, r3, #2
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d1ee      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0304 	and.w	r3, r3, #4
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	f000 80a4 	beq.w	8002f3e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002df6:	4b8b      	ldr	r3, [pc, #556]	; (8003024 <HAL_RCC_OscConfig+0x4cc>)
 8002df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d10d      	bne.n	8002e1e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e02:	4b88      	ldr	r3, [pc, #544]	; (8003024 <HAL_RCC_OscConfig+0x4cc>)
 8002e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e06:	4a87      	ldr	r2, [pc, #540]	; (8003024 <HAL_RCC_OscConfig+0x4cc>)
 8002e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e0c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e0e:	4b85      	ldr	r3, [pc, #532]	; (8003024 <HAL_RCC_OscConfig+0x4cc>)
 8002e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e16:	60bb      	str	r3, [r7, #8]
 8002e18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e1e:	4b82      	ldr	r3, [pc, #520]	; (8003028 <HAL_RCC_OscConfig+0x4d0>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d118      	bne.n	8002e5c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002e2a:	4b7f      	ldr	r3, [pc, #508]	; (8003028 <HAL_RCC_OscConfig+0x4d0>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a7e      	ldr	r2, [pc, #504]	; (8003028 <HAL_RCC_OscConfig+0x4d0>)
 8002e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e36:	f7fe ff9b 	bl	8001d70 <HAL_GetTick>
 8002e3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e3c:	e008      	b.n	8002e50 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e3e:	f7fe ff97 	bl	8001d70 <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	2b64      	cmp	r3, #100	; 0x64
 8002e4a:	d901      	bls.n	8002e50 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e120      	b.n	8003092 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e50:	4b75      	ldr	r3, [pc, #468]	; (8003028 <HAL_RCC_OscConfig+0x4d0>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d0f0      	beq.n	8002e3e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d106      	bne.n	8002e72 <HAL_RCC_OscConfig+0x31a>
 8002e64:	4b6f      	ldr	r3, [pc, #444]	; (8003024 <HAL_RCC_OscConfig+0x4cc>)
 8002e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e68:	4a6e      	ldr	r2, [pc, #440]	; (8003024 <HAL_RCC_OscConfig+0x4cc>)
 8002e6a:	f043 0301 	orr.w	r3, r3, #1
 8002e6e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e70:	e02d      	b.n	8002ece <HAL_RCC_OscConfig+0x376>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d10c      	bne.n	8002e94 <HAL_RCC_OscConfig+0x33c>
 8002e7a:	4b6a      	ldr	r3, [pc, #424]	; (8003024 <HAL_RCC_OscConfig+0x4cc>)
 8002e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e7e:	4a69      	ldr	r2, [pc, #420]	; (8003024 <HAL_RCC_OscConfig+0x4cc>)
 8002e80:	f023 0301 	bic.w	r3, r3, #1
 8002e84:	6713      	str	r3, [r2, #112]	; 0x70
 8002e86:	4b67      	ldr	r3, [pc, #412]	; (8003024 <HAL_RCC_OscConfig+0x4cc>)
 8002e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e8a:	4a66      	ldr	r2, [pc, #408]	; (8003024 <HAL_RCC_OscConfig+0x4cc>)
 8002e8c:	f023 0304 	bic.w	r3, r3, #4
 8002e90:	6713      	str	r3, [r2, #112]	; 0x70
 8002e92:	e01c      	b.n	8002ece <HAL_RCC_OscConfig+0x376>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	2b05      	cmp	r3, #5
 8002e9a:	d10c      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x35e>
 8002e9c:	4b61      	ldr	r3, [pc, #388]	; (8003024 <HAL_RCC_OscConfig+0x4cc>)
 8002e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea0:	4a60      	ldr	r2, [pc, #384]	; (8003024 <HAL_RCC_OscConfig+0x4cc>)
 8002ea2:	f043 0304 	orr.w	r3, r3, #4
 8002ea6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ea8:	4b5e      	ldr	r3, [pc, #376]	; (8003024 <HAL_RCC_OscConfig+0x4cc>)
 8002eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eac:	4a5d      	ldr	r2, [pc, #372]	; (8003024 <HAL_RCC_OscConfig+0x4cc>)
 8002eae:	f043 0301 	orr.w	r3, r3, #1
 8002eb2:	6713      	str	r3, [r2, #112]	; 0x70
 8002eb4:	e00b      	b.n	8002ece <HAL_RCC_OscConfig+0x376>
 8002eb6:	4b5b      	ldr	r3, [pc, #364]	; (8003024 <HAL_RCC_OscConfig+0x4cc>)
 8002eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eba:	4a5a      	ldr	r2, [pc, #360]	; (8003024 <HAL_RCC_OscConfig+0x4cc>)
 8002ebc:	f023 0301 	bic.w	r3, r3, #1
 8002ec0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ec2:	4b58      	ldr	r3, [pc, #352]	; (8003024 <HAL_RCC_OscConfig+0x4cc>)
 8002ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec6:	4a57      	ldr	r2, [pc, #348]	; (8003024 <HAL_RCC_OscConfig+0x4cc>)
 8002ec8:	f023 0304 	bic.w	r3, r3, #4
 8002ecc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d015      	beq.n	8002f02 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ed6:	f7fe ff4b 	bl	8001d70 <HAL_GetTick>
 8002eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002edc:	e00a      	b.n	8002ef4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ede:	f7fe ff47 	bl	8001d70 <HAL_GetTick>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d901      	bls.n	8002ef4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e0ce      	b.n	8003092 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ef4:	4b4b      	ldr	r3, [pc, #300]	; (8003024 <HAL_RCC_OscConfig+0x4cc>)
 8002ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef8:	f003 0302 	and.w	r3, r3, #2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d0ee      	beq.n	8002ede <HAL_RCC_OscConfig+0x386>
 8002f00:	e014      	b.n	8002f2c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f02:	f7fe ff35 	bl	8001d70 <HAL_GetTick>
 8002f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f08:	e00a      	b.n	8002f20 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f0a:	f7fe ff31 	bl	8001d70 <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d901      	bls.n	8002f20 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e0b8      	b.n	8003092 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f20:	4b40      	ldr	r3, [pc, #256]	; (8003024 <HAL_RCC_OscConfig+0x4cc>)
 8002f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f24:	f003 0302 	and.w	r3, r3, #2
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d1ee      	bne.n	8002f0a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f2c:	7dfb      	ldrb	r3, [r7, #23]
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d105      	bne.n	8002f3e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f32:	4b3c      	ldr	r3, [pc, #240]	; (8003024 <HAL_RCC_OscConfig+0x4cc>)
 8002f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f36:	4a3b      	ldr	r2, [pc, #236]	; (8003024 <HAL_RCC_OscConfig+0x4cc>)
 8002f38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f3c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	f000 80a4 	beq.w	8003090 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f48:	4b36      	ldr	r3, [pc, #216]	; (8003024 <HAL_RCC_OscConfig+0x4cc>)
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f003 030c 	and.w	r3, r3, #12
 8002f50:	2b08      	cmp	r3, #8
 8002f52:	d06b      	beq.n	800302c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d149      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f5c:	4b31      	ldr	r3, [pc, #196]	; (8003024 <HAL_RCC_OscConfig+0x4cc>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a30      	ldr	r2, [pc, #192]	; (8003024 <HAL_RCC_OscConfig+0x4cc>)
 8002f62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f68:	f7fe ff02 	bl	8001d70 <HAL_GetTick>
 8002f6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f6e:	e008      	b.n	8002f82 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f70:	f7fe fefe 	bl	8001d70 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d901      	bls.n	8002f82 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e087      	b.n	8003092 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f82:	4b28      	ldr	r3, [pc, #160]	; (8003024 <HAL_RCC_OscConfig+0x4cc>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d1f0      	bne.n	8002f70 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	69da      	ldr	r2, [r3, #28]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a1b      	ldr	r3, [r3, #32]
 8002f96:	431a      	orrs	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9c:	019b      	lsls	r3, r3, #6
 8002f9e:	431a      	orrs	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa4:	085b      	lsrs	r3, r3, #1
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	041b      	lsls	r3, r3, #16
 8002faa:	431a      	orrs	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb0:	061b      	lsls	r3, r3, #24
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	4a1b      	ldr	r2, [pc, #108]	; (8003024 <HAL_RCC_OscConfig+0x4cc>)
 8002fb6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002fba:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fbc:	4b19      	ldr	r3, [pc, #100]	; (8003024 <HAL_RCC_OscConfig+0x4cc>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a18      	ldr	r2, [pc, #96]	; (8003024 <HAL_RCC_OscConfig+0x4cc>)
 8002fc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc8:	f7fe fed2 	bl	8001d70 <HAL_GetTick>
 8002fcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fce:	e008      	b.n	8002fe2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fd0:	f7fe fece 	bl	8001d70 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e057      	b.n	8003092 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fe2:	4b10      	ldr	r3, [pc, #64]	; (8003024 <HAL_RCC_OscConfig+0x4cc>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d0f0      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x478>
 8002fee:	e04f      	b.n	8003090 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ff0:	4b0c      	ldr	r3, [pc, #48]	; (8003024 <HAL_RCC_OscConfig+0x4cc>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a0b      	ldr	r2, [pc, #44]	; (8003024 <HAL_RCC_OscConfig+0x4cc>)
 8002ff6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ffa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ffc:	f7fe feb8 	bl	8001d70 <HAL_GetTick>
 8003000:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003002:	e008      	b.n	8003016 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003004:	f7fe feb4 	bl	8001d70 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	2b02      	cmp	r3, #2
 8003010:	d901      	bls.n	8003016 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e03d      	b.n	8003092 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003016:	4b03      	ldr	r3, [pc, #12]	; (8003024 <HAL_RCC_OscConfig+0x4cc>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1f0      	bne.n	8003004 <HAL_RCC_OscConfig+0x4ac>
 8003022:	e035      	b.n	8003090 <HAL_RCC_OscConfig+0x538>
 8003024:	40023800 	.word	0x40023800
 8003028:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800302c:	4b1b      	ldr	r3, [pc, #108]	; (800309c <HAL_RCC_OscConfig+0x544>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	2b01      	cmp	r3, #1
 8003038:	d028      	beq.n	800308c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003044:	429a      	cmp	r2, r3
 8003046:	d121      	bne.n	800308c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003052:	429a      	cmp	r2, r3
 8003054:	d11a      	bne.n	800308c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003056:	68fa      	ldr	r2, [r7, #12]
 8003058:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800305c:	4013      	ands	r3, r2
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003062:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003064:	4293      	cmp	r3, r2
 8003066:	d111      	bne.n	800308c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003072:	085b      	lsrs	r3, r3, #1
 8003074:	3b01      	subs	r3, #1
 8003076:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003078:	429a      	cmp	r2, r3
 800307a:	d107      	bne.n	800308c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003086:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003088:	429a      	cmp	r2, r3
 800308a:	d001      	beq.n	8003090 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e000      	b.n	8003092 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3718      	adds	r7, #24
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	40023800 	.word	0x40023800

080030a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80030aa:	2300      	movs	r3, #0
 80030ac:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d101      	bne.n	80030b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e0d0      	b.n	800325a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030b8:	4b6a      	ldr	r3, [pc, #424]	; (8003264 <HAL_RCC_ClockConfig+0x1c4>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 030f 	and.w	r3, r3, #15
 80030c0:	683a      	ldr	r2, [r7, #0]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d910      	bls.n	80030e8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030c6:	4b67      	ldr	r3, [pc, #412]	; (8003264 <HAL_RCC_ClockConfig+0x1c4>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f023 020f 	bic.w	r2, r3, #15
 80030ce:	4965      	ldr	r1, [pc, #404]	; (8003264 <HAL_RCC_ClockConfig+0x1c4>)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030d6:	4b63      	ldr	r3, [pc, #396]	; (8003264 <HAL_RCC_ClockConfig+0x1c4>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 030f 	and.w	r3, r3, #15
 80030de:	683a      	ldr	r2, [r7, #0]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d001      	beq.n	80030e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e0b8      	b.n	800325a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d020      	beq.n	8003136 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0304 	and.w	r3, r3, #4
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d005      	beq.n	800310c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003100:	4b59      	ldr	r3, [pc, #356]	; (8003268 <HAL_RCC_ClockConfig+0x1c8>)
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	4a58      	ldr	r2, [pc, #352]	; (8003268 <HAL_RCC_ClockConfig+0x1c8>)
 8003106:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800310a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0308 	and.w	r3, r3, #8
 8003114:	2b00      	cmp	r3, #0
 8003116:	d005      	beq.n	8003124 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003118:	4b53      	ldr	r3, [pc, #332]	; (8003268 <HAL_RCC_ClockConfig+0x1c8>)
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	4a52      	ldr	r2, [pc, #328]	; (8003268 <HAL_RCC_ClockConfig+0x1c8>)
 800311e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003122:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003124:	4b50      	ldr	r3, [pc, #320]	; (8003268 <HAL_RCC_ClockConfig+0x1c8>)
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	494d      	ldr	r1, [pc, #308]	; (8003268 <HAL_RCC_ClockConfig+0x1c8>)
 8003132:	4313      	orrs	r3, r2
 8003134:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0301 	and.w	r3, r3, #1
 800313e:	2b00      	cmp	r3, #0
 8003140:	d040      	beq.n	80031c4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d107      	bne.n	800315a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800314a:	4b47      	ldr	r3, [pc, #284]	; (8003268 <HAL_RCC_ClockConfig+0x1c8>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d115      	bne.n	8003182 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e07f      	b.n	800325a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	2b02      	cmp	r3, #2
 8003160:	d107      	bne.n	8003172 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003162:	4b41      	ldr	r3, [pc, #260]	; (8003268 <HAL_RCC_ClockConfig+0x1c8>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d109      	bne.n	8003182 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e073      	b.n	800325a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003172:	4b3d      	ldr	r3, [pc, #244]	; (8003268 <HAL_RCC_ClockConfig+0x1c8>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	2b00      	cmp	r3, #0
 800317c:	d101      	bne.n	8003182 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e06b      	b.n	800325a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003182:	4b39      	ldr	r3, [pc, #228]	; (8003268 <HAL_RCC_ClockConfig+0x1c8>)
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f023 0203 	bic.w	r2, r3, #3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	4936      	ldr	r1, [pc, #216]	; (8003268 <HAL_RCC_ClockConfig+0x1c8>)
 8003190:	4313      	orrs	r3, r2
 8003192:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003194:	f7fe fdec 	bl	8001d70 <HAL_GetTick>
 8003198:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800319a:	e00a      	b.n	80031b2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800319c:	f7fe fde8 	bl	8001d70 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d901      	bls.n	80031b2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e053      	b.n	800325a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031b2:	4b2d      	ldr	r3, [pc, #180]	; (8003268 <HAL_RCC_ClockConfig+0x1c8>)
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f003 020c 	and.w	r2, r3, #12
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d1eb      	bne.n	800319c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031c4:	4b27      	ldr	r3, [pc, #156]	; (8003264 <HAL_RCC_ClockConfig+0x1c4>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 030f 	and.w	r3, r3, #15
 80031cc:	683a      	ldr	r2, [r7, #0]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d210      	bcs.n	80031f4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031d2:	4b24      	ldr	r3, [pc, #144]	; (8003264 <HAL_RCC_ClockConfig+0x1c4>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f023 020f 	bic.w	r2, r3, #15
 80031da:	4922      	ldr	r1, [pc, #136]	; (8003264 <HAL_RCC_ClockConfig+0x1c4>)
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	4313      	orrs	r3, r2
 80031e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031e2:	4b20      	ldr	r3, [pc, #128]	; (8003264 <HAL_RCC_ClockConfig+0x1c4>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 030f 	and.w	r3, r3, #15
 80031ea:	683a      	ldr	r2, [r7, #0]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d001      	beq.n	80031f4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e032      	b.n	800325a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0304 	and.w	r3, r3, #4
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d008      	beq.n	8003212 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003200:	4b19      	ldr	r3, [pc, #100]	; (8003268 <HAL_RCC_ClockConfig+0x1c8>)
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	4916      	ldr	r1, [pc, #88]	; (8003268 <HAL_RCC_ClockConfig+0x1c8>)
 800320e:	4313      	orrs	r3, r2
 8003210:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0308 	and.w	r3, r3, #8
 800321a:	2b00      	cmp	r3, #0
 800321c:	d009      	beq.n	8003232 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800321e:	4b12      	ldr	r3, [pc, #72]	; (8003268 <HAL_RCC_ClockConfig+0x1c8>)
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	00db      	lsls	r3, r3, #3
 800322c:	490e      	ldr	r1, [pc, #56]	; (8003268 <HAL_RCC_ClockConfig+0x1c8>)
 800322e:	4313      	orrs	r3, r2
 8003230:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003232:	f000 f821 	bl	8003278 <HAL_RCC_GetSysClockFreq>
 8003236:	4602      	mov	r2, r0
 8003238:	4b0b      	ldr	r3, [pc, #44]	; (8003268 <HAL_RCC_ClockConfig+0x1c8>)
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	091b      	lsrs	r3, r3, #4
 800323e:	f003 030f 	and.w	r3, r3, #15
 8003242:	490a      	ldr	r1, [pc, #40]	; (800326c <HAL_RCC_ClockConfig+0x1cc>)
 8003244:	5ccb      	ldrb	r3, [r1, r3]
 8003246:	fa22 f303 	lsr.w	r3, r2, r3
 800324a:	4a09      	ldr	r2, [pc, #36]	; (8003270 <HAL_RCC_ClockConfig+0x1d0>)
 800324c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800324e:	4b09      	ldr	r3, [pc, #36]	; (8003274 <HAL_RCC_ClockConfig+0x1d4>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4618      	mov	r0, r3
 8003254:	f7fe fd48 	bl	8001ce8 <HAL_InitTick>

  return HAL_OK;
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	3710      	adds	r7, #16
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	40023c00 	.word	0x40023c00
 8003268:	40023800 	.word	0x40023800
 800326c:	08006c64 	.word	0x08006c64
 8003270:	20000000 	.word	0x20000000
 8003274:	20000004 	.word	0x20000004

08003278 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003278:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800327c:	b084      	sub	sp, #16
 800327e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003280:	2300      	movs	r3, #0
 8003282:	607b      	str	r3, [r7, #4]
 8003284:	2300      	movs	r3, #0
 8003286:	60fb      	str	r3, [r7, #12]
 8003288:	2300      	movs	r3, #0
 800328a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800328c:	2300      	movs	r3, #0
 800328e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003290:	4b67      	ldr	r3, [pc, #412]	; (8003430 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	f003 030c 	and.w	r3, r3, #12
 8003298:	2b08      	cmp	r3, #8
 800329a:	d00d      	beq.n	80032b8 <HAL_RCC_GetSysClockFreq+0x40>
 800329c:	2b08      	cmp	r3, #8
 800329e:	f200 80bd 	bhi.w	800341c <HAL_RCC_GetSysClockFreq+0x1a4>
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d002      	beq.n	80032ac <HAL_RCC_GetSysClockFreq+0x34>
 80032a6:	2b04      	cmp	r3, #4
 80032a8:	d003      	beq.n	80032b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80032aa:	e0b7      	b.n	800341c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032ac:	4b61      	ldr	r3, [pc, #388]	; (8003434 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80032ae:	60bb      	str	r3, [r7, #8]
      break;
 80032b0:	e0b7      	b.n	8003422 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032b2:	4b61      	ldr	r3, [pc, #388]	; (8003438 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80032b4:	60bb      	str	r3, [r7, #8]
      break;
 80032b6:	e0b4      	b.n	8003422 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032b8:	4b5d      	ldr	r3, [pc, #372]	; (8003430 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032c0:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80032c2:	4b5b      	ldr	r3, [pc, #364]	; (8003430 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d04d      	beq.n	800336a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032ce:	4b58      	ldr	r3, [pc, #352]	; (8003430 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	099b      	lsrs	r3, r3, #6
 80032d4:	461a      	mov	r2, r3
 80032d6:	f04f 0300 	mov.w	r3, #0
 80032da:	f240 10ff 	movw	r0, #511	; 0x1ff
 80032de:	f04f 0100 	mov.w	r1, #0
 80032e2:	ea02 0800 	and.w	r8, r2, r0
 80032e6:	ea03 0901 	and.w	r9, r3, r1
 80032ea:	4640      	mov	r0, r8
 80032ec:	4649      	mov	r1, r9
 80032ee:	f04f 0200 	mov.w	r2, #0
 80032f2:	f04f 0300 	mov.w	r3, #0
 80032f6:	014b      	lsls	r3, r1, #5
 80032f8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80032fc:	0142      	lsls	r2, r0, #5
 80032fe:	4610      	mov	r0, r2
 8003300:	4619      	mov	r1, r3
 8003302:	ebb0 0008 	subs.w	r0, r0, r8
 8003306:	eb61 0109 	sbc.w	r1, r1, r9
 800330a:	f04f 0200 	mov.w	r2, #0
 800330e:	f04f 0300 	mov.w	r3, #0
 8003312:	018b      	lsls	r3, r1, #6
 8003314:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003318:	0182      	lsls	r2, r0, #6
 800331a:	1a12      	subs	r2, r2, r0
 800331c:	eb63 0301 	sbc.w	r3, r3, r1
 8003320:	f04f 0000 	mov.w	r0, #0
 8003324:	f04f 0100 	mov.w	r1, #0
 8003328:	00d9      	lsls	r1, r3, #3
 800332a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800332e:	00d0      	lsls	r0, r2, #3
 8003330:	4602      	mov	r2, r0
 8003332:	460b      	mov	r3, r1
 8003334:	eb12 0208 	adds.w	r2, r2, r8
 8003338:	eb43 0309 	adc.w	r3, r3, r9
 800333c:	f04f 0000 	mov.w	r0, #0
 8003340:	f04f 0100 	mov.w	r1, #0
 8003344:	0259      	lsls	r1, r3, #9
 8003346:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800334a:	0250      	lsls	r0, r2, #9
 800334c:	4602      	mov	r2, r0
 800334e:	460b      	mov	r3, r1
 8003350:	4610      	mov	r0, r2
 8003352:	4619      	mov	r1, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	461a      	mov	r2, r3
 8003358:	f04f 0300 	mov.w	r3, #0
 800335c:	f7fd fbbe 	bl	8000adc <__aeabi_uldivmod>
 8003360:	4602      	mov	r2, r0
 8003362:	460b      	mov	r3, r1
 8003364:	4613      	mov	r3, r2
 8003366:	60fb      	str	r3, [r7, #12]
 8003368:	e04a      	b.n	8003400 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800336a:	4b31      	ldr	r3, [pc, #196]	; (8003430 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	099b      	lsrs	r3, r3, #6
 8003370:	461a      	mov	r2, r3
 8003372:	f04f 0300 	mov.w	r3, #0
 8003376:	f240 10ff 	movw	r0, #511	; 0x1ff
 800337a:	f04f 0100 	mov.w	r1, #0
 800337e:	ea02 0400 	and.w	r4, r2, r0
 8003382:	ea03 0501 	and.w	r5, r3, r1
 8003386:	4620      	mov	r0, r4
 8003388:	4629      	mov	r1, r5
 800338a:	f04f 0200 	mov.w	r2, #0
 800338e:	f04f 0300 	mov.w	r3, #0
 8003392:	014b      	lsls	r3, r1, #5
 8003394:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003398:	0142      	lsls	r2, r0, #5
 800339a:	4610      	mov	r0, r2
 800339c:	4619      	mov	r1, r3
 800339e:	1b00      	subs	r0, r0, r4
 80033a0:	eb61 0105 	sbc.w	r1, r1, r5
 80033a4:	f04f 0200 	mov.w	r2, #0
 80033a8:	f04f 0300 	mov.w	r3, #0
 80033ac:	018b      	lsls	r3, r1, #6
 80033ae:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80033b2:	0182      	lsls	r2, r0, #6
 80033b4:	1a12      	subs	r2, r2, r0
 80033b6:	eb63 0301 	sbc.w	r3, r3, r1
 80033ba:	f04f 0000 	mov.w	r0, #0
 80033be:	f04f 0100 	mov.w	r1, #0
 80033c2:	00d9      	lsls	r1, r3, #3
 80033c4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80033c8:	00d0      	lsls	r0, r2, #3
 80033ca:	4602      	mov	r2, r0
 80033cc:	460b      	mov	r3, r1
 80033ce:	1912      	adds	r2, r2, r4
 80033d0:	eb45 0303 	adc.w	r3, r5, r3
 80033d4:	f04f 0000 	mov.w	r0, #0
 80033d8:	f04f 0100 	mov.w	r1, #0
 80033dc:	0299      	lsls	r1, r3, #10
 80033de:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80033e2:	0290      	lsls	r0, r2, #10
 80033e4:	4602      	mov	r2, r0
 80033e6:	460b      	mov	r3, r1
 80033e8:	4610      	mov	r0, r2
 80033ea:	4619      	mov	r1, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	461a      	mov	r2, r3
 80033f0:	f04f 0300 	mov.w	r3, #0
 80033f4:	f7fd fb72 	bl	8000adc <__aeabi_uldivmod>
 80033f8:	4602      	mov	r2, r0
 80033fa:	460b      	mov	r3, r1
 80033fc:	4613      	mov	r3, r2
 80033fe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003400:	4b0b      	ldr	r3, [pc, #44]	; (8003430 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	0c1b      	lsrs	r3, r3, #16
 8003406:	f003 0303 	and.w	r3, r3, #3
 800340a:	3301      	adds	r3, #1
 800340c:	005b      	lsls	r3, r3, #1
 800340e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003410:	68fa      	ldr	r2, [r7, #12]
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	fbb2 f3f3 	udiv	r3, r2, r3
 8003418:	60bb      	str	r3, [r7, #8]
      break;
 800341a:	e002      	b.n	8003422 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800341c:	4b05      	ldr	r3, [pc, #20]	; (8003434 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800341e:	60bb      	str	r3, [r7, #8]
      break;
 8003420:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003422:	68bb      	ldr	r3, [r7, #8]
}
 8003424:	4618      	mov	r0, r3
 8003426:	3710      	adds	r7, #16
 8003428:	46bd      	mov	sp, r7
 800342a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800342e:	bf00      	nop
 8003430:	40023800 	.word	0x40023800
 8003434:	00f42400 	.word	0x00f42400
 8003438:	007a1200 	.word	0x007a1200

0800343c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800343c:	b480      	push	{r7}
 800343e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003440:	4b03      	ldr	r3, [pc, #12]	; (8003450 <HAL_RCC_GetHCLKFreq+0x14>)
 8003442:	681b      	ldr	r3, [r3, #0]
}
 8003444:	4618      	mov	r0, r3
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	20000000 	.word	0x20000000

08003454 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003458:	f7ff fff0 	bl	800343c <HAL_RCC_GetHCLKFreq>
 800345c:	4602      	mov	r2, r0
 800345e:	4b05      	ldr	r3, [pc, #20]	; (8003474 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	0a9b      	lsrs	r3, r3, #10
 8003464:	f003 0307 	and.w	r3, r3, #7
 8003468:	4903      	ldr	r1, [pc, #12]	; (8003478 <HAL_RCC_GetPCLK1Freq+0x24>)
 800346a:	5ccb      	ldrb	r3, [r1, r3]
 800346c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003470:	4618      	mov	r0, r3
 8003472:	bd80      	pop	{r7, pc}
 8003474:	40023800 	.word	0x40023800
 8003478:	08006c74 	.word	0x08006c74

0800347c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003480:	f7ff ffdc 	bl	800343c <HAL_RCC_GetHCLKFreq>
 8003484:	4602      	mov	r2, r0
 8003486:	4b05      	ldr	r3, [pc, #20]	; (800349c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	0b5b      	lsrs	r3, r3, #13
 800348c:	f003 0307 	and.w	r3, r3, #7
 8003490:	4903      	ldr	r1, [pc, #12]	; (80034a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003492:	5ccb      	ldrb	r3, [r1, r3]
 8003494:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003498:	4618      	mov	r0, r3
 800349a:	bd80      	pop	{r7, pc}
 800349c:	40023800 	.word	0x40023800
 80034a0:	08006c74 	.word	0x08006c74

080034a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b088      	sub	sp, #32
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80034ac:	2300      	movs	r3, #0
 80034ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80034b0:	2300      	movs	r3, #0
 80034b2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80034b4:	2300      	movs	r3, #0
 80034b6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80034b8:	2300      	movs	r3, #0
 80034ba:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80034bc:	2300      	movs	r3, #0
 80034be:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0301 	and.w	r3, r3, #1
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d012      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80034cc:	4b69      	ldr	r3, [pc, #420]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	4a68      	ldr	r2, [pc, #416]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034d2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80034d6:	6093      	str	r3, [r2, #8]
 80034d8:	4b66      	ldr	r3, [pc, #408]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034da:	689a      	ldr	r2, [r3, #8]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034e0:	4964      	ldr	r1, [pc, #400]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d101      	bne.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80034ee:	2301      	movs	r3, #1
 80034f0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d017      	beq.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034fe:	4b5d      	ldr	r3, [pc, #372]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003500:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003504:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800350c:	4959      	ldr	r1, [pc, #356]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800350e:	4313      	orrs	r3, r2
 8003510:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003518:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800351c:	d101      	bne.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800351e:	2301      	movs	r3, #1
 8003520:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003526:	2b00      	cmp	r3, #0
 8003528:	d101      	bne.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800352a:	2301      	movs	r3, #1
 800352c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d017      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800353a:	4b4e      	ldr	r3, [pc, #312]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800353c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003540:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003548:	494a      	ldr	r1, [pc, #296]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800354a:	4313      	orrs	r3, r2
 800354c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003554:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003558:	d101      	bne.n	800355e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800355a:	2301      	movs	r3, #1
 800355c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003562:	2b00      	cmp	r3, #0
 8003564:	d101      	bne.n	800356a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003566:	2301      	movs	r3, #1
 8003568:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d001      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003576:	2301      	movs	r3, #1
 8003578:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0320 	and.w	r3, r3, #32
 8003582:	2b00      	cmp	r3, #0
 8003584:	f000 808b 	beq.w	800369e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003588:	4b3a      	ldr	r3, [pc, #232]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800358a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358c:	4a39      	ldr	r2, [pc, #228]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800358e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003592:	6413      	str	r3, [r2, #64]	; 0x40
 8003594:	4b37      	ldr	r3, [pc, #220]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800359c:	60bb      	str	r3, [r7, #8]
 800359e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80035a0:	4b35      	ldr	r3, [pc, #212]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a34      	ldr	r2, [pc, #208]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80035a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035ac:	f7fe fbe0 	bl	8001d70 <HAL_GetTick>
 80035b0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80035b2:	e008      	b.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035b4:	f7fe fbdc 	bl	8001d70 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	2b64      	cmp	r3, #100	; 0x64
 80035c0:	d901      	bls.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e357      	b.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80035c6:	4b2c      	ldr	r3, [pc, #176]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d0f0      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80035d2:	4b28      	ldr	r3, [pc, #160]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035da:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d035      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035ea:	693a      	ldr	r2, [r7, #16]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d02e      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80035f0:	4b20      	ldr	r3, [pc, #128]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035f8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80035fa:	4b1e      	ldr	r3, [pc, #120]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035fe:	4a1d      	ldr	r2, [pc, #116]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003600:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003604:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003606:	4b1b      	ldr	r3, [pc, #108]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800360a:	4a1a      	ldr	r2, [pc, #104]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800360c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003610:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003612:	4a18      	ldr	r2, [pc, #96]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003618:	4b16      	ldr	r3, [pc, #88]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800361a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800361c:	f003 0301 	and.w	r3, r3, #1
 8003620:	2b01      	cmp	r3, #1
 8003622:	d114      	bne.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003624:	f7fe fba4 	bl	8001d70 <HAL_GetTick>
 8003628:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800362a:	e00a      	b.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800362c:	f7fe fba0 	bl	8001d70 <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	f241 3288 	movw	r2, #5000	; 0x1388
 800363a:	4293      	cmp	r3, r2
 800363c:	d901      	bls.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e319      	b.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003642:	4b0c      	ldr	r3, [pc, #48]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b00      	cmp	r3, #0
 800364c:	d0ee      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003652:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003656:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800365a:	d111      	bne.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800365c:	4b05      	ldr	r3, [pc, #20]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003668:	4b04      	ldr	r3, [pc, #16]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800366a:	400b      	ands	r3, r1
 800366c:	4901      	ldr	r1, [pc, #4]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800366e:	4313      	orrs	r3, r2
 8003670:	608b      	str	r3, [r1, #8]
 8003672:	e00b      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003674:	40023800 	.word	0x40023800
 8003678:	40007000 	.word	0x40007000
 800367c:	0ffffcff 	.word	0x0ffffcff
 8003680:	4bb1      	ldr	r3, [pc, #708]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	4ab0      	ldr	r2, [pc, #704]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003686:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800368a:	6093      	str	r3, [r2, #8]
 800368c:	4bae      	ldr	r3, [pc, #696]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800368e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003694:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003698:	49ab      	ldr	r1, [pc, #684]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800369a:	4313      	orrs	r3, r2
 800369c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0310 	and.w	r3, r3, #16
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d010      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80036aa:	4ba7      	ldr	r3, [pc, #668]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80036ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036b0:	4aa5      	ldr	r2, [pc, #660]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80036b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036b6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80036ba:	4ba3      	ldr	r3, [pc, #652]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80036bc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c4:	49a0      	ldr	r1, [pc, #640]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00a      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036d8:	4b9b      	ldr	r3, [pc, #620]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80036da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036de:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036e6:	4998      	ldr	r1, [pc, #608]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00a      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80036fa:	4b93      	ldr	r3, [pc, #588]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80036fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003700:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003708:	498f      	ldr	r1, [pc, #572]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800370a:	4313      	orrs	r3, r2
 800370c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d00a      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800371c:	4b8a      	ldr	r3, [pc, #552]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800371e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003722:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800372a:	4987      	ldr	r1, [pc, #540]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800372c:	4313      	orrs	r3, r2
 800372e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00a      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800373e:	4b82      	ldr	r3, [pc, #520]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003740:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003744:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800374c:	497e      	ldr	r1, [pc, #504]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800374e:	4313      	orrs	r3, r2
 8003750:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800375c:	2b00      	cmp	r3, #0
 800375e:	d00a      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003760:	4b79      	ldr	r3, [pc, #484]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003766:	f023 0203 	bic.w	r2, r3, #3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800376e:	4976      	ldr	r1, [pc, #472]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003770:	4313      	orrs	r3, r2
 8003772:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00a      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003782:	4b71      	ldr	r3, [pc, #452]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003784:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003788:	f023 020c 	bic.w	r2, r3, #12
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003790:	496d      	ldr	r1, [pc, #436]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003792:	4313      	orrs	r3, r2
 8003794:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d00a      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80037a4:	4b68      	ldr	r3, [pc, #416]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80037a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037aa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037b2:	4965      	ldr	r1, [pc, #404]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00a      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80037c6:	4b60      	ldr	r3, [pc, #384]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80037c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037cc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037d4:	495c      	ldr	r1, [pc, #368]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80037d6:	4313      	orrs	r3, r2
 80037d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d00a      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80037e8:	4b57      	ldr	r3, [pc, #348]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80037ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f6:	4954      	ldr	r1, [pc, #336]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00a      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800380a:	4b4f      	ldr	r3, [pc, #316]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800380c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003810:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003818:	494b      	ldr	r1, [pc, #300]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800381a:	4313      	orrs	r3, r2
 800381c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d00a      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800382c:	4b46      	ldr	r3, [pc, #280]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800382e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003832:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800383a:	4943      	ldr	r1, [pc, #268]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800383c:	4313      	orrs	r3, r2
 800383e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00a      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800384e:	4b3e      	ldr	r3, [pc, #248]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003850:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003854:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800385c:	493a      	ldr	r1, [pc, #232]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800385e:	4313      	orrs	r3, r2
 8003860:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d00a      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003870:	4b35      	ldr	r3, [pc, #212]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003876:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800387e:	4932      	ldr	r1, [pc, #200]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003880:	4313      	orrs	r3, r2
 8003882:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d011      	beq.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003892:	4b2d      	ldr	r3, [pc, #180]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003898:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038a0:	4929      	ldr	r1, [pc, #164]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038b0:	d101      	bne.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80038b2:	2301      	movs	r3, #1
 80038b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0308 	and.w	r3, r3, #8
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d001      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80038c2:	2301      	movs	r3, #1
 80038c4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00a      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80038d2:	4b1d      	ldr	r3, [pc, #116]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80038d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038e0:	4919      	ldr	r1, [pc, #100]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d00b      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80038f4:	4b14      	ldr	r3, [pc, #80]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80038f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038fa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003904:	4910      	ldr	r1, [pc, #64]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003906:	4313      	orrs	r3, r2
 8003908:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	2b01      	cmp	r3, #1
 8003910:	d006      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800391a:	2b00      	cmp	r3, #0
 800391c:	f000 80d9 	beq.w	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003920:	4b09      	ldr	r3, [pc, #36]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a08      	ldr	r2, [pc, #32]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003926:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800392a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800392c:	f7fe fa20 	bl	8001d70 <HAL_GetTick>
 8003930:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003932:	e00b      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003934:	f7fe fa1c 	bl	8001d70 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	2b64      	cmp	r3, #100	; 0x64
 8003940:	d904      	bls.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e197      	b.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003946:	bf00      	nop
 8003948:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800394c:	4b6c      	ldr	r3, [pc, #432]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d1ed      	bne.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0301 	and.w	r3, r3, #1
 8003960:	2b00      	cmp	r3, #0
 8003962:	d021      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003968:	2b00      	cmp	r3, #0
 800396a:	d11d      	bne.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800396c:	4b64      	ldr	r3, [pc, #400]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800396e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003972:	0c1b      	lsrs	r3, r3, #16
 8003974:	f003 0303 	and.w	r3, r3, #3
 8003978:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800397a:	4b61      	ldr	r3, [pc, #388]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800397c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003980:	0e1b      	lsrs	r3, r3, #24
 8003982:	f003 030f 	and.w	r3, r3, #15
 8003986:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	019a      	lsls	r2, r3, #6
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	041b      	lsls	r3, r3, #16
 8003992:	431a      	orrs	r2, r3
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	061b      	lsls	r3, r3, #24
 8003998:	431a      	orrs	r2, r3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	071b      	lsls	r3, r3, #28
 80039a0:	4957      	ldr	r1, [pc, #348]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d004      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039bc:	d00a      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d02e      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039d2:	d129      	bne.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80039d4:	4b4a      	ldr	r3, [pc, #296]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039da:	0c1b      	lsrs	r3, r3, #16
 80039dc:	f003 0303 	and.w	r3, r3, #3
 80039e0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80039e2:	4b47      	ldr	r3, [pc, #284]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039e8:	0f1b      	lsrs	r3, r3, #28
 80039ea:	f003 0307 	and.w	r3, r3, #7
 80039ee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	019a      	lsls	r2, r3, #6
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	041b      	lsls	r3, r3, #16
 80039fa:	431a      	orrs	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	061b      	lsls	r3, r3, #24
 8003a02:	431a      	orrs	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	071b      	lsls	r3, r3, #28
 8003a08:	493d      	ldr	r1, [pc, #244]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003a10:	4b3b      	ldr	r3, [pc, #236]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a16:	f023 021f 	bic.w	r2, r3, #31
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	4937      	ldr	r1, [pc, #220]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d01d      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003a34:	4b32      	ldr	r3, [pc, #200]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a3a:	0e1b      	lsrs	r3, r3, #24
 8003a3c:	f003 030f 	and.w	r3, r3, #15
 8003a40:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003a42:	4b2f      	ldr	r3, [pc, #188]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a48:	0f1b      	lsrs	r3, r3, #28
 8003a4a:	f003 0307 	and.w	r3, r3, #7
 8003a4e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	019a      	lsls	r2, r3, #6
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	041b      	lsls	r3, r3, #16
 8003a5c:	431a      	orrs	r2, r3
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	061b      	lsls	r3, r3, #24
 8003a62:	431a      	orrs	r2, r3
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	071b      	lsls	r3, r3, #28
 8003a68:	4925      	ldr	r1, [pc, #148]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d011      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	019a      	lsls	r2, r3, #6
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	041b      	lsls	r3, r3, #16
 8003a88:	431a      	orrs	r2, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	061b      	lsls	r3, r3, #24
 8003a90:	431a      	orrs	r2, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	071b      	lsls	r3, r3, #28
 8003a98:	4919      	ldr	r1, [pc, #100]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003aa0:	4b17      	ldr	r3, [pc, #92]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a16      	ldr	r2, [pc, #88]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003aa6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003aaa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003aac:	f7fe f960 	bl	8001d70 <HAL_GetTick>
 8003ab0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ab2:	e008      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003ab4:	f7fe f95c 	bl	8001d70 <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	2b64      	cmp	r3, #100	; 0x64
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e0d7      	b.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ac6:	4b0e      	ldr	r3, [pc, #56]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d0f0      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	f040 80cd 	bne.w	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003ada:	4b09      	ldr	r3, [pc, #36]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a08      	ldr	r2, [pc, #32]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ae0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ae4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ae6:	f7fe f943 	bl	8001d70 <HAL_GetTick>
 8003aea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003aec:	e00a      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003aee:	f7fe f93f 	bl	8001d70 <HAL_GetTick>
 8003af2:	4602      	mov	r2, r0
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	2b64      	cmp	r3, #100	; 0x64
 8003afa:	d903      	bls.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003afc:	2303      	movs	r3, #3
 8003afe:	e0ba      	b.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003b00:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b04:	4b5e      	ldr	r3, [pc, #376]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b10:	d0ed      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d003      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d009      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d02e      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d12a      	bne.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003b3a:	4b51      	ldr	r3, [pc, #324]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b40:	0c1b      	lsrs	r3, r3, #16
 8003b42:	f003 0303 	and.w	r3, r3, #3
 8003b46:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003b48:	4b4d      	ldr	r3, [pc, #308]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b4e:	0f1b      	lsrs	r3, r3, #28
 8003b50:	f003 0307 	and.w	r3, r3, #7
 8003b54:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	019a      	lsls	r2, r3, #6
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	041b      	lsls	r3, r3, #16
 8003b60:	431a      	orrs	r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	699b      	ldr	r3, [r3, #24]
 8003b66:	061b      	lsls	r3, r3, #24
 8003b68:	431a      	orrs	r2, r3
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	071b      	lsls	r3, r3, #28
 8003b6e:	4944      	ldr	r1, [pc, #272]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003b76:	4b42      	ldr	r3, [pc, #264]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b7c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b84:	3b01      	subs	r3, #1
 8003b86:	021b      	lsls	r3, r3, #8
 8003b88:	493d      	ldr	r1, [pc, #244]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d022      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ba0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ba4:	d11d      	bne.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003ba6:	4b36      	ldr	r3, [pc, #216]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bac:	0e1b      	lsrs	r3, r3, #24
 8003bae:	f003 030f 	and.w	r3, r3, #15
 8003bb2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003bb4:	4b32      	ldr	r3, [pc, #200]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bba:	0f1b      	lsrs	r3, r3, #28
 8003bbc:	f003 0307 	and.w	r3, r3, #7
 8003bc0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	019a      	lsls	r2, r3, #6
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a1b      	ldr	r3, [r3, #32]
 8003bcc:	041b      	lsls	r3, r3, #16
 8003bce:	431a      	orrs	r2, r3
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	061b      	lsls	r3, r3, #24
 8003bd4:	431a      	orrs	r2, r3
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	071b      	lsls	r3, r3, #28
 8003bda:	4929      	ldr	r1, [pc, #164]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0308 	and.w	r3, r3, #8
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d028      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003bee:	4b24      	ldr	r3, [pc, #144]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bf4:	0e1b      	lsrs	r3, r3, #24
 8003bf6:	f003 030f 	and.w	r3, r3, #15
 8003bfa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003bfc:	4b20      	ldr	r3, [pc, #128]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c02:	0c1b      	lsrs	r3, r3, #16
 8003c04:	f003 0303 	and.w	r3, r3, #3
 8003c08:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	019a      	lsls	r2, r3, #6
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	041b      	lsls	r3, r3, #16
 8003c14:	431a      	orrs	r2, r3
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	061b      	lsls	r3, r3, #24
 8003c1a:	431a      	orrs	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	69db      	ldr	r3, [r3, #28]
 8003c20:	071b      	lsls	r3, r3, #28
 8003c22:	4917      	ldr	r1, [pc, #92]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c24:	4313      	orrs	r3, r2
 8003c26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003c2a:	4b15      	ldr	r3, [pc, #84]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c30:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c38:	4911      	ldr	r1, [pc, #68]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003c40:	4b0f      	ldr	r3, [pc, #60]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a0e      	ldr	r2, [pc, #56]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c4c:	f7fe f890 	bl	8001d70 <HAL_GetTick>
 8003c50:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003c52:	e008      	b.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003c54:	f7fe f88c 	bl	8001d70 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	2b64      	cmp	r3, #100	; 0x64
 8003c60:	d901      	bls.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e007      	b.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003c66:	4b06      	ldr	r3, [pc, #24]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c72:	d1ef      	bne.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3720      	adds	r7, #32
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	40023800 	.word	0x40023800

08003c84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d101      	bne.n	8003c96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e049      	b.n	8003d2a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d106      	bne.n	8003cb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f7fd fd46 	bl	800173c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2202      	movs	r2, #2
 8003cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	3304      	adds	r3, #4
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	4610      	mov	r0, r2
 8003cc4:	f000 fe92 	bl	80049ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3708      	adds	r7, #8
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
	...

08003d34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b085      	sub	sp, #20
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d001      	beq.n	8003d4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e054      	b.n	8003df6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2202      	movs	r2, #2
 8003d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68da      	ldr	r2, [r3, #12]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f042 0201 	orr.w	r2, r2, #1
 8003d62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a26      	ldr	r2, [pc, #152]	; (8003e04 <HAL_TIM_Base_Start_IT+0xd0>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d022      	beq.n	8003db4 <HAL_TIM_Base_Start_IT+0x80>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d76:	d01d      	beq.n	8003db4 <HAL_TIM_Base_Start_IT+0x80>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a22      	ldr	r2, [pc, #136]	; (8003e08 <HAL_TIM_Base_Start_IT+0xd4>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d018      	beq.n	8003db4 <HAL_TIM_Base_Start_IT+0x80>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a21      	ldr	r2, [pc, #132]	; (8003e0c <HAL_TIM_Base_Start_IT+0xd8>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d013      	beq.n	8003db4 <HAL_TIM_Base_Start_IT+0x80>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a1f      	ldr	r2, [pc, #124]	; (8003e10 <HAL_TIM_Base_Start_IT+0xdc>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d00e      	beq.n	8003db4 <HAL_TIM_Base_Start_IT+0x80>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a1e      	ldr	r2, [pc, #120]	; (8003e14 <HAL_TIM_Base_Start_IT+0xe0>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d009      	beq.n	8003db4 <HAL_TIM_Base_Start_IT+0x80>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a1c      	ldr	r2, [pc, #112]	; (8003e18 <HAL_TIM_Base_Start_IT+0xe4>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d004      	beq.n	8003db4 <HAL_TIM_Base_Start_IT+0x80>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a1b      	ldr	r2, [pc, #108]	; (8003e1c <HAL_TIM_Base_Start_IT+0xe8>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d115      	bne.n	8003de0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	689a      	ldr	r2, [r3, #8]
 8003dba:	4b19      	ldr	r3, [pc, #100]	; (8003e20 <HAL_TIM_Base_Start_IT+0xec>)
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2b06      	cmp	r3, #6
 8003dc4:	d015      	beq.n	8003df2 <HAL_TIM_Base_Start_IT+0xbe>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dcc:	d011      	beq.n	8003df2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f042 0201 	orr.w	r2, r2, #1
 8003ddc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dde:	e008      	b.n	8003df2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f042 0201 	orr.w	r2, r2, #1
 8003dee:	601a      	str	r2, [r3, #0]
 8003df0:	e000      	b.n	8003df4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003df2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3714      	adds	r7, #20
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	40010000 	.word	0x40010000
 8003e08:	40000400 	.word	0x40000400
 8003e0c:	40000800 	.word	0x40000800
 8003e10:	40000c00 	.word	0x40000c00
 8003e14:	40010400 	.word	0x40010400
 8003e18:	40014000 	.word	0x40014000
 8003e1c:	40001800 	.word	0x40001800
 8003e20:	00010007 	.word	0x00010007

08003e24 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68da      	ldr	r2, [r3, #12]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f022 0201 	bic.w	r2, r2, #1
 8003e3a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	6a1a      	ldr	r2, [r3, #32]
 8003e42:	f241 1311 	movw	r3, #4369	; 0x1111
 8003e46:	4013      	ands	r3, r2
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d10f      	bne.n	8003e6c <HAL_TIM_Base_Stop_IT+0x48>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	6a1a      	ldr	r2, [r3, #32]
 8003e52:	f240 4344 	movw	r3, #1092	; 0x444
 8003e56:	4013      	ands	r3, r2
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d107      	bne.n	8003e6c <HAL_TIM_Base_Stop_IT+0x48>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f022 0201 	bic.w	r2, r2, #1
 8003e6a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	370c      	adds	r7, #12
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr

08003e82 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e82:	b580      	push	{r7, lr}
 8003e84:	b082      	sub	sp, #8
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d101      	bne.n	8003e94 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e049      	b.n	8003f28 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d106      	bne.n	8003eae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f000 f841 	bl	8003f30 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2202      	movs	r2, #2
 8003eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	3304      	adds	r3, #4
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	4610      	mov	r0, r2
 8003ec2:	f000 fd93 	bl	80049ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2201      	movs	r2, #1
 8003eca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2201      	movs	r2, #1
 8003eea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2201      	movs	r2, #1
 8003efa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2201      	movs	r2, #1
 8003f02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2201      	movs	r2, #1
 8003f0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2201      	movs	r2, #1
 8003f12:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2201      	movs	r2, #1
 8003f1a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2201      	movs	r2, #1
 8003f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f26:	2300      	movs	r3, #0
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3708      	adds	r7, #8
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003f38:	bf00      	nop
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d109      	bne.n	8003f68 <HAL_TIM_PWM_Start+0x24>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	bf14      	ite	ne
 8003f60:	2301      	movne	r3, #1
 8003f62:	2300      	moveq	r3, #0
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	e03c      	b.n	8003fe2 <HAL_TIM_PWM_Start+0x9e>
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	2b04      	cmp	r3, #4
 8003f6c:	d109      	bne.n	8003f82 <HAL_TIM_PWM_Start+0x3e>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	bf14      	ite	ne
 8003f7a:	2301      	movne	r3, #1
 8003f7c:	2300      	moveq	r3, #0
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	e02f      	b.n	8003fe2 <HAL_TIM_PWM_Start+0x9e>
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	2b08      	cmp	r3, #8
 8003f86:	d109      	bne.n	8003f9c <HAL_TIM_PWM_Start+0x58>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	bf14      	ite	ne
 8003f94:	2301      	movne	r3, #1
 8003f96:	2300      	moveq	r3, #0
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	e022      	b.n	8003fe2 <HAL_TIM_PWM_Start+0x9e>
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	2b0c      	cmp	r3, #12
 8003fa0:	d109      	bne.n	8003fb6 <HAL_TIM_PWM_Start+0x72>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	bf14      	ite	ne
 8003fae:	2301      	movne	r3, #1
 8003fb0:	2300      	moveq	r3, #0
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	e015      	b.n	8003fe2 <HAL_TIM_PWM_Start+0x9e>
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	2b10      	cmp	r3, #16
 8003fba:	d109      	bne.n	8003fd0 <HAL_TIM_PWM_Start+0x8c>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	bf14      	ite	ne
 8003fc8:	2301      	movne	r3, #1
 8003fca:	2300      	moveq	r3, #0
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	e008      	b.n	8003fe2 <HAL_TIM_PWM_Start+0x9e>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	bf14      	ite	ne
 8003fdc:	2301      	movne	r3, #1
 8003fde:	2300      	moveq	r3, #0
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d001      	beq.n	8003fea <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e092      	b.n	8004110 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d104      	bne.n	8003ffa <HAL_TIM_PWM_Start+0xb6>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2202      	movs	r2, #2
 8003ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ff8:	e023      	b.n	8004042 <HAL_TIM_PWM_Start+0xfe>
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	2b04      	cmp	r3, #4
 8003ffe:	d104      	bne.n	800400a <HAL_TIM_PWM_Start+0xc6>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2202      	movs	r2, #2
 8004004:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004008:	e01b      	b.n	8004042 <HAL_TIM_PWM_Start+0xfe>
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	2b08      	cmp	r3, #8
 800400e:	d104      	bne.n	800401a <HAL_TIM_PWM_Start+0xd6>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2202      	movs	r2, #2
 8004014:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004018:	e013      	b.n	8004042 <HAL_TIM_PWM_Start+0xfe>
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	2b0c      	cmp	r3, #12
 800401e:	d104      	bne.n	800402a <HAL_TIM_PWM_Start+0xe6>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2202      	movs	r2, #2
 8004024:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004028:	e00b      	b.n	8004042 <HAL_TIM_PWM_Start+0xfe>
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	2b10      	cmp	r3, #16
 800402e:	d104      	bne.n	800403a <HAL_TIM_PWM_Start+0xf6>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2202      	movs	r2, #2
 8004034:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004038:	e003      	b.n	8004042 <HAL_TIM_PWM_Start+0xfe>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2202      	movs	r2, #2
 800403e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2201      	movs	r2, #1
 8004048:	6839      	ldr	r1, [r7, #0]
 800404a:	4618      	mov	r0, r3
 800404c:	f001 f866 	bl	800511c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a30      	ldr	r2, [pc, #192]	; (8004118 <HAL_TIM_PWM_Start+0x1d4>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d004      	beq.n	8004064 <HAL_TIM_PWM_Start+0x120>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a2f      	ldr	r2, [pc, #188]	; (800411c <HAL_TIM_PWM_Start+0x1d8>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d101      	bne.n	8004068 <HAL_TIM_PWM_Start+0x124>
 8004064:	2301      	movs	r3, #1
 8004066:	e000      	b.n	800406a <HAL_TIM_PWM_Start+0x126>
 8004068:	2300      	movs	r3, #0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d007      	beq.n	800407e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800407c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a25      	ldr	r2, [pc, #148]	; (8004118 <HAL_TIM_PWM_Start+0x1d4>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d022      	beq.n	80040ce <HAL_TIM_PWM_Start+0x18a>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004090:	d01d      	beq.n	80040ce <HAL_TIM_PWM_Start+0x18a>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a22      	ldr	r2, [pc, #136]	; (8004120 <HAL_TIM_PWM_Start+0x1dc>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d018      	beq.n	80040ce <HAL_TIM_PWM_Start+0x18a>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a20      	ldr	r2, [pc, #128]	; (8004124 <HAL_TIM_PWM_Start+0x1e0>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d013      	beq.n	80040ce <HAL_TIM_PWM_Start+0x18a>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a1f      	ldr	r2, [pc, #124]	; (8004128 <HAL_TIM_PWM_Start+0x1e4>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d00e      	beq.n	80040ce <HAL_TIM_PWM_Start+0x18a>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a19      	ldr	r2, [pc, #100]	; (800411c <HAL_TIM_PWM_Start+0x1d8>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d009      	beq.n	80040ce <HAL_TIM_PWM_Start+0x18a>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a1b      	ldr	r2, [pc, #108]	; (800412c <HAL_TIM_PWM_Start+0x1e8>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d004      	beq.n	80040ce <HAL_TIM_PWM_Start+0x18a>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a19      	ldr	r2, [pc, #100]	; (8004130 <HAL_TIM_PWM_Start+0x1ec>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d115      	bne.n	80040fa <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	689a      	ldr	r2, [r3, #8]
 80040d4:	4b17      	ldr	r3, [pc, #92]	; (8004134 <HAL_TIM_PWM_Start+0x1f0>)
 80040d6:	4013      	ands	r3, r2
 80040d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2b06      	cmp	r3, #6
 80040de:	d015      	beq.n	800410c <HAL_TIM_PWM_Start+0x1c8>
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040e6:	d011      	beq.n	800410c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f042 0201 	orr.w	r2, r2, #1
 80040f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040f8:	e008      	b.n	800410c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f042 0201 	orr.w	r2, r2, #1
 8004108:	601a      	str	r2, [r3, #0]
 800410a:	e000      	b.n	800410e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800410c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800410e:	2300      	movs	r3, #0
}
 8004110:	4618      	mov	r0, r3
 8004112:	3710      	adds	r7, #16
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}
 8004118:	40010000 	.word	0x40010000
 800411c:	40010400 	.word	0x40010400
 8004120:	40000400 	.word	0x40000400
 8004124:	40000800 	.word	0x40000800
 8004128:	40000c00 	.word	0x40000c00
 800412c:	40014000 	.word	0x40014000
 8004130:	40001800 	.word	0x40001800
 8004134:	00010007 	.word	0x00010007

08004138 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b086      	sub	sp, #24
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d101      	bne.n	800414c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e08f      	b.n	800426c <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004152:	b2db      	uxtb	r3, r3
 8004154:	2b00      	cmp	r3, #0
 8004156:	d106      	bne.n	8004166 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f7fd fb25 	bl	80017b0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2202      	movs	r2, #2
 800416a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	6899      	ldr	r1, [r3, #8]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	4b3e      	ldr	r3, [pc, #248]	; (8004274 <HAL_TIM_Encoder_Init+0x13c>)
 800417a:	400b      	ands	r3, r1
 800417c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	3304      	adds	r3, #4
 8004186:	4619      	mov	r1, r3
 8004188:	4610      	mov	r0, r2
 800418a:	f000 fc2f 	bl	80049ec <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	699b      	ldr	r3, [r3, #24]
 800419c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	6a1b      	ldr	r3, [r3, #32]
 80041a4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	697a      	ldr	r2, [r7, #20]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80041b0:	693a      	ldr	r2, [r7, #16]
 80041b2:	4b31      	ldr	r3, [pc, #196]	; (8004278 <HAL_TIM_Encoder_Init+0x140>)
 80041b4:	4013      	ands	r3, r2
 80041b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	689a      	ldr	r2, [r3, #8]
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	699b      	ldr	r3, [r3, #24]
 80041c0:	021b      	lsls	r3, r3, #8
 80041c2:	4313      	orrs	r3, r2
 80041c4:	693a      	ldr	r2, [r7, #16]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80041ca:	693a      	ldr	r2, [r7, #16]
 80041cc:	4b2b      	ldr	r3, [pc, #172]	; (800427c <HAL_TIM_Encoder_Init+0x144>)
 80041ce:	4013      	ands	r3, r2
 80041d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80041d2:	693a      	ldr	r2, [r7, #16]
 80041d4:	4b2a      	ldr	r3, [pc, #168]	; (8004280 <HAL_TIM_Encoder_Init+0x148>)
 80041d6:	4013      	ands	r3, r2
 80041d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	68da      	ldr	r2, [r3, #12]
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	69db      	ldr	r3, [r3, #28]
 80041e2:	021b      	lsls	r3, r3, #8
 80041e4:	4313      	orrs	r3, r2
 80041e6:	693a      	ldr	r2, [r7, #16]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	691b      	ldr	r3, [r3, #16]
 80041f0:	011a      	lsls	r2, r3, #4
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	6a1b      	ldr	r3, [r3, #32]
 80041f6:	031b      	lsls	r3, r3, #12
 80041f8:	4313      	orrs	r3, r2
 80041fa:	693a      	ldr	r2, [r7, #16]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004206:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800420e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	685a      	ldr	r2, [r3, #4]
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	695b      	ldr	r3, [r3, #20]
 8004218:	011b      	lsls	r3, r3, #4
 800421a:	4313      	orrs	r3, r2
 800421c:	68fa      	ldr	r2, [r7, #12]
 800421e:	4313      	orrs	r3, r2
 8004220:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	697a      	ldr	r2, [r7, #20]
 8004228:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	693a      	ldr	r2, [r7, #16]
 8004230:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	68fa      	ldr	r2, [r7, #12]
 8004238:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2201      	movs	r2, #1
 800423e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2201      	movs	r2, #1
 8004246:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2201      	movs	r2, #1
 800424e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2201      	movs	r2, #1
 8004256:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2201      	movs	r2, #1
 800425e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2201      	movs	r2, #1
 8004266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800426a:	2300      	movs	r3, #0
}
 800426c:	4618      	mov	r0, r3
 800426e:	3718      	adds	r7, #24
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}
 8004274:	fffebff8 	.word	0xfffebff8
 8004278:	fffffcfc 	.word	0xfffffcfc
 800427c:	fffff3f3 	.word	0xfffff3f3
 8004280:	ffff0f0f 	.word	0xffff0f0f

08004284 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004294:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800429c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80042a4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042ac:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d110      	bne.n	80042d6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80042b4:	7bfb      	ldrb	r3, [r7, #15]
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d102      	bne.n	80042c0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80042ba:	7b7b      	ldrb	r3, [r7, #13]
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d001      	beq.n	80042c4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e069      	b.n	8004398 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2202      	movs	r2, #2
 80042c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2202      	movs	r2, #2
 80042d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042d4:	e031      	b.n	800433a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	2b04      	cmp	r3, #4
 80042da:	d110      	bne.n	80042fe <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80042dc:	7bbb      	ldrb	r3, [r7, #14]
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d102      	bne.n	80042e8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80042e2:	7b3b      	ldrb	r3, [r7, #12]
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d001      	beq.n	80042ec <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e055      	b.n	8004398 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2202      	movs	r2, #2
 80042f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2202      	movs	r2, #2
 80042f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042fc:	e01d      	b.n	800433a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80042fe:	7bfb      	ldrb	r3, [r7, #15]
 8004300:	2b01      	cmp	r3, #1
 8004302:	d108      	bne.n	8004316 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004304:	7bbb      	ldrb	r3, [r7, #14]
 8004306:	2b01      	cmp	r3, #1
 8004308:	d105      	bne.n	8004316 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800430a:	7b7b      	ldrb	r3, [r7, #13]
 800430c:	2b01      	cmp	r3, #1
 800430e:	d102      	bne.n	8004316 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004310:	7b3b      	ldrb	r3, [r7, #12]
 8004312:	2b01      	cmp	r3, #1
 8004314:	d001      	beq.n	800431a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e03e      	b.n	8004398 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2202      	movs	r2, #2
 800431e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2202      	movs	r2, #2
 8004326:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2202      	movs	r2, #2
 800432e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2202      	movs	r2, #2
 8004336:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d003      	beq.n	8004348 <HAL_TIM_Encoder_Start+0xc4>
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	2b04      	cmp	r3, #4
 8004344:	d008      	beq.n	8004358 <HAL_TIM_Encoder_Start+0xd4>
 8004346:	e00f      	b.n	8004368 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2201      	movs	r2, #1
 800434e:	2100      	movs	r1, #0
 8004350:	4618      	mov	r0, r3
 8004352:	f000 fee3 	bl	800511c <TIM_CCxChannelCmd>
      break;
 8004356:	e016      	b.n	8004386 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2201      	movs	r2, #1
 800435e:	2104      	movs	r1, #4
 8004360:	4618      	mov	r0, r3
 8004362:	f000 fedb 	bl	800511c <TIM_CCxChannelCmd>
      break;
 8004366:	e00e      	b.n	8004386 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2201      	movs	r2, #1
 800436e:	2100      	movs	r1, #0
 8004370:	4618      	mov	r0, r3
 8004372:	f000 fed3 	bl	800511c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	2201      	movs	r2, #1
 800437c:	2104      	movs	r1, #4
 800437e:	4618      	mov	r0, r3
 8004380:	f000 fecc 	bl	800511c <TIM_CCxChannelCmd>
      break;
 8004384:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f042 0201 	orr.w	r2, r2, #1
 8004394:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004396:	2300      	movs	r3, #0
}
 8004398:	4618      	mov	r0, r3
 800439a:	3710      	adds	r7, #16
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}

080043a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	691b      	ldr	r3, [r3, #16]
 80043ae:	f003 0302 	and.w	r3, r3, #2
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d122      	bne.n	80043fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	f003 0302 	and.w	r3, r3, #2
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d11b      	bne.n	80043fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f06f 0202 	mvn.w	r2, #2
 80043cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2201      	movs	r2, #1
 80043d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	f003 0303 	and.w	r3, r3, #3
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d003      	beq.n	80043ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 fae4 	bl	80049b0 <HAL_TIM_IC_CaptureCallback>
 80043e8:	e005      	b.n	80043f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f000 fad6 	bl	800499c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f000 fae7 	bl	80049c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	f003 0304 	and.w	r3, r3, #4
 8004406:	2b04      	cmp	r3, #4
 8004408:	d122      	bne.n	8004450 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	f003 0304 	and.w	r3, r3, #4
 8004414:	2b04      	cmp	r3, #4
 8004416:	d11b      	bne.n	8004450 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f06f 0204 	mvn.w	r2, #4
 8004420:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2202      	movs	r2, #2
 8004426:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004432:	2b00      	cmp	r3, #0
 8004434:	d003      	beq.n	800443e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 faba 	bl	80049b0 <HAL_TIM_IC_CaptureCallback>
 800443c:	e005      	b.n	800444a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 faac 	bl	800499c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f000 fabd 	bl	80049c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	f003 0308 	and.w	r3, r3, #8
 800445a:	2b08      	cmp	r3, #8
 800445c:	d122      	bne.n	80044a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	f003 0308 	and.w	r3, r3, #8
 8004468:	2b08      	cmp	r3, #8
 800446a:	d11b      	bne.n	80044a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f06f 0208 	mvn.w	r2, #8
 8004474:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2204      	movs	r2, #4
 800447a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	69db      	ldr	r3, [r3, #28]
 8004482:	f003 0303 	and.w	r3, r3, #3
 8004486:	2b00      	cmp	r3, #0
 8004488:	d003      	beq.n	8004492 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 fa90 	bl	80049b0 <HAL_TIM_IC_CaptureCallback>
 8004490:	e005      	b.n	800449e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 fa82 	bl	800499c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f000 fa93 	bl	80049c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	f003 0310 	and.w	r3, r3, #16
 80044ae:	2b10      	cmp	r3, #16
 80044b0:	d122      	bne.n	80044f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	f003 0310 	and.w	r3, r3, #16
 80044bc:	2b10      	cmp	r3, #16
 80044be:	d11b      	bne.n	80044f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f06f 0210 	mvn.w	r2, #16
 80044c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2208      	movs	r2, #8
 80044ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	69db      	ldr	r3, [r3, #28]
 80044d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d003      	beq.n	80044e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 fa66 	bl	80049b0 <HAL_TIM_IC_CaptureCallback>
 80044e4:	e005      	b.n	80044f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 fa58 	bl	800499c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 fa69 	bl	80049c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	f003 0301 	and.w	r3, r3, #1
 8004502:	2b01      	cmp	r3, #1
 8004504:	d10e      	bne.n	8004524 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	f003 0301 	and.w	r3, r3, #1
 8004510:	2b01      	cmp	r3, #1
 8004512:	d107      	bne.n	8004524 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f06f 0201 	mvn.w	r2, #1
 800451c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f7fd f9e2 	bl	80018e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800452e:	2b80      	cmp	r3, #128	; 0x80
 8004530:	d10e      	bne.n	8004550 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800453c:	2b80      	cmp	r3, #128	; 0x80
 800453e:	d107      	bne.n	8004550 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f000 ff22 	bl	8005394 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800455a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800455e:	d10e      	bne.n	800457e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800456a:	2b80      	cmp	r3, #128	; 0x80
 800456c:	d107      	bne.n	800457e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004576:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f000 ff15 	bl	80053a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	691b      	ldr	r3, [r3, #16]
 8004584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004588:	2b40      	cmp	r3, #64	; 0x40
 800458a:	d10e      	bne.n	80045aa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004596:	2b40      	cmp	r3, #64	; 0x40
 8004598:	d107      	bne.n	80045aa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80045a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f000 fa17 	bl	80049d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	691b      	ldr	r3, [r3, #16]
 80045b0:	f003 0320 	and.w	r3, r3, #32
 80045b4:	2b20      	cmp	r3, #32
 80045b6:	d10e      	bne.n	80045d6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	f003 0320 	and.w	r3, r3, #32
 80045c2:	2b20      	cmp	r3, #32
 80045c4:	d107      	bne.n	80045d6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f06f 0220 	mvn.w	r2, #32
 80045ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f000 fed5 	bl	8005380 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045d6:	bf00      	nop
 80045d8:	3708      	adds	r7, #8
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
	...

080045e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b086      	sub	sp, #24
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	60b9      	str	r1, [r7, #8]
 80045ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045ec:	2300      	movs	r3, #0
 80045ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d101      	bne.n	80045fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80045fa:	2302      	movs	r3, #2
 80045fc:	e0ff      	b.n	80047fe <HAL_TIM_PWM_ConfigChannel+0x21e>
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2201      	movs	r2, #1
 8004602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2b14      	cmp	r3, #20
 800460a:	f200 80f0 	bhi.w	80047ee <HAL_TIM_PWM_ConfigChannel+0x20e>
 800460e:	a201      	add	r2, pc, #4	; (adr r2, 8004614 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004614:	08004669 	.word	0x08004669
 8004618:	080047ef 	.word	0x080047ef
 800461c:	080047ef 	.word	0x080047ef
 8004620:	080047ef 	.word	0x080047ef
 8004624:	080046a9 	.word	0x080046a9
 8004628:	080047ef 	.word	0x080047ef
 800462c:	080047ef 	.word	0x080047ef
 8004630:	080047ef 	.word	0x080047ef
 8004634:	080046eb 	.word	0x080046eb
 8004638:	080047ef 	.word	0x080047ef
 800463c:	080047ef 	.word	0x080047ef
 8004640:	080047ef 	.word	0x080047ef
 8004644:	0800472b 	.word	0x0800472b
 8004648:	080047ef 	.word	0x080047ef
 800464c:	080047ef 	.word	0x080047ef
 8004650:	080047ef 	.word	0x080047ef
 8004654:	0800476d 	.word	0x0800476d
 8004658:	080047ef 	.word	0x080047ef
 800465c:	080047ef 	.word	0x080047ef
 8004660:	080047ef 	.word	0x080047ef
 8004664:	080047ad 	.word	0x080047ad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68b9      	ldr	r1, [r7, #8]
 800466e:	4618      	mov	r0, r3
 8004670:	f000 fa5c 	bl	8004b2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	699a      	ldr	r2, [r3, #24]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f042 0208 	orr.w	r2, r2, #8
 8004682:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	699a      	ldr	r2, [r3, #24]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f022 0204 	bic.w	r2, r2, #4
 8004692:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	6999      	ldr	r1, [r3, #24]
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	691a      	ldr	r2, [r3, #16]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	430a      	orrs	r2, r1
 80046a4:	619a      	str	r2, [r3, #24]
      break;
 80046a6:	e0a5      	b.n	80047f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68b9      	ldr	r1, [r7, #8]
 80046ae:	4618      	mov	r0, r3
 80046b0:	f000 faae 	bl	8004c10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	699a      	ldr	r2, [r3, #24]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	699a      	ldr	r2, [r3, #24]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	6999      	ldr	r1, [r3, #24]
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	021a      	lsls	r2, r3, #8
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	430a      	orrs	r2, r1
 80046e6:	619a      	str	r2, [r3, #24]
      break;
 80046e8:	e084      	b.n	80047f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	68b9      	ldr	r1, [r7, #8]
 80046f0:	4618      	mov	r0, r3
 80046f2:	f000 fb05 	bl	8004d00 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	69da      	ldr	r2, [r3, #28]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f042 0208 	orr.w	r2, r2, #8
 8004704:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	69da      	ldr	r2, [r3, #28]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f022 0204 	bic.w	r2, r2, #4
 8004714:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	69d9      	ldr	r1, [r3, #28]
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	691a      	ldr	r2, [r3, #16]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	430a      	orrs	r2, r1
 8004726:	61da      	str	r2, [r3, #28]
      break;
 8004728:	e064      	b.n	80047f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68b9      	ldr	r1, [r7, #8]
 8004730:	4618      	mov	r0, r3
 8004732:	f000 fb5b 	bl	8004dec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	69da      	ldr	r2, [r3, #28]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004744:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	69da      	ldr	r2, [r3, #28]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004754:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	69d9      	ldr	r1, [r3, #28]
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	691b      	ldr	r3, [r3, #16]
 8004760:	021a      	lsls	r2, r3, #8
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	430a      	orrs	r2, r1
 8004768:	61da      	str	r2, [r3, #28]
      break;
 800476a:	e043      	b.n	80047f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	68b9      	ldr	r1, [r7, #8]
 8004772:	4618      	mov	r0, r3
 8004774:	f000 fb92 	bl	8004e9c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f042 0208 	orr.w	r2, r2, #8
 8004786:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f022 0204 	bic.w	r2, r2, #4
 8004796:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	691a      	ldr	r2, [r3, #16]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	430a      	orrs	r2, r1
 80047a8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80047aa:	e023      	b.n	80047f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68b9      	ldr	r1, [r7, #8]
 80047b2:	4618      	mov	r0, r3
 80047b4:	f000 fbc4 	bl	8004f40 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047c6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047d6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	021a      	lsls	r2, r3, #8
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	430a      	orrs	r2, r1
 80047ea:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80047ec:	e002      	b.n	80047f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	75fb      	strb	r3, [r7, #23]
      break;
 80047f2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80047fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3718      	adds	r7, #24
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop

08004808 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004812:	2300      	movs	r3, #0
 8004814:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800481c:	2b01      	cmp	r3, #1
 800481e:	d101      	bne.n	8004824 <HAL_TIM_ConfigClockSource+0x1c>
 8004820:	2302      	movs	r3, #2
 8004822:	e0b4      	b.n	800498e <HAL_TIM_ConfigClockSource+0x186>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2202      	movs	r2, #2
 8004830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800483c:	68ba      	ldr	r2, [r7, #8]
 800483e:	4b56      	ldr	r3, [pc, #344]	; (8004998 <HAL_TIM_ConfigClockSource+0x190>)
 8004840:	4013      	ands	r3, r2
 8004842:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800484a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68ba      	ldr	r2, [r7, #8]
 8004852:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800485c:	d03e      	beq.n	80048dc <HAL_TIM_ConfigClockSource+0xd4>
 800485e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004862:	f200 8087 	bhi.w	8004974 <HAL_TIM_ConfigClockSource+0x16c>
 8004866:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800486a:	f000 8086 	beq.w	800497a <HAL_TIM_ConfigClockSource+0x172>
 800486e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004872:	d87f      	bhi.n	8004974 <HAL_TIM_ConfigClockSource+0x16c>
 8004874:	2b70      	cmp	r3, #112	; 0x70
 8004876:	d01a      	beq.n	80048ae <HAL_TIM_ConfigClockSource+0xa6>
 8004878:	2b70      	cmp	r3, #112	; 0x70
 800487a:	d87b      	bhi.n	8004974 <HAL_TIM_ConfigClockSource+0x16c>
 800487c:	2b60      	cmp	r3, #96	; 0x60
 800487e:	d050      	beq.n	8004922 <HAL_TIM_ConfigClockSource+0x11a>
 8004880:	2b60      	cmp	r3, #96	; 0x60
 8004882:	d877      	bhi.n	8004974 <HAL_TIM_ConfigClockSource+0x16c>
 8004884:	2b50      	cmp	r3, #80	; 0x50
 8004886:	d03c      	beq.n	8004902 <HAL_TIM_ConfigClockSource+0xfa>
 8004888:	2b50      	cmp	r3, #80	; 0x50
 800488a:	d873      	bhi.n	8004974 <HAL_TIM_ConfigClockSource+0x16c>
 800488c:	2b40      	cmp	r3, #64	; 0x40
 800488e:	d058      	beq.n	8004942 <HAL_TIM_ConfigClockSource+0x13a>
 8004890:	2b40      	cmp	r3, #64	; 0x40
 8004892:	d86f      	bhi.n	8004974 <HAL_TIM_ConfigClockSource+0x16c>
 8004894:	2b30      	cmp	r3, #48	; 0x30
 8004896:	d064      	beq.n	8004962 <HAL_TIM_ConfigClockSource+0x15a>
 8004898:	2b30      	cmp	r3, #48	; 0x30
 800489a:	d86b      	bhi.n	8004974 <HAL_TIM_ConfigClockSource+0x16c>
 800489c:	2b20      	cmp	r3, #32
 800489e:	d060      	beq.n	8004962 <HAL_TIM_ConfigClockSource+0x15a>
 80048a0:	2b20      	cmp	r3, #32
 80048a2:	d867      	bhi.n	8004974 <HAL_TIM_ConfigClockSource+0x16c>
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d05c      	beq.n	8004962 <HAL_TIM_ConfigClockSource+0x15a>
 80048a8:	2b10      	cmp	r3, #16
 80048aa:	d05a      	beq.n	8004962 <HAL_TIM_ConfigClockSource+0x15a>
 80048ac:	e062      	b.n	8004974 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6818      	ldr	r0, [r3, #0]
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	6899      	ldr	r1, [r3, #8]
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	685a      	ldr	r2, [r3, #4]
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	f000 fc0d 	bl	80050dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80048d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	68ba      	ldr	r2, [r7, #8]
 80048d8:	609a      	str	r2, [r3, #8]
      break;
 80048da:	e04f      	b.n	800497c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6818      	ldr	r0, [r3, #0]
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	6899      	ldr	r1, [r3, #8]
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	685a      	ldr	r2, [r3, #4]
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	f000 fbf6 	bl	80050dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	689a      	ldr	r2, [r3, #8]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048fe:	609a      	str	r2, [r3, #8]
      break;
 8004900:	e03c      	b.n	800497c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6818      	ldr	r0, [r3, #0]
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	6859      	ldr	r1, [r3, #4]
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	461a      	mov	r2, r3
 8004910:	f000 fb6a 	bl	8004fe8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	2150      	movs	r1, #80	; 0x50
 800491a:	4618      	mov	r0, r3
 800491c:	f000 fbc3 	bl	80050a6 <TIM_ITRx_SetConfig>
      break;
 8004920:	e02c      	b.n	800497c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6818      	ldr	r0, [r3, #0]
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	6859      	ldr	r1, [r3, #4]
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	461a      	mov	r2, r3
 8004930:	f000 fb89 	bl	8005046 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2160      	movs	r1, #96	; 0x60
 800493a:	4618      	mov	r0, r3
 800493c:	f000 fbb3 	bl	80050a6 <TIM_ITRx_SetConfig>
      break;
 8004940:	e01c      	b.n	800497c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6818      	ldr	r0, [r3, #0]
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	6859      	ldr	r1, [r3, #4]
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	461a      	mov	r2, r3
 8004950:	f000 fb4a 	bl	8004fe8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2140      	movs	r1, #64	; 0x40
 800495a:	4618      	mov	r0, r3
 800495c:	f000 fba3 	bl	80050a6 <TIM_ITRx_SetConfig>
      break;
 8004960:	e00c      	b.n	800497c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4619      	mov	r1, r3
 800496c:	4610      	mov	r0, r2
 800496e:	f000 fb9a 	bl	80050a6 <TIM_ITRx_SetConfig>
      break;
 8004972:	e003      	b.n	800497c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	73fb      	strb	r3, [r7, #15]
      break;
 8004978:	e000      	b.n	800497c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800497a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800498c:	7bfb      	ldrb	r3, [r7, #15]
}
 800498e:	4618      	mov	r0, r3
 8004990:	3710      	adds	r7, #16
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop
 8004998:	fffeff88 	.word	0xfffeff88

0800499c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80049a4:	bf00      	nop
 80049a6:	370c      	adds	r7, #12
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr

080049b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049b8:	bf00      	nop
 80049ba:	370c      	adds	r7, #12
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049cc:	bf00      	nop
 80049ce:	370c      	adds	r7, #12
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr

080049d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049e0:	bf00      	nop
 80049e2:	370c      	adds	r7, #12
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr

080049ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b085      	sub	sp, #20
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a40      	ldr	r2, [pc, #256]	; (8004b00 <TIM_Base_SetConfig+0x114>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d013      	beq.n	8004a2c <TIM_Base_SetConfig+0x40>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a0a:	d00f      	beq.n	8004a2c <TIM_Base_SetConfig+0x40>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4a3d      	ldr	r2, [pc, #244]	; (8004b04 <TIM_Base_SetConfig+0x118>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d00b      	beq.n	8004a2c <TIM_Base_SetConfig+0x40>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	4a3c      	ldr	r2, [pc, #240]	; (8004b08 <TIM_Base_SetConfig+0x11c>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d007      	beq.n	8004a2c <TIM_Base_SetConfig+0x40>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4a3b      	ldr	r2, [pc, #236]	; (8004b0c <TIM_Base_SetConfig+0x120>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d003      	beq.n	8004a2c <TIM_Base_SetConfig+0x40>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4a3a      	ldr	r2, [pc, #232]	; (8004b10 <TIM_Base_SetConfig+0x124>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d108      	bne.n	8004a3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	68fa      	ldr	r2, [r7, #12]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4a2f      	ldr	r2, [pc, #188]	; (8004b00 <TIM_Base_SetConfig+0x114>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d02b      	beq.n	8004a9e <TIM_Base_SetConfig+0xb2>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a4c:	d027      	beq.n	8004a9e <TIM_Base_SetConfig+0xb2>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a2c      	ldr	r2, [pc, #176]	; (8004b04 <TIM_Base_SetConfig+0x118>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d023      	beq.n	8004a9e <TIM_Base_SetConfig+0xb2>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a2b      	ldr	r2, [pc, #172]	; (8004b08 <TIM_Base_SetConfig+0x11c>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d01f      	beq.n	8004a9e <TIM_Base_SetConfig+0xb2>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a2a      	ldr	r2, [pc, #168]	; (8004b0c <TIM_Base_SetConfig+0x120>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d01b      	beq.n	8004a9e <TIM_Base_SetConfig+0xb2>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4a29      	ldr	r2, [pc, #164]	; (8004b10 <TIM_Base_SetConfig+0x124>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d017      	beq.n	8004a9e <TIM_Base_SetConfig+0xb2>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a28      	ldr	r2, [pc, #160]	; (8004b14 <TIM_Base_SetConfig+0x128>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d013      	beq.n	8004a9e <TIM_Base_SetConfig+0xb2>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4a27      	ldr	r2, [pc, #156]	; (8004b18 <TIM_Base_SetConfig+0x12c>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d00f      	beq.n	8004a9e <TIM_Base_SetConfig+0xb2>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a26      	ldr	r2, [pc, #152]	; (8004b1c <TIM_Base_SetConfig+0x130>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d00b      	beq.n	8004a9e <TIM_Base_SetConfig+0xb2>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4a25      	ldr	r2, [pc, #148]	; (8004b20 <TIM_Base_SetConfig+0x134>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d007      	beq.n	8004a9e <TIM_Base_SetConfig+0xb2>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4a24      	ldr	r2, [pc, #144]	; (8004b24 <TIM_Base_SetConfig+0x138>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d003      	beq.n	8004a9e <TIM_Base_SetConfig+0xb2>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a23      	ldr	r2, [pc, #140]	; (8004b28 <TIM_Base_SetConfig+0x13c>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d108      	bne.n	8004ab0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aa4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	68fa      	ldr	r2, [r7, #12]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	695b      	ldr	r3, [r3, #20]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	68fa      	ldr	r2, [r7, #12]
 8004ac2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	689a      	ldr	r2, [r3, #8]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	4a0a      	ldr	r2, [pc, #40]	; (8004b00 <TIM_Base_SetConfig+0x114>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d003      	beq.n	8004ae4 <TIM_Base_SetConfig+0xf8>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	4a0c      	ldr	r2, [pc, #48]	; (8004b10 <TIM_Base_SetConfig+0x124>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d103      	bne.n	8004aec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	691a      	ldr	r2, [r3, #16]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	615a      	str	r2, [r3, #20]
}
 8004af2:	bf00      	nop
 8004af4:	3714      	adds	r7, #20
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	40010000 	.word	0x40010000
 8004b04:	40000400 	.word	0x40000400
 8004b08:	40000800 	.word	0x40000800
 8004b0c:	40000c00 	.word	0x40000c00
 8004b10:	40010400 	.word	0x40010400
 8004b14:	40014000 	.word	0x40014000
 8004b18:	40014400 	.word	0x40014400
 8004b1c:	40014800 	.word	0x40014800
 8004b20:	40001800 	.word	0x40001800
 8004b24:	40001c00 	.word	0x40001c00
 8004b28:	40002000 	.word	0x40002000

08004b2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b087      	sub	sp, #28
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a1b      	ldr	r3, [r3, #32]
 8004b3a:	f023 0201 	bic.w	r2, r3, #1
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a1b      	ldr	r3, [r3, #32]
 8004b46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	699b      	ldr	r3, [r3, #24]
 8004b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b54:	68fa      	ldr	r2, [r7, #12]
 8004b56:	4b2b      	ldr	r3, [pc, #172]	; (8004c04 <TIM_OC1_SetConfig+0xd8>)
 8004b58:	4013      	ands	r3, r2
 8004b5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f023 0303 	bic.w	r3, r3, #3
 8004b62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	68fa      	ldr	r2, [r7, #12]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	f023 0302 	bic.w	r3, r3, #2
 8004b74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	697a      	ldr	r2, [r7, #20]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a21      	ldr	r2, [pc, #132]	; (8004c08 <TIM_OC1_SetConfig+0xdc>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d003      	beq.n	8004b90 <TIM_OC1_SetConfig+0x64>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a20      	ldr	r2, [pc, #128]	; (8004c0c <TIM_OC1_SetConfig+0xe0>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d10c      	bne.n	8004baa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	f023 0308 	bic.w	r3, r3, #8
 8004b96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	697a      	ldr	r2, [r7, #20]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	f023 0304 	bic.w	r3, r3, #4
 8004ba8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a16      	ldr	r2, [pc, #88]	; (8004c08 <TIM_OC1_SetConfig+0xdc>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d003      	beq.n	8004bba <TIM_OC1_SetConfig+0x8e>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a15      	ldr	r2, [pc, #84]	; (8004c0c <TIM_OC1_SetConfig+0xe0>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d111      	bne.n	8004bde <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004bc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	695b      	ldr	r3, [r3, #20]
 8004bce:	693a      	ldr	r2, [r7, #16]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	699b      	ldr	r3, [r3, #24]
 8004bd8:	693a      	ldr	r2, [r7, #16]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	693a      	ldr	r2, [r7, #16]
 8004be2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	68fa      	ldr	r2, [r7, #12]
 8004be8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	685a      	ldr	r2, [r3, #4]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	697a      	ldr	r2, [r7, #20]
 8004bf6:	621a      	str	r2, [r3, #32]
}
 8004bf8:	bf00      	nop
 8004bfa:	371c      	adds	r7, #28
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr
 8004c04:	fffeff8f 	.word	0xfffeff8f
 8004c08:	40010000 	.word	0x40010000
 8004c0c:	40010400 	.word	0x40010400

08004c10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b087      	sub	sp, #28
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6a1b      	ldr	r3, [r3, #32]
 8004c1e:	f023 0210 	bic.w	r2, r3, #16
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a1b      	ldr	r3, [r3, #32]
 8004c2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	699b      	ldr	r3, [r3, #24]
 8004c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c38:	68fa      	ldr	r2, [r7, #12]
 8004c3a:	4b2e      	ldr	r3, [pc, #184]	; (8004cf4 <TIM_OC2_SetConfig+0xe4>)
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	021b      	lsls	r3, r3, #8
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	f023 0320 	bic.w	r3, r3, #32
 8004c5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	011b      	lsls	r3, r3, #4
 8004c62:	697a      	ldr	r2, [r7, #20]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4a23      	ldr	r2, [pc, #140]	; (8004cf8 <TIM_OC2_SetConfig+0xe8>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d003      	beq.n	8004c78 <TIM_OC2_SetConfig+0x68>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	4a22      	ldr	r2, [pc, #136]	; (8004cfc <TIM_OC2_SetConfig+0xec>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d10d      	bne.n	8004c94 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	011b      	lsls	r3, r3, #4
 8004c86:	697a      	ldr	r2, [r7, #20]
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c92:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4a18      	ldr	r2, [pc, #96]	; (8004cf8 <TIM_OC2_SetConfig+0xe8>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d003      	beq.n	8004ca4 <TIM_OC2_SetConfig+0x94>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	4a17      	ldr	r2, [pc, #92]	; (8004cfc <TIM_OC2_SetConfig+0xec>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d113      	bne.n	8004ccc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004caa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004cb2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	695b      	ldr	r3, [r3, #20]
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	693a      	ldr	r2, [r7, #16]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	699b      	ldr	r3, [r3, #24]
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	693a      	ldr	r2, [r7, #16]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	693a      	ldr	r2, [r7, #16]
 8004cd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	685a      	ldr	r2, [r3, #4]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	697a      	ldr	r2, [r7, #20]
 8004ce4:	621a      	str	r2, [r3, #32]
}
 8004ce6:	bf00      	nop
 8004ce8:	371c      	adds	r7, #28
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr
 8004cf2:	bf00      	nop
 8004cf4:	feff8fff 	.word	0xfeff8fff
 8004cf8:	40010000 	.word	0x40010000
 8004cfc:	40010400 	.word	0x40010400

08004d00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b087      	sub	sp, #28
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a1b      	ldr	r3, [r3, #32]
 8004d0e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a1b      	ldr	r3, [r3, #32]
 8004d1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	69db      	ldr	r3, [r3, #28]
 8004d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d28:	68fa      	ldr	r2, [r7, #12]
 8004d2a:	4b2d      	ldr	r3, [pc, #180]	; (8004de0 <TIM_OC3_SetConfig+0xe0>)
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f023 0303 	bic.w	r3, r3, #3
 8004d36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	68fa      	ldr	r2, [r7, #12]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	021b      	lsls	r3, r3, #8
 8004d50:	697a      	ldr	r2, [r7, #20]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a22      	ldr	r2, [pc, #136]	; (8004de4 <TIM_OC3_SetConfig+0xe4>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d003      	beq.n	8004d66 <TIM_OC3_SetConfig+0x66>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a21      	ldr	r2, [pc, #132]	; (8004de8 <TIM_OC3_SetConfig+0xe8>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d10d      	bne.n	8004d82 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	021b      	lsls	r3, r3, #8
 8004d74:	697a      	ldr	r2, [r7, #20]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4a17      	ldr	r2, [pc, #92]	; (8004de4 <TIM_OC3_SetConfig+0xe4>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d003      	beq.n	8004d92 <TIM_OC3_SetConfig+0x92>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a16      	ldr	r2, [pc, #88]	; (8004de8 <TIM_OC3_SetConfig+0xe8>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d113      	bne.n	8004dba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004da0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	695b      	ldr	r3, [r3, #20]
 8004da6:	011b      	lsls	r3, r3, #4
 8004da8:	693a      	ldr	r2, [r7, #16]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	699b      	ldr	r3, [r3, #24]
 8004db2:	011b      	lsls	r3, r3, #4
 8004db4:	693a      	ldr	r2, [r7, #16]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	693a      	ldr	r2, [r7, #16]
 8004dbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	68fa      	ldr	r2, [r7, #12]
 8004dc4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	685a      	ldr	r2, [r3, #4]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	697a      	ldr	r2, [r7, #20]
 8004dd2:	621a      	str	r2, [r3, #32]
}
 8004dd4:	bf00      	nop
 8004dd6:	371c      	adds	r7, #28
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr
 8004de0:	fffeff8f 	.word	0xfffeff8f
 8004de4:	40010000 	.word	0x40010000
 8004de8:	40010400 	.word	0x40010400

08004dec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b087      	sub	sp, #28
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a1b      	ldr	r3, [r3, #32]
 8004dfa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a1b      	ldr	r3, [r3, #32]
 8004e06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	69db      	ldr	r3, [r3, #28]
 8004e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e14:	68fa      	ldr	r2, [r7, #12]
 8004e16:	4b1e      	ldr	r3, [pc, #120]	; (8004e90 <TIM_OC4_SetConfig+0xa4>)
 8004e18:	4013      	ands	r3, r2
 8004e1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	021b      	lsls	r3, r3, #8
 8004e2a:	68fa      	ldr	r2, [r7, #12]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	031b      	lsls	r3, r3, #12
 8004e3e:	693a      	ldr	r2, [r7, #16]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	4a13      	ldr	r2, [pc, #76]	; (8004e94 <TIM_OC4_SetConfig+0xa8>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d003      	beq.n	8004e54 <TIM_OC4_SetConfig+0x68>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4a12      	ldr	r2, [pc, #72]	; (8004e98 <TIM_OC4_SetConfig+0xac>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d109      	bne.n	8004e68 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	695b      	ldr	r3, [r3, #20]
 8004e60:	019b      	lsls	r3, r3, #6
 8004e62:	697a      	ldr	r2, [r7, #20]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	697a      	ldr	r2, [r7, #20]
 8004e6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	68fa      	ldr	r2, [r7, #12]
 8004e72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	685a      	ldr	r2, [r3, #4]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	693a      	ldr	r2, [r7, #16]
 8004e80:	621a      	str	r2, [r3, #32]
}
 8004e82:	bf00      	nop
 8004e84:	371c      	adds	r7, #28
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr
 8004e8e:	bf00      	nop
 8004e90:	feff8fff 	.word	0xfeff8fff
 8004e94:	40010000 	.word	0x40010000
 8004e98:	40010400 	.word	0x40010400

08004e9c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b087      	sub	sp, #28
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a1b      	ldr	r3, [r3, #32]
 8004eaa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a1b      	ldr	r3, [r3, #32]
 8004eb6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004ec4:	68fa      	ldr	r2, [r7, #12]
 8004ec6:	4b1b      	ldr	r3, [pc, #108]	; (8004f34 <TIM_OC5_SetConfig+0x98>)
 8004ec8:	4013      	ands	r3, r2
 8004eca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	68fa      	ldr	r2, [r7, #12]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004edc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	041b      	lsls	r3, r3, #16
 8004ee4:	693a      	ldr	r2, [r7, #16]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a12      	ldr	r2, [pc, #72]	; (8004f38 <TIM_OC5_SetConfig+0x9c>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d003      	beq.n	8004efa <TIM_OC5_SetConfig+0x5e>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a11      	ldr	r2, [pc, #68]	; (8004f3c <TIM_OC5_SetConfig+0xa0>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d109      	bne.n	8004f0e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f00:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	695b      	ldr	r3, [r3, #20]
 8004f06:	021b      	lsls	r3, r3, #8
 8004f08:	697a      	ldr	r2, [r7, #20]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	697a      	ldr	r2, [r7, #20]
 8004f12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	68fa      	ldr	r2, [r7, #12]
 8004f18:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	685a      	ldr	r2, [r3, #4]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	693a      	ldr	r2, [r7, #16]
 8004f26:	621a      	str	r2, [r3, #32]
}
 8004f28:	bf00      	nop
 8004f2a:	371c      	adds	r7, #28
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr
 8004f34:	fffeff8f 	.word	0xfffeff8f
 8004f38:	40010000 	.word	0x40010000
 8004f3c:	40010400 	.word	0x40010400

08004f40 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b087      	sub	sp, #28
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a1b      	ldr	r3, [r3, #32]
 8004f4e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a1b      	ldr	r3, [r3, #32]
 8004f5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004f68:	68fa      	ldr	r2, [r7, #12]
 8004f6a:	4b1c      	ldr	r3, [pc, #112]	; (8004fdc <TIM_OC6_SetConfig+0x9c>)
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	021b      	lsls	r3, r3, #8
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004f82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	051b      	lsls	r3, r3, #20
 8004f8a:	693a      	ldr	r2, [r7, #16]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a13      	ldr	r2, [pc, #76]	; (8004fe0 <TIM_OC6_SetConfig+0xa0>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d003      	beq.n	8004fa0 <TIM_OC6_SetConfig+0x60>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a12      	ldr	r2, [pc, #72]	; (8004fe4 <TIM_OC6_SetConfig+0xa4>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d109      	bne.n	8004fb4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fa6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	695b      	ldr	r3, [r3, #20]
 8004fac:	029b      	lsls	r3, r3, #10
 8004fae:	697a      	ldr	r2, [r7, #20]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	68fa      	ldr	r2, [r7, #12]
 8004fbe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	685a      	ldr	r2, [r3, #4]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	693a      	ldr	r2, [r7, #16]
 8004fcc:	621a      	str	r2, [r3, #32]
}
 8004fce:	bf00      	nop
 8004fd0:	371c      	adds	r7, #28
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	feff8fff 	.word	0xfeff8fff
 8004fe0:	40010000 	.word	0x40010000
 8004fe4:	40010400 	.word	0x40010400

08004fe8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b087      	sub	sp, #28
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6a1b      	ldr	r3, [r3, #32]
 8004ff8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	6a1b      	ldr	r3, [r3, #32]
 8004ffe:	f023 0201 	bic.w	r2, r3, #1
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	699b      	ldr	r3, [r3, #24]
 800500a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005012:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	011b      	lsls	r3, r3, #4
 8005018:	693a      	ldr	r2, [r7, #16]
 800501a:	4313      	orrs	r3, r2
 800501c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	f023 030a 	bic.w	r3, r3, #10
 8005024:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005026:	697a      	ldr	r2, [r7, #20]
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	4313      	orrs	r3, r2
 800502c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	693a      	ldr	r2, [r7, #16]
 8005032:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	697a      	ldr	r2, [r7, #20]
 8005038:	621a      	str	r2, [r3, #32]
}
 800503a:	bf00      	nop
 800503c:	371c      	adds	r7, #28
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr

08005046 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005046:	b480      	push	{r7}
 8005048:	b087      	sub	sp, #28
 800504a:	af00      	add	r7, sp, #0
 800504c:	60f8      	str	r0, [r7, #12]
 800504e:	60b9      	str	r1, [r7, #8]
 8005050:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	6a1b      	ldr	r3, [r3, #32]
 8005056:	f023 0210 	bic.w	r2, r3, #16
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	699b      	ldr	r3, [r3, #24]
 8005062:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	6a1b      	ldr	r3, [r3, #32]
 8005068:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005070:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	031b      	lsls	r3, r3, #12
 8005076:	697a      	ldr	r2, [r7, #20]
 8005078:	4313      	orrs	r3, r2
 800507a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005082:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	011b      	lsls	r3, r3, #4
 8005088:	693a      	ldr	r2, [r7, #16]
 800508a:	4313      	orrs	r3, r2
 800508c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	697a      	ldr	r2, [r7, #20]
 8005092:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	693a      	ldr	r2, [r7, #16]
 8005098:	621a      	str	r2, [r3, #32]
}
 800509a:	bf00      	nop
 800509c:	371c      	adds	r7, #28
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr

080050a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80050a6:	b480      	push	{r7}
 80050a8:	b085      	sub	sp, #20
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
 80050ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80050be:	683a      	ldr	r2, [r7, #0]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	f043 0307 	orr.w	r3, r3, #7
 80050c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	609a      	str	r2, [r3, #8]
}
 80050d0:	bf00      	nop
 80050d2:	3714      	adds	r7, #20
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr

080050dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80050dc:	b480      	push	{r7}
 80050de:	b087      	sub	sp, #28
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	60b9      	str	r1, [r7, #8]
 80050e6:	607a      	str	r2, [r7, #4]
 80050e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	021a      	lsls	r2, r3, #8
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	431a      	orrs	r2, r3
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	4313      	orrs	r3, r2
 8005104:	697a      	ldr	r2, [r7, #20]
 8005106:	4313      	orrs	r3, r2
 8005108:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	697a      	ldr	r2, [r7, #20]
 800510e:	609a      	str	r2, [r3, #8]
}
 8005110:	bf00      	nop
 8005112:	371c      	adds	r7, #28
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr

0800511c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800511c:	b480      	push	{r7}
 800511e:	b087      	sub	sp, #28
 8005120:	af00      	add	r7, sp, #0
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	f003 031f 	and.w	r3, r3, #31
 800512e:	2201      	movs	r2, #1
 8005130:	fa02 f303 	lsl.w	r3, r2, r3
 8005134:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6a1a      	ldr	r2, [r3, #32]
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	43db      	mvns	r3, r3
 800513e:	401a      	ands	r2, r3
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6a1a      	ldr	r2, [r3, #32]
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	f003 031f 	and.w	r3, r3, #31
 800514e:	6879      	ldr	r1, [r7, #4]
 8005150:	fa01 f303 	lsl.w	r3, r1, r3
 8005154:	431a      	orrs	r2, r3
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	621a      	str	r2, [r3, #32]
}
 800515a:	bf00      	nop
 800515c:	371c      	adds	r7, #28
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr
	...

08005168 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005168:	b480      	push	{r7}
 800516a:	b085      	sub	sp, #20
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005178:	2b01      	cmp	r3, #1
 800517a:	d101      	bne.n	8005180 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800517c:	2302      	movs	r3, #2
 800517e:	e06d      	b.n	800525c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2202      	movs	r2, #2
 800518c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a30      	ldr	r2, [pc, #192]	; (8005268 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d004      	beq.n	80051b4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a2f      	ldr	r2, [pc, #188]	; (800526c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d108      	bne.n	80051c6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80051ba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	68fa      	ldr	r2, [r7, #12]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051cc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	68fa      	ldr	r2, [r7, #12]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	68fa      	ldr	r2, [r7, #12]
 80051de:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a20      	ldr	r2, [pc, #128]	; (8005268 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d022      	beq.n	8005230 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051f2:	d01d      	beq.n	8005230 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a1d      	ldr	r2, [pc, #116]	; (8005270 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d018      	beq.n	8005230 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a1c      	ldr	r2, [pc, #112]	; (8005274 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d013      	beq.n	8005230 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a1a      	ldr	r2, [pc, #104]	; (8005278 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d00e      	beq.n	8005230 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a15      	ldr	r2, [pc, #84]	; (800526c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d009      	beq.n	8005230 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a16      	ldr	r2, [pc, #88]	; (800527c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d004      	beq.n	8005230 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a15      	ldr	r2, [pc, #84]	; (8005280 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d10c      	bne.n	800524a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005236:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	68ba      	ldr	r2, [r7, #8]
 800523e:	4313      	orrs	r3, r2
 8005240:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68ba      	ldr	r2, [r7, #8]
 8005248:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2201      	movs	r2, #1
 800524e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800525a:	2300      	movs	r3, #0
}
 800525c:	4618      	mov	r0, r3
 800525e:	3714      	adds	r7, #20
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr
 8005268:	40010000 	.word	0x40010000
 800526c:	40010400 	.word	0x40010400
 8005270:	40000400 	.word	0x40000400
 8005274:	40000800 	.word	0x40000800
 8005278:	40000c00 	.word	0x40000c00
 800527c:	40014000 	.word	0x40014000
 8005280:	40001800 	.word	0x40001800

08005284 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005284:	b480      	push	{r7}
 8005286:	b085      	sub	sp, #20
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800528e:	2300      	movs	r3, #0
 8005290:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005298:	2b01      	cmp	r3, #1
 800529a:	d101      	bne.n	80052a0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800529c:	2302      	movs	r3, #2
 800529e:	e065      	b.n	800536c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	4313      	orrs	r3, r2
 80052c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4313      	orrs	r3, r2
 80052de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	691b      	ldr	r3, [r3, #16]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	695b      	ldr	r3, [r3, #20]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005306:	4313      	orrs	r3, r2
 8005308:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	699b      	ldr	r3, [r3, #24]
 8005314:	041b      	lsls	r3, r3, #16
 8005316:	4313      	orrs	r3, r2
 8005318:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a16      	ldr	r2, [pc, #88]	; (8005378 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d004      	beq.n	800532e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a14      	ldr	r2, [pc, #80]	; (800537c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d115      	bne.n	800535a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005338:	051b      	lsls	r3, r3, #20
 800533a:	4313      	orrs	r3, r2
 800533c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	69db      	ldr	r3, [r3, #28]
 8005348:	4313      	orrs	r3, r2
 800534a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	6a1b      	ldr	r3, [r3, #32]
 8005356:	4313      	orrs	r3, r2
 8005358:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	68fa      	ldr	r2, [r7, #12]
 8005360:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800536a:	2300      	movs	r3, #0
}
 800536c:	4618      	mov	r0, r3
 800536e:	3714      	adds	r7, #20
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr
 8005378:	40010000 	.word	0x40010000
 800537c:	40010400 	.word	0x40010400

08005380 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005388:	bf00      	nop
 800538a:	370c      	adds	r7, #12
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800539c:	bf00      	nop
 800539e:	370c      	adds	r7, #12
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80053b0:	bf00      	nop
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b082      	sub	sp, #8
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d101      	bne.n	80053ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e040      	b.n	8005450 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d106      	bne.n	80053e4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f7fc fb7e 	bl	8001ae0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2224      	movs	r2, #36	; 0x24
 80053e8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f022 0201 	bic.w	r2, r2, #1
 80053f8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f000 f8c0 	bl	8005580 <UART_SetConfig>
 8005400:	4603      	mov	r3, r0
 8005402:	2b01      	cmp	r3, #1
 8005404:	d101      	bne.n	800540a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e022      	b.n	8005450 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540e:	2b00      	cmp	r3, #0
 8005410:	d002      	beq.n	8005418 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 fb16 	bl	8005a44 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	685a      	ldr	r2, [r3, #4]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005426:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	689a      	ldr	r2, [r3, #8]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005436:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f042 0201 	orr.w	r2, r2, #1
 8005446:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f000 fb9d 	bl	8005b88 <UART_CheckIdleState>
 800544e:	4603      	mov	r3, r0
}
 8005450:	4618      	mov	r0, r3
 8005452:	3708      	adds	r7, #8
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}

08005458 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b08a      	sub	sp, #40	; 0x28
 800545c:	af02      	add	r7, sp, #8
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	603b      	str	r3, [r7, #0]
 8005464:	4613      	mov	r3, r2
 8005466:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800546c:	2b20      	cmp	r3, #32
 800546e:	f040 8081 	bne.w	8005574 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d002      	beq.n	800547e <HAL_UART_Transmit+0x26>
 8005478:	88fb      	ldrh	r3, [r7, #6]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d101      	bne.n	8005482 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e079      	b.n	8005576 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005488:	2b01      	cmp	r3, #1
 800548a:	d101      	bne.n	8005490 <HAL_UART_Transmit+0x38>
 800548c:	2302      	movs	r3, #2
 800548e:	e072      	b.n	8005576 <HAL_UART_Transmit+0x11e>
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2200      	movs	r2, #0
 800549c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2221      	movs	r2, #33	; 0x21
 80054a4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80054a6:	f7fc fc63 	bl	8001d70 <HAL_GetTick>
 80054aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	88fa      	ldrh	r2, [r7, #6]
 80054b0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	88fa      	ldrh	r2, [r7, #6]
 80054b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054c4:	d108      	bne.n	80054d8 <HAL_UART_Transmit+0x80>
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d104      	bne.n	80054d8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80054ce:	2300      	movs	r3, #0
 80054d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	61bb      	str	r3, [r7, #24]
 80054d6:	e003      	b.n	80054e0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80054dc:	2300      	movs	r3, #0
 80054de:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2200      	movs	r2, #0
 80054e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80054e8:	e02c      	b.n	8005544 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	9300      	str	r3, [sp, #0]
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	2200      	movs	r2, #0
 80054f2:	2180      	movs	r1, #128	; 0x80
 80054f4:	68f8      	ldr	r0, [r7, #12]
 80054f6:	f000 fb7a 	bl	8005bee <UART_WaitOnFlagUntilTimeout>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d001      	beq.n	8005504 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005500:	2303      	movs	r3, #3
 8005502:	e038      	b.n	8005576 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d10b      	bne.n	8005522 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	881b      	ldrh	r3, [r3, #0]
 800550e:	461a      	mov	r2, r3
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005518:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	3302      	adds	r3, #2
 800551e:	61bb      	str	r3, [r7, #24]
 8005520:	e007      	b.n	8005532 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	781a      	ldrb	r2, [r3, #0]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800552c:	69fb      	ldr	r3, [r7, #28]
 800552e:	3301      	adds	r3, #1
 8005530:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005538:	b29b      	uxth	r3, r3
 800553a:	3b01      	subs	r3, #1
 800553c:	b29a      	uxth	r2, r3
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800554a:	b29b      	uxth	r3, r3
 800554c:	2b00      	cmp	r3, #0
 800554e:	d1cc      	bne.n	80054ea <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	9300      	str	r3, [sp, #0]
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	2200      	movs	r2, #0
 8005558:	2140      	movs	r1, #64	; 0x40
 800555a:	68f8      	ldr	r0, [r7, #12]
 800555c:	f000 fb47 	bl	8005bee <UART_WaitOnFlagUntilTimeout>
 8005560:	4603      	mov	r3, r0
 8005562:	2b00      	cmp	r3, #0
 8005564:	d001      	beq.n	800556a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8005566:	2303      	movs	r3, #3
 8005568:	e005      	b.n	8005576 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2220      	movs	r2, #32
 800556e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005570:	2300      	movs	r3, #0
 8005572:	e000      	b.n	8005576 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005574:	2302      	movs	r3, #2
  }
}
 8005576:	4618      	mov	r0, r3
 8005578:	3720      	adds	r7, #32
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
	...

08005580 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b088      	sub	sp, #32
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005588:	2300      	movs	r3, #0
 800558a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	689a      	ldr	r2, [r3, #8]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	691b      	ldr	r3, [r3, #16]
 8005594:	431a      	orrs	r2, r3
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	695b      	ldr	r3, [r3, #20]
 800559a:	431a      	orrs	r2, r3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	69db      	ldr	r3, [r3, #28]
 80055a0:	4313      	orrs	r3, r2
 80055a2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	4ba7      	ldr	r3, [pc, #668]	; (8005848 <UART_SetConfig+0x2c8>)
 80055ac:	4013      	ands	r3, r2
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	6812      	ldr	r2, [r2, #0]
 80055b2:	6979      	ldr	r1, [r7, #20]
 80055b4:	430b      	orrs	r3, r1
 80055b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	68da      	ldr	r2, [r3, #12]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	430a      	orrs	r2, r1
 80055cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	699b      	ldr	r3, [r3, #24]
 80055d2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6a1b      	ldr	r3, [r3, #32]
 80055d8:	697a      	ldr	r2, [r7, #20]
 80055da:	4313      	orrs	r3, r2
 80055dc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	697a      	ldr	r2, [r7, #20]
 80055ee:	430a      	orrs	r2, r1
 80055f0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a95      	ldr	r2, [pc, #596]	; (800584c <UART_SetConfig+0x2cc>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d120      	bne.n	800563e <UART_SetConfig+0xbe>
 80055fc:	4b94      	ldr	r3, [pc, #592]	; (8005850 <UART_SetConfig+0x2d0>)
 80055fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005602:	f003 0303 	and.w	r3, r3, #3
 8005606:	2b03      	cmp	r3, #3
 8005608:	d816      	bhi.n	8005638 <UART_SetConfig+0xb8>
 800560a:	a201      	add	r2, pc, #4	; (adr r2, 8005610 <UART_SetConfig+0x90>)
 800560c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005610:	08005621 	.word	0x08005621
 8005614:	0800562d 	.word	0x0800562d
 8005618:	08005627 	.word	0x08005627
 800561c:	08005633 	.word	0x08005633
 8005620:	2301      	movs	r3, #1
 8005622:	77fb      	strb	r3, [r7, #31]
 8005624:	e14f      	b.n	80058c6 <UART_SetConfig+0x346>
 8005626:	2302      	movs	r3, #2
 8005628:	77fb      	strb	r3, [r7, #31]
 800562a:	e14c      	b.n	80058c6 <UART_SetConfig+0x346>
 800562c:	2304      	movs	r3, #4
 800562e:	77fb      	strb	r3, [r7, #31]
 8005630:	e149      	b.n	80058c6 <UART_SetConfig+0x346>
 8005632:	2308      	movs	r3, #8
 8005634:	77fb      	strb	r3, [r7, #31]
 8005636:	e146      	b.n	80058c6 <UART_SetConfig+0x346>
 8005638:	2310      	movs	r3, #16
 800563a:	77fb      	strb	r3, [r7, #31]
 800563c:	e143      	b.n	80058c6 <UART_SetConfig+0x346>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a84      	ldr	r2, [pc, #528]	; (8005854 <UART_SetConfig+0x2d4>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d132      	bne.n	80056ae <UART_SetConfig+0x12e>
 8005648:	4b81      	ldr	r3, [pc, #516]	; (8005850 <UART_SetConfig+0x2d0>)
 800564a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800564e:	f003 030c 	and.w	r3, r3, #12
 8005652:	2b0c      	cmp	r3, #12
 8005654:	d828      	bhi.n	80056a8 <UART_SetConfig+0x128>
 8005656:	a201      	add	r2, pc, #4	; (adr r2, 800565c <UART_SetConfig+0xdc>)
 8005658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800565c:	08005691 	.word	0x08005691
 8005660:	080056a9 	.word	0x080056a9
 8005664:	080056a9 	.word	0x080056a9
 8005668:	080056a9 	.word	0x080056a9
 800566c:	0800569d 	.word	0x0800569d
 8005670:	080056a9 	.word	0x080056a9
 8005674:	080056a9 	.word	0x080056a9
 8005678:	080056a9 	.word	0x080056a9
 800567c:	08005697 	.word	0x08005697
 8005680:	080056a9 	.word	0x080056a9
 8005684:	080056a9 	.word	0x080056a9
 8005688:	080056a9 	.word	0x080056a9
 800568c:	080056a3 	.word	0x080056a3
 8005690:	2300      	movs	r3, #0
 8005692:	77fb      	strb	r3, [r7, #31]
 8005694:	e117      	b.n	80058c6 <UART_SetConfig+0x346>
 8005696:	2302      	movs	r3, #2
 8005698:	77fb      	strb	r3, [r7, #31]
 800569a:	e114      	b.n	80058c6 <UART_SetConfig+0x346>
 800569c:	2304      	movs	r3, #4
 800569e:	77fb      	strb	r3, [r7, #31]
 80056a0:	e111      	b.n	80058c6 <UART_SetConfig+0x346>
 80056a2:	2308      	movs	r3, #8
 80056a4:	77fb      	strb	r3, [r7, #31]
 80056a6:	e10e      	b.n	80058c6 <UART_SetConfig+0x346>
 80056a8:	2310      	movs	r3, #16
 80056aa:	77fb      	strb	r3, [r7, #31]
 80056ac:	e10b      	b.n	80058c6 <UART_SetConfig+0x346>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a69      	ldr	r2, [pc, #420]	; (8005858 <UART_SetConfig+0x2d8>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d120      	bne.n	80056fa <UART_SetConfig+0x17a>
 80056b8:	4b65      	ldr	r3, [pc, #404]	; (8005850 <UART_SetConfig+0x2d0>)
 80056ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056be:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80056c2:	2b30      	cmp	r3, #48	; 0x30
 80056c4:	d013      	beq.n	80056ee <UART_SetConfig+0x16e>
 80056c6:	2b30      	cmp	r3, #48	; 0x30
 80056c8:	d814      	bhi.n	80056f4 <UART_SetConfig+0x174>
 80056ca:	2b20      	cmp	r3, #32
 80056cc:	d009      	beq.n	80056e2 <UART_SetConfig+0x162>
 80056ce:	2b20      	cmp	r3, #32
 80056d0:	d810      	bhi.n	80056f4 <UART_SetConfig+0x174>
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d002      	beq.n	80056dc <UART_SetConfig+0x15c>
 80056d6:	2b10      	cmp	r3, #16
 80056d8:	d006      	beq.n	80056e8 <UART_SetConfig+0x168>
 80056da:	e00b      	b.n	80056f4 <UART_SetConfig+0x174>
 80056dc:	2300      	movs	r3, #0
 80056de:	77fb      	strb	r3, [r7, #31]
 80056e0:	e0f1      	b.n	80058c6 <UART_SetConfig+0x346>
 80056e2:	2302      	movs	r3, #2
 80056e4:	77fb      	strb	r3, [r7, #31]
 80056e6:	e0ee      	b.n	80058c6 <UART_SetConfig+0x346>
 80056e8:	2304      	movs	r3, #4
 80056ea:	77fb      	strb	r3, [r7, #31]
 80056ec:	e0eb      	b.n	80058c6 <UART_SetConfig+0x346>
 80056ee:	2308      	movs	r3, #8
 80056f0:	77fb      	strb	r3, [r7, #31]
 80056f2:	e0e8      	b.n	80058c6 <UART_SetConfig+0x346>
 80056f4:	2310      	movs	r3, #16
 80056f6:	77fb      	strb	r3, [r7, #31]
 80056f8:	e0e5      	b.n	80058c6 <UART_SetConfig+0x346>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a57      	ldr	r2, [pc, #348]	; (800585c <UART_SetConfig+0x2dc>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d120      	bne.n	8005746 <UART_SetConfig+0x1c6>
 8005704:	4b52      	ldr	r3, [pc, #328]	; (8005850 <UART_SetConfig+0x2d0>)
 8005706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800570a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800570e:	2bc0      	cmp	r3, #192	; 0xc0
 8005710:	d013      	beq.n	800573a <UART_SetConfig+0x1ba>
 8005712:	2bc0      	cmp	r3, #192	; 0xc0
 8005714:	d814      	bhi.n	8005740 <UART_SetConfig+0x1c0>
 8005716:	2b80      	cmp	r3, #128	; 0x80
 8005718:	d009      	beq.n	800572e <UART_SetConfig+0x1ae>
 800571a:	2b80      	cmp	r3, #128	; 0x80
 800571c:	d810      	bhi.n	8005740 <UART_SetConfig+0x1c0>
 800571e:	2b00      	cmp	r3, #0
 8005720:	d002      	beq.n	8005728 <UART_SetConfig+0x1a8>
 8005722:	2b40      	cmp	r3, #64	; 0x40
 8005724:	d006      	beq.n	8005734 <UART_SetConfig+0x1b4>
 8005726:	e00b      	b.n	8005740 <UART_SetConfig+0x1c0>
 8005728:	2300      	movs	r3, #0
 800572a:	77fb      	strb	r3, [r7, #31]
 800572c:	e0cb      	b.n	80058c6 <UART_SetConfig+0x346>
 800572e:	2302      	movs	r3, #2
 8005730:	77fb      	strb	r3, [r7, #31]
 8005732:	e0c8      	b.n	80058c6 <UART_SetConfig+0x346>
 8005734:	2304      	movs	r3, #4
 8005736:	77fb      	strb	r3, [r7, #31]
 8005738:	e0c5      	b.n	80058c6 <UART_SetConfig+0x346>
 800573a:	2308      	movs	r3, #8
 800573c:	77fb      	strb	r3, [r7, #31]
 800573e:	e0c2      	b.n	80058c6 <UART_SetConfig+0x346>
 8005740:	2310      	movs	r3, #16
 8005742:	77fb      	strb	r3, [r7, #31]
 8005744:	e0bf      	b.n	80058c6 <UART_SetConfig+0x346>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a45      	ldr	r2, [pc, #276]	; (8005860 <UART_SetConfig+0x2e0>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d125      	bne.n	800579c <UART_SetConfig+0x21c>
 8005750:	4b3f      	ldr	r3, [pc, #252]	; (8005850 <UART_SetConfig+0x2d0>)
 8005752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005756:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800575a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800575e:	d017      	beq.n	8005790 <UART_SetConfig+0x210>
 8005760:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005764:	d817      	bhi.n	8005796 <UART_SetConfig+0x216>
 8005766:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800576a:	d00b      	beq.n	8005784 <UART_SetConfig+0x204>
 800576c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005770:	d811      	bhi.n	8005796 <UART_SetConfig+0x216>
 8005772:	2b00      	cmp	r3, #0
 8005774:	d003      	beq.n	800577e <UART_SetConfig+0x1fe>
 8005776:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800577a:	d006      	beq.n	800578a <UART_SetConfig+0x20a>
 800577c:	e00b      	b.n	8005796 <UART_SetConfig+0x216>
 800577e:	2300      	movs	r3, #0
 8005780:	77fb      	strb	r3, [r7, #31]
 8005782:	e0a0      	b.n	80058c6 <UART_SetConfig+0x346>
 8005784:	2302      	movs	r3, #2
 8005786:	77fb      	strb	r3, [r7, #31]
 8005788:	e09d      	b.n	80058c6 <UART_SetConfig+0x346>
 800578a:	2304      	movs	r3, #4
 800578c:	77fb      	strb	r3, [r7, #31]
 800578e:	e09a      	b.n	80058c6 <UART_SetConfig+0x346>
 8005790:	2308      	movs	r3, #8
 8005792:	77fb      	strb	r3, [r7, #31]
 8005794:	e097      	b.n	80058c6 <UART_SetConfig+0x346>
 8005796:	2310      	movs	r3, #16
 8005798:	77fb      	strb	r3, [r7, #31]
 800579a:	e094      	b.n	80058c6 <UART_SetConfig+0x346>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a30      	ldr	r2, [pc, #192]	; (8005864 <UART_SetConfig+0x2e4>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d125      	bne.n	80057f2 <UART_SetConfig+0x272>
 80057a6:	4b2a      	ldr	r3, [pc, #168]	; (8005850 <UART_SetConfig+0x2d0>)
 80057a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80057b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80057b4:	d017      	beq.n	80057e6 <UART_SetConfig+0x266>
 80057b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80057ba:	d817      	bhi.n	80057ec <UART_SetConfig+0x26c>
 80057bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057c0:	d00b      	beq.n	80057da <UART_SetConfig+0x25a>
 80057c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057c6:	d811      	bhi.n	80057ec <UART_SetConfig+0x26c>
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d003      	beq.n	80057d4 <UART_SetConfig+0x254>
 80057cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057d0:	d006      	beq.n	80057e0 <UART_SetConfig+0x260>
 80057d2:	e00b      	b.n	80057ec <UART_SetConfig+0x26c>
 80057d4:	2301      	movs	r3, #1
 80057d6:	77fb      	strb	r3, [r7, #31]
 80057d8:	e075      	b.n	80058c6 <UART_SetConfig+0x346>
 80057da:	2302      	movs	r3, #2
 80057dc:	77fb      	strb	r3, [r7, #31]
 80057de:	e072      	b.n	80058c6 <UART_SetConfig+0x346>
 80057e0:	2304      	movs	r3, #4
 80057e2:	77fb      	strb	r3, [r7, #31]
 80057e4:	e06f      	b.n	80058c6 <UART_SetConfig+0x346>
 80057e6:	2308      	movs	r3, #8
 80057e8:	77fb      	strb	r3, [r7, #31]
 80057ea:	e06c      	b.n	80058c6 <UART_SetConfig+0x346>
 80057ec:	2310      	movs	r3, #16
 80057ee:	77fb      	strb	r3, [r7, #31]
 80057f0:	e069      	b.n	80058c6 <UART_SetConfig+0x346>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a1c      	ldr	r2, [pc, #112]	; (8005868 <UART_SetConfig+0x2e8>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d137      	bne.n	800586c <UART_SetConfig+0x2ec>
 80057fc:	4b14      	ldr	r3, [pc, #80]	; (8005850 <UART_SetConfig+0x2d0>)
 80057fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005802:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005806:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800580a:	d017      	beq.n	800583c <UART_SetConfig+0x2bc>
 800580c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005810:	d817      	bhi.n	8005842 <UART_SetConfig+0x2c2>
 8005812:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005816:	d00b      	beq.n	8005830 <UART_SetConfig+0x2b0>
 8005818:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800581c:	d811      	bhi.n	8005842 <UART_SetConfig+0x2c2>
 800581e:	2b00      	cmp	r3, #0
 8005820:	d003      	beq.n	800582a <UART_SetConfig+0x2aa>
 8005822:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005826:	d006      	beq.n	8005836 <UART_SetConfig+0x2b6>
 8005828:	e00b      	b.n	8005842 <UART_SetConfig+0x2c2>
 800582a:	2300      	movs	r3, #0
 800582c:	77fb      	strb	r3, [r7, #31]
 800582e:	e04a      	b.n	80058c6 <UART_SetConfig+0x346>
 8005830:	2302      	movs	r3, #2
 8005832:	77fb      	strb	r3, [r7, #31]
 8005834:	e047      	b.n	80058c6 <UART_SetConfig+0x346>
 8005836:	2304      	movs	r3, #4
 8005838:	77fb      	strb	r3, [r7, #31]
 800583a:	e044      	b.n	80058c6 <UART_SetConfig+0x346>
 800583c:	2308      	movs	r3, #8
 800583e:	77fb      	strb	r3, [r7, #31]
 8005840:	e041      	b.n	80058c6 <UART_SetConfig+0x346>
 8005842:	2310      	movs	r3, #16
 8005844:	77fb      	strb	r3, [r7, #31]
 8005846:	e03e      	b.n	80058c6 <UART_SetConfig+0x346>
 8005848:	efff69f3 	.word	0xefff69f3
 800584c:	40011000 	.word	0x40011000
 8005850:	40023800 	.word	0x40023800
 8005854:	40004400 	.word	0x40004400
 8005858:	40004800 	.word	0x40004800
 800585c:	40004c00 	.word	0x40004c00
 8005860:	40005000 	.word	0x40005000
 8005864:	40011400 	.word	0x40011400
 8005868:	40007800 	.word	0x40007800
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a71      	ldr	r2, [pc, #452]	; (8005a38 <UART_SetConfig+0x4b8>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d125      	bne.n	80058c2 <UART_SetConfig+0x342>
 8005876:	4b71      	ldr	r3, [pc, #452]	; (8005a3c <UART_SetConfig+0x4bc>)
 8005878:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800587c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005880:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005884:	d017      	beq.n	80058b6 <UART_SetConfig+0x336>
 8005886:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800588a:	d817      	bhi.n	80058bc <UART_SetConfig+0x33c>
 800588c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005890:	d00b      	beq.n	80058aa <UART_SetConfig+0x32a>
 8005892:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005896:	d811      	bhi.n	80058bc <UART_SetConfig+0x33c>
 8005898:	2b00      	cmp	r3, #0
 800589a:	d003      	beq.n	80058a4 <UART_SetConfig+0x324>
 800589c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058a0:	d006      	beq.n	80058b0 <UART_SetConfig+0x330>
 80058a2:	e00b      	b.n	80058bc <UART_SetConfig+0x33c>
 80058a4:	2300      	movs	r3, #0
 80058a6:	77fb      	strb	r3, [r7, #31]
 80058a8:	e00d      	b.n	80058c6 <UART_SetConfig+0x346>
 80058aa:	2302      	movs	r3, #2
 80058ac:	77fb      	strb	r3, [r7, #31]
 80058ae:	e00a      	b.n	80058c6 <UART_SetConfig+0x346>
 80058b0:	2304      	movs	r3, #4
 80058b2:	77fb      	strb	r3, [r7, #31]
 80058b4:	e007      	b.n	80058c6 <UART_SetConfig+0x346>
 80058b6:	2308      	movs	r3, #8
 80058b8:	77fb      	strb	r3, [r7, #31]
 80058ba:	e004      	b.n	80058c6 <UART_SetConfig+0x346>
 80058bc:	2310      	movs	r3, #16
 80058be:	77fb      	strb	r3, [r7, #31]
 80058c0:	e001      	b.n	80058c6 <UART_SetConfig+0x346>
 80058c2:	2310      	movs	r3, #16
 80058c4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	69db      	ldr	r3, [r3, #28]
 80058ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058ce:	d15a      	bne.n	8005986 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 80058d0:	7ffb      	ldrb	r3, [r7, #31]
 80058d2:	2b08      	cmp	r3, #8
 80058d4:	d827      	bhi.n	8005926 <UART_SetConfig+0x3a6>
 80058d6:	a201      	add	r2, pc, #4	; (adr r2, 80058dc <UART_SetConfig+0x35c>)
 80058d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058dc:	08005901 	.word	0x08005901
 80058e0:	08005909 	.word	0x08005909
 80058e4:	08005911 	.word	0x08005911
 80058e8:	08005927 	.word	0x08005927
 80058ec:	08005917 	.word	0x08005917
 80058f0:	08005927 	.word	0x08005927
 80058f4:	08005927 	.word	0x08005927
 80058f8:	08005927 	.word	0x08005927
 80058fc:	0800591f 	.word	0x0800591f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005900:	f7fd fda8 	bl	8003454 <HAL_RCC_GetPCLK1Freq>
 8005904:	61b8      	str	r0, [r7, #24]
        break;
 8005906:	e013      	b.n	8005930 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005908:	f7fd fdb8 	bl	800347c <HAL_RCC_GetPCLK2Freq>
 800590c:	61b8      	str	r0, [r7, #24]
        break;
 800590e:	e00f      	b.n	8005930 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005910:	4b4b      	ldr	r3, [pc, #300]	; (8005a40 <UART_SetConfig+0x4c0>)
 8005912:	61bb      	str	r3, [r7, #24]
        break;
 8005914:	e00c      	b.n	8005930 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005916:	f7fd fcaf 	bl	8003278 <HAL_RCC_GetSysClockFreq>
 800591a:	61b8      	str	r0, [r7, #24]
        break;
 800591c:	e008      	b.n	8005930 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800591e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005922:	61bb      	str	r3, [r7, #24]
        break;
 8005924:	e004      	b.n	8005930 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8005926:	2300      	movs	r3, #0
 8005928:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	77bb      	strb	r3, [r7, #30]
        break;
 800592e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005930:	69bb      	ldr	r3, [r7, #24]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d074      	beq.n	8005a20 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005936:	69bb      	ldr	r3, [r7, #24]
 8005938:	005a      	lsls	r2, r3, #1
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	085b      	lsrs	r3, r3, #1
 8005940:	441a      	add	r2, r3
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	fbb2 f3f3 	udiv	r3, r2, r3
 800594a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	2b0f      	cmp	r3, #15
 8005950:	d916      	bls.n	8005980 <UART_SetConfig+0x400>
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005958:	d212      	bcs.n	8005980 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	b29b      	uxth	r3, r3
 800595e:	f023 030f 	bic.w	r3, r3, #15
 8005962:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	085b      	lsrs	r3, r3, #1
 8005968:	b29b      	uxth	r3, r3
 800596a:	f003 0307 	and.w	r3, r3, #7
 800596e:	b29a      	uxth	r2, r3
 8005970:	89fb      	ldrh	r3, [r7, #14]
 8005972:	4313      	orrs	r3, r2
 8005974:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	89fa      	ldrh	r2, [r7, #14]
 800597c:	60da      	str	r2, [r3, #12]
 800597e:	e04f      	b.n	8005a20 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	77bb      	strb	r3, [r7, #30]
 8005984:	e04c      	b.n	8005a20 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005986:	7ffb      	ldrb	r3, [r7, #31]
 8005988:	2b08      	cmp	r3, #8
 800598a:	d828      	bhi.n	80059de <UART_SetConfig+0x45e>
 800598c:	a201      	add	r2, pc, #4	; (adr r2, 8005994 <UART_SetConfig+0x414>)
 800598e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005992:	bf00      	nop
 8005994:	080059b9 	.word	0x080059b9
 8005998:	080059c1 	.word	0x080059c1
 800599c:	080059c9 	.word	0x080059c9
 80059a0:	080059df 	.word	0x080059df
 80059a4:	080059cf 	.word	0x080059cf
 80059a8:	080059df 	.word	0x080059df
 80059ac:	080059df 	.word	0x080059df
 80059b0:	080059df 	.word	0x080059df
 80059b4:	080059d7 	.word	0x080059d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059b8:	f7fd fd4c 	bl	8003454 <HAL_RCC_GetPCLK1Freq>
 80059bc:	61b8      	str	r0, [r7, #24]
        break;
 80059be:	e013      	b.n	80059e8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059c0:	f7fd fd5c 	bl	800347c <HAL_RCC_GetPCLK2Freq>
 80059c4:	61b8      	str	r0, [r7, #24]
        break;
 80059c6:	e00f      	b.n	80059e8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059c8:	4b1d      	ldr	r3, [pc, #116]	; (8005a40 <UART_SetConfig+0x4c0>)
 80059ca:	61bb      	str	r3, [r7, #24]
        break;
 80059cc:	e00c      	b.n	80059e8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059ce:	f7fd fc53 	bl	8003278 <HAL_RCC_GetSysClockFreq>
 80059d2:	61b8      	str	r0, [r7, #24]
        break;
 80059d4:	e008      	b.n	80059e8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059da:	61bb      	str	r3, [r7, #24]
        break;
 80059dc:	e004      	b.n	80059e8 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80059de:	2300      	movs	r3, #0
 80059e0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	77bb      	strb	r3, [r7, #30]
        break;
 80059e6:	bf00      	nop
    }

    if (pclk != 0U)
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d018      	beq.n	8005a20 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	085a      	lsrs	r2, r3, #1
 80059f4:	69bb      	ldr	r3, [r7, #24]
 80059f6:	441a      	add	r2, r3
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a00:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	2b0f      	cmp	r3, #15
 8005a06:	d909      	bls.n	8005a1c <UART_SetConfig+0x49c>
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a0e:	d205      	bcs.n	8005a1c <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	b29a      	uxth	r2, r3
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	60da      	str	r2, [r3, #12]
 8005a1a:	e001      	b.n	8005a20 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005a2c:	7fbb      	ldrb	r3, [r7, #30]
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3720      	adds	r7, #32
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
 8005a36:	bf00      	nop
 8005a38:	40007c00 	.word	0x40007c00
 8005a3c:	40023800 	.word	0x40023800
 8005a40:	00f42400 	.word	0x00f42400

08005a44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b083      	sub	sp, #12
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a50:	f003 0301 	and.w	r3, r3, #1
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d00a      	beq.n	8005a6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	430a      	orrs	r2, r1
 8005a6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a72:	f003 0302 	and.w	r3, r3, #2
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d00a      	beq.n	8005a90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	430a      	orrs	r2, r1
 8005a8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a94:	f003 0304 	and.w	r3, r3, #4
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d00a      	beq.n	8005ab2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	430a      	orrs	r2, r1
 8005ab0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab6:	f003 0308 	and.w	r3, r3, #8
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d00a      	beq.n	8005ad4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	430a      	orrs	r2, r1
 8005ad2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad8:	f003 0310 	and.w	r3, r3, #16
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d00a      	beq.n	8005af6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	430a      	orrs	r2, r1
 8005af4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afa:	f003 0320 	and.w	r3, r3, #32
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d00a      	beq.n	8005b18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	430a      	orrs	r2, r1
 8005b16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d01a      	beq.n	8005b5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	430a      	orrs	r2, r1
 8005b38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b42:	d10a      	bne.n	8005b5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	430a      	orrs	r2, r1
 8005b58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d00a      	beq.n	8005b7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	430a      	orrs	r2, r1
 8005b7a:	605a      	str	r2, [r3, #4]
  }
}
 8005b7c:	bf00      	nop
 8005b7e:	370c      	adds	r7, #12
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr

08005b88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b086      	sub	sp, #24
 8005b8c:	af02      	add	r7, sp, #8
 8005b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b98:	f7fc f8ea 	bl	8001d70 <HAL_GetTick>
 8005b9c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f003 0308 	and.w	r3, r3, #8
 8005ba8:	2b08      	cmp	r3, #8
 8005baa:	d10e      	bne.n	8005bca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005bb0:	9300      	str	r3, [sp, #0]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f000 f817 	bl	8005bee <UART_WaitOnFlagUntilTimeout>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d001      	beq.n	8005bca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bc6:	2303      	movs	r3, #3
 8005bc8:	e00d      	b.n	8005be6 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2220      	movs	r2, #32
 8005bce:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2220      	movs	r2, #32
 8005bd4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005be4:	2300      	movs	r3, #0
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3710      	adds	r7, #16
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}

08005bee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005bee:	b580      	push	{r7, lr}
 8005bf0:	b09c      	sub	sp, #112	; 0x70
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	60f8      	str	r0, [r7, #12]
 8005bf6:	60b9      	str	r1, [r7, #8]
 8005bf8:	603b      	str	r3, [r7, #0]
 8005bfa:	4613      	mov	r3, r2
 8005bfc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bfe:	e0a5      	b.n	8005d4c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c06:	f000 80a1 	beq.w	8005d4c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c0a:	f7fc f8b1 	bl	8001d70 <HAL_GetTick>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	1ad3      	subs	r3, r2, r3
 8005c14:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d302      	bcc.n	8005c20 <UART_WaitOnFlagUntilTimeout+0x32>
 8005c1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d13e      	bne.n	8005c9e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c28:	e853 3f00 	ldrex	r3, [r3]
 8005c2c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005c2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c30:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005c34:	667b      	str	r3, [r7, #100]	; 0x64
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c40:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c42:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005c44:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005c46:	e841 2300 	strex	r3, r2, [r1]
 8005c4a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005c4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d1e6      	bne.n	8005c20 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	3308      	adds	r3, #8
 8005c58:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c5c:	e853 3f00 	ldrex	r3, [r3]
 8005c60:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c64:	f023 0301 	bic.w	r3, r3, #1
 8005c68:	663b      	str	r3, [r7, #96]	; 0x60
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	3308      	adds	r3, #8
 8005c70:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005c72:	64ba      	str	r2, [r7, #72]	; 0x48
 8005c74:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c76:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005c78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c7a:	e841 2300 	strex	r3, r2, [r1]
 8005c7e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005c80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d1e5      	bne.n	8005c52 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2220      	movs	r2, #32
 8005c8a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2220      	movs	r2, #32
 8005c90:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2200      	movs	r2, #0
 8005c96:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005c9a:	2303      	movs	r3, #3
 8005c9c:	e067      	b.n	8005d6e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 0304 	and.w	r3, r3, #4
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d04f      	beq.n	8005d4c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	69db      	ldr	r3, [r3, #28]
 8005cb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cba:	d147      	bne.n	8005d4c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005cc4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cce:	e853 3f00 	ldrex	r3, [r3]
 8005cd2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005cda:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ce4:	637b      	str	r3, [r7, #52]	; 0x34
 8005ce6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005cea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005cec:	e841 2300 	strex	r3, r2, [r1]
 8005cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d1e6      	bne.n	8005cc6 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	3308      	adds	r3, #8
 8005cfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	e853 3f00 	ldrex	r3, [r3]
 8005d06:	613b      	str	r3, [r7, #16]
   return(result);
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	f023 0301 	bic.w	r3, r3, #1
 8005d0e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	3308      	adds	r3, #8
 8005d16:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005d18:	623a      	str	r2, [r7, #32]
 8005d1a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d1c:	69f9      	ldr	r1, [r7, #28]
 8005d1e:	6a3a      	ldr	r2, [r7, #32]
 8005d20:	e841 2300 	strex	r3, r2, [r1]
 8005d24:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d1e5      	bne.n	8005cf8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2220      	movs	r2, #32
 8005d30:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2220      	movs	r2, #32
 8005d36:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2220      	movs	r2, #32
 8005d3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2200      	movs	r2, #0
 8005d44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005d48:	2303      	movs	r3, #3
 8005d4a:	e010      	b.n	8005d6e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	69da      	ldr	r2, [r3, #28]
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	4013      	ands	r3, r2
 8005d56:	68ba      	ldr	r2, [r7, #8]
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	bf0c      	ite	eq
 8005d5c:	2301      	moveq	r3, #1
 8005d5e:	2300      	movne	r3, #0
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	461a      	mov	r2, r3
 8005d64:	79fb      	ldrb	r3, [r7, #7]
 8005d66:	429a      	cmp	r2, r3
 8005d68:	f43f af4a 	beq.w	8005c00 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d6c:	2300      	movs	r3, #0
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3770      	adds	r7, #112	; 0x70
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
	...

08005d78 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d78:	b084      	sub	sp, #16
 8005d7a:	b580      	push	{r7, lr}
 8005d7c:	b084      	sub	sp, #16
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	6078      	str	r0, [r7, #4]
 8005d82:	f107 001c 	add.w	r0, r7, #28
 8005d86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d120      	bne.n	8005dd2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d94:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	68da      	ldr	r2, [r3, #12]
 8005da0:	4b20      	ldr	r3, [pc, #128]	; (8005e24 <USB_CoreInit+0xac>)
 8005da2:	4013      	ands	r3, r2
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005db4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d105      	bne.n	8005dc6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	68db      	ldr	r3, [r3, #12]
 8005dbe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f000 fa92 	bl	80062f0 <USB_CoreReset>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	73fb      	strb	r3, [r7, #15]
 8005dd0:	e010      	b.n	8005df4 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 fa86 	bl	80062f0 <USB_CoreReset>
 8005de4:	4603      	mov	r3, r0
 8005de6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dec:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d10b      	bne.n	8005e12 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	f043 0206 	orr.w	r2, r3, #6
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	f043 0220 	orr.w	r2, r3, #32
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3710      	adds	r7, #16
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e1e:	b004      	add	sp, #16
 8005e20:	4770      	bx	lr
 8005e22:	bf00      	nop
 8005e24:	ffbdffbf 	.word	0xffbdffbf

08005e28 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b083      	sub	sp, #12
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	f023 0201 	bic.w	r2, r3, #1
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005e3c:	2300      	movs	r3, #0
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	370c      	adds	r7, #12
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr

08005e4a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005e4a:	b580      	push	{r7, lr}
 8005e4c:	b084      	sub	sp, #16
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	6078      	str	r0, [r7, #4]
 8005e52:	460b      	mov	r3, r1
 8005e54:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005e56:	2300      	movs	r3, #0
 8005e58:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	68db      	ldr	r3, [r3, #12]
 8005e5e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005e66:	78fb      	ldrb	r3, [r7, #3]
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d115      	bne.n	8005e98 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005e78:	2001      	movs	r0, #1
 8005e7a:	f7fb ff85 	bl	8001d88 <HAL_Delay>
      ms++;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	3301      	adds	r3, #1
 8005e82:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f000 fa25 	bl	80062d4 <USB_GetMode>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d01e      	beq.n	8005ece <USB_SetCurrentMode+0x84>
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2b31      	cmp	r3, #49	; 0x31
 8005e94:	d9f0      	bls.n	8005e78 <USB_SetCurrentMode+0x2e>
 8005e96:	e01a      	b.n	8005ece <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005e98:	78fb      	ldrb	r3, [r7, #3]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d115      	bne.n	8005eca <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	68db      	ldr	r3, [r3, #12]
 8005ea2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005eaa:	2001      	movs	r0, #1
 8005eac:	f7fb ff6c 	bl	8001d88 <HAL_Delay>
      ms++;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f000 fa0c 	bl	80062d4 <USB_GetMode>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d005      	beq.n	8005ece <USB_SetCurrentMode+0x84>
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2b31      	cmp	r3, #49	; 0x31
 8005ec6:	d9f0      	bls.n	8005eaa <USB_SetCurrentMode+0x60>
 8005ec8:	e001      	b.n	8005ece <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e005      	b.n	8005eda <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2b32      	cmp	r3, #50	; 0x32
 8005ed2:	d101      	bne.n	8005ed8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	e000      	b.n	8005eda <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005ed8:	2300      	movs	r3, #0
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3710      	adds	r7, #16
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
	...

08005ee4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ee4:	b084      	sub	sp, #16
 8005ee6:	b580      	push	{r7, lr}
 8005ee8:	b086      	sub	sp, #24
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	6078      	str	r0, [r7, #4]
 8005eee:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005ef2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005efe:	2300      	movs	r3, #0
 8005f00:	613b      	str	r3, [r7, #16]
 8005f02:	e009      	b.n	8005f18 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005f04:	687a      	ldr	r2, [r7, #4]
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	3340      	adds	r3, #64	; 0x40
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	4413      	add	r3, r2
 8005f0e:	2200      	movs	r2, #0
 8005f10:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	3301      	adds	r3, #1
 8005f16:	613b      	str	r3, [r7, #16]
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	2b0e      	cmp	r3, #14
 8005f1c:	d9f2      	bls.n	8005f04 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005f1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d11c      	bne.n	8005f5e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	68fa      	ldr	r2, [r7, #12]
 8005f2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f32:	f043 0302 	orr.w	r3, r3, #2
 8005f36:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f3c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	601a      	str	r2, [r3, #0]
 8005f5c:	e005      	b.n	8005f6a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f62:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005f70:	461a      	mov	r2, r3
 8005f72:	2300      	movs	r3, #0
 8005f74:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f7c:	4619      	mov	r1, r3
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f84:	461a      	mov	r2, r3
 8005f86:	680b      	ldr	r3, [r1, #0]
 8005f88:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d10c      	bne.n	8005faa <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d104      	bne.n	8005fa0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005f96:	2100      	movs	r1, #0
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f000 f961 	bl	8006260 <USB_SetDevSpeed>
 8005f9e:	e008      	b.n	8005fb2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005fa0:	2101      	movs	r1, #1
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 f95c 	bl	8006260 <USB_SetDevSpeed>
 8005fa8:	e003      	b.n	8005fb2 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005faa:	2103      	movs	r1, #3
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f000 f957 	bl	8006260 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005fb2:	2110      	movs	r1, #16
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f000 f8f3 	bl	80061a0 <USB_FlushTxFifo>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d001      	beq.n	8005fc4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f000 f91d 	bl	8006204 <USB_FlushRxFifo>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d001      	beq.n	8005fd4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fda:	461a      	mov	r2, r3
 8005fdc:	2300      	movs	r3, #0
 8005fde:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	2300      	movs	r3, #0
 8005fea:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	613b      	str	r3, [r7, #16]
 8005ffc:	e043      	b.n	8006086 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	015a      	lsls	r2, r3, #5
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	4413      	add	r3, r2
 8006006:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006010:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006014:	d118      	bne.n	8006048 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d10a      	bne.n	8006032 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	015a      	lsls	r2, r3, #5
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	4413      	add	r3, r2
 8006024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006028:	461a      	mov	r2, r3
 800602a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800602e:	6013      	str	r3, [r2, #0]
 8006030:	e013      	b.n	800605a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	015a      	lsls	r2, r3, #5
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	4413      	add	r3, r2
 800603a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800603e:	461a      	mov	r2, r3
 8006040:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006044:	6013      	str	r3, [r2, #0]
 8006046:	e008      	b.n	800605a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	015a      	lsls	r2, r3, #5
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	4413      	add	r3, r2
 8006050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006054:	461a      	mov	r2, r3
 8006056:	2300      	movs	r3, #0
 8006058:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	015a      	lsls	r2, r3, #5
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	4413      	add	r3, r2
 8006062:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006066:	461a      	mov	r2, r3
 8006068:	2300      	movs	r3, #0
 800606a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	015a      	lsls	r2, r3, #5
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	4413      	add	r3, r2
 8006074:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006078:	461a      	mov	r2, r3
 800607a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800607e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	3301      	adds	r3, #1
 8006084:	613b      	str	r3, [r7, #16]
 8006086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006088:	693a      	ldr	r2, [r7, #16]
 800608a:	429a      	cmp	r2, r3
 800608c:	d3b7      	bcc.n	8005ffe <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800608e:	2300      	movs	r3, #0
 8006090:	613b      	str	r3, [r7, #16]
 8006092:	e043      	b.n	800611c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	015a      	lsls	r2, r3, #5
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	4413      	add	r3, r2
 800609c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060aa:	d118      	bne.n	80060de <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d10a      	bne.n	80060c8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	015a      	lsls	r2, r3, #5
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	4413      	add	r3, r2
 80060ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060be:	461a      	mov	r2, r3
 80060c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80060c4:	6013      	str	r3, [r2, #0]
 80060c6:	e013      	b.n	80060f0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	015a      	lsls	r2, r3, #5
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	4413      	add	r3, r2
 80060d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060d4:	461a      	mov	r2, r3
 80060d6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80060da:	6013      	str	r3, [r2, #0]
 80060dc:	e008      	b.n	80060f0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	015a      	lsls	r2, r3, #5
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	4413      	add	r3, r2
 80060e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ea:	461a      	mov	r2, r3
 80060ec:	2300      	movs	r3, #0
 80060ee:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	015a      	lsls	r2, r3, #5
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	4413      	add	r3, r2
 80060f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060fc:	461a      	mov	r2, r3
 80060fe:	2300      	movs	r3, #0
 8006100:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	015a      	lsls	r2, r3, #5
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	4413      	add	r3, r2
 800610a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800610e:	461a      	mov	r2, r3
 8006110:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006114:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	3301      	adds	r3, #1
 800611a:	613b      	str	r3, [r7, #16]
 800611c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611e:	693a      	ldr	r2, [r7, #16]
 8006120:	429a      	cmp	r2, r3
 8006122:	d3b7      	bcc.n	8006094 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800612a:	691b      	ldr	r3, [r3, #16]
 800612c:	68fa      	ldr	r2, [r7, #12]
 800612e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006132:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006136:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2200      	movs	r2, #0
 800613c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006144:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006148:	2b00      	cmp	r3, #0
 800614a:	d105      	bne.n	8006158 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	699b      	ldr	r3, [r3, #24]
 8006150:	f043 0210 	orr.w	r2, r3, #16
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	699a      	ldr	r2, [r3, #24]
 800615c:	4b0e      	ldr	r3, [pc, #56]	; (8006198 <USB_DevInit+0x2b4>)
 800615e:	4313      	orrs	r3, r2
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006164:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006166:	2b00      	cmp	r3, #0
 8006168:	d005      	beq.n	8006176 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	699b      	ldr	r3, [r3, #24]
 800616e:	f043 0208 	orr.w	r2, r3, #8
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006176:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006178:	2b01      	cmp	r3, #1
 800617a:	d105      	bne.n	8006188 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	699a      	ldr	r2, [r3, #24]
 8006180:	4b06      	ldr	r3, [pc, #24]	; (800619c <USB_DevInit+0x2b8>)
 8006182:	4313      	orrs	r3, r2
 8006184:	687a      	ldr	r2, [r7, #4]
 8006186:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006188:	7dfb      	ldrb	r3, [r7, #23]
}
 800618a:	4618      	mov	r0, r3
 800618c:	3718      	adds	r7, #24
 800618e:	46bd      	mov	sp, r7
 8006190:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006194:	b004      	add	sp, #16
 8006196:	4770      	bx	lr
 8006198:	803c3800 	.word	0x803c3800
 800619c:	40000004 	.word	0x40000004

080061a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b085      	sub	sp, #20
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80061aa:	2300      	movs	r3, #0
 80061ac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	3301      	adds	r3, #1
 80061b2:	60fb      	str	r3, [r7, #12]
 80061b4:	4a12      	ldr	r2, [pc, #72]	; (8006200 <USB_FlushTxFifo+0x60>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d901      	bls.n	80061be <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80061ba:	2303      	movs	r3, #3
 80061bc:	e01a      	b.n	80061f4 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	691b      	ldr	r3, [r3, #16]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	daf3      	bge.n	80061ae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80061c6:	2300      	movs	r3, #0
 80061c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	019b      	lsls	r3, r3, #6
 80061ce:	f043 0220 	orr.w	r2, r3, #32
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	3301      	adds	r3, #1
 80061da:	60fb      	str	r3, [r7, #12]
 80061dc:	4a08      	ldr	r2, [pc, #32]	; (8006200 <USB_FlushTxFifo+0x60>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d901      	bls.n	80061e6 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 80061e2:	2303      	movs	r3, #3
 80061e4:	e006      	b.n	80061f4 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	691b      	ldr	r3, [r3, #16]
 80061ea:	f003 0320 	and.w	r3, r3, #32
 80061ee:	2b20      	cmp	r3, #32
 80061f0:	d0f1      	beq.n	80061d6 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 80061f2:	2300      	movs	r3, #0
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3714      	adds	r7, #20
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr
 8006200:	00030d40 	.word	0x00030d40

08006204 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006204:	b480      	push	{r7}
 8006206:	b085      	sub	sp, #20
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800620c:	2300      	movs	r3, #0
 800620e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	3301      	adds	r3, #1
 8006214:	60fb      	str	r3, [r7, #12]
 8006216:	4a11      	ldr	r2, [pc, #68]	; (800625c <USB_FlushRxFifo+0x58>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d901      	bls.n	8006220 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 800621c:	2303      	movs	r3, #3
 800621e:	e017      	b.n	8006250 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	691b      	ldr	r3, [r3, #16]
 8006224:	2b00      	cmp	r3, #0
 8006226:	daf3      	bge.n	8006210 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006228:	2300      	movs	r3, #0
 800622a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2210      	movs	r2, #16
 8006230:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	3301      	adds	r3, #1
 8006236:	60fb      	str	r3, [r7, #12]
 8006238:	4a08      	ldr	r2, [pc, #32]	; (800625c <USB_FlushRxFifo+0x58>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d901      	bls.n	8006242 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 800623e:	2303      	movs	r3, #3
 8006240:	e006      	b.n	8006250 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	f003 0310 	and.w	r3, r3, #16
 800624a:	2b10      	cmp	r3, #16
 800624c:	d0f1      	beq.n	8006232 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 800624e:	2300      	movs	r3, #0
}
 8006250:	4618      	mov	r0, r3
 8006252:	3714      	adds	r7, #20
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr
 800625c:	00030d40 	.word	0x00030d40

08006260 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006260:	b480      	push	{r7}
 8006262:	b085      	sub	sp, #20
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	460b      	mov	r3, r1
 800626a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	78fb      	ldrb	r3, [r7, #3]
 800627a:	68f9      	ldr	r1, [r7, #12]
 800627c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006280:	4313      	orrs	r3, r2
 8006282:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006284:	2300      	movs	r3, #0
}
 8006286:	4618      	mov	r0, r3
 8006288:	3714      	adds	r7, #20
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr

08006292 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006292:	b480      	push	{r7}
 8006294:	b085      	sub	sp, #20
 8006296:	af00      	add	r7, sp, #0
 8006298:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	68fa      	ldr	r2, [r7, #12]
 80062a8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80062ac:	f023 0303 	bic.w	r3, r3, #3
 80062b0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	68fa      	ldr	r2, [r7, #12]
 80062bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062c0:	f043 0302 	orr.w	r3, r3, #2
 80062c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80062c6:	2300      	movs	r3, #0
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3714      	adds	r7, #20
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr

080062d4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	695b      	ldr	r3, [r3, #20]
 80062e0:	f003 0301 	and.w	r3, r3, #1
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	370c      	adds	r7, #12
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b085      	sub	sp, #20
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80062f8:	2300      	movs	r3, #0
 80062fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	3301      	adds	r3, #1
 8006300:	60fb      	str	r3, [r7, #12]
 8006302:	4a13      	ldr	r2, [pc, #76]	; (8006350 <USB_CoreReset+0x60>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d901      	bls.n	800630c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8006308:	2303      	movs	r3, #3
 800630a:	e01a      	b.n	8006342 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	691b      	ldr	r3, [r3, #16]
 8006310:	2b00      	cmp	r3, #0
 8006312:	daf3      	bge.n	80062fc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006314:	2300      	movs	r3, #0
 8006316:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	691b      	ldr	r3, [r3, #16]
 800631c:	f043 0201 	orr.w	r2, r3, #1
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	3301      	adds	r3, #1
 8006328:	60fb      	str	r3, [r7, #12]
 800632a:	4a09      	ldr	r2, [pc, #36]	; (8006350 <USB_CoreReset+0x60>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d901      	bls.n	8006334 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8006330:	2303      	movs	r3, #3
 8006332:	e006      	b.n	8006342 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	691b      	ldr	r3, [r3, #16]
 8006338:	f003 0301 	and.w	r3, r3, #1
 800633c:	2b01      	cmp	r3, #1
 800633e:	d0f1      	beq.n	8006324 <USB_CoreReset+0x34>

  return HAL_OK;
 8006340:	2300      	movs	r3, #0
}
 8006342:	4618      	mov	r0, r3
 8006344:	3714      	adds	r7, #20
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr
 800634e:	bf00      	nop
 8006350:	00030d40 	.word	0x00030d40

08006354 <calloc>:
 8006354:	4b02      	ldr	r3, [pc, #8]	; (8006360 <calloc+0xc>)
 8006356:	460a      	mov	r2, r1
 8006358:	4601      	mov	r1, r0
 800635a:	6818      	ldr	r0, [r3, #0]
 800635c:	f000 b834 	b.w	80063c8 <_calloc_r>
 8006360:	2000000c 	.word	0x2000000c

08006364 <__errno>:
 8006364:	4b01      	ldr	r3, [pc, #4]	; (800636c <__errno+0x8>)
 8006366:	6818      	ldr	r0, [r3, #0]
 8006368:	4770      	bx	lr
 800636a:	bf00      	nop
 800636c:	2000000c 	.word	0x2000000c

08006370 <__libc_init_array>:
 8006370:	b570      	push	{r4, r5, r6, lr}
 8006372:	4d0d      	ldr	r5, [pc, #52]	; (80063a8 <__libc_init_array+0x38>)
 8006374:	4c0d      	ldr	r4, [pc, #52]	; (80063ac <__libc_init_array+0x3c>)
 8006376:	1b64      	subs	r4, r4, r5
 8006378:	10a4      	asrs	r4, r4, #2
 800637a:	2600      	movs	r6, #0
 800637c:	42a6      	cmp	r6, r4
 800637e:	d109      	bne.n	8006394 <__libc_init_array+0x24>
 8006380:	4d0b      	ldr	r5, [pc, #44]	; (80063b0 <__libc_init_array+0x40>)
 8006382:	4c0c      	ldr	r4, [pc, #48]	; (80063b4 <__libc_init_array+0x44>)
 8006384:	f000 fc5e 	bl	8006c44 <_init>
 8006388:	1b64      	subs	r4, r4, r5
 800638a:	10a4      	asrs	r4, r4, #2
 800638c:	2600      	movs	r6, #0
 800638e:	42a6      	cmp	r6, r4
 8006390:	d105      	bne.n	800639e <__libc_init_array+0x2e>
 8006392:	bd70      	pop	{r4, r5, r6, pc}
 8006394:	f855 3b04 	ldr.w	r3, [r5], #4
 8006398:	4798      	blx	r3
 800639a:	3601      	adds	r6, #1
 800639c:	e7ee      	b.n	800637c <__libc_init_array+0xc>
 800639e:	f855 3b04 	ldr.w	r3, [r5], #4
 80063a2:	4798      	blx	r3
 80063a4:	3601      	adds	r6, #1
 80063a6:	e7f2      	b.n	800638e <__libc_init_array+0x1e>
 80063a8:	08006cb8 	.word	0x08006cb8
 80063ac:	08006cb8 	.word	0x08006cb8
 80063b0:	08006cb8 	.word	0x08006cb8
 80063b4:	08006cbc 	.word	0x08006cbc

080063b8 <memset>:
 80063b8:	4402      	add	r2, r0
 80063ba:	4603      	mov	r3, r0
 80063bc:	4293      	cmp	r3, r2
 80063be:	d100      	bne.n	80063c2 <memset+0xa>
 80063c0:	4770      	bx	lr
 80063c2:	f803 1b01 	strb.w	r1, [r3], #1
 80063c6:	e7f9      	b.n	80063bc <memset+0x4>

080063c8 <_calloc_r>:
 80063c8:	b513      	push	{r0, r1, r4, lr}
 80063ca:	434a      	muls	r2, r1
 80063cc:	4611      	mov	r1, r2
 80063ce:	9201      	str	r2, [sp, #4]
 80063d0:	f000 f80a 	bl	80063e8 <_malloc_r>
 80063d4:	4604      	mov	r4, r0
 80063d6:	b118      	cbz	r0, 80063e0 <_calloc_r+0x18>
 80063d8:	9a01      	ldr	r2, [sp, #4]
 80063da:	2100      	movs	r1, #0
 80063dc:	f7ff ffec 	bl	80063b8 <memset>
 80063e0:	4620      	mov	r0, r4
 80063e2:	b002      	add	sp, #8
 80063e4:	bd10      	pop	{r4, pc}
	...

080063e8 <_malloc_r>:
 80063e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063ea:	1ccd      	adds	r5, r1, #3
 80063ec:	f025 0503 	bic.w	r5, r5, #3
 80063f0:	3508      	adds	r5, #8
 80063f2:	2d0c      	cmp	r5, #12
 80063f4:	bf38      	it	cc
 80063f6:	250c      	movcc	r5, #12
 80063f8:	2d00      	cmp	r5, #0
 80063fa:	4606      	mov	r6, r0
 80063fc:	db01      	blt.n	8006402 <_malloc_r+0x1a>
 80063fe:	42a9      	cmp	r1, r5
 8006400:	d903      	bls.n	800640a <_malloc_r+0x22>
 8006402:	230c      	movs	r3, #12
 8006404:	6033      	str	r3, [r6, #0]
 8006406:	2000      	movs	r0, #0
 8006408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800640a:	f000 f877 	bl	80064fc <__malloc_lock>
 800640e:	4921      	ldr	r1, [pc, #132]	; (8006494 <_malloc_r+0xac>)
 8006410:	680a      	ldr	r2, [r1, #0]
 8006412:	4614      	mov	r4, r2
 8006414:	b99c      	cbnz	r4, 800643e <_malloc_r+0x56>
 8006416:	4f20      	ldr	r7, [pc, #128]	; (8006498 <_malloc_r+0xb0>)
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	b923      	cbnz	r3, 8006426 <_malloc_r+0x3e>
 800641c:	4621      	mov	r1, r4
 800641e:	4630      	mov	r0, r6
 8006420:	f000 f83c 	bl	800649c <_sbrk_r>
 8006424:	6038      	str	r0, [r7, #0]
 8006426:	4629      	mov	r1, r5
 8006428:	4630      	mov	r0, r6
 800642a:	f000 f837 	bl	800649c <_sbrk_r>
 800642e:	1c43      	adds	r3, r0, #1
 8006430:	d123      	bne.n	800647a <_malloc_r+0x92>
 8006432:	230c      	movs	r3, #12
 8006434:	6033      	str	r3, [r6, #0]
 8006436:	4630      	mov	r0, r6
 8006438:	f000 f866 	bl	8006508 <__malloc_unlock>
 800643c:	e7e3      	b.n	8006406 <_malloc_r+0x1e>
 800643e:	6823      	ldr	r3, [r4, #0]
 8006440:	1b5b      	subs	r3, r3, r5
 8006442:	d417      	bmi.n	8006474 <_malloc_r+0x8c>
 8006444:	2b0b      	cmp	r3, #11
 8006446:	d903      	bls.n	8006450 <_malloc_r+0x68>
 8006448:	6023      	str	r3, [r4, #0]
 800644a:	441c      	add	r4, r3
 800644c:	6025      	str	r5, [r4, #0]
 800644e:	e004      	b.n	800645a <_malloc_r+0x72>
 8006450:	6863      	ldr	r3, [r4, #4]
 8006452:	42a2      	cmp	r2, r4
 8006454:	bf0c      	ite	eq
 8006456:	600b      	streq	r3, [r1, #0]
 8006458:	6053      	strne	r3, [r2, #4]
 800645a:	4630      	mov	r0, r6
 800645c:	f000 f854 	bl	8006508 <__malloc_unlock>
 8006460:	f104 000b 	add.w	r0, r4, #11
 8006464:	1d23      	adds	r3, r4, #4
 8006466:	f020 0007 	bic.w	r0, r0, #7
 800646a:	1ac2      	subs	r2, r0, r3
 800646c:	d0cc      	beq.n	8006408 <_malloc_r+0x20>
 800646e:	1a1b      	subs	r3, r3, r0
 8006470:	50a3      	str	r3, [r4, r2]
 8006472:	e7c9      	b.n	8006408 <_malloc_r+0x20>
 8006474:	4622      	mov	r2, r4
 8006476:	6864      	ldr	r4, [r4, #4]
 8006478:	e7cc      	b.n	8006414 <_malloc_r+0x2c>
 800647a:	1cc4      	adds	r4, r0, #3
 800647c:	f024 0403 	bic.w	r4, r4, #3
 8006480:	42a0      	cmp	r0, r4
 8006482:	d0e3      	beq.n	800644c <_malloc_r+0x64>
 8006484:	1a21      	subs	r1, r4, r0
 8006486:	4630      	mov	r0, r6
 8006488:	f000 f808 	bl	800649c <_sbrk_r>
 800648c:	3001      	adds	r0, #1
 800648e:	d1dd      	bne.n	800644c <_malloc_r+0x64>
 8006490:	e7cf      	b.n	8006432 <_malloc_r+0x4a>
 8006492:	bf00      	nop
 8006494:	200000b0 	.word	0x200000b0
 8006498:	200000b4 	.word	0x200000b4

0800649c <_sbrk_r>:
 800649c:	b538      	push	{r3, r4, r5, lr}
 800649e:	4d06      	ldr	r5, [pc, #24]	; (80064b8 <_sbrk_r+0x1c>)
 80064a0:	2300      	movs	r3, #0
 80064a2:	4604      	mov	r4, r0
 80064a4:	4608      	mov	r0, r1
 80064a6:	602b      	str	r3, [r5, #0]
 80064a8:	f7fa ffb0 	bl	800140c <_sbrk>
 80064ac:	1c43      	adds	r3, r0, #1
 80064ae:	d102      	bne.n	80064b6 <_sbrk_r+0x1a>
 80064b0:	682b      	ldr	r3, [r5, #0]
 80064b2:	b103      	cbz	r3, 80064b6 <_sbrk_r+0x1a>
 80064b4:	6023      	str	r3, [r4, #0]
 80064b6:	bd38      	pop	{r3, r4, r5, pc}
 80064b8:	20001e40 	.word	0x20001e40

080064bc <siprintf>:
 80064bc:	b40e      	push	{r1, r2, r3}
 80064be:	b500      	push	{lr}
 80064c0:	b09c      	sub	sp, #112	; 0x70
 80064c2:	ab1d      	add	r3, sp, #116	; 0x74
 80064c4:	9002      	str	r0, [sp, #8]
 80064c6:	9006      	str	r0, [sp, #24]
 80064c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80064cc:	4809      	ldr	r0, [pc, #36]	; (80064f4 <siprintf+0x38>)
 80064ce:	9107      	str	r1, [sp, #28]
 80064d0:	9104      	str	r1, [sp, #16]
 80064d2:	4909      	ldr	r1, [pc, #36]	; (80064f8 <siprintf+0x3c>)
 80064d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80064d8:	9105      	str	r1, [sp, #20]
 80064da:	6800      	ldr	r0, [r0, #0]
 80064dc:	9301      	str	r3, [sp, #4]
 80064de:	a902      	add	r1, sp, #8
 80064e0:	f000 f874 	bl	80065cc <_svfiprintf_r>
 80064e4:	9b02      	ldr	r3, [sp, #8]
 80064e6:	2200      	movs	r2, #0
 80064e8:	701a      	strb	r2, [r3, #0]
 80064ea:	b01c      	add	sp, #112	; 0x70
 80064ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80064f0:	b003      	add	sp, #12
 80064f2:	4770      	bx	lr
 80064f4:	2000000c 	.word	0x2000000c
 80064f8:	ffff0208 	.word	0xffff0208

080064fc <__malloc_lock>:
 80064fc:	4801      	ldr	r0, [pc, #4]	; (8006504 <__malloc_lock+0x8>)
 80064fe:	f000 baf9 	b.w	8006af4 <__retarget_lock_acquire_recursive>
 8006502:	bf00      	nop
 8006504:	20001e48 	.word	0x20001e48

08006508 <__malloc_unlock>:
 8006508:	4801      	ldr	r0, [pc, #4]	; (8006510 <__malloc_unlock+0x8>)
 800650a:	f000 baf4 	b.w	8006af6 <__retarget_lock_release_recursive>
 800650e:	bf00      	nop
 8006510:	20001e48 	.word	0x20001e48

08006514 <__ssputs_r>:
 8006514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006518:	688e      	ldr	r6, [r1, #8]
 800651a:	429e      	cmp	r6, r3
 800651c:	4682      	mov	sl, r0
 800651e:	460c      	mov	r4, r1
 8006520:	4690      	mov	r8, r2
 8006522:	461f      	mov	r7, r3
 8006524:	d838      	bhi.n	8006598 <__ssputs_r+0x84>
 8006526:	898a      	ldrh	r2, [r1, #12]
 8006528:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800652c:	d032      	beq.n	8006594 <__ssputs_r+0x80>
 800652e:	6825      	ldr	r5, [r4, #0]
 8006530:	6909      	ldr	r1, [r1, #16]
 8006532:	eba5 0901 	sub.w	r9, r5, r1
 8006536:	6965      	ldr	r5, [r4, #20]
 8006538:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800653c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006540:	3301      	adds	r3, #1
 8006542:	444b      	add	r3, r9
 8006544:	106d      	asrs	r5, r5, #1
 8006546:	429d      	cmp	r5, r3
 8006548:	bf38      	it	cc
 800654a:	461d      	movcc	r5, r3
 800654c:	0553      	lsls	r3, r2, #21
 800654e:	d531      	bpl.n	80065b4 <__ssputs_r+0xa0>
 8006550:	4629      	mov	r1, r5
 8006552:	f7ff ff49 	bl	80063e8 <_malloc_r>
 8006556:	4606      	mov	r6, r0
 8006558:	b950      	cbnz	r0, 8006570 <__ssputs_r+0x5c>
 800655a:	230c      	movs	r3, #12
 800655c:	f8ca 3000 	str.w	r3, [sl]
 8006560:	89a3      	ldrh	r3, [r4, #12]
 8006562:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006566:	81a3      	strh	r3, [r4, #12]
 8006568:	f04f 30ff 	mov.w	r0, #4294967295
 800656c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006570:	6921      	ldr	r1, [r4, #16]
 8006572:	464a      	mov	r2, r9
 8006574:	f000 fac0 	bl	8006af8 <memcpy>
 8006578:	89a3      	ldrh	r3, [r4, #12]
 800657a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800657e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006582:	81a3      	strh	r3, [r4, #12]
 8006584:	6126      	str	r6, [r4, #16]
 8006586:	6165      	str	r5, [r4, #20]
 8006588:	444e      	add	r6, r9
 800658a:	eba5 0509 	sub.w	r5, r5, r9
 800658e:	6026      	str	r6, [r4, #0]
 8006590:	60a5      	str	r5, [r4, #8]
 8006592:	463e      	mov	r6, r7
 8006594:	42be      	cmp	r6, r7
 8006596:	d900      	bls.n	800659a <__ssputs_r+0x86>
 8006598:	463e      	mov	r6, r7
 800659a:	4632      	mov	r2, r6
 800659c:	6820      	ldr	r0, [r4, #0]
 800659e:	4641      	mov	r1, r8
 80065a0:	f000 fab8 	bl	8006b14 <memmove>
 80065a4:	68a3      	ldr	r3, [r4, #8]
 80065a6:	6822      	ldr	r2, [r4, #0]
 80065a8:	1b9b      	subs	r3, r3, r6
 80065aa:	4432      	add	r2, r6
 80065ac:	60a3      	str	r3, [r4, #8]
 80065ae:	6022      	str	r2, [r4, #0]
 80065b0:	2000      	movs	r0, #0
 80065b2:	e7db      	b.n	800656c <__ssputs_r+0x58>
 80065b4:	462a      	mov	r2, r5
 80065b6:	f000 fb17 	bl	8006be8 <_realloc_r>
 80065ba:	4606      	mov	r6, r0
 80065bc:	2800      	cmp	r0, #0
 80065be:	d1e1      	bne.n	8006584 <__ssputs_r+0x70>
 80065c0:	6921      	ldr	r1, [r4, #16]
 80065c2:	4650      	mov	r0, sl
 80065c4:	f000 fac0 	bl	8006b48 <_free_r>
 80065c8:	e7c7      	b.n	800655a <__ssputs_r+0x46>
	...

080065cc <_svfiprintf_r>:
 80065cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065d0:	4698      	mov	r8, r3
 80065d2:	898b      	ldrh	r3, [r1, #12]
 80065d4:	061b      	lsls	r3, r3, #24
 80065d6:	b09d      	sub	sp, #116	; 0x74
 80065d8:	4607      	mov	r7, r0
 80065da:	460d      	mov	r5, r1
 80065dc:	4614      	mov	r4, r2
 80065de:	d50e      	bpl.n	80065fe <_svfiprintf_r+0x32>
 80065e0:	690b      	ldr	r3, [r1, #16]
 80065e2:	b963      	cbnz	r3, 80065fe <_svfiprintf_r+0x32>
 80065e4:	2140      	movs	r1, #64	; 0x40
 80065e6:	f7ff feff 	bl	80063e8 <_malloc_r>
 80065ea:	6028      	str	r0, [r5, #0]
 80065ec:	6128      	str	r0, [r5, #16]
 80065ee:	b920      	cbnz	r0, 80065fa <_svfiprintf_r+0x2e>
 80065f0:	230c      	movs	r3, #12
 80065f2:	603b      	str	r3, [r7, #0]
 80065f4:	f04f 30ff 	mov.w	r0, #4294967295
 80065f8:	e0d1      	b.n	800679e <_svfiprintf_r+0x1d2>
 80065fa:	2340      	movs	r3, #64	; 0x40
 80065fc:	616b      	str	r3, [r5, #20]
 80065fe:	2300      	movs	r3, #0
 8006600:	9309      	str	r3, [sp, #36]	; 0x24
 8006602:	2320      	movs	r3, #32
 8006604:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006608:	f8cd 800c 	str.w	r8, [sp, #12]
 800660c:	2330      	movs	r3, #48	; 0x30
 800660e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80067b8 <_svfiprintf_r+0x1ec>
 8006612:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006616:	f04f 0901 	mov.w	r9, #1
 800661a:	4623      	mov	r3, r4
 800661c:	469a      	mov	sl, r3
 800661e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006622:	b10a      	cbz	r2, 8006628 <_svfiprintf_r+0x5c>
 8006624:	2a25      	cmp	r2, #37	; 0x25
 8006626:	d1f9      	bne.n	800661c <_svfiprintf_r+0x50>
 8006628:	ebba 0b04 	subs.w	fp, sl, r4
 800662c:	d00b      	beq.n	8006646 <_svfiprintf_r+0x7a>
 800662e:	465b      	mov	r3, fp
 8006630:	4622      	mov	r2, r4
 8006632:	4629      	mov	r1, r5
 8006634:	4638      	mov	r0, r7
 8006636:	f7ff ff6d 	bl	8006514 <__ssputs_r>
 800663a:	3001      	adds	r0, #1
 800663c:	f000 80aa 	beq.w	8006794 <_svfiprintf_r+0x1c8>
 8006640:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006642:	445a      	add	r2, fp
 8006644:	9209      	str	r2, [sp, #36]	; 0x24
 8006646:	f89a 3000 	ldrb.w	r3, [sl]
 800664a:	2b00      	cmp	r3, #0
 800664c:	f000 80a2 	beq.w	8006794 <_svfiprintf_r+0x1c8>
 8006650:	2300      	movs	r3, #0
 8006652:	f04f 32ff 	mov.w	r2, #4294967295
 8006656:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800665a:	f10a 0a01 	add.w	sl, sl, #1
 800665e:	9304      	str	r3, [sp, #16]
 8006660:	9307      	str	r3, [sp, #28]
 8006662:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006666:	931a      	str	r3, [sp, #104]	; 0x68
 8006668:	4654      	mov	r4, sl
 800666a:	2205      	movs	r2, #5
 800666c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006670:	4851      	ldr	r0, [pc, #324]	; (80067b8 <_svfiprintf_r+0x1ec>)
 8006672:	f7f9 fdcd 	bl	8000210 <memchr>
 8006676:	9a04      	ldr	r2, [sp, #16]
 8006678:	b9d8      	cbnz	r0, 80066b2 <_svfiprintf_r+0xe6>
 800667a:	06d0      	lsls	r0, r2, #27
 800667c:	bf44      	itt	mi
 800667e:	2320      	movmi	r3, #32
 8006680:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006684:	0711      	lsls	r1, r2, #28
 8006686:	bf44      	itt	mi
 8006688:	232b      	movmi	r3, #43	; 0x2b
 800668a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800668e:	f89a 3000 	ldrb.w	r3, [sl]
 8006692:	2b2a      	cmp	r3, #42	; 0x2a
 8006694:	d015      	beq.n	80066c2 <_svfiprintf_r+0xf6>
 8006696:	9a07      	ldr	r2, [sp, #28]
 8006698:	4654      	mov	r4, sl
 800669a:	2000      	movs	r0, #0
 800669c:	f04f 0c0a 	mov.w	ip, #10
 80066a0:	4621      	mov	r1, r4
 80066a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066a6:	3b30      	subs	r3, #48	; 0x30
 80066a8:	2b09      	cmp	r3, #9
 80066aa:	d94e      	bls.n	800674a <_svfiprintf_r+0x17e>
 80066ac:	b1b0      	cbz	r0, 80066dc <_svfiprintf_r+0x110>
 80066ae:	9207      	str	r2, [sp, #28]
 80066b0:	e014      	b.n	80066dc <_svfiprintf_r+0x110>
 80066b2:	eba0 0308 	sub.w	r3, r0, r8
 80066b6:	fa09 f303 	lsl.w	r3, r9, r3
 80066ba:	4313      	orrs	r3, r2
 80066bc:	9304      	str	r3, [sp, #16]
 80066be:	46a2      	mov	sl, r4
 80066c0:	e7d2      	b.n	8006668 <_svfiprintf_r+0x9c>
 80066c2:	9b03      	ldr	r3, [sp, #12]
 80066c4:	1d19      	adds	r1, r3, #4
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	9103      	str	r1, [sp, #12]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	bfbb      	ittet	lt
 80066ce:	425b      	neglt	r3, r3
 80066d0:	f042 0202 	orrlt.w	r2, r2, #2
 80066d4:	9307      	strge	r3, [sp, #28]
 80066d6:	9307      	strlt	r3, [sp, #28]
 80066d8:	bfb8      	it	lt
 80066da:	9204      	strlt	r2, [sp, #16]
 80066dc:	7823      	ldrb	r3, [r4, #0]
 80066de:	2b2e      	cmp	r3, #46	; 0x2e
 80066e0:	d10c      	bne.n	80066fc <_svfiprintf_r+0x130>
 80066e2:	7863      	ldrb	r3, [r4, #1]
 80066e4:	2b2a      	cmp	r3, #42	; 0x2a
 80066e6:	d135      	bne.n	8006754 <_svfiprintf_r+0x188>
 80066e8:	9b03      	ldr	r3, [sp, #12]
 80066ea:	1d1a      	adds	r2, r3, #4
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	9203      	str	r2, [sp, #12]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	bfb8      	it	lt
 80066f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80066f8:	3402      	adds	r4, #2
 80066fa:	9305      	str	r3, [sp, #20]
 80066fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80067c8 <_svfiprintf_r+0x1fc>
 8006700:	7821      	ldrb	r1, [r4, #0]
 8006702:	2203      	movs	r2, #3
 8006704:	4650      	mov	r0, sl
 8006706:	f7f9 fd83 	bl	8000210 <memchr>
 800670a:	b140      	cbz	r0, 800671e <_svfiprintf_r+0x152>
 800670c:	2340      	movs	r3, #64	; 0x40
 800670e:	eba0 000a 	sub.w	r0, r0, sl
 8006712:	fa03 f000 	lsl.w	r0, r3, r0
 8006716:	9b04      	ldr	r3, [sp, #16]
 8006718:	4303      	orrs	r3, r0
 800671a:	3401      	adds	r4, #1
 800671c:	9304      	str	r3, [sp, #16]
 800671e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006722:	4826      	ldr	r0, [pc, #152]	; (80067bc <_svfiprintf_r+0x1f0>)
 8006724:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006728:	2206      	movs	r2, #6
 800672a:	f7f9 fd71 	bl	8000210 <memchr>
 800672e:	2800      	cmp	r0, #0
 8006730:	d038      	beq.n	80067a4 <_svfiprintf_r+0x1d8>
 8006732:	4b23      	ldr	r3, [pc, #140]	; (80067c0 <_svfiprintf_r+0x1f4>)
 8006734:	bb1b      	cbnz	r3, 800677e <_svfiprintf_r+0x1b2>
 8006736:	9b03      	ldr	r3, [sp, #12]
 8006738:	3307      	adds	r3, #7
 800673a:	f023 0307 	bic.w	r3, r3, #7
 800673e:	3308      	adds	r3, #8
 8006740:	9303      	str	r3, [sp, #12]
 8006742:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006744:	4433      	add	r3, r6
 8006746:	9309      	str	r3, [sp, #36]	; 0x24
 8006748:	e767      	b.n	800661a <_svfiprintf_r+0x4e>
 800674a:	fb0c 3202 	mla	r2, ip, r2, r3
 800674e:	460c      	mov	r4, r1
 8006750:	2001      	movs	r0, #1
 8006752:	e7a5      	b.n	80066a0 <_svfiprintf_r+0xd4>
 8006754:	2300      	movs	r3, #0
 8006756:	3401      	adds	r4, #1
 8006758:	9305      	str	r3, [sp, #20]
 800675a:	4619      	mov	r1, r3
 800675c:	f04f 0c0a 	mov.w	ip, #10
 8006760:	4620      	mov	r0, r4
 8006762:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006766:	3a30      	subs	r2, #48	; 0x30
 8006768:	2a09      	cmp	r2, #9
 800676a:	d903      	bls.n	8006774 <_svfiprintf_r+0x1a8>
 800676c:	2b00      	cmp	r3, #0
 800676e:	d0c5      	beq.n	80066fc <_svfiprintf_r+0x130>
 8006770:	9105      	str	r1, [sp, #20]
 8006772:	e7c3      	b.n	80066fc <_svfiprintf_r+0x130>
 8006774:	fb0c 2101 	mla	r1, ip, r1, r2
 8006778:	4604      	mov	r4, r0
 800677a:	2301      	movs	r3, #1
 800677c:	e7f0      	b.n	8006760 <_svfiprintf_r+0x194>
 800677e:	ab03      	add	r3, sp, #12
 8006780:	9300      	str	r3, [sp, #0]
 8006782:	462a      	mov	r2, r5
 8006784:	4b0f      	ldr	r3, [pc, #60]	; (80067c4 <_svfiprintf_r+0x1f8>)
 8006786:	a904      	add	r1, sp, #16
 8006788:	4638      	mov	r0, r7
 800678a:	f3af 8000 	nop.w
 800678e:	1c42      	adds	r2, r0, #1
 8006790:	4606      	mov	r6, r0
 8006792:	d1d6      	bne.n	8006742 <_svfiprintf_r+0x176>
 8006794:	89ab      	ldrh	r3, [r5, #12]
 8006796:	065b      	lsls	r3, r3, #25
 8006798:	f53f af2c 	bmi.w	80065f4 <_svfiprintf_r+0x28>
 800679c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800679e:	b01d      	add	sp, #116	; 0x74
 80067a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067a4:	ab03      	add	r3, sp, #12
 80067a6:	9300      	str	r3, [sp, #0]
 80067a8:	462a      	mov	r2, r5
 80067aa:	4b06      	ldr	r3, [pc, #24]	; (80067c4 <_svfiprintf_r+0x1f8>)
 80067ac:	a904      	add	r1, sp, #16
 80067ae:	4638      	mov	r0, r7
 80067b0:	f000 f87a 	bl	80068a8 <_printf_i>
 80067b4:	e7eb      	b.n	800678e <_svfiprintf_r+0x1c2>
 80067b6:	bf00      	nop
 80067b8:	08006c7c 	.word	0x08006c7c
 80067bc:	08006c86 	.word	0x08006c86
 80067c0:	00000000 	.word	0x00000000
 80067c4:	08006515 	.word	0x08006515
 80067c8:	08006c82 	.word	0x08006c82

080067cc <_printf_common>:
 80067cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067d0:	4616      	mov	r6, r2
 80067d2:	4699      	mov	r9, r3
 80067d4:	688a      	ldr	r2, [r1, #8]
 80067d6:	690b      	ldr	r3, [r1, #16]
 80067d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80067dc:	4293      	cmp	r3, r2
 80067de:	bfb8      	it	lt
 80067e0:	4613      	movlt	r3, r2
 80067e2:	6033      	str	r3, [r6, #0]
 80067e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80067e8:	4607      	mov	r7, r0
 80067ea:	460c      	mov	r4, r1
 80067ec:	b10a      	cbz	r2, 80067f2 <_printf_common+0x26>
 80067ee:	3301      	adds	r3, #1
 80067f0:	6033      	str	r3, [r6, #0]
 80067f2:	6823      	ldr	r3, [r4, #0]
 80067f4:	0699      	lsls	r1, r3, #26
 80067f6:	bf42      	ittt	mi
 80067f8:	6833      	ldrmi	r3, [r6, #0]
 80067fa:	3302      	addmi	r3, #2
 80067fc:	6033      	strmi	r3, [r6, #0]
 80067fe:	6825      	ldr	r5, [r4, #0]
 8006800:	f015 0506 	ands.w	r5, r5, #6
 8006804:	d106      	bne.n	8006814 <_printf_common+0x48>
 8006806:	f104 0a19 	add.w	sl, r4, #25
 800680a:	68e3      	ldr	r3, [r4, #12]
 800680c:	6832      	ldr	r2, [r6, #0]
 800680e:	1a9b      	subs	r3, r3, r2
 8006810:	42ab      	cmp	r3, r5
 8006812:	dc26      	bgt.n	8006862 <_printf_common+0x96>
 8006814:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006818:	1e13      	subs	r3, r2, #0
 800681a:	6822      	ldr	r2, [r4, #0]
 800681c:	bf18      	it	ne
 800681e:	2301      	movne	r3, #1
 8006820:	0692      	lsls	r2, r2, #26
 8006822:	d42b      	bmi.n	800687c <_printf_common+0xb0>
 8006824:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006828:	4649      	mov	r1, r9
 800682a:	4638      	mov	r0, r7
 800682c:	47c0      	blx	r8
 800682e:	3001      	adds	r0, #1
 8006830:	d01e      	beq.n	8006870 <_printf_common+0xa4>
 8006832:	6823      	ldr	r3, [r4, #0]
 8006834:	68e5      	ldr	r5, [r4, #12]
 8006836:	6832      	ldr	r2, [r6, #0]
 8006838:	f003 0306 	and.w	r3, r3, #6
 800683c:	2b04      	cmp	r3, #4
 800683e:	bf08      	it	eq
 8006840:	1aad      	subeq	r5, r5, r2
 8006842:	68a3      	ldr	r3, [r4, #8]
 8006844:	6922      	ldr	r2, [r4, #16]
 8006846:	bf0c      	ite	eq
 8006848:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800684c:	2500      	movne	r5, #0
 800684e:	4293      	cmp	r3, r2
 8006850:	bfc4      	itt	gt
 8006852:	1a9b      	subgt	r3, r3, r2
 8006854:	18ed      	addgt	r5, r5, r3
 8006856:	2600      	movs	r6, #0
 8006858:	341a      	adds	r4, #26
 800685a:	42b5      	cmp	r5, r6
 800685c:	d11a      	bne.n	8006894 <_printf_common+0xc8>
 800685e:	2000      	movs	r0, #0
 8006860:	e008      	b.n	8006874 <_printf_common+0xa8>
 8006862:	2301      	movs	r3, #1
 8006864:	4652      	mov	r2, sl
 8006866:	4649      	mov	r1, r9
 8006868:	4638      	mov	r0, r7
 800686a:	47c0      	blx	r8
 800686c:	3001      	adds	r0, #1
 800686e:	d103      	bne.n	8006878 <_printf_common+0xac>
 8006870:	f04f 30ff 	mov.w	r0, #4294967295
 8006874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006878:	3501      	adds	r5, #1
 800687a:	e7c6      	b.n	800680a <_printf_common+0x3e>
 800687c:	18e1      	adds	r1, r4, r3
 800687e:	1c5a      	adds	r2, r3, #1
 8006880:	2030      	movs	r0, #48	; 0x30
 8006882:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006886:	4422      	add	r2, r4
 8006888:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800688c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006890:	3302      	adds	r3, #2
 8006892:	e7c7      	b.n	8006824 <_printf_common+0x58>
 8006894:	2301      	movs	r3, #1
 8006896:	4622      	mov	r2, r4
 8006898:	4649      	mov	r1, r9
 800689a:	4638      	mov	r0, r7
 800689c:	47c0      	blx	r8
 800689e:	3001      	adds	r0, #1
 80068a0:	d0e6      	beq.n	8006870 <_printf_common+0xa4>
 80068a2:	3601      	adds	r6, #1
 80068a4:	e7d9      	b.n	800685a <_printf_common+0x8e>
	...

080068a8 <_printf_i>:
 80068a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068ac:	460c      	mov	r4, r1
 80068ae:	4691      	mov	r9, r2
 80068b0:	7e27      	ldrb	r7, [r4, #24]
 80068b2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80068b4:	2f78      	cmp	r7, #120	; 0x78
 80068b6:	4680      	mov	r8, r0
 80068b8:	469a      	mov	sl, r3
 80068ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80068be:	d807      	bhi.n	80068d0 <_printf_i+0x28>
 80068c0:	2f62      	cmp	r7, #98	; 0x62
 80068c2:	d80a      	bhi.n	80068da <_printf_i+0x32>
 80068c4:	2f00      	cmp	r7, #0
 80068c6:	f000 80d8 	beq.w	8006a7a <_printf_i+0x1d2>
 80068ca:	2f58      	cmp	r7, #88	; 0x58
 80068cc:	f000 80a3 	beq.w	8006a16 <_printf_i+0x16e>
 80068d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80068d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80068d8:	e03a      	b.n	8006950 <_printf_i+0xa8>
 80068da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80068de:	2b15      	cmp	r3, #21
 80068e0:	d8f6      	bhi.n	80068d0 <_printf_i+0x28>
 80068e2:	a001      	add	r0, pc, #4	; (adr r0, 80068e8 <_printf_i+0x40>)
 80068e4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80068e8:	08006941 	.word	0x08006941
 80068ec:	08006955 	.word	0x08006955
 80068f0:	080068d1 	.word	0x080068d1
 80068f4:	080068d1 	.word	0x080068d1
 80068f8:	080068d1 	.word	0x080068d1
 80068fc:	080068d1 	.word	0x080068d1
 8006900:	08006955 	.word	0x08006955
 8006904:	080068d1 	.word	0x080068d1
 8006908:	080068d1 	.word	0x080068d1
 800690c:	080068d1 	.word	0x080068d1
 8006910:	080068d1 	.word	0x080068d1
 8006914:	08006a61 	.word	0x08006a61
 8006918:	08006985 	.word	0x08006985
 800691c:	08006a43 	.word	0x08006a43
 8006920:	080068d1 	.word	0x080068d1
 8006924:	080068d1 	.word	0x080068d1
 8006928:	08006a83 	.word	0x08006a83
 800692c:	080068d1 	.word	0x080068d1
 8006930:	08006985 	.word	0x08006985
 8006934:	080068d1 	.word	0x080068d1
 8006938:	080068d1 	.word	0x080068d1
 800693c:	08006a4b 	.word	0x08006a4b
 8006940:	680b      	ldr	r3, [r1, #0]
 8006942:	1d1a      	adds	r2, r3, #4
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	600a      	str	r2, [r1, #0]
 8006948:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800694c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006950:	2301      	movs	r3, #1
 8006952:	e0a3      	b.n	8006a9c <_printf_i+0x1f4>
 8006954:	6825      	ldr	r5, [r4, #0]
 8006956:	6808      	ldr	r0, [r1, #0]
 8006958:	062e      	lsls	r6, r5, #24
 800695a:	f100 0304 	add.w	r3, r0, #4
 800695e:	d50a      	bpl.n	8006976 <_printf_i+0xce>
 8006960:	6805      	ldr	r5, [r0, #0]
 8006962:	600b      	str	r3, [r1, #0]
 8006964:	2d00      	cmp	r5, #0
 8006966:	da03      	bge.n	8006970 <_printf_i+0xc8>
 8006968:	232d      	movs	r3, #45	; 0x2d
 800696a:	426d      	negs	r5, r5
 800696c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006970:	485e      	ldr	r0, [pc, #376]	; (8006aec <_printf_i+0x244>)
 8006972:	230a      	movs	r3, #10
 8006974:	e019      	b.n	80069aa <_printf_i+0x102>
 8006976:	f015 0f40 	tst.w	r5, #64	; 0x40
 800697a:	6805      	ldr	r5, [r0, #0]
 800697c:	600b      	str	r3, [r1, #0]
 800697e:	bf18      	it	ne
 8006980:	b22d      	sxthne	r5, r5
 8006982:	e7ef      	b.n	8006964 <_printf_i+0xbc>
 8006984:	680b      	ldr	r3, [r1, #0]
 8006986:	6825      	ldr	r5, [r4, #0]
 8006988:	1d18      	adds	r0, r3, #4
 800698a:	6008      	str	r0, [r1, #0]
 800698c:	0628      	lsls	r0, r5, #24
 800698e:	d501      	bpl.n	8006994 <_printf_i+0xec>
 8006990:	681d      	ldr	r5, [r3, #0]
 8006992:	e002      	b.n	800699a <_printf_i+0xf2>
 8006994:	0669      	lsls	r1, r5, #25
 8006996:	d5fb      	bpl.n	8006990 <_printf_i+0xe8>
 8006998:	881d      	ldrh	r5, [r3, #0]
 800699a:	4854      	ldr	r0, [pc, #336]	; (8006aec <_printf_i+0x244>)
 800699c:	2f6f      	cmp	r7, #111	; 0x6f
 800699e:	bf0c      	ite	eq
 80069a0:	2308      	moveq	r3, #8
 80069a2:	230a      	movne	r3, #10
 80069a4:	2100      	movs	r1, #0
 80069a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80069aa:	6866      	ldr	r6, [r4, #4]
 80069ac:	60a6      	str	r6, [r4, #8]
 80069ae:	2e00      	cmp	r6, #0
 80069b0:	bfa2      	ittt	ge
 80069b2:	6821      	ldrge	r1, [r4, #0]
 80069b4:	f021 0104 	bicge.w	r1, r1, #4
 80069b8:	6021      	strge	r1, [r4, #0]
 80069ba:	b90d      	cbnz	r5, 80069c0 <_printf_i+0x118>
 80069bc:	2e00      	cmp	r6, #0
 80069be:	d04d      	beq.n	8006a5c <_printf_i+0x1b4>
 80069c0:	4616      	mov	r6, r2
 80069c2:	fbb5 f1f3 	udiv	r1, r5, r3
 80069c6:	fb03 5711 	mls	r7, r3, r1, r5
 80069ca:	5dc7      	ldrb	r7, [r0, r7]
 80069cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80069d0:	462f      	mov	r7, r5
 80069d2:	42bb      	cmp	r3, r7
 80069d4:	460d      	mov	r5, r1
 80069d6:	d9f4      	bls.n	80069c2 <_printf_i+0x11a>
 80069d8:	2b08      	cmp	r3, #8
 80069da:	d10b      	bne.n	80069f4 <_printf_i+0x14c>
 80069dc:	6823      	ldr	r3, [r4, #0]
 80069de:	07df      	lsls	r7, r3, #31
 80069e0:	d508      	bpl.n	80069f4 <_printf_i+0x14c>
 80069e2:	6923      	ldr	r3, [r4, #16]
 80069e4:	6861      	ldr	r1, [r4, #4]
 80069e6:	4299      	cmp	r1, r3
 80069e8:	bfde      	ittt	le
 80069ea:	2330      	movle	r3, #48	; 0x30
 80069ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 80069f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80069f4:	1b92      	subs	r2, r2, r6
 80069f6:	6122      	str	r2, [r4, #16]
 80069f8:	f8cd a000 	str.w	sl, [sp]
 80069fc:	464b      	mov	r3, r9
 80069fe:	aa03      	add	r2, sp, #12
 8006a00:	4621      	mov	r1, r4
 8006a02:	4640      	mov	r0, r8
 8006a04:	f7ff fee2 	bl	80067cc <_printf_common>
 8006a08:	3001      	adds	r0, #1
 8006a0a:	d14c      	bne.n	8006aa6 <_printf_i+0x1fe>
 8006a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a10:	b004      	add	sp, #16
 8006a12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a16:	4835      	ldr	r0, [pc, #212]	; (8006aec <_printf_i+0x244>)
 8006a18:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006a1c:	6823      	ldr	r3, [r4, #0]
 8006a1e:	680e      	ldr	r6, [r1, #0]
 8006a20:	061f      	lsls	r7, r3, #24
 8006a22:	f856 5b04 	ldr.w	r5, [r6], #4
 8006a26:	600e      	str	r6, [r1, #0]
 8006a28:	d514      	bpl.n	8006a54 <_printf_i+0x1ac>
 8006a2a:	07d9      	lsls	r1, r3, #31
 8006a2c:	bf44      	itt	mi
 8006a2e:	f043 0320 	orrmi.w	r3, r3, #32
 8006a32:	6023      	strmi	r3, [r4, #0]
 8006a34:	b91d      	cbnz	r5, 8006a3e <_printf_i+0x196>
 8006a36:	6823      	ldr	r3, [r4, #0]
 8006a38:	f023 0320 	bic.w	r3, r3, #32
 8006a3c:	6023      	str	r3, [r4, #0]
 8006a3e:	2310      	movs	r3, #16
 8006a40:	e7b0      	b.n	80069a4 <_printf_i+0xfc>
 8006a42:	6823      	ldr	r3, [r4, #0]
 8006a44:	f043 0320 	orr.w	r3, r3, #32
 8006a48:	6023      	str	r3, [r4, #0]
 8006a4a:	2378      	movs	r3, #120	; 0x78
 8006a4c:	4828      	ldr	r0, [pc, #160]	; (8006af0 <_printf_i+0x248>)
 8006a4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006a52:	e7e3      	b.n	8006a1c <_printf_i+0x174>
 8006a54:	065e      	lsls	r6, r3, #25
 8006a56:	bf48      	it	mi
 8006a58:	b2ad      	uxthmi	r5, r5
 8006a5a:	e7e6      	b.n	8006a2a <_printf_i+0x182>
 8006a5c:	4616      	mov	r6, r2
 8006a5e:	e7bb      	b.n	80069d8 <_printf_i+0x130>
 8006a60:	680b      	ldr	r3, [r1, #0]
 8006a62:	6826      	ldr	r6, [r4, #0]
 8006a64:	6960      	ldr	r0, [r4, #20]
 8006a66:	1d1d      	adds	r5, r3, #4
 8006a68:	600d      	str	r5, [r1, #0]
 8006a6a:	0635      	lsls	r5, r6, #24
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	d501      	bpl.n	8006a74 <_printf_i+0x1cc>
 8006a70:	6018      	str	r0, [r3, #0]
 8006a72:	e002      	b.n	8006a7a <_printf_i+0x1d2>
 8006a74:	0671      	lsls	r1, r6, #25
 8006a76:	d5fb      	bpl.n	8006a70 <_printf_i+0x1c8>
 8006a78:	8018      	strh	r0, [r3, #0]
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	6123      	str	r3, [r4, #16]
 8006a7e:	4616      	mov	r6, r2
 8006a80:	e7ba      	b.n	80069f8 <_printf_i+0x150>
 8006a82:	680b      	ldr	r3, [r1, #0]
 8006a84:	1d1a      	adds	r2, r3, #4
 8006a86:	600a      	str	r2, [r1, #0]
 8006a88:	681e      	ldr	r6, [r3, #0]
 8006a8a:	6862      	ldr	r2, [r4, #4]
 8006a8c:	2100      	movs	r1, #0
 8006a8e:	4630      	mov	r0, r6
 8006a90:	f7f9 fbbe 	bl	8000210 <memchr>
 8006a94:	b108      	cbz	r0, 8006a9a <_printf_i+0x1f2>
 8006a96:	1b80      	subs	r0, r0, r6
 8006a98:	6060      	str	r0, [r4, #4]
 8006a9a:	6863      	ldr	r3, [r4, #4]
 8006a9c:	6123      	str	r3, [r4, #16]
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006aa4:	e7a8      	b.n	80069f8 <_printf_i+0x150>
 8006aa6:	6923      	ldr	r3, [r4, #16]
 8006aa8:	4632      	mov	r2, r6
 8006aaa:	4649      	mov	r1, r9
 8006aac:	4640      	mov	r0, r8
 8006aae:	47d0      	blx	sl
 8006ab0:	3001      	adds	r0, #1
 8006ab2:	d0ab      	beq.n	8006a0c <_printf_i+0x164>
 8006ab4:	6823      	ldr	r3, [r4, #0]
 8006ab6:	079b      	lsls	r3, r3, #30
 8006ab8:	d413      	bmi.n	8006ae2 <_printf_i+0x23a>
 8006aba:	68e0      	ldr	r0, [r4, #12]
 8006abc:	9b03      	ldr	r3, [sp, #12]
 8006abe:	4298      	cmp	r0, r3
 8006ac0:	bfb8      	it	lt
 8006ac2:	4618      	movlt	r0, r3
 8006ac4:	e7a4      	b.n	8006a10 <_printf_i+0x168>
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	4632      	mov	r2, r6
 8006aca:	4649      	mov	r1, r9
 8006acc:	4640      	mov	r0, r8
 8006ace:	47d0      	blx	sl
 8006ad0:	3001      	adds	r0, #1
 8006ad2:	d09b      	beq.n	8006a0c <_printf_i+0x164>
 8006ad4:	3501      	adds	r5, #1
 8006ad6:	68e3      	ldr	r3, [r4, #12]
 8006ad8:	9903      	ldr	r1, [sp, #12]
 8006ada:	1a5b      	subs	r3, r3, r1
 8006adc:	42ab      	cmp	r3, r5
 8006ade:	dcf2      	bgt.n	8006ac6 <_printf_i+0x21e>
 8006ae0:	e7eb      	b.n	8006aba <_printf_i+0x212>
 8006ae2:	2500      	movs	r5, #0
 8006ae4:	f104 0619 	add.w	r6, r4, #25
 8006ae8:	e7f5      	b.n	8006ad6 <_printf_i+0x22e>
 8006aea:	bf00      	nop
 8006aec:	08006c8d 	.word	0x08006c8d
 8006af0:	08006c9e 	.word	0x08006c9e

08006af4 <__retarget_lock_acquire_recursive>:
 8006af4:	4770      	bx	lr

08006af6 <__retarget_lock_release_recursive>:
 8006af6:	4770      	bx	lr

08006af8 <memcpy>:
 8006af8:	440a      	add	r2, r1
 8006afa:	4291      	cmp	r1, r2
 8006afc:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b00:	d100      	bne.n	8006b04 <memcpy+0xc>
 8006b02:	4770      	bx	lr
 8006b04:	b510      	push	{r4, lr}
 8006b06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b0e:	4291      	cmp	r1, r2
 8006b10:	d1f9      	bne.n	8006b06 <memcpy+0xe>
 8006b12:	bd10      	pop	{r4, pc}

08006b14 <memmove>:
 8006b14:	4288      	cmp	r0, r1
 8006b16:	b510      	push	{r4, lr}
 8006b18:	eb01 0402 	add.w	r4, r1, r2
 8006b1c:	d902      	bls.n	8006b24 <memmove+0x10>
 8006b1e:	4284      	cmp	r4, r0
 8006b20:	4623      	mov	r3, r4
 8006b22:	d807      	bhi.n	8006b34 <memmove+0x20>
 8006b24:	1e43      	subs	r3, r0, #1
 8006b26:	42a1      	cmp	r1, r4
 8006b28:	d008      	beq.n	8006b3c <memmove+0x28>
 8006b2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006b32:	e7f8      	b.n	8006b26 <memmove+0x12>
 8006b34:	4402      	add	r2, r0
 8006b36:	4601      	mov	r1, r0
 8006b38:	428a      	cmp	r2, r1
 8006b3a:	d100      	bne.n	8006b3e <memmove+0x2a>
 8006b3c:	bd10      	pop	{r4, pc}
 8006b3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006b42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006b46:	e7f7      	b.n	8006b38 <memmove+0x24>

08006b48 <_free_r>:
 8006b48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b4a:	2900      	cmp	r1, #0
 8006b4c:	d048      	beq.n	8006be0 <_free_r+0x98>
 8006b4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b52:	9001      	str	r0, [sp, #4]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	f1a1 0404 	sub.w	r4, r1, #4
 8006b5a:	bfb8      	it	lt
 8006b5c:	18e4      	addlt	r4, r4, r3
 8006b5e:	f7ff fccd 	bl	80064fc <__malloc_lock>
 8006b62:	4a20      	ldr	r2, [pc, #128]	; (8006be4 <_free_r+0x9c>)
 8006b64:	9801      	ldr	r0, [sp, #4]
 8006b66:	6813      	ldr	r3, [r2, #0]
 8006b68:	4615      	mov	r5, r2
 8006b6a:	b933      	cbnz	r3, 8006b7a <_free_r+0x32>
 8006b6c:	6063      	str	r3, [r4, #4]
 8006b6e:	6014      	str	r4, [r2, #0]
 8006b70:	b003      	add	sp, #12
 8006b72:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b76:	f7ff bcc7 	b.w	8006508 <__malloc_unlock>
 8006b7a:	42a3      	cmp	r3, r4
 8006b7c:	d90b      	bls.n	8006b96 <_free_r+0x4e>
 8006b7e:	6821      	ldr	r1, [r4, #0]
 8006b80:	1862      	adds	r2, r4, r1
 8006b82:	4293      	cmp	r3, r2
 8006b84:	bf04      	itt	eq
 8006b86:	681a      	ldreq	r2, [r3, #0]
 8006b88:	685b      	ldreq	r3, [r3, #4]
 8006b8a:	6063      	str	r3, [r4, #4]
 8006b8c:	bf04      	itt	eq
 8006b8e:	1852      	addeq	r2, r2, r1
 8006b90:	6022      	streq	r2, [r4, #0]
 8006b92:	602c      	str	r4, [r5, #0]
 8006b94:	e7ec      	b.n	8006b70 <_free_r+0x28>
 8006b96:	461a      	mov	r2, r3
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	b10b      	cbz	r3, 8006ba0 <_free_r+0x58>
 8006b9c:	42a3      	cmp	r3, r4
 8006b9e:	d9fa      	bls.n	8006b96 <_free_r+0x4e>
 8006ba0:	6811      	ldr	r1, [r2, #0]
 8006ba2:	1855      	adds	r5, r2, r1
 8006ba4:	42a5      	cmp	r5, r4
 8006ba6:	d10b      	bne.n	8006bc0 <_free_r+0x78>
 8006ba8:	6824      	ldr	r4, [r4, #0]
 8006baa:	4421      	add	r1, r4
 8006bac:	1854      	adds	r4, r2, r1
 8006bae:	42a3      	cmp	r3, r4
 8006bb0:	6011      	str	r1, [r2, #0]
 8006bb2:	d1dd      	bne.n	8006b70 <_free_r+0x28>
 8006bb4:	681c      	ldr	r4, [r3, #0]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	6053      	str	r3, [r2, #4]
 8006bba:	4421      	add	r1, r4
 8006bbc:	6011      	str	r1, [r2, #0]
 8006bbe:	e7d7      	b.n	8006b70 <_free_r+0x28>
 8006bc0:	d902      	bls.n	8006bc8 <_free_r+0x80>
 8006bc2:	230c      	movs	r3, #12
 8006bc4:	6003      	str	r3, [r0, #0]
 8006bc6:	e7d3      	b.n	8006b70 <_free_r+0x28>
 8006bc8:	6825      	ldr	r5, [r4, #0]
 8006bca:	1961      	adds	r1, r4, r5
 8006bcc:	428b      	cmp	r3, r1
 8006bce:	bf04      	itt	eq
 8006bd0:	6819      	ldreq	r1, [r3, #0]
 8006bd2:	685b      	ldreq	r3, [r3, #4]
 8006bd4:	6063      	str	r3, [r4, #4]
 8006bd6:	bf04      	itt	eq
 8006bd8:	1949      	addeq	r1, r1, r5
 8006bda:	6021      	streq	r1, [r4, #0]
 8006bdc:	6054      	str	r4, [r2, #4]
 8006bde:	e7c7      	b.n	8006b70 <_free_r+0x28>
 8006be0:	b003      	add	sp, #12
 8006be2:	bd30      	pop	{r4, r5, pc}
 8006be4:	200000b0 	.word	0x200000b0

08006be8 <_realloc_r>:
 8006be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bea:	4607      	mov	r7, r0
 8006bec:	4614      	mov	r4, r2
 8006bee:	460e      	mov	r6, r1
 8006bf0:	b921      	cbnz	r1, 8006bfc <_realloc_r+0x14>
 8006bf2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006bf6:	4611      	mov	r1, r2
 8006bf8:	f7ff bbf6 	b.w	80063e8 <_malloc_r>
 8006bfc:	b922      	cbnz	r2, 8006c08 <_realloc_r+0x20>
 8006bfe:	f7ff ffa3 	bl	8006b48 <_free_r>
 8006c02:	4625      	mov	r5, r4
 8006c04:	4628      	mov	r0, r5
 8006c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c08:	f000 f814 	bl	8006c34 <_malloc_usable_size_r>
 8006c0c:	42a0      	cmp	r0, r4
 8006c0e:	d20f      	bcs.n	8006c30 <_realloc_r+0x48>
 8006c10:	4621      	mov	r1, r4
 8006c12:	4638      	mov	r0, r7
 8006c14:	f7ff fbe8 	bl	80063e8 <_malloc_r>
 8006c18:	4605      	mov	r5, r0
 8006c1a:	2800      	cmp	r0, #0
 8006c1c:	d0f2      	beq.n	8006c04 <_realloc_r+0x1c>
 8006c1e:	4631      	mov	r1, r6
 8006c20:	4622      	mov	r2, r4
 8006c22:	f7ff ff69 	bl	8006af8 <memcpy>
 8006c26:	4631      	mov	r1, r6
 8006c28:	4638      	mov	r0, r7
 8006c2a:	f7ff ff8d 	bl	8006b48 <_free_r>
 8006c2e:	e7e9      	b.n	8006c04 <_realloc_r+0x1c>
 8006c30:	4635      	mov	r5, r6
 8006c32:	e7e7      	b.n	8006c04 <_realloc_r+0x1c>

08006c34 <_malloc_usable_size_r>:
 8006c34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c38:	1f18      	subs	r0, r3, #4
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	bfbc      	itt	lt
 8006c3e:	580b      	ldrlt	r3, [r1, r0]
 8006c40:	18c0      	addlt	r0, r0, r3
 8006c42:	4770      	bx	lr

08006c44 <_init>:
 8006c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c46:	bf00      	nop
 8006c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c4a:	bc08      	pop	{r3}
 8006c4c:	469e      	mov	lr, r3
 8006c4e:	4770      	bx	lr

08006c50 <_fini>:
 8006c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c52:	bf00      	nop
 8006c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c56:	bc08      	pop	{r3}
 8006c58:	469e      	mov	lr, r3
 8006c5a:	4770      	bx	lr
