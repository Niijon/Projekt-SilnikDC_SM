
Projekt_Cube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008240  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08008410  08008410  00018410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008464  08008464  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008464  08008464  00018464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800846c  0800846c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800846c  0800846c  0001846c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008470  08008470  00018470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008474  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000718  20000078  080084e8  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000790  080084e8  00020790  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001aeac  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000343f  00000000  00000000  0003af50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012a8  00000000  00000000  0003e390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001140  00000000  00000000  0003f638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027de5  00000000  00000000  00040778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018b1a  00000000  00000000  0006855d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f88b6  00000000  00000000  00081077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017992d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053ec  00000000  00000000  00179980  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080083f8 	.word	0x080083f8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	080083f8 	.word	0x080083f8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2iz>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d215      	bcs.n	8000ba2 <__aeabi_d2iz+0x36>
 8000b76:	d511      	bpl.n	8000b9c <__aeabi_d2iz+0x30>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d912      	bls.n	8000ba8 <__aeabi_d2iz+0x3c>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_d2iz+0x48>
 8000ba8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	bf08      	it	eq
 8000bae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_d2uiz>:
 8000bbc:	004a      	lsls	r2, r1, #1
 8000bbe:	d211      	bcs.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc4:	d211      	bcs.n	8000bea <__aeabi_d2uiz+0x2e>
 8000bc6:	d50d      	bpl.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bcc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bd0:	d40e      	bmi.n	8000bf0 <__aeabi_d2uiz+0x34>
 8000bd2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bda:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	4770      	bx	lr
 8000be4:	f04f 0000 	mov.w	r0, #0
 8000be8:	4770      	bx	lr
 8000bea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bee:	d102      	bne.n	8000bf6 <__aeabi_d2uiz+0x3a>
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf4:	4770      	bx	lr
 8000bf6:	f04f 0000 	mov.w	r0, #0
 8000bfa:	4770      	bx	lr

08000bfc <__aeabi_uldivmod>:
 8000bfc:	b953      	cbnz	r3, 8000c14 <__aeabi_uldivmod+0x18>
 8000bfe:	b94a      	cbnz	r2, 8000c14 <__aeabi_uldivmod+0x18>
 8000c00:	2900      	cmp	r1, #0
 8000c02:	bf08      	it	eq
 8000c04:	2800      	cmpeq	r0, #0
 8000c06:	bf1c      	itt	ne
 8000c08:	f04f 31ff 	movne.w	r1, #4294967295
 8000c0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c10:	f000 b96e 	b.w	8000ef0 <__aeabi_idiv0>
 8000c14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c1c:	f000 f806 	bl	8000c2c <__udivmoddi4>
 8000c20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c28:	b004      	add	sp, #16
 8000c2a:	4770      	bx	lr

08000c2c <__udivmoddi4>:
 8000c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c30:	9d08      	ldr	r5, [sp, #32]
 8000c32:	4604      	mov	r4, r0
 8000c34:	468c      	mov	ip, r1
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	f040 8083 	bne.w	8000d42 <__udivmoddi4+0x116>
 8000c3c:	428a      	cmp	r2, r1
 8000c3e:	4617      	mov	r7, r2
 8000c40:	d947      	bls.n	8000cd2 <__udivmoddi4+0xa6>
 8000c42:	fab2 f282 	clz	r2, r2
 8000c46:	b142      	cbz	r2, 8000c5a <__udivmoddi4+0x2e>
 8000c48:	f1c2 0020 	rsb	r0, r2, #32
 8000c4c:	fa24 f000 	lsr.w	r0, r4, r0
 8000c50:	4091      	lsls	r1, r2
 8000c52:	4097      	lsls	r7, r2
 8000c54:	ea40 0c01 	orr.w	ip, r0, r1
 8000c58:	4094      	lsls	r4, r2
 8000c5a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c5e:	0c23      	lsrs	r3, r4, #16
 8000c60:	fbbc f6f8 	udiv	r6, ip, r8
 8000c64:	fa1f fe87 	uxth.w	lr, r7
 8000c68:	fb08 c116 	mls	r1, r8, r6, ip
 8000c6c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c70:	fb06 f10e 	mul.w	r1, r6, lr
 8000c74:	4299      	cmp	r1, r3
 8000c76:	d909      	bls.n	8000c8c <__udivmoddi4+0x60>
 8000c78:	18fb      	adds	r3, r7, r3
 8000c7a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c7e:	f080 8119 	bcs.w	8000eb4 <__udivmoddi4+0x288>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 8116 	bls.w	8000eb4 <__udivmoddi4+0x288>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	443b      	add	r3, r7
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ca0:	45a6      	cmp	lr, r4
 8000ca2:	d909      	bls.n	8000cb8 <__udivmoddi4+0x8c>
 8000ca4:	193c      	adds	r4, r7, r4
 8000ca6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000caa:	f080 8105 	bcs.w	8000eb8 <__udivmoddi4+0x28c>
 8000cae:	45a6      	cmp	lr, r4
 8000cb0:	f240 8102 	bls.w	8000eb8 <__udivmoddi4+0x28c>
 8000cb4:	3802      	subs	r0, #2
 8000cb6:	443c      	add	r4, r7
 8000cb8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbc:	eba4 040e 	sub.w	r4, r4, lr
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	b11d      	cbz	r5, 8000ccc <__udivmoddi4+0xa0>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	b902      	cbnz	r2, 8000cd6 <__udivmoddi4+0xaa>
 8000cd4:	deff      	udf	#255	; 0xff
 8000cd6:	fab2 f282 	clz	r2, r2
 8000cda:	2a00      	cmp	r2, #0
 8000cdc:	d150      	bne.n	8000d80 <__udivmoddi4+0x154>
 8000cde:	1bcb      	subs	r3, r1, r7
 8000ce0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ce4:	fa1f f887 	uxth.w	r8, r7
 8000ce8:	2601      	movs	r6, #1
 8000cea:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cee:	0c21      	lsrs	r1, r4, #16
 8000cf0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cf4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf8:	fb08 f30c 	mul.w	r3, r8, ip
 8000cfc:	428b      	cmp	r3, r1
 8000cfe:	d907      	bls.n	8000d10 <__udivmoddi4+0xe4>
 8000d00:	1879      	adds	r1, r7, r1
 8000d02:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d06:	d202      	bcs.n	8000d0e <__udivmoddi4+0xe2>
 8000d08:	428b      	cmp	r3, r1
 8000d0a:	f200 80e9 	bhi.w	8000ee0 <__udivmoddi4+0x2b4>
 8000d0e:	4684      	mov	ip, r0
 8000d10:	1ac9      	subs	r1, r1, r3
 8000d12:	b2a3      	uxth	r3, r4
 8000d14:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d18:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d1c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d20:	fb08 f800 	mul.w	r8, r8, r0
 8000d24:	45a0      	cmp	r8, r4
 8000d26:	d907      	bls.n	8000d38 <__udivmoddi4+0x10c>
 8000d28:	193c      	adds	r4, r7, r4
 8000d2a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2e:	d202      	bcs.n	8000d36 <__udivmoddi4+0x10a>
 8000d30:	45a0      	cmp	r8, r4
 8000d32:	f200 80d9 	bhi.w	8000ee8 <__udivmoddi4+0x2bc>
 8000d36:	4618      	mov	r0, r3
 8000d38:	eba4 0408 	sub.w	r4, r4, r8
 8000d3c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d40:	e7bf      	b.n	8000cc2 <__udivmoddi4+0x96>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d909      	bls.n	8000d5a <__udivmoddi4+0x12e>
 8000d46:	2d00      	cmp	r5, #0
 8000d48:	f000 80b1 	beq.w	8000eae <__udivmoddi4+0x282>
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d52:	4630      	mov	r0, r6
 8000d54:	4631      	mov	r1, r6
 8000d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5a:	fab3 f683 	clz	r6, r3
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	d14a      	bne.n	8000df8 <__udivmoddi4+0x1cc>
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d302      	bcc.n	8000d6c <__udivmoddi4+0x140>
 8000d66:	4282      	cmp	r2, r0
 8000d68:	f200 80b8 	bhi.w	8000edc <__udivmoddi4+0x2b0>
 8000d6c:	1a84      	subs	r4, r0, r2
 8000d6e:	eb61 0103 	sbc.w	r1, r1, r3
 8000d72:	2001      	movs	r0, #1
 8000d74:	468c      	mov	ip, r1
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	d0a8      	beq.n	8000ccc <__udivmoddi4+0xa0>
 8000d7a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d7e:	e7a5      	b.n	8000ccc <__udivmoddi4+0xa0>
 8000d80:	f1c2 0320 	rsb	r3, r2, #32
 8000d84:	fa20 f603 	lsr.w	r6, r0, r3
 8000d88:	4097      	lsls	r7, r2
 8000d8a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d8e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d92:	40d9      	lsrs	r1, r3
 8000d94:	4330      	orrs	r0, r6
 8000d96:	0c03      	lsrs	r3, r0, #16
 8000d98:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d9c:	fa1f f887 	uxth.w	r8, r7
 8000da0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000da4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da8:	fb06 f108 	mul.w	r1, r6, r8
 8000dac:	4299      	cmp	r1, r3
 8000dae:	fa04 f402 	lsl.w	r4, r4, r2
 8000db2:	d909      	bls.n	8000dc8 <__udivmoddi4+0x19c>
 8000db4:	18fb      	adds	r3, r7, r3
 8000db6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000dba:	f080 808d 	bcs.w	8000ed8 <__udivmoddi4+0x2ac>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 808a 	bls.w	8000ed8 <__udivmoddi4+0x2ac>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	443b      	add	r3, r7
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b281      	uxth	r1, r0
 8000dcc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dd0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dd4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd8:	fb00 f308 	mul.w	r3, r0, r8
 8000ddc:	428b      	cmp	r3, r1
 8000dde:	d907      	bls.n	8000df0 <__udivmoddi4+0x1c4>
 8000de0:	1879      	adds	r1, r7, r1
 8000de2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000de6:	d273      	bcs.n	8000ed0 <__udivmoddi4+0x2a4>
 8000de8:	428b      	cmp	r3, r1
 8000dea:	d971      	bls.n	8000ed0 <__udivmoddi4+0x2a4>
 8000dec:	3802      	subs	r0, #2
 8000dee:	4439      	add	r1, r7
 8000df0:	1acb      	subs	r3, r1, r3
 8000df2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000df6:	e778      	b.n	8000cea <__udivmoddi4+0xbe>
 8000df8:	f1c6 0c20 	rsb	ip, r6, #32
 8000dfc:	fa03 f406 	lsl.w	r4, r3, r6
 8000e00:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e04:	431c      	orrs	r4, r3
 8000e06:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e0a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e0e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e12:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e16:	431f      	orrs	r7, r3
 8000e18:	0c3b      	lsrs	r3, r7, #16
 8000e1a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e1e:	fa1f f884 	uxth.w	r8, r4
 8000e22:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e26:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e2a:	fb09 fa08 	mul.w	sl, r9, r8
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	fa02 f206 	lsl.w	r2, r2, r6
 8000e34:	fa00 f306 	lsl.w	r3, r0, r6
 8000e38:	d908      	bls.n	8000e4c <__udivmoddi4+0x220>
 8000e3a:	1861      	adds	r1, r4, r1
 8000e3c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e40:	d248      	bcs.n	8000ed4 <__udivmoddi4+0x2a8>
 8000e42:	458a      	cmp	sl, r1
 8000e44:	d946      	bls.n	8000ed4 <__udivmoddi4+0x2a8>
 8000e46:	f1a9 0902 	sub.w	r9, r9, #2
 8000e4a:	4421      	add	r1, r4
 8000e4c:	eba1 010a 	sub.w	r1, r1, sl
 8000e50:	b2bf      	uxth	r7, r7
 8000e52:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e56:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e5a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e5e:	fb00 f808 	mul.w	r8, r0, r8
 8000e62:	45b8      	cmp	r8, r7
 8000e64:	d907      	bls.n	8000e76 <__udivmoddi4+0x24a>
 8000e66:	19e7      	adds	r7, r4, r7
 8000e68:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e6c:	d22e      	bcs.n	8000ecc <__udivmoddi4+0x2a0>
 8000e6e:	45b8      	cmp	r8, r7
 8000e70:	d92c      	bls.n	8000ecc <__udivmoddi4+0x2a0>
 8000e72:	3802      	subs	r0, #2
 8000e74:	4427      	add	r7, r4
 8000e76:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e7a:	eba7 0708 	sub.w	r7, r7, r8
 8000e7e:	fba0 8902 	umull	r8, r9, r0, r2
 8000e82:	454f      	cmp	r7, r9
 8000e84:	46c6      	mov	lr, r8
 8000e86:	4649      	mov	r1, r9
 8000e88:	d31a      	bcc.n	8000ec0 <__udivmoddi4+0x294>
 8000e8a:	d017      	beq.n	8000ebc <__udivmoddi4+0x290>
 8000e8c:	b15d      	cbz	r5, 8000ea6 <__udivmoddi4+0x27a>
 8000e8e:	ebb3 020e 	subs.w	r2, r3, lr
 8000e92:	eb67 0701 	sbc.w	r7, r7, r1
 8000e96:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e9a:	40f2      	lsrs	r2, r6
 8000e9c:	ea4c 0202 	orr.w	r2, ip, r2
 8000ea0:	40f7      	lsrs	r7, r6
 8000ea2:	e9c5 2700 	strd	r2, r7, [r5]
 8000ea6:	2600      	movs	r6, #0
 8000ea8:	4631      	mov	r1, r6
 8000eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eae:	462e      	mov	r6, r5
 8000eb0:	4628      	mov	r0, r5
 8000eb2:	e70b      	b.n	8000ccc <__udivmoddi4+0xa0>
 8000eb4:	4606      	mov	r6, r0
 8000eb6:	e6e9      	b.n	8000c8c <__udivmoddi4+0x60>
 8000eb8:	4618      	mov	r0, r3
 8000eba:	e6fd      	b.n	8000cb8 <__udivmoddi4+0x8c>
 8000ebc:	4543      	cmp	r3, r8
 8000ebe:	d2e5      	bcs.n	8000e8c <__udivmoddi4+0x260>
 8000ec0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ec4:	eb69 0104 	sbc.w	r1, r9, r4
 8000ec8:	3801      	subs	r0, #1
 8000eca:	e7df      	b.n	8000e8c <__udivmoddi4+0x260>
 8000ecc:	4608      	mov	r0, r1
 8000ece:	e7d2      	b.n	8000e76 <__udivmoddi4+0x24a>
 8000ed0:	4660      	mov	r0, ip
 8000ed2:	e78d      	b.n	8000df0 <__udivmoddi4+0x1c4>
 8000ed4:	4681      	mov	r9, r0
 8000ed6:	e7b9      	b.n	8000e4c <__udivmoddi4+0x220>
 8000ed8:	4666      	mov	r6, ip
 8000eda:	e775      	b.n	8000dc8 <__udivmoddi4+0x19c>
 8000edc:	4630      	mov	r0, r6
 8000ede:	e74a      	b.n	8000d76 <__udivmoddi4+0x14a>
 8000ee0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ee4:	4439      	add	r1, r7
 8000ee6:	e713      	b.n	8000d10 <__udivmoddi4+0xe4>
 8000ee8:	3802      	subs	r0, #2
 8000eea:	443c      	add	r4, r7
 8000eec:	e724      	b.n	8000d38 <__udivmoddi4+0x10c>
 8000eee:	bf00      	nop

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000efa:	463b      	mov	r3, r7
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f06:	4b21      	ldr	r3, [pc, #132]	; (8000f8c <MX_ADC1_Init+0x98>)
 8000f08:	4a21      	ldr	r2, [pc, #132]	; (8000f90 <MX_ADC1_Init+0x9c>)
 8000f0a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000f0c:	4b1f      	ldr	r3, [pc, #124]	; (8000f8c <MX_ADC1_Init+0x98>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f12:	4b1e      	ldr	r3, [pc, #120]	; (8000f8c <MX_ADC1_Init+0x98>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f18:	4b1c      	ldr	r3, [pc, #112]	; (8000f8c <MX_ADC1_Init+0x98>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f1e:	4b1b      	ldr	r3, [pc, #108]	; (8000f8c <MX_ADC1_Init+0x98>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f24:	4b19      	ldr	r3, [pc, #100]	; (8000f8c <MX_ADC1_Init+0x98>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f2c:	4b17      	ldr	r3, [pc, #92]	; (8000f8c <MX_ADC1_Init+0x98>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f32:	4b16      	ldr	r3, [pc, #88]	; (8000f8c <MX_ADC1_Init+0x98>)
 8000f34:	4a17      	ldr	r2, [pc, #92]	; (8000f94 <MX_ADC1_Init+0xa0>)
 8000f36:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f38:	4b14      	ldr	r3, [pc, #80]	; (8000f8c <MX_ADC1_Init+0x98>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f3e:	4b13      	ldr	r3, [pc, #76]	; (8000f8c <MX_ADC1_Init+0x98>)
 8000f40:	2201      	movs	r2, #1
 8000f42:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f44:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <MX_ADC1_Init+0x98>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f4c:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <MX_ADC1_Init+0x98>)
 8000f4e:	2201      	movs	r2, #1
 8000f50:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f52:	480e      	ldr	r0, [pc, #56]	; (8000f8c <MX_ADC1_Init+0x98>)
 8000f54:	f001 fb2a 	bl	80025ac <HAL_ADC_Init>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000f5e:	f000 fa8b 	bl	8001478 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000f62:	2303      	movs	r3, #3
 8000f64:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f66:	2301      	movs	r3, #1
 8000f68:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f6e:	463b      	mov	r3, r7
 8000f70:	4619      	mov	r1, r3
 8000f72:	4806      	ldr	r0, [pc, #24]	; (8000f8c <MX_ADC1_Init+0x98>)
 8000f74:	f001 fcc4 	bl	8002900 <HAL_ADC_ConfigChannel>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000f7e:	f000 fa7b 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f82:	bf00      	nop
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	200000f0 	.word	0x200000f0
 8000f90:	40012000 	.word	0x40012000
 8000f94:	0f000001 	.word	0x0f000001

08000f98 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08a      	sub	sp, #40	; 0x28
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa0:	f107 0314 	add.w	r3, r7, #20
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
 8000fae:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a15      	ldr	r2, [pc, #84]	; (800100c <HAL_ADC_MspInit+0x74>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d123      	bne.n	8001002 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fba:	4b15      	ldr	r3, [pc, #84]	; (8001010 <HAL_ADC_MspInit+0x78>)
 8000fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fbe:	4a14      	ldr	r2, [pc, #80]	; (8001010 <HAL_ADC_MspInit+0x78>)
 8000fc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fc4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fc6:	4b12      	ldr	r3, [pc, #72]	; (8001010 <HAL_ADC_MspInit+0x78>)
 8000fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fce:	613b      	str	r3, [r7, #16]
 8000fd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd2:	4b0f      	ldr	r3, [pc, #60]	; (8001010 <HAL_ADC_MspInit+0x78>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	4a0e      	ldr	r2, [pc, #56]	; (8001010 <HAL_ADC_MspInit+0x78>)
 8000fd8:	f043 0301 	orr.w	r3, r3, #1
 8000fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fde:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <HAL_ADC_MspInit+0x78>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000fea:	2308      	movs	r3, #8
 8000fec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fee:	2303      	movs	r3, #3
 8000ff0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff6:	f107 0314 	add.w	r3, r7, #20
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4805      	ldr	r0, [pc, #20]	; (8001014 <HAL_ADC_MspInit+0x7c>)
 8000ffe:	f002 f873 	bl	80030e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001002:	bf00      	nop
 8001004:	3728      	adds	r7, #40	; 0x28
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40012000 	.word	0x40012000
 8001010:	40023800 	.word	0x40023800
 8001014:	40020000 	.word	0x40020000

08001018 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b08e      	sub	sp, #56	; 0x38
 800101c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	605a      	str	r2, [r3, #4]
 8001028:	609a      	str	r2, [r3, #8]
 800102a:	60da      	str	r2, [r3, #12]
 800102c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800102e:	4b95      	ldr	r3, [pc, #596]	; (8001284 <MX_GPIO_Init+0x26c>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	4a94      	ldr	r2, [pc, #592]	; (8001284 <MX_GPIO_Init+0x26c>)
 8001034:	f043 0304 	orr.w	r3, r3, #4
 8001038:	6313      	str	r3, [r2, #48]	; 0x30
 800103a:	4b92      	ldr	r3, [pc, #584]	; (8001284 <MX_GPIO_Init+0x26c>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	f003 0304 	and.w	r3, r3, #4
 8001042:	623b      	str	r3, [r7, #32]
 8001044:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001046:	4b8f      	ldr	r3, [pc, #572]	; (8001284 <MX_GPIO_Init+0x26c>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	4a8e      	ldr	r2, [pc, #568]	; (8001284 <MX_GPIO_Init+0x26c>)
 800104c:	f043 0320 	orr.w	r3, r3, #32
 8001050:	6313      	str	r3, [r2, #48]	; 0x30
 8001052:	4b8c      	ldr	r3, [pc, #560]	; (8001284 <MX_GPIO_Init+0x26c>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	f003 0320 	and.w	r3, r3, #32
 800105a:	61fb      	str	r3, [r7, #28]
 800105c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800105e:	4b89      	ldr	r3, [pc, #548]	; (8001284 <MX_GPIO_Init+0x26c>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	4a88      	ldr	r2, [pc, #544]	; (8001284 <MX_GPIO_Init+0x26c>)
 8001064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001068:	6313      	str	r3, [r2, #48]	; 0x30
 800106a:	4b86      	ldr	r3, [pc, #536]	; (8001284 <MX_GPIO_Init+0x26c>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001072:	61bb      	str	r3, [r7, #24]
 8001074:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001076:	4b83      	ldr	r3, [pc, #524]	; (8001284 <MX_GPIO_Init+0x26c>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	4a82      	ldr	r2, [pc, #520]	; (8001284 <MX_GPIO_Init+0x26c>)
 800107c:	f043 0301 	orr.w	r3, r3, #1
 8001080:	6313      	str	r3, [r2, #48]	; 0x30
 8001082:	4b80      	ldr	r3, [pc, #512]	; (8001284 <MX_GPIO_Init+0x26c>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	617b      	str	r3, [r7, #20]
 800108c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800108e:	4b7d      	ldr	r3, [pc, #500]	; (8001284 <MX_GPIO_Init+0x26c>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	4a7c      	ldr	r2, [pc, #496]	; (8001284 <MX_GPIO_Init+0x26c>)
 8001094:	f043 0302 	orr.w	r3, r3, #2
 8001098:	6313      	str	r3, [r2, #48]	; 0x30
 800109a:	4b7a      	ldr	r3, [pc, #488]	; (8001284 <MX_GPIO_Init+0x26c>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	f003 0302 	and.w	r3, r3, #2
 80010a2:	613b      	str	r3, [r7, #16]
 80010a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010a6:	4b77      	ldr	r3, [pc, #476]	; (8001284 <MX_GPIO_Init+0x26c>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	4a76      	ldr	r2, [pc, #472]	; (8001284 <MX_GPIO_Init+0x26c>)
 80010ac:	f043 0310 	orr.w	r3, r3, #16
 80010b0:	6313      	str	r3, [r2, #48]	; 0x30
 80010b2:	4b74      	ldr	r3, [pc, #464]	; (8001284 <MX_GPIO_Init+0x26c>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	f003 0310 	and.w	r3, r3, #16
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010be:	4b71      	ldr	r3, [pc, #452]	; (8001284 <MX_GPIO_Init+0x26c>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	4a70      	ldr	r2, [pc, #448]	; (8001284 <MX_GPIO_Init+0x26c>)
 80010c4:	f043 0308 	orr.w	r3, r3, #8
 80010c8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ca:	4b6e      	ldr	r3, [pc, #440]	; (8001284 <MX_GPIO_Init+0x26c>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	f003 0308 	and.w	r3, r3, #8
 80010d2:	60bb      	str	r3, [r7, #8]
 80010d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010d6:	4b6b      	ldr	r3, [pc, #428]	; (8001284 <MX_GPIO_Init+0x26c>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	4a6a      	ldr	r2, [pc, #424]	; (8001284 <MX_GPIO_Init+0x26c>)
 80010dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010e0:	6313      	str	r3, [r2, #48]	; 0x30
 80010e2:	4b68      	ldr	r3, [pc, #416]	; (8001284 <MX_GPIO_Init+0x26c>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010ea:	607b      	str	r3, [r7, #4]
 80010ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, D6_Pin|D7_Pin|RS_Pin, GPIO_PIN_RESET);
 80010ee:	2200      	movs	r2, #0
 80010f0:	f44f 6185 	mov.w	r1, #1064	; 0x428
 80010f4:	4864      	ldr	r0, [pc, #400]	; (8001288 <MX_GPIO_Init+0x270>)
 80010f6:	f002 f9a3 	bl	8003440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, D4_Pin|D5_Pin, GPIO_PIN_RESET);
 80010fa:	2200      	movs	r2, #0
 80010fc:	2109      	movs	r1, #9
 80010fe:	4863      	ldr	r0, [pc, #396]	; (800128c <MX_GPIO_Init+0x274>)
 8001100:	f002 f99e 	bl	8003440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001104:	2200      	movs	r2, #0
 8001106:	f244 0181 	movw	r1, #16513	; 0x4081
 800110a:	4861      	ldr	r0, [pc, #388]	; (8001290 <MX_GPIO_Init+0x278>)
 800110c:	f002 f998 	bl	8003440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001110:	2200      	movs	r2, #0
 8001112:	2140      	movs	r1, #64	; 0x40
 8001114:	485f      	ldr	r0, [pc, #380]	; (8001294 <MX_GPIO_Init+0x27c>)
 8001116:	f002 f993 	bl	8003440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 800111a:	2200      	movs	r2, #0
 800111c:	2180      	movs	r1, #128	; 0x80
 800111e:	485e      	ldr	r0, [pc, #376]	; (8001298 <MX_GPIO_Init+0x280>)
 8001120:	f002 f98e 	bl	8003440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8001124:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001128:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800112a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800112e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001134:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001138:	4619      	mov	r1, r3
 800113a:	4854      	ldr	r0, [pc, #336]	; (800128c <MX_GPIO_Init+0x274>)
 800113c:	f001 ffd4 	bl	80030e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = D6_Pin|D7_Pin|RS_Pin;
 8001140:	f44f 6385 	mov.w	r3, #1064	; 0x428
 8001144:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001146:	2301      	movs	r3, #1
 8001148:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114e:	2300      	movs	r3, #0
 8001150:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001152:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001156:	4619      	mov	r1, r3
 8001158:	484b      	ldr	r0, [pc, #300]	; (8001288 <MX_GPIO_Init+0x270>)
 800115a:	f001 ffc5 	bl	80030e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin;
 800115e:	2309      	movs	r3, #9
 8001160:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001162:	2301      	movs	r3, #1
 8001164:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001166:	2300      	movs	r3, #0
 8001168:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116a:	2300      	movs	r3, #0
 800116c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800116e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001172:	4619      	mov	r1, r3
 8001174:	4845      	ldr	r0, [pc, #276]	; (800128c <MX_GPIO_Init+0x274>)
 8001176:	f001 ffb7 	bl	80030e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800117a:	2332      	movs	r3, #50	; 0x32
 800117c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117e:	2302      	movs	r3, #2
 8001180:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001186:	2303      	movs	r3, #3
 8001188:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800118a:	230b      	movs	r3, #11
 800118c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800118e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001192:	4619      	mov	r1, r3
 8001194:	483d      	ldr	r0, [pc, #244]	; (800128c <MX_GPIO_Init+0x274>)
 8001196:	f001 ffa7 	bl	80030e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800119a:	2386      	movs	r3, #134	; 0x86
 800119c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119e:	2302      	movs	r3, #2
 80011a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a6:	2303      	movs	r3, #3
 80011a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011aa:	230b      	movs	r3, #11
 80011ac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011b2:	4619      	mov	r1, r3
 80011b4:	4839      	ldr	r0, [pc, #228]	; (800129c <MX_GPIO_Init+0x284>)
 80011b6:	f001 ff97 	bl	80030e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80011ba:	f244 0381 	movw	r3, #16513	; 0x4081
 80011be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c0:	2301      	movs	r3, #1
 80011c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c4:	2300      	movs	r3, #0
 80011c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c8:	2300      	movs	r3, #0
 80011ca:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d0:	4619      	mov	r1, r3
 80011d2:	482f      	ldr	r0, [pc, #188]	; (8001290 <MX_GPIO_Init+0x278>)
 80011d4:	f001 ff88 	bl	80030e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80011d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011de:	2302      	movs	r3, #2
 80011e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e6:	2303      	movs	r3, #3
 80011e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011ea:	230b      	movs	r3, #11
 80011ec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80011ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011f2:	4619      	mov	r1, r3
 80011f4:	4826      	ldr	r0, [pc, #152]	; (8001290 <MX_GPIO_Init+0x278>)
 80011f6:	f001 ff77 	bl	80030e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80011fa:	2340      	movs	r3, #64	; 0x40
 80011fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011fe:	2301      	movs	r3, #1
 8001200:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001206:	2300      	movs	r3, #0
 8001208:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800120a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800120e:	4619      	mov	r1, r3
 8001210:	4820      	ldr	r0, [pc, #128]	; (8001294 <MX_GPIO_Init+0x27c>)
 8001212:	f001 ff69 	bl	80030e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001216:	2380      	movs	r3, #128	; 0x80
 8001218:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800121a:	2300      	movs	r3, #0
 800121c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001222:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001226:	4619      	mov	r1, r3
 8001228:	481a      	ldr	r0, [pc, #104]	; (8001294 <MX_GPIO_Init+0x27c>)
 800122a:	f001 ff5d 	bl	80030e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EN_Pin;
 800122e:	2380      	movs	r3, #128	; 0x80
 8001230:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001232:	2301      	movs	r3, #1
 8001234:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	2300      	movs	r3, #0
 8001238:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123a:	2300      	movs	r3, #0
 800123c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(EN_GPIO_Port, &GPIO_InitStruct);
 800123e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001242:	4619      	mov	r1, r3
 8001244:	4814      	ldr	r0, [pc, #80]	; (8001298 <MX_GPIO_Init+0x280>)
 8001246:	f001 ff4f 	bl	80030e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800124a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800124e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001250:	2302      	movs	r3, #2
 8001252:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	2300      	movs	r3, #0
 8001256:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001258:	2303      	movs	r3, #3
 800125a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800125c:	230b      	movs	r3, #11
 800125e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001260:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001264:	4619      	mov	r1, r3
 8001266:	480b      	ldr	r0, [pc, #44]	; (8001294 <MX_GPIO_Init+0x27c>)
 8001268:	f001 ff3e 	bl	80030e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800126c:	2200      	movs	r2, #0
 800126e:	2100      	movs	r1, #0
 8001270:	2028      	movs	r0, #40	; 0x28
 8001272:	f001 fe70 	bl	8002f56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001276:	2028      	movs	r0, #40	; 0x28
 8001278:	f001 fe89 	bl	8002f8e <HAL_NVIC_EnableIRQ>

}
 800127c:	bf00      	nop
 800127e:	3738      	adds	r7, #56	; 0x38
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	40023800 	.word	0x40023800
 8001288:	40021400 	.word	0x40021400
 800128c:	40020800 	.word	0x40020800
 8001290:	40020400 	.word	0x40020400
 8001294:	40021800 	.word	0x40021800
 8001298:	40020c00 	.word	0x40020c00
 800129c:	40020000 	.word	0x40020000

080012a0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == USER_BUTTON_Pin){
 80012aa:	88fb      	ldrh	r3, [r7, #6]
 80012ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80012b0:	d10e      	bne.n	80012d0 <HAL_GPIO_EXTI_Callback+0x30>
		potentiometerEnabled = !potentiometerEnabled;
 80012b2:	4b0a      	ldr	r3, [pc, #40]	; (80012dc <HAL_GPIO_EXTI_Callback+0x3c>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	bf14      	ite	ne
 80012ba:	2301      	movne	r3, #1
 80012bc:	2300      	moveq	r3, #0
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	f083 0301 	eor.w	r3, r3, #1
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	b2da      	uxtb	r2, r3
 80012cc:	4b03      	ldr	r3, [pc, #12]	; (80012dc <HAL_GPIO_EXTI_Callback+0x3c>)
 80012ce:	701a      	strb	r2, [r3, #0]
	}
}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	20000000 	.word	0x20000000

080012e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012e4:	f001 f8e1 	bl	80024aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012e8:	f000 f836 	bl	8001358 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012ec:	f7ff fe94 	bl	8001018 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80012f0:	f000 ff34 	bl	800215c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80012f4:	f001 f826 	bl	8002344 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM4_Init();
 80012f8:	f000 faf6 	bl	80018e8 <MX_TIM4_Init>
  MX_TIM3_Init();
 80012fc:	f000 fa9e 	bl	800183c <MX_TIM3_Init>
  MX_TIM1_Init();
 8001300:	f000 f9f0 	bl	80016e4 <MX_TIM1_Init>
  MX_ADC1_Init();
 8001304:	f7ff fdf6 	bl	8000ef4 <MX_ADC1_Init>
  MX_TIM9_Init();
 8001308:	f000 fb3c 	bl	8001984 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800130c:	2100      	movs	r1, #0
 800130e:	480c      	ldr	r0, [pc, #48]	; (8001340 <main+0x60>)
 8001310:	f003 fbe8 	bl	8004ae4 <HAL_TIM_PWM_Start>
  // Initialized PID
  InitPID();
 8001314:	f000 f8b8 	bl	8001488 <InitPID>

  // Initializing peripherials
  HAL_TIM_Base_Start_IT(&htim9);
 8001318:	480a      	ldr	r0, [pc, #40]	; (8001344 <main+0x64>)
 800131a:	f003 fb09 	bl	8004930 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart3, usart_Message, 5);
 800131e:	2205      	movs	r2, #5
 8001320:	4909      	ldr	r1, [pc, #36]	; (8001348 <main+0x68>)
 8001322:	480a      	ldr	r0, [pc, #40]	; (800134c <main+0x6c>)
 8001324:	f004 fefb 	bl	800611e <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8001328:	4809      	ldr	r0, [pc, #36]	; (8001350 <main+0x70>)
 800132a:	f003 fb01 	bl	8004930 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1);
 800132e:	2100      	movs	r1, #0
 8001330:	4808      	ldr	r0, [pc, #32]	; (8001354 <main+0x74>)
 8001332:	f003 fd77 	bl	8004e24 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_2);
 8001336:	2104      	movs	r1, #4
 8001338:	4806      	ldr	r0, [pc, #24]	; (8001354 <main+0x74>)
 800133a:	f003 fd73 	bl	8004e24 <HAL_TIM_Encoder_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1) {
 800133e:	e7fe      	b.n	800133e <main+0x5e>
 8001340:	2000025c 	.word	0x2000025c
 8001344:	200002a8 	.word	0x200002a8
 8001348:	200000e0 	.word	0x200000e0
 800134c:	200002f4 	.word	0x200002f4
 8001350:	200001c0 	.word	0x200001c0
 8001354:	2000020c 	.word	0x2000020c

08001358 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b0b4      	sub	sp, #208	; 0xd0
 800135c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800135e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001362:	2230      	movs	r2, #48	; 0x30
 8001364:	2100      	movs	r1, #0
 8001366:	4618      	mov	r0, r3
 8001368:	f006 fc00 	bl	8007b6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800136c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	60da      	str	r2, [r3, #12]
 800137a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800137c:	f107 0308 	add.w	r3, r7, #8
 8001380:	2284      	movs	r2, #132	; 0x84
 8001382:	2100      	movs	r1, #0
 8001384:	4618      	mov	r0, r3
 8001386:	f006 fbf1 	bl	8007b6c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800138a:	f002 f9d3 	bl	8003734 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800138e:	4b37      	ldr	r3, [pc, #220]	; (800146c <SystemClock_Config+0x114>)
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001392:	4a36      	ldr	r2, [pc, #216]	; (800146c <SystemClock_Config+0x114>)
 8001394:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001398:	6413      	str	r3, [r2, #64]	; 0x40
 800139a:	4b34      	ldr	r3, [pc, #208]	; (800146c <SystemClock_Config+0x114>)
 800139c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013a2:	607b      	str	r3, [r7, #4]
 80013a4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80013a6:	4b32      	ldr	r3, [pc, #200]	; (8001470 <SystemClock_Config+0x118>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80013ae:	4a30      	ldr	r2, [pc, #192]	; (8001470 <SystemClock_Config+0x118>)
 80013b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013b4:	6013      	str	r3, [r2, #0]
 80013b6:	4b2e      	ldr	r3, [pc, #184]	; (8001470 <SystemClock_Config+0x118>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013be:	603b      	str	r3, [r7, #0]
 80013c0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013c2:	2301      	movs	r3, #1
 80013c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80013c8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80013cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013d0:	2302      	movs	r3, #2
 80013d2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 80013de:	2304      	movs	r3, #4
 80013e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 80013e4:	2348      	movs	r3, #72	; 0x48
 80013e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013ea:	2302      	movs	r3, #2
 80013ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80013f0:	2303      	movs	r3, #3
 80013f2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013f6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80013fa:	4618      	mov	r0, r3
 80013fc:	f002 f9aa 	bl	8003754 <HAL_RCC_OscConfig>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001406:	f000 f837 	bl	8001478 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800140a:	230f      	movs	r3, #15
 800140c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001410:	2302      	movs	r3, #2
 8001412:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001416:	2300      	movs	r3, #0
 8001418:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800141c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001420:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001424:	2300      	movs	r3, #0
 8001426:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800142a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800142e:	2102      	movs	r1, #2
 8001430:	4618      	mov	r0, r3
 8001432:	f002 fc33 	bl	8003c9c <HAL_RCC_ClockConfig>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 800143c:	f000 f81c 	bl	8001478 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8001440:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <SystemClock_Config+0x11c>)
 8001442:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001444:	2300      	movs	r3, #0
 8001446:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001448:	2300      	movs	r3, #0
 800144a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800144e:	f107 0308 	add.w	r3, r7, #8
 8001452:	4618      	mov	r0, r3
 8001454:	f002 fe24 	bl	80040a0 <HAL_RCCEx_PeriphCLKConfig>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <SystemClock_Config+0x10a>
  {
    Error_Handler();
 800145e:	f000 f80b 	bl	8001478 <Error_Handler>
  }
}
 8001462:	bf00      	nop
 8001464:	37d0      	adds	r7, #208	; 0xd0
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40023800 	.word	0x40023800
 8001470:	40007000 	.word	0x40007000
 8001474:	00200100 	.word	0x00200100

08001478 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800147c:	b672      	cpsid	i
}
 800147e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001480:	e7fe      	b.n	8001480 <Error_Handler+0x8>
 8001482:	0000      	movs	r0, r0
 8001484:	0000      	movs	r0, r0
	...

08001488 <InitPID>:
#include "pid.h"

PID pidController;
uint32_t measurmentsVector[10];

void InitPID(){
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
	pidController.Kp = 0.2006;
 800148c:	4934      	ldr	r1, [pc, #208]	; (8001560 <InitPID+0xd8>)
 800148e:	a32a      	add	r3, pc, #168	; (adr r3, 8001538 <InitPID+0xb0>)
 8001490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001494:	e9c1 2304 	strd	r2, r3, [r1, #16]
	pidController.Kd = 0.009549517991959;
 8001498:	4931      	ldr	r1, [pc, #196]	; (8001560 <InitPID+0xd8>)
 800149a:	a329      	add	r3, pc, #164	; (adr r3, 8001540 <InitPID+0xb8>)
 800149c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a0:	e9c1 2308 	strd	r2, r3, [r1, #32]
	pidController.Ki = 23.700532809609300;
 80014a4:	492e      	ldr	r1, [pc, #184]	; (8001560 <InitPID+0xd8>)
 80014a6:	a328      	add	r3, pc, #160	; (adr r3, 8001548 <InitPID+0xc0>)
 80014a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ac:	e9c1 2306 	strd	r2, r3, [r1, #24]
	pidController.N = 4371;
 80014b0:	492b      	ldr	r1, [pc, #172]	; (8001560 <InitPID+0xd8>)
 80014b2:	a327      	add	r3, pc, #156	; (adr r3, 8001550 <InitPID+0xc8>)
 80014b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b8:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	pidController.sampleTime = 0.001;
 80014bc:	4928      	ldr	r1, [pc, #160]	; (8001560 <InitPID+0xd8>)
 80014be:	a326      	add	r3, pc, #152	; (adr r3, 8001558 <InitPID+0xd0>)
 80014c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c4:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	pidController.referenceSignal = 0;
 80014c8:	4925      	ldr	r1, [pc, #148]	; (8001560 <InitPID+0xd8>)
 80014ca:	f04f 0200 	mov.w	r2, #0
 80014ce:	f04f 0300 	mov.w	r3, #0
 80014d2:	e9c1 2300 	strd	r2, r3, [r1]
	pidController.controlError[0] = 0;
 80014d6:	4922      	ldr	r1, [pc, #136]	; (8001560 <InitPID+0xd8>)
 80014d8:	f04f 0200 	mov.w	r2, #0
 80014dc:	f04f 0300 	mov.w	r3, #0
 80014e0:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	pidController.controlError[1] = 0;
 80014e4:	491e      	ldr	r1, [pc, #120]	; (8001560 <InitPID+0xd8>)
 80014e6:	f04f 0200 	mov.w	r2, #0
 80014ea:	f04f 0300 	mov.w	r3, #0
 80014ee:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	pidController.measuredSpeed = 0;
 80014f2:	491b      	ldr	r1, [pc, #108]	; (8001560 <InitPID+0xd8>)
 80014f4:	f04f 0200 	mov.w	r2, #0
 80014f8:	f04f 0300 	mov.w	r3, #0
 80014fc:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	pidController.sumOfIntegral = 0;
 8001500:	4917      	ldr	r1, [pc, #92]	; (8001560 <InitPID+0xd8>)
 8001502:	f04f 0200 	mov.w	r2, #0
 8001506:	f04f 0300 	mov.w	r3, #0
 800150a:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	pidController.previousD = 0;
 800150e:	4914      	ldr	r1, [pc, #80]	; (8001560 <InitPID+0xd8>)
 8001510:	f04f 0200 	mov.w	r2, #0
 8001514:	f04f 0300 	mov.w	r3, #0
 8001518:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	pidController.controlSignal = 0;
 800151c:	4910      	ldr	r1, [pc, #64]	; (8001560 <InitPID+0xd8>)
 800151e:	f04f 0200 	mov.w	r2, #0
 8001522:	f04f 0300 	mov.w	r3, #0
 8001526:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 800152a:	bf00      	nop
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	f3af 8000 	nop.w
 8001538:	c3c9eecc 	.word	0xc3c9eecc
 800153c:	3fc9ad42 	.word	0x3fc9ad42
 8001540:	9bbe8533 	.word	0x9bbe8533
 8001544:	3f838eb2 	.word	0x3f838eb2
 8001548:	1e430c04 	.word	0x1e430c04
 800154c:	4037b356 	.word	0x4037b356
 8001550:	00000000 	.word	0x00000000
 8001554:	40b11300 	.word	0x40b11300
 8001558:	d2f1a9fc 	.word	0xd2f1a9fc
 800155c:	3f50624d 	.word	0x3f50624d
 8001560:	20000138 	.word	0x20000138

08001564 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800156a:	4b0f      	ldr	r3, [pc, #60]	; (80015a8 <HAL_MspInit+0x44>)
 800156c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156e:	4a0e      	ldr	r2, [pc, #56]	; (80015a8 <HAL_MspInit+0x44>)
 8001570:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001574:	6413      	str	r3, [r2, #64]	; 0x40
 8001576:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <HAL_MspInit+0x44>)
 8001578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800157e:	607b      	str	r3, [r7, #4]
 8001580:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001582:	4b09      	ldr	r3, [pc, #36]	; (80015a8 <HAL_MspInit+0x44>)
 8001584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001586:	4a08      	ldr	r2, [pc, #32]	; (80015a8 <HAL_MspInit+0x44>)
 8001588:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800158c:	6453      	str	r3, [r2, #68]	; 0x44
 800158e:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <HAL_MspInit+0x44>)
 8001590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001592:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001596:	603b      	str	r3, [r7, #0]
 8001598:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800159a:	bf00      	nop
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	40023800 	.word	0x40023800

080015ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015b0:	e7fe      	b.n	80015b0 <NMI_Handler+0x4>

080015b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015b2:	b480      	push	{r7}
 80015b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015b6:	e7fe      	b.n	80015b6 <HardFault_Handler+0x4>

080015b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015bc:	e7fe      	b.n	80015bc <MemManage_Handler+0x4>

080015be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015be:	b480      	push	{r7}
 80015c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015c2:	e7fe      	b.n	80015c2 <BusFault_Handler+0x4>

080015c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015c8:	e7fe      	b.n	80015c8 <UsageFault_Handler+0x4>

080015ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015ca:	b480      	push	{r7}
 80015cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015ce:	bf00      	nop
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015dc:	bf00      	nop
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr

080015e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015e6:	b480      	push	{r7}
 80015e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015f8:	f000 ff94 	bl	8002524 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015fc:	bf00      	nop
 80015fe:	bd80      	pop	{r7, pc}

08001600 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001604:	4803      	ldr	r0, [pc, #12]	; (8001614 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8001606:	f003 fc9b 	bl	8004f40 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 800160a:	4803      	ldr	r0, [pc, #12]	; (8001618 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 800160c:	f003 fc98 	bl	8004f40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001610:	bf00      	nop
 8001612:	bd80      	pop	{r7, pc}
 8001614:	2000025c 	.word	0x2000025c
 8001618:	200002a8 	.word	0x200002a8

0800161c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001620:	4802      	ldr	r0, [pc, #8]	; (800162c <TIM4_IRQHandler+0x10>)
 8001622:	f003 fc8d 	bl	8004f40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	200001c0 	.word	0x200001c0

08001630 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001634:	4802      	ldr	r0, [pc, #8]	; (8001640 <USART3_IRQHandler+0x10>)
 8001636:	f004 fdc1 	bl	80061bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	200002f4 	.word	0x200002f4

08001644 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001648:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800164c:	f001 ff12 	bl	8003474 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001650:	bf00      	nop
 8001652:	bd80      	pop	{r7, pc}

08001654 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800165c:	4a14      	ldr	r2, [pc, #80]	; (80016b0 <_sbrk+0x5c>)
 800165e:	4b15      	ldr	r3, [pc, #84]	; (80016b4 <_sbrk+0x60>)
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001668:	4b13      	ldr	r3, [pc, #76]	; (80016b8 <_sbrk+0x64>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d102      	bne.n	8001676 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001670:	4b11      	ldr	r3, [pc, #68]	; (80016b8 <_sbrk+0x64>)
 8001672:	4a12      	ldr	r2, [pc, #72]	; (80016bc <_sbrk+0x68>)
 8001674:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001676:	4b10      	ldr	r3, [pc, #64]	; (80016b8 <_sbrk+0x64>)
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4413      	add	r3, r2
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	429a      	cmp	r2, r3
 8001682:	d207      	bcs.n	8001694 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001684:	f006 fa40 	bl	8007b08 <__errno>
 8001688:	4603      	mov	r3, r0
 800168a:	220c      	movs	r2, #12
 800168c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800168e:	f04f 33ff 	mov.w	r3, #4294967295
 8001692:	e009      	b.n	80016a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001694:	4b08      	ldr	r3, [pc, #32]	; (80016b8 <_sbrk+0x64>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800169a:	4b07      	ldr	r3, [pc, #28]	; (80016b8 <_sbrk+0x64>)
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4413      	add	r3, r2
 80016a2:	4a05      	ldr	r2, [pc, #20]	; (80016b8 <_sbrk+0x64>)
 80016a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016a6:	68fb      	ldr	r3, [r7, #12]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3718      	adds	r7, #24
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	20050000 	.word	0x20050000
 80016b4:	00000400 	.word	0x00000400
 80016b8:	20000098 	.word	0x20000098
 80016bc:	20000790 	.word	0x20000790

080016c0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016c4:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <SystemInit+0x20>)
 80016c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016ca:	4a05      	ldr	r2, [pc, #20]	; (80016e0 <SystemInit+0x20>)
 80016cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	e000ed00 	.word	0xe000ed00

080016e4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim9;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b09a      	sub	sp, #104	; 0x68
 80016e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80016ee:	2200      	movs	r2, #0
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	605a      	str	r2, [r3, #4]
 80016f4:	609a      	str	r2, [r3, #8]
 80016f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016f8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001704:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	605a      	str	r2, [r3, #4]
 800170e:	609a      	str	r2, [r3, #8]
 8001710:	60da      	str	r2, [r3, #12]
 8001712:	611a      	str	r2, [r3, #16]
 8001714:	615a      	str	r2, [r3, #20]
 8001716:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001718:	1d3b      	adds	r3, r7, #4
 800171a:	222c      	movs	r2, #44	; 0x2c
 800171c:	2100      	movs	r1, #0
 800171e:	4618      	mov	r0, r3
 8001720:	f006 fa24 	bl	8007b6c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001724:	4b43      	ldr	r3, [pc, #268]	; (8001834 <MX_TIM1_Init+0x150>)
 8001726:	4a44      	ldr	r2, [pc, #272]	; (8001838 <MX_TIM1_Init+0x154>)
 8001728:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 800172a:	4b42      	ldr	r3, [pc, #264]	; (8001834 <MX_TIM1_Init+0x150>)
 800172c:	2247      	movs	r2, #71	; 0x47
 800172e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001730:	4b40      	ldr	r3, [pc, #256]	; (8001834 <MX_TIM1_Init+0x150>)
 8001732:	2200      	movs	r2, #0
 8001734:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001736:	4b3f      	ldr	r3, [pc, #252]	; (8001834 <MX_TIM1_Init+0x150>)
 8001738:	f240 32e7 	movw	r2, #999	; 0x3e7
 800173c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800173e:	4b3d      	ldr	r3, [pc, #244]	; (8001834 <MX_TIM1_Init+0x150>)
 8001740:	2200      	movs	r2, #0
 8001742:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001744:	4b3b      	ldr	r3, [pc, #236]	; (8001834 <MX_TIM1_Init+0x150>)
 8001746:	2200      	movs	r2, #0
 8001748:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800174a:	4b3a      	ldr	r3, [pc, #232]	; (8001834 <MX_TIM1_Init+0x150>)
 800174c:	2200      	movs	r2, #0
 800174e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001750:	4838      	ldr	r0, [pc, #224]	; (8001834 <MX_TIM1_Init+0x150>)
 8001752:	f003 f895 	bl	8004880 <HAL_TIM_Base_Init>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800175c:	f7ff fe8c 	bl	8001478 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001760:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001764:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001766:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800176a:	4619      	mov	r1, r3
 800176c:	4831      	ldr	r0, [pc, #196]	; (8001834 <MX_TIM1_Init+0x150>)
 800176e:	f003 fe1b 	bl	80053a8 <HAL_TIM_ConfigClockSource>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001778:	f7ff fe7e 	bl	8001478 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800177c:	482d      	ldr	r0, [pc, #180]	; (8001834 <MX_TIM1_Init+0x150>)
 800177e:	f003 f94f 	bl	8004a20 <HAL_TIM_PWM_Init>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001788:	f7ff fe76 	bl	8001478 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800178c:	2300      	movs	r3, #0
 800178e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001790:	2300      	movs	r3, #0
 8001792:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001794:	2300      	movs	r3, #0
 8001796:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001798:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800179c:	4619      	mov	r1, r3
 800179e:	4825      	ldr	r0, [pc, #148]	; (8001834 <MX_TIM1_Init+0x150>)
 80017a0:	f004 fab2 	bl	8005d08 <HAL_TIMEx_MasterConfigSynchronization>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80017aa:	f7ff fe65 	bl	8001478 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017ae:	2360      	movs	r3, #96	; 0x60
 80017b0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80017b2:	2300      	movs	r3, #0
 80017b4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017b6:	2300      	movs	r3, #0
 80017b8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80017ba:	2300      	movs	r3, #0
 80017bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017be:	2300      	movs	r3, #0
 80017c0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017c2:	2300      	movs	r3, #0
 80017c4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017c6:	2300      	movs	r3, #0
 80017c8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017ce:	2200      	movs	r2, #0
 80017d0:	4619      	mov	r1, r3
 80017d2:	4818      	ldr	r0, [pc, #96]	; (8001834 <MX_TIM1_Init+0x150>)
 80017d4:	f003 fcd4 	bl	8005180 <HAL_TIM_PWM_ConfigChannel>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80017de:	f7ff fe4b 	bl	8001478 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017e2:	2300      	movs	r3, #0
 80017e4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017e6:	2300      	movs	r3, #0
 80017e8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017ea:	2300      	movs	r3, #0
 80017ec:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80017ee:	2300      	movs	r3, #0
 80017f0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017f2:	2300      	movs	r3, #0
 80017f4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017fa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80017fc:	2300      	movs	r3, #0
 80017fe:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001800:	2300      	movs	r3, #0
 8001802:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001804:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001808:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800180a:	2300      	movs	r3, #0
 800180c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800180e:	2300      	movs	r3, #0
 8001810:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001812:	1d3b      	adds	r3, r7, #4
 8001814:	4619      	mov	r1, r3
 8001816:	4807      	ldr	r0, [pc, #28]	; (8001834 <MX_TIM1_Init+0x150>)
 8001818:	f004 fb04 	bl	8005e24 <HAL_TIMEx_ConfigBreakDeadTime>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001822:	f7ff fe29 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001826:	4803      	ldr	r0, [pc, #12]	; (8001834 <MX_TIM1_Init+0x150>)
 8001828:	f000 f9a6 	bl	8001b78 <HAL_TIM_MspPostInit>

}
 800182c:	bf00      	nop
 800182e:	3768      	adds	r7, #104	; 0x68
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	2000025c 	.word	0x2000025c
 8001838:	40010000 	.word	0x40010000

0800183c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b08c      	sub	sp, #48	; 0x30
 8001840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001842:	f107 030c 	add.w	r3, r7, #12
 8001846:	2224      	movs	r2, #36	; 0x24
 8001848:	2100      	movs	r1, #0
 800184a:	4618      	mov	r0, r3
 800184c:	f006 f98e 	bl	8007b6c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001850:	463b      	mov	r3, r7
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	605a      	str	r2, [r3, #4]
 8001858:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800185a:	4b21      	ldr	r3, [pc, #132]	; (80018e0 <MX_TIM3_Init+0xa4>)
 800185c:	4a21      	ldr	r2, [pc, #132]	; (80018e4 <MX_TIM3_Init+0xa8>)
 800185e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001860:	4b1f      	ldr	r3, [pc, #124]	; (80018e0 <MX_TIM3_Init+0xa4>)
 8001862:	2200      	movs	r2, #0
 8001864:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001866:	4b1e      	ldr	r3, [pc, #120]	; (80018e0 <MX_TIM3_Init+0xa4>)
 8001868:	2200      	movs	r2, #0
 800186a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800186c:	4b1c      	ldr	r3, [pc, #112]	; (80018e0 <MX_TIM3_Init+0xa4>)
 800186e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001872:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001874:	4b1a      	ldr	r3, [pc, #104]	; (80018e0 <MX_TIM3_Init+0xa4>)
 8001876:	2200      	movs	r2, #0
 8001878:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800187a:	4b19      	ldr	r3, [pc, #100]	; (80018e0 <MX_TIM3_Init+0xa4>)
 800187c:	2280      	movs	r2, #128	; 0x80
 800187e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001880:	2303      	movs	r3, #3
 8001882:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001884:	2302      	movs	r3, #2
 8001886:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001888:	2301      	movs	r3, #1
 800188a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800188c:	2300      	movs	r3, #0
 800188e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001890:	2300      	movs	r3, #0
 8001892:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001894:	2302      	movs	r3, #2
 8001896:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001898:	2301      	movs	r3, #1
 800189a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800189c:	2300      	movs	r3, #0
 800189e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80018a0:	2300      	movs	r3, #0
 80018a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80018a4:	f107 030c 	add.w	r3, r7, #12
 80018a8:	4619      	mov	r1, r3
 80018aa:	480d      	ldr	r0, [pc, #52]	; (80018e0 <MX_TIM3_Init+0xa4>)
 80018ac:	f003 fa14 	bl	8004cd8 <HAL_TIM_Encoder_Init>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80018b6:	f7ff fddf 	bl	8001478 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ba:	2300      	movs	r3, #0
 80018bc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018be:	2300      	movs	r3, #0
 80018c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018c2:	463b      	mov	r3, r7
 80018c4:	4619      	mov	r1, r3
 80018c6:	4806      	ldr	r0, [pc, #24]	; (80018e0 <MX_TIM3_Init+0xa4>)
 80018c8:	f004 fa1e 	bl	8005d08 <HAL_TIMEx_MasterConfigSynchronization>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80018d2:	f7ff fdd1 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80018d6:	bf00      	nop
 80018d8:	3730      	adds	r7, #48	; 0x30
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	2000020c 	.word	0x2000020c
 80018e4:	40000400 	.word	0x40000400

080018e8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b088      	sub	sp, #32
 80018ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ee:	f107 0310 	add.w	r3, r7, #16
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	605a      	str	r2, [r3, #4]
 80018f8:	609a      	str	r2, [r3, #8]
 80018fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018fc:	1d3b      	adds	r3, r7, #4
 80018fe:	2200      	movs	r2, #0
 8001900:	601a      	str	r2, [r3, #0]
 8001902:	605a      	str	r2, [r3, #4]
 8001904:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001906:	4b1d      	ldr	r3, [pc, #116]	; (800197c <MX_TIM4_Init+0x94>)
 8001908:	4a1d      	ldr	r2, [pc, #116]	; (8001980 <MX_TIM4_Init+0x98>)
 800190a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7199;
 800190c:	4b1b      	ldr	r3, [pc, #108]	; (800197c <MX_TIM4_Init+0x94>)
 800190e:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001912:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001914:	4b19      	ldr	r3, [pc, #100]	; (800197c <MX_TIM4_Init+0x94>)
 8001916:	2200      	movs	r2, #0
 8001918:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 49;
 800191a:	4b18      	ldr	r3, [pc, #96]	; (800197c <MX_TIM4_Init+0x94>)
 800191c:	2231      	movs	r2, #49	; 0x31
 800191e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001920:	4b16      	ldr	r3, [pc, #88]	; (800197c <MX_TIM4_Init+0x94>)
 8001922:	2200      	movs	r2, #0
 8001924:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001926:	4b15      	ldr	r3, [pc, #84]	; (800197c <MX_TIM4_Init+0x94>)
 8001928:	2200      	movs	r2, #0
 800192a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800192c:	4813      	ldr	r0, [pc, #76]	; (800197c <MX_TIM4_Init+0x94>)
 800192e:	f002 ffa7 	bl	8004880 <HAL_TIM_Base_Init>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001938:	f7ff fd9e 	bl	8001478 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800193c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001940:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001942:	f107 0310 	add.w	r3, r7, #16
 8001946:	4619      	mov	r1, r3
 8001948:	480c      	ldr	r0, [pc, #48]	; (800197c <MX_TIM4_Init+0x94>)
 800194a:	f003 fd2d 	bl	80053a8 <HAL_TIM_ConfigClockSource>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001954:	f7ff fd90 	bl	8001478 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001958:	2300      	movs	r3, #0
 800195a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800195c:	2300      	movs	r3, #0
 800195e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001960:	1d3b      	adds	r3, r7, #4
 8001962:	4619      	mov	r1, r3
 8001964:	4805      	ldr	r0, [pc, #20]	; (800197c <MX_TIM4_Init+0x94>)
 8001966:	f004 f9cf 	bl	8005d08 <HAL_TIMEx_MasterConfigSynchronization>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001970:	f7ff fd82 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001974:	bf00      	nop
 8001976:	3720      	adds	r7, #32
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	200001c0 	.word	0x200001c0
 8001980:	40000800 	.word	0x40000800

08001984 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800198a:	463b      	mov	r3, r7
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	605a      	str	r2, [r3, #4]
 8001992:	609a      	str	r2, [r3, #8]
 8001994:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001996:	4b16      	ldr	r3, [pc, #88]	; (80019f0 <MX_TIM9_Init+0x6c>)
 8001998:	4a16      	ldr	r2, [pc, #88]	; (80019f4 <MX_TIM9_Init+0x70>)
 800199a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 7199;
 800199c:	4b14      	ldr	r3, [pc, #80]	; (80019f0 <MX_TIM9_Init+0x6c>)
 800199e:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80019a2:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019a4:	4b12      	ldr	r3, [pc, #72]	; (80019f0 <MX_TIM9_Init+0x6c>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 99;
 80019aa:	4b11      	ldr	r3, [pc, #68]	; (80019f0 <MX_TIM9_Init+0x6c>)
 80019ac:	2263      	movs	r2, #99	; 0x63
 80019ae:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019b0:	4b0f      	ldr	r3, [pc, #60]	; (80019f0 <MX_TIM9_Init+0x6c>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019b6:	4b0e      	ldr	r3, [pc, #56]	; (80019f0 <MX_TIM9_Init+0x6c>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80019bc:	480c      	ldr	r0, [pc, #48]	; (80019f0 <MX_TIM9_Init+0x6c>)
 80019be:	f002 ff5f 	bl	8004880 <HAL_TIM_Base_Init>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 80019c8:	f7ff fd56 	bl	8001478 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019d0:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80019d2:	463b      	mov	r3, r7
 80019d4:	4619      	mov	r1, r3
 80019d6:	4806      	ldr	r0, [pc, #24]	; (80019f0 <MX_TIM9_Init+0x6c>)
 80019d8:	f003 fce6 	bl	80053a8 <HAL_TIM_ConfigClockSource>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 80019e2:	f7ff fd49 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 80019e6:	bf00      	nop
 80019e8:	3710      	adds	r7, #16
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	200002a8 	.word	0x200002a8
 80019f4:	40014000 	.word	0x40014000

080019f8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a27      	ldr	r2, [pc, #156]	; (8001aa4 <HAL_TIM_Base_MspInit+0xac>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d114      	bne.n	8001a34 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a0a:	4b27      	ldr	r3, [pc, #156]	; (8001aa8 <HAL_TIM_Base_MspInit+0xb0>)
 8001a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0e:	4a26      	ldr	r2, [pc, #152]	; (8001aa8 <HAL_TIM_Base_MspInit+0xb0>)
 8001a10:	f043 0301 	orr.w	r3, r3, #1
 8001a14:	6453      	str	r3, [r2, #68]	; 0x44
 8001a16:	4b24      	ldr	r3, [pc, #144]	; (8001aa8 <HAL_TIM_Base_MspInit+0xb0>)
 8001a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	617b      	str	r3, [r7, #20]
 8001a20:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 4, 0);
 8001a22:	2200      	movs	r2, #0
 8001a24:	2104      	movs	r1, #4
 8001a26:	2018      	movs	r0, #24
 8001a28:	f001 fa95 	bl	8002f56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001a2c:	2018      	movs	r0, #24
 8001a2e:	f001 faae 	bl	8002f8e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8001a32:	e032      	b.n	8001a9a <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM4)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a1c      	ldr	r2, [pc, #112]	; (8001aac <HAL_TIM_Base_MspInit+0xb4>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d114      	bne.n	8001a68 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a3e:	4b1a      	ldr	r3, [pc, #104]	; (8001aa8 <HAL_TIM_Base_MspInit+0xb0>)
 8001a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a42:	4a19      	ldr	r2, [pc, #100]	; (8001aa8 <HAL_TIM_Base_MspInit+0xb0>)
 8001a44:	f043 0304 	orr.w	r3, r3, #4
 8001a48:	6413      	str	r3, [r2, #64]	; 0x40
 8001a4a:	4b17      	ldr	r3, [pc, #92]	; (8001aa8 <HAL_TIM_Base_MspInit+0xb0>)
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4e:	f003 0304 	and.w	r3, r3, #4
 8001a52:	613b      	str	r3, [r7, #16]
 8001a54:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001a56:	2200      	movs	r2, #0
 8001a58:	2105      	movs	r1, #5
 8001a5a:	201e      	movs	r0, #30
 8001a5c:	f001 fa7b 	bl	8002f56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001a60:	201e      	movs	r0, #30
 8001a62:	f001 fa94 	bl	8002f8e <HAL_NVIC_EnableIRQ>
}
 8001a66:	e018      	b.n	8001a9a <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM9)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a10      	ldr	r2, [pc, #64]	; (8001ab0 <HAL_TIM_Base_MspInit+0xb8>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d113      	bne.n	8001a9a <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001a72:	4b0d      	ldr	r3, [pc, #52]	; (8001aa8 <HAL_TIM_Base_MspInit+0xb0>)
 8001a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a76:	4a0c      	ldr	r2, [pc, #48]	; (8001aa8 <HAL_TIM_Base_MspInit+0xb0>)
 8001a78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a7e:	4b0a      	ldr	r3, [pc, #40]	; (8001aa8 <HAL_TIM_Base_MspInit+0xb0>)
 8001a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 4, 0);
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	2104      	movs	r1, #4
 8001a8e:	2018      	movs	r0, #24
 8001a90:	f001 fa61 	bl	8002f56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001a94:	2018      	movs	r0, #24
 8001a96:	f001 fa7a 	bl	8002f8e <HAL_NVIC_EnableIRQ>
}
 8001a9a:	bf00      	nop
 8001a9c:	3718      	adds	r7, #24
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40010000 	.word	0x40010000
 8001aa8:	40023800 	.word	0x40023800
 8001aac:	40000800 	.word	0x40000800
 8001ab0:	40014000 	.word	0x40014000

08001ab4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b08a      	sub	sp, #40	; 0x28
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001abc:	f107 0314 	add.w	r3, r7, #20
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	605a      	str	r2, [r3, #4]
 8001ac6:	609a      	str	r2, [r3, #8]
 8001ac8:	60da      	str	r2, [r3, #12]
 8001aca:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a25      	ldr	r2, [pc, #148]	; (8001b68 <HAL_TIM_Encoder_MspInit+0xb4>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d143      	bne.n	8001b5e <HAL_TIM_Encoder_MspInit+0xaa>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ad6:	4b25      	ldr	r3, [pc, #148]	; (8001b6c <HAL_TIM_Encoder_MspInit+0xb8>)
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ada:	4a24      	ldr	r2, [pc, #144]	; (8001b6c <HAL_TIM_Encoder_MspInit+0xb8>)
 8001adc:	f043 0302 	orr.w	r3, r3, #2
 8001ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ae2:	4b22      	ldr	r3, [pc, #136]	; (8001b6c <HAL_TIM_Encoder_MspInit+0xb8>)
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	613b      	str	r3, [r7, #16]
 8001aec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aee:	4b1f      	ldr	r3, [pc, #124]	; (8001b6c <HAL_TIM_Encoder_MspInit+0xb8>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	4a1e      	ldr	r2, [pc, #120]	; (8001b6c <HAL_TIM_Encoder_MspInit+0xb8>)
 8001af4:	f043 0301 	orr.w	r3, r3, #1
 8001af8:	6313      	str	r3, [r2, #48]	; 0x30
 8001afa:	4b1c      	ldr	r3, [pc, #112]	; (8001b6c <HAL_TIM_Encoder_MspInit+0xb8>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b06:	4b19      	ldr	r3, [pc, #100]	; (8001b6c <HAL_TIM_Encoder_MspInit+0xb8>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	4a18      	ldr	r2, [pc, #96]	; (8001b6c <HAL_TIM_Encoder_MspInit+0xb8>)
 8001b0c:	f043 0304 	orr.w	r3, r3, #4
 8001b10:	6313      	str	r3, [r2, #48]	; 0x30
 8001b12:	4b16      	ldr	r3, [pc, #88]	; (8001b6c <HAL_TIM_Encoder_MspInit+0xb8>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	f003 0304 	and.w	r3, r3, #4
 8001b1a:	60bb      	str	r3, [r7, #8]
 8001b1c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b1e:	2340      	movs	r3, #64	; 0x40
 8001b20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b22:	2302      	movs	r3, #2
 8001b24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b26:	2300      	movs	r3, #0
 8001b28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b2e:	2302      	movs	r3, #2
 8001b30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b32:	f107 0314 	add.w	r3, r7, #20
 8001b36:	4619      	mov	r1, r3
 8001b38:	480d      	ldr	r0, [pc, #52]	; (8001b70 <HAL_TIM_Encoder_MspInit+0xbc>)
 8001b3a:	f001 fad5 	bl	80030e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001b3e:	2380      	movs	r3, #128	; 0x80
 8001b40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b42:	2302      	movs	r3, #2
 8001b44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b46:	2300      	movs	r3, #0
 8001b48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b4e:	2302      	movs	r3, #2
 8001b50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b52:	f107 0314 	add.w	r3, r7, #20
 8001b56:	4619      	mov	r1, r3
 8001b58:	4806      	ldr	r0, [pc, #24]	; (8001b74 <HAL_TIM_Encoder_MspInit+0xc0>)
 8001b5a:	f001 fac5 	bl	80030e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001b5e:	bf00      	nop
 8001b60:	3728      	adds	r7, #40	; 0x28
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	40000400 	.word	0x40000400
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	40020000 	.word	0x40020000
 8001b74:	40020800 	.word	0x40020800

08001b78 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b088      	sub	sp, #32
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b80:	f107 030c 	add.w	r3, r7, #12
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	605a      	str	r2, [r3, #4]
 8001b8a:	609a      	str	r2, [r3, #8]
 8001b8c:	60da      	str	r2, [r3, #12]
 8001b8e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a11      	ldr	r2, [pc, #68]	; (8001bdc <HAL_TIM_MspPostInit+0x64>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d11c      	bne.n	8001bd4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b9a:	4b11      	ldr	r3, [pc, #68]	; (8001be0 <HAL_TIM_MspPostInit+0x68>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9e:	4a10      	ldr	r2, [pc, #64]	; (8001be0 <HAL_TIM_MspPostInit+0x68>)
 8001ba0:	f043 0310 	orr.w	r3, r3, #16
 8001ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba6:	4b0e      	ldr	r3, [pc, #56]	; (8001be0 <HAL_TIM_MspPostInit+0x68>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001baa:	f003 0310 	and.w	r3, r3, #16
 8001bae:	60bb      	str	r3, [r7, #8]
 8001bb0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001bb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bb6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb8:	2302      	movs	r3, #2
 8001bba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bc8:	f107 030c 	add.w	r3, r7, #12
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4805      	ldr	r0, [pc, #20]	; (8001be4 <HAL_TIM_MspPostInit+0x6c>)
 8001bd0:	f001 fa8a 	bl	80030e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001bd4:	bf00      	nop
 8001bd6:	3720      	adds	r7, #32
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40010000 	.word	0x40010000
 8001be0:	40023800 	.word	0x40023800
 8001be4:	40021000 	.word	0x40021000

08001be8 <SetPwmValue>:
  /* USER CODE END TIM3_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void SetPwmValue(){
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
	if(!test){
 8001bec:	4b18      	ldr	r3, [pc, #96]	; (8001c50 <SetPwmValue+0x68>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	f083 0301 	eor.w	r3, r3, #1
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d019      	beq.n	8001c2e <SetPwmValue+0x46>
		pulseWidth = (uint32_t)(pidController.controlSignal*1000/12);
 8001bfa:	4b16      	ldr	r3, [pc, #88]	; (8001c54 <SetPwmValue+0x6c>)
 8001bfc:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001c00:	f04f 0200 	mov.w	r2, #0
 8001c04:	4b14      	ldr	r3, [pc, #80]	; (8001c58 <SetPwmValue+0x70>)
 8001c06:	f7fe fd17 	bl	8000638 <__aeabi_dmul>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	4610      	mov	r0, r2
 8001c10:	4619      	mov	r1, r3
 8001c12:	f04f 0200 	mov.w	r2, #0
 8001c16:	4b11      	ldr	r3, [pc, #68]	; (8001c5c <SetPwmValue+0x74>)
 8001c18:	f7fe fe38 	bl	800088c <__aeabi_ddiv>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	460b      	mov	r3, r1
 8001c20:	4610      	mov	r0, r2
 8001c22:	4619      	mov	r1, r3
 8001c24:	f7fe ffca 	bl	8000bbc <__aeabi_d2uiz>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	4a0d      	ldr	r2, [pc, #52]	; (8001c60 <SetPwmValue+0x78>)
 8001c2c:	6013      	str	r3, [r2, #0]
	}

	if(pulseWidth > 1000) pulseWidth = 1000;
 8001c2e:	4b0c      	ldr	r3, [pc, #48]	; (8001c60 <SetPwmValue+0x78>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c36:	d903      	bls.n	8001c40 <SetPwmValue+0x58>
 8001c38:	4b09      	ldr	r3, [pc, #36]	; (8001c60 <SetPwmValue+0x78>)
 8001c3a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c3e:	601a      	str	r2, [r3, #0]
	if(pulseWidth < 0) pulseWidth = 0;
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulseWidth);
 8001c40:	4b08      	ldr	r3, [pc, #32]	; (8001c64 <SetPwmValue+0x7c>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a06      	ldr	r2, [pc, #24]	; (8001c60 <SetPwmValue+0x78>)
 8001c46:	6812      	ldr	r2, [r2, #0]
 8001c48:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001c4a:	bf00      	nop
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	200000dc 	.word	0x200000dc
 8001c54:	20000138 	.word	0x20000138
 8001c58:	408f4000 	.word	0x408f4000
 8001c5c:	40280000 	.word	0x40280000
 8001c60:	2000009c 	.word	0x2000009c
 8001c64:	2000025c 	.word	0x2000025c

08001c68 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001c68:	b590      	push	{r4, r7, lr}
 8001c6a:	b087      	sub	sp, #28
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM4) { // 1 ms timer
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a66      	ldr	r2, [pc, #408]	; (8001e10 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d16d      	bne.n	8001d56 <HAL_TIM_PeriodElapsedCallback+0xee>
		// Reading encoder value once per 10 ms to estimate RPM of motor
		encoderValue = __HAL_TIM_GET_COUNTER(&htim3);
 8001c7a:	4b66      	ldr	r3, [pc, #408]	; (8001e14 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c80:	4a65      	ldr	r2, [pc, #404]	; (8001e18 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001c82:	6013      	str	r3, [r2, #0]
		if (lastEncoder > encoderValue) {
 8001c84:	4b65      	ldr	r3, [pc, #404]	; (8001e1c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	4b63      	ldr	r3, [pc, #396]	; (8001e18 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d90c      	bls.n	8001caa <HAL_TIM_PeriodElapsedCallback+0x42>
			encoderValue = 65535 - lastEncoder + encoderValue;
 8001c90:	4b61      	ldr	r3, [pc, #388]	; (8001e18 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	4b61      	ldr	r3, [pc, #388]	; (8001e1c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	1ad2      	subs	r2, r2, r3
 8001c9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c9e:	4413      	add	r3, r2
 8001ca0:	4a5d      	ldr	r2, [pc, #372]	; (8001e18 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001ca2:	6013      	str	r3, [r2, #0]
			lastEncoder = 0;
 8001ca4:	4b5d      	ldr	r3, [pc, #372]	; (8001e1c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	601a      	str	r2, [r3, #0]
		}

		difference = encoderValue - lastEncoder;
 8001caa:	4b5b      	ldr	r3, [pc, #364]	; (8001e18 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	b29a      	uxth	r2, r3
 8001cb0:	4b5a      	ldr	r3, [pc, #360]	; (8001e1c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	b29a      	uxth	r2, r3
 8001cba:	4b59      	ldr	r3, [pc, #356]	; (8001e20 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001cbc:	801a      	strh	r2, [r3, #0]
		RPM[k] = (double)(difference) * scaler / 1928.0;//823.1; // 1928
 8001cbe:	4b58      	ldr	r3, [pc, #352]	; (8001e20 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001cc0:	881b      	ldrh	r3, [r3, #0]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7fe fc3e 	bl	8000544 <__aeabi_ui2d>
 8001cc8:	a34d      	add	r3, pc, #308	; (adr r3, 8001e00 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cce:	f7fe fcb3 	bl	8000638 <__aeabi_dmul>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	4610      	mov	r0, r2
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4b52      	ldr	r3, [pc, #328]	; (8001e24 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	461c      	mov	r4, r3
 8001ce0:	f04f 0200 	mov.w	r2, #0
 8001ce4:	4b50      	ldr	r3, [pc, #320]	; (8001e28 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001ce6:	f7fe fdd1 	bl	800088c <__aeabi_ddiv>
 8001cea:	4602      	mov	r2, r0
 8001cec:	460b      	mov	r3, r1
 8001cee:	484f      	ldr	r0, [pc, #316]	; (8001e2c <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001cf0:	00e1      	lsls	r1, r4, #3
 8001cf2:	4401      	add	r1, r0
 8001cf4:	e9c1 2300 	strd	r2, r3, [r1]
		double avgRPM = GetEncoderValue();
 8001cf8:	f000 f8ae 	bl	8001e58 <GetEncoderValue>
 8001cfc:	ed87 0b04 	vstr	d0, [r7, #16]

		// Updating PID measurments of RPM and setting output of voltage for regulation
		UpdatePid(avgRPM);
 8001d00:	ed97 0b04 	vldr	d0, [r7, #16]
 8001d04:	f000 f908 	bl	8001f18 <UpdatePid>
		SetPwmValue();
 8001d08:	f7ff ff6e 	bl	8001be8 <SetPwmValue>

		// End Cycle operations
		lastEncoder = __HAL_TIM_GET_COUNTER(&htim3);
 8001d0c:	4b41      	ldr	r3, [pc, #260]	; (8001e14 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d12:	4a42      	ldr	r2, [pc, #264]	; (8001e1c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001d14:	6013      	str	r3, [r2, #0]
		k = (k + 1) % FILTERN;
 8001d16:	4b43      	ldr	r3, [pc, #268]	; (8001e24 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	1c5a      	adds	r2, r3, #1
 8001d1c:	4b44      	ldr	r3, [pc, #272]	; (8001e30 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001d1e:	fb83 3102 	smull	r3, r1, r3, r2
 8001d22:	17d3      	asrs	r3, r2, #31
 8001d24:	1ac9      	subs	r1, r1, r3
 8001d26:	460b      	mov	r3, r1
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	440b      	add	r3, r1
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	1ad1      	subs	r1, r2, r3
 8001d30:	b2ca      	uxtb	r2, r1
 8001d32:	4b3c      	ldr	r3, [pc, #240]	; (8001e24 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8001d34:	701a      	strb	r2, [r3, #0]
		if(!dataReady) dataReady = !k;
 8001d36:	4b3f      	ldr	r3, [pc, #252]	; (8001e34 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	f083 0301 	eor.w	r3, r3, #1
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d008      	beq.n	8001d56 <HAL_TIM_PeriodElapsedCallback+0xee>
 8001d44:	4b37      	ldr	r3, [pc, #220]	; (8001e24 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	bf0c      	ite	eq
 8001d4c:	2301      	moveq	r3, #1
 8001d4e:	2300      	movne	r3, #0
 8001d50:	b2da      	uxtb	r2, r3
 8001d52:	4b38      	ldr	r3, [pc, #224]	; (8001e34 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001d54:	701a      	strb	r2, [r3, #0]
	}
	if (htim->Instance == TIM9) { // 100ms
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a37      	ldr	r2, [pc, #220]	; (8001e38 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d14b      	bne.n	8001df8 <HAL_TIM_PeriodElapsedCallback+0x190>
		// Updating reference value
		ReadADC();
 8001d60:	f000 f8c2 	bl	8001ee8 <ReadADC>

		if(pidController.referenceSignal < 10){
 8001d64:	4b35      	ldr	r3, [pc, #212]	; (8001e3c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001d66:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d6a:	f04f 0200 	mov.w	r2, #0
 8001d6e:	4b34      	ldr	r3, [pc, #208]	; (8001e40 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001d70:	f7fe fed4 	bl	8000b1c <__aeabi_dcmplt>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <HAL_TIM_PeriodElapsedCallback+0x116>
			InitPID();
 8001d7a:	f7ff fb85 	bl	8001488 <InitPID>
		}
		if (potentiometerEnabled) {
 8001d7e:	4b31      	ldr	r3, [pc, #196]	; (8001e44 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d017      	beq.n	8001db6 <HAL_TIM_PeriodElapsedCallback+0x14e>
			pidController.referenceSignal = (double) (ADC_Value / 4095.0)* 130;
 8001d86:	4b30      	ldr	r3, [pc, #192]	; (8001e48 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7fe fbda 	bl	8000544 <__aeabi_ui2d>
 8001d90:	a31d      	add	r3, pc, #116	; (adr r3, 8001e08 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d96:	f7fe fd79 	bl	800088c <__aeabi_ddiv>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	4610      	mov	r0, r2
 8001da0:	4619      	mov	r1, r3
 8001da2:	f04f 0200 	mov.w	r2, #0
 8001da6:	4b29      	ldr	r3, [pc, #164]	; (8001e4c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001da8:	f7fe fc46 	bl	8000638 <__aeabi_dmul>
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	4922      	ldr	r1, [pc, #136]	; (8001e3c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001db2:	e9c1 2300 	strd	r2, r3, [r1]
		}

		// Sending data about current speed via USART
		char *message = calloc(1, 6);
 8001db6:	2106      	movs	r1, #6
 8001db8:	2001      	movs	r0, #1
 8001dba:	f005 fe9d 	bl	8007af8 <calloc>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	60fb      	str	r3, [r7, #12]
		int RPMInt = (int)(pidController.measuredSpeed);
 8001dc2:	4b1e      	ldr	r3, [pc, #120]	; (8001e3c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001dc4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001dc8:	4610      	mov	r0, r2
 8001dca:	4619      	mov	r1, r3
 8001dcc:	f7fe fece 	bl	8000b6c <__aeabi_d2iz>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	60bb      	str	r3, [r7, #8]
		sprintf((char*) message, "%03i\n\r", RPMInt);
 8001dd4:	68ba      	ldr	r2, [r7, #8]
 8001dd6:	491e      	ldr	r1, [pc, #120]	; (8001e50 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001dd8:	68f8      	ldr	r0, [r7, #12]
 8001dda:	f005 ff99 	bl	8007d10 <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t *)message, strlen(message), 1);
 8001dde:	68f8      	ldr	r0, [r7, #12]
 8001de0:	f7fe fa16 	bl	8000210 <strlen>
 8001de4:	4603      	mov	r3, r0
 8001de6:	b29a      	uxth	r2, r3
 8001de8:	2301      	movs	r3, #1
 8001dea:	68f9      	ldr	r1, [r7, #12]
 8001dec:	4819      	ldr	r0, [pc, #100]	; (8001e54 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001dee:	f004 f903 	bl	8005ff8 <HAL_UART_Transmit>
		free(message);
 8001df2:	68f8      	ldr	r0, [r7, #12]
 8001df4:	f005 feb2 	bl	8007b5c <free>
	}
}
 8001df8:	bf00      	nop
 8001dfa:	371c      	adds	r7, #28
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd90      	pop	{r4, r7, pc}
 8001e00:	00000000 	.word	0x00000000
 8001e04:	40c77000 	.word	0x40c77000
 8001e08:	00000000 	.word	0x00000000
 8001e0c:	40affe00 	.word	0x40affe00
 8001e10:	40000800 	.word	0x40000800
 8001e14:	2000020c 	.word	0x2000020c
 8001e18:	200000d0 	.word	0x200000d0
 8001e1c:	200000d4 	.word	0x200000d4
 8001e20:	200000d8 	.word	0x200000d8
 8001e24:	200000da 	.word	0x200000da
 8001e28:	409e2000 	.word	0x409e2000
 8001e2c:	200000a0 	.word	0x200000a0
 8001e30:	2aaaaaab 	.word	0x2aaaaaab
 8001e34:	200000db 	.word	0x200000db
 8001e38:	40014000 	.word	0x40014000
 8001e3c:	20000138 	.word	0x20000138
 8001e40:	40240000 	.word	0x40240000
 8001e44:	20000000 	.word	0x20000000
 8001e48:	20000094 	.word	0x20000094
 8001e4c:	40604000 	.word	0x40604000
 8001e50:	08008410 	.word	0x08008410
 8001e54:	200002f4 	.word	0x200002f4

08001e58 <GetEncoderValue>:

double GetEncoderValue(){
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
	// Calculate RPM
	if(dataReady){
 8001e5e:	4b1e      	ldr	r3, [pc, #120]	; (8001ed8 <GetEncoderValue+0x80>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d02b      	beq.n	8001ebe <GetEncoderValue+0x66>
		double RPMTmp = 0;
 8001e66:	f04f 0200 	mov.w	r2, #0
 8001e6a:	f04f 0300 	mov.w	r3, #0
 8001e6e:	e9c7 2302 	strd	r2, r3, [r7, #8]
		for(uint8_t i = 0; i < FILTERN; i++){
 8001e72:	2300      	movs	r3, #0
 8001e74:	71fb      	strb	r3, [r7, #7]
 8001e76:	e017      	b.n	8001ea8 <GetEncoderValue+0x50>
			RPMTmp = RPMTmp + RPM[i]/((double)(FILTERN));
 8001e78:	79fb      	ldrb	r3, [r7, #7]
 8001e7a:	4a18      	ldr	r2, [pc, #96]	; (8001edc <GetEncoderValue+0x84>)
 8001e7c:	00db      	lsls	r3, r3, #3
 8001e7e:	4413      	add	r3, r2
 8001e80:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e84:	f04f 0200 	mov.w	r2, #0
 8001e88:	4b15      	ldr	r3, [pc, #84]	; (8001ee0 <GetEncoderValue+0x88>)
 8001e8a:	f7fe fcff 	bl	800088c <__aeabi_ddiv>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	460b      	mov	r3, r1
 8001e92:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e96:	f7fe fa19 	bl	80002cc <__adddf3>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	e9c7 2302 	strd	r2, r3, [r7, #8]
		for(uint8_t i = 0; i < FILTERN; i++){
 8001ea2:	79fb      	ldrb	r3, [r7, #7]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	71fb      	strb	r3, [r7, #7]
 8001ea8:	79fb      	ldrb	r3, [r7, #7]
 8001eaa:	2b05      	cmp	r3, #5
 8001eac:	d9e4      	bls.n	8001e78 <GetEncoderValue+0x20>
		}
		pidController.measuredSpeed = RPMTmp;
 8001eae:	490d      	ldr	r1, [pc, #52]	; (8001ee4 <GetEncoderValue+0x8c>)
 8001eb0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001eb4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		return RPMTmp;
 8001eb8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ebc:	e003      	b.n	8001ec6 <GetEncoderValue+0x6e>
	}
	return 0;
 8001ebe:	f04f 0200 	mov.w	r2, #0
 8001ec2:	f04f 0300 	mov.w	r3, #0
 8001ec6:	ec43 2b17 	vmov	d7, r2, r3
}
 8001eca:	eeb0 0a47 	vmov.f32	s0, s14
 8001ece:	eef0 0a67 	vmov.f32	s1, s15
 8001ed2:	3710      	adds	r7, #16
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	200000db 	.word	0x200000db
 8001edc:	200000a0 	.word	0x200000a0
 8001ee0:	40180000 	.word	0x40180000
 8001ee4:	20000138 	.word	0x20000138

08001ee8 <ReadADC>:

void ReadADC() {
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8001eec:	4807      	ldr	r0, [pc, #28]	; (8001f0c <ReadADC+0x24>)
 8001eee:	f000 fba1 	bl	8002634 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001ef2:	f04f 31ff 	mov.w	r1, #4294967295
 8001ef6:	4805      	ldr	r0, [pc, #20]	; (8001f0c <ReadADC+0x24>)
 8001ef8:	f000 fc6a 	bl	80027d0 <HAL_ADC_PollForConversion>
	ADC_Value = HAL_ADC_GetValue(&hadc1);
 8001efc:	4803      	ldr	r0, [pc, #12]	; (8001f0c <ReadADC+0x24>)
 8001efe:	f000 fcf2 	bl	80028e6 <HAL_ADC_GetValue>
 8001f02:	4603      	mov	r3, r0
 8001f04:	4a02      	ldr	r2, [pc, #8]	; (8001f10 <ReadADC+0x28>)
 8001f06:	6013      	str	r3, [r2, #0]
}
 8001f08:	bf00      	nop
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	200000f0 	.word	0x200000f0
 8001f10:	20000094 	.word	0x20000094
 8001f14:	00000000 	.word	0x00000000

08001f18 <UpdatePid>:

void UpdatePid(double RPMAVG) {
 8001f18:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f1c:	b088      	sub	sp, #32
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	ed87 0b00 	vstr	d0, [r7]
	// Update measurment
	pidController.measuredSpeed = RPMAVG;
 8001f24:	498c      	ldr	r1, [pc, #560]	; (8002158 <UpdatePid+0x240>)
 8001f26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f2a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

	// Controll error handling in preparation for calculating control signal
	pidController.controlError[1] = pidController.controlError[0];
 8001f2e:	4b8a      	ldr	r3, [pc, #552]	; (8002158 <UpdatePid+0x240>)
 8001f30:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001f34:	4988      	ldr	r1, [pc, #544]	; (8002158 <UpdatePid+0x240>)
 8001f36:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	pidController.controlError[0] = (pidController.referenceSignal
 8001f3a:	4b87      	ldr	r3, [pc, #540]	; (8002158 <UpdatePid+0x240>)
 8001f3c:	e9d3 0100 	ldrd	r0, r1, [r3]
			- pidController.measuredSpeed);
 8001f40:	4b85      	ldr	r3, [pc, #532]	; (8002158 <UpdatePid+0x240>)
 8001f42:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001f46:	f7fe f9bf 	bl	80002c8 <__aeabi_dsub>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	460b      	mov	r3, r1
	pidController.controlError[0] = (pidController.referenceSignal
 8001f4e:	4982      	ldr	r1, [pc, #520]	; (8002158 <UpdatePid+0x240>)
 8001f50:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	//pidController.sumOfControlError += pidController.controlError[0];

	double uP = pidController.Kp * pidController.controlError[1];
 8001f54:	4b80      	ldr	r3, [pc, #512]	; (8002158 <UpdatePid+0x240>)
 8001f56:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001f5a:	4b7f      	ldr	r3, [pc, #508]	; (8002158 <UpdatePid+0x240>)
 8001f5c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001f60:	f7fe fb6a 	bl	8000638 <__aeabi_dmul>
 8001f64:	4602      	mov	r2, r0
 8001f66:	460b      	mov	r3, r1
 8001f68:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double uI = pidController.Kp * pidController.Ki * pidController.sampleTime
 8001f6c:	4b7a      	ldr	r3, [pc, #488]	; (8002158 <UpdatePid+0x240>)
 8001f6e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001f72:	4b79      	ldr	r3, [pc, #484]	; (8002158 <UpdatePid+0x240>)
 8001f74:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001f78:	f7fe fb5e 	bl	8000638 <__aeabi_dmul>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	460b      	mov	r3, r1
 8001f80:	4610      	mov	r0, r2
 8001f82:	4619      	mov	r1, r3
 8001f84:	4b74      	ldr	r3, [pc, #464]	; (8002158 <UpdatePid+0x240>)
 8001f86:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001f8a:	f7fe fb55 	bl	8000638 <__aeabi_dmul>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	460b      	mov	r3, r1
 8001f92:	4610      	mov	r0, r2
 8001f94:	4619      	mov	r1, r3
			/ 2
 8001f96:	f04f 0200 	mov.w	r2, #0
 8001f9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f9e:	f7fe fc75 	bl	800088c <__aeabi_ddiv>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	4614      	mov	r4, r2
 8001fa8:	461d      	mov	r5, r3
			* (pidController.controlError[1] + pidController.controlError[0]);
 8001faa:	4b6b      	ldr	r3, [pc, #428]	; (8002158 <UpdatePid+0x240>)
 8001fac:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001fb0:	4b69      	ldr	r3, [pc, #420]	; (8002158 <UpdatePid+0x240>)
 8001fb2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001fb6:	f7fe f989 	bl	80002cc <__adddf3>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	460b      	mov	r3, r1
	double uI = pidController.Kp * pidController.Ki * pidController.sampleTime
 8001fbe:	4620      	mov	r0, r4
 8001fc0:	4629      	mov	r1, r5
 8001fc2:	f7fe fb39 	bl	8000638 <__aeabi_dmul>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	460b      	mov	r3, r1
 8001fca:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double uD = pidController.Kp * pidController.Kd * 2
 8001fce:	4b62      	ldr	r3, [pc, #392]	; (8002158 <UpdatePid+0x240>)
 8001fd0:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001fd4:	4b60      	ldr	r3, [pc, #384]	; (8002158 <UpdatePid+0x240>)
 8001fd6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001fda:	f7fe fb2d 	bl	8000638 <__aeabi_dmul>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	4610      	mov	r0, r2
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	460b      	mov	r3, r1
 8001fea:	f7fe f96f 	bl	80002cc <__adddf3>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	4614      	mov	r4, r2
 8001ff4:	461d      	mov	r5, r3
			/ (2 * pidController.N + pidController.sampleTime)
 8001ff6:	4b58      	ldr	r3, [pc, #352]	; (8002158 <UpdatePid+0x240>)
 8001ff8:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	460b      	mov	r3, r1
 8002000:	f7fe f964 	bl	80002cc <__adddf3>
 8002004:	4602      	mov	r2, r0
 8002006:	460b      	mov	r3, r1
 8002008:	4610      	mov	r0, r2
 800200a:	4619      	mov	r1, r3
 800200c:	4b52      	ldr	r3, [pc, #328]	; (8002158 <UpdatePid+0x240>)
 800200e:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8002012:	f7fe f95b 	bl	80002cc <__adddf3>
 8002016:	4602      	mov	r2, r0
 8002018:	460b      	mov	r3, r1
 800201a:	4620      	mov	r0, r4
 800201c:	4629      	mov	r1, r5
 800201e:	f7fe fc35 	bl	800088c <__aeabi_ddiv>
 8002022:	4602      	mov	r2, r0
 8002024:	460b      	mov	r3, r1
 8002026:	4614      	mov	r4, r2
 8002028:	461d      	mov	r5, r3
			* (pidController.controlError[1] - pidController.controlError[0])
 800202a:	4b4b      	ldr	r3, [pc, #300]	; (8002158 <UpdatePid+0x240>)
 800202c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002030:	4b49      	ldr	r3, [pc, #292]	; (8002158 <UpdatePid+0x240>)
 8002032:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002036:	f7fe f947 	bl	80002c8 <__aeabi_dsub>
 800203a:	4602      	mov	r2, r0
 800203c:	460b      	mov	r3, r1
 800203e:	4620      	mov	r0, r4
 8002040:	4629      	mov	r1, r5
 8002042:	f7fe faf9 	bl	8000638 <__aeabi_dmul>
 8002046:	4602      	mov	r2, r0
 8002048:	460b      	mov	r3, r1
 800204a:	4614      	mov	r4, r2
 800204c:	461d      	mov	r5, r3
			+ (2 * pidController.N - pidController.sampleTime)
 800204e:	4b42      	ldr	r3, [pc, #264]	; (8002158 <UpdatePid+0x240>)
 8002050:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8002054:	4602      	mov	r2, r0
 8002056:	460b      	mov	r3, r1
 8002058:	f7fe f938 	bl	80002cc <__adddf3>
 800205c:	4602      	mov	r2, r0
 800205e:	460b      	mov	r3, r1
 8002060:	4610      	mov	r0, r2
 8002062:	4619      	mov	r1, r3
 8002064:	4b3c      	ldr	r3, [pc, #240]	; (8002158 <UpdatePid+0x240>)
 8002066:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800206a:	f7fe f92d 	bl	80002c8 <__aeabi_dsub>
 800206e:	4602      	mov	r2, r0
 8002070:	460b      	mov	r3, r1
 8002072:	4690      	mov	r8, r2
 8002074:	4699      	mov	r9, r3
					/ (2 * pidController.N + pidController.sampleTime)
 8002076:	4b38      	ldr	r3, [pc, #224]	; (8002158 <UpdatePid+0x240>)
 8002078:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800207c:	4602      	mov	r2, r0
 800207e:	460b      	mov	r3, r1
 8002080:	f7fe f924 	bl	80002cc <__adddf3>
 8002084:	4602      	mov	r2, r0
 8002086:	460b      	mov	r3, r1
 8002088:	4610      	mov	r0, r2
 800208a:	4619      	mov	r1, r3
 800208c:	4b32      	ldr	r3, [pc, #200]	; (8002158 <UpdatePid+0x240>)
 800208e:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8002092:	f7fe f91b 	bl	80002cc <__adddf3>
 8002096:	4602      	mov	r2, r0
 8002098:	460b      	mov	r3, r1
 800209a:	4640      	mov	r0, r8
 800209c:	4649      	mov	r1, r9
 800209e:	f7fe fbf5 	bl	800088c <__aeabi_ddiv>
 80020a2:	4602      	mov	r2, r0
 80020a4:	460b      	mov	r3, r1
 80020a6:	4610      	mov	r0, r2
 80020a8:	4619      	mov	r1, r3
					* pidController.previousD;
 80020aa:	4b2b      	ldr	r3, [pc, #172]	; (8002158 <UpdatePid+0x240>)
 80020ac:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 80020b0:	f7fe fac2 	bl	8000638 <__aeabi_dmul>
 80020b4:	4602      	mov	r2, r0
 80020b6:	460b      	mov	r3, r1
	double uD = pidController.Kp * pidController.Kd * 2
 80020b8:	4620      	mov	r0, r4
 80020ba:	4629      	mov	r1, r5
 80020bc:	f7fe f906 	bl	80002cc <__adddf3>
 80020c0:	4602      	mov	r2, r0
 80020c2:	460b      	mov	r3, r1
 80020c4:	e9c7 2302 	strd	r2, r3, [r7, #8]

	if((pidController.sumOfIntegral + uI) > 4000000000)
 80020c8:	4b23      	ldr	r3, [pc, #140]	; (8002158 <UpdatePid+0x240>)
 80020ca:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80020ce:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80020d2:	f7fe f8fb 	bl	80002cc <__adddf3>
 80020d6:	4602      	mov	r2, r0
 80020d8:	460b      	mov	r3, r1
 80020da:	4610      	mov	r0, r2
 80020dc:	4619      	mov	r1, r3
 80020de:	a31c      	add	r3, pc, #112	; (adr r3, 8002150 <UpdatePid+0x238>)
 80020e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020e4:	f7fe fd38 	bl	8000b58 <__aeabi_dcmpgt>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d006      	beq.n	80020fc <UpdatePid+0x1e4>
		pidController.sumOfIntegral = 4000000000;
 80020ee:	491a      	ldr	r1, [pc, #104]	; (8002158 <UpdatePid+0x240>)
 80020f0:	a317      	add	r3, pc, #92	; (adr r3, 8002150 <UpdatePid+0x238>)
 80020f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020f6:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 80020fa:	e00b      	b.n	8002114 <UpdatePid+0x1fc>
	else
		pidController.sumOfIntegral = pidController.sumOfIntegral + uI;
 80020fc:	4b16      	ldr	r3, [pc, #88]	; (8002158 <UpdatePid+0x240>)
 80020fe:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002102:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002106:	f7fe f8e1 	bl	80002cc <__adddf3>
 800210a:	4602      	mov	r2, r0
 800210c:	460b      	mov	r3, r1
 800210e:	4912      	ldr	r1, [pc, #72]	; (8002158 <UpdatePid+0x240>)
 8002110:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	pidController.previousD = uD;
 8002114:	4910      	ldr	r1, [pc, #64]	; (8002158 <UpdatePid+0x240>)
 8002116:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800211a:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	// Calculate control signal
	pidController.controlSignal = uP + pidController.sumOfIntegral + uD;
 800211e:	4b0e      	ldr	r3, [pc, #56]	; (8002158 <UpdatePid+0x240>)
 8002120:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002124:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002128:	f7fe f8d0 	bl	80002cc <__adddf3>
 800212c:	4602      	mov	r2, r0
 800212e:	460b      	mov	r3, r1
 8002130:	4610      	mov	r0, r2
 8002132:	4619      	mov	r1, r3
 8002134:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002138:	f7fe f8c8 	bl	80002cc <__adddf3>
 800213c:	4602      	mov	r2, r0
 800213e:	460b      	mov	r3, r1
 8002140:	4905      	ldr	r1, [pc, #20]	; (8002158 <UpdatePid+0x240>)
 8002142:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 8002146:	bf00      	nop
 8002148:	3720      	adds	r7, #32
 800214a:	46bd      	mov	sp, r7
 800214c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002150:	00000000 	.word	0x00000000
 8002154:	41edcd65 	.word	0x41edcd65
 8002158:	20000138 	.word	0x20000138

0800215c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002160:	4b14      	ldr	r3, [pc, #80]	; (80021b4 <MX_USART3_UART_Init+0x58>)
 8002162:	4a15      	ldr	r2, [pc, #84]	; (80021b8 <MX_USART3_UART_Init+0x5c>)
 8002164:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002166:	4b13      	ldr	r3, [pc, #76]	; (80021b4 <MX_USART3_UART_Init+0x58>)
 8002168:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800216c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800216e:	4b11      	ldr	r3, [pc, #68]	; (80021b4 <MX_USART3_UART_Init+0x58>)
 8002170:	2200      	movs	r2, #0
 8002172:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002174:	4b0f      	ldr	r3, [pc, #60]	; (80021b4 <MX_USART3_UART_Init+0x58>)
 8002176:	2200      	movs	r2, #0
 8002178:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800217a:	4b0e      	ldr	r3, [pc, #56]	; (80021b4 <MX_USART3_UART_Init+0x58>)
 800217c:	2200      	movs	r2, #0
 800217e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002180:	4b0c      	ldr	r3, [pc, #48]	; (80021b4 <MX_USART3_UART_Init+0x58>)
 8002182:	220c      	movs	r2, #12
 8002184:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002186:	4b0b      	ldr	r3, [pc, #44]	; (80021b4 <MX_USART3_UART_Init+0x58>)
 8002188:	2200      	movs	r2, #0
 800218a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800218c:	4b09      	ldr	r3, [pc, #36]	; (80021b4 <MX_USART3_UART_Init+0x58>)
 800218e:	2200      	movs	r2, #0
 8002190:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002192:	4b08      	ldr	r3, [pc, #32]	; (80021b4 <MX_USART3_UART_Init+0x58>)
 8002194:	2200      	movs	r2, #0
 8002196:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002198:	4b06      	ldr	r3, [pc, #24]	; (80021b4 <MX_USART3_UART_Init+0x58>)
 800219a:	2200      	movs	r2, #0
 800219c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800219e:	4805      	ldr	r0, [pc, #20]	; (80021b4 <MX_USART3_UART_Init+0x58>)
 80021a0:	f003 fedc 	bl	8005f5c <HAL_UART_Init>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80021aa:	f7ff f965 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80021ae:	bf00      	nop
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	200002f4 	.word	0x200002f4
 80021b8:	40004800 	.word	0x40004800

080021bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b08a      	sub	sp, #40	; 0x28
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c4:	f107 0314 	add.w	r3, r7, #20
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	605a      	str	r2, [r3, #4]
 80021ce:	609a      	str	r2, [r3, #8]
 80021d0:	60da      	str	r2, [r3, #12]
 80021d2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a1b      	ldr	r2, [pc, #108]	; (8002248 <HAL_UART_MspInit+0x8c>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d130      	bne.n	8002240 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80021de:	4b1b      	ldr	r3, [pc, #108]	; (800224c <HAL_UART_MspInit+0x90>)
 80021e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e2:	4a1a      	ldr	r2, [pc, #104]	; (800224c <HAL_UART_MspInit+0x90>)
 80021e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021e8:	6413      	str	r3, [r2, #64]	; 0x40
 80021ea:	4b18      	ldr	r3, [pc, #96]	; (800224c <HAL_UART_MspInit+0x90>)
 80021ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021f2:	613b      	str	r3, [r7, #16]
 80021f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021f6:	4b15      	ldr	r3, [pc, #84]	; (800224c <HAL_UART_MspInit+0x90>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fa:	4a14      	ldr	r2, [pc, #80]	; (800224c <HAL_UART_MspInit+0x90>)
 80021fc:	f043 0308 	orr.w	r3, r3, #8
 8002200:	6313      	str	r3, [r2, #48]	; 0x30
 8002202:	4b12      	ldr	r3, [pc, #72]	; (800224c <HAL_UART_MspInit+0x90>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002206:	f003 0308 	and.w	r3, r3, #8
 800220a:	60fb      	str	r3, [r7, #12]
 800220c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800220e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002212:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002214:	2302      	movs	r3, #2
 8002216:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002218:	2300      	movs	r3, #0
 800221a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800221c:	2303      	movs	r3, #3
 800221e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002220:	2307      	movs	r3, #7
 8002222:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002224:	f107 0314 	add.w	r3, r7, #20
 8002228:	4619      	mov	r1, r3
 800222a:	4809      	ldr	r0, [pc, #36]	; (8002250 <HAL_UART_MspInit+0x94>)
 800222c:	f000 ff5c 	bl	80030e8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 3, 0);
 8002230:	2200      	movs	r2, #0
 8002232:	2103      	movs	r1, #3
 8002234:	2027      	movs	r0, #39	; 0x27
 8002236:	f000 fe8e 	bl	8002f56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800223a:	2027      	movs	r0, #39	; 0x27
 800223c:	f000 fea7 	bl	8002f8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002240:	bf00      	nop
 8002242:	3728      	adds	r7, #40	; 0x28
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	40004800 	.word	0x40004800
 800224c:	40023800 	.word	0x40023800
 8002250:	40020c00 	.word	0x40020c00

08002254 <HAL_UART_RxCpltCallback>:
  /* USER CODE END USART3_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002254:	b580      	push	{r7, lr}
 8002256:	b08a      	sub	sp, #40	; 0x28
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart3.Instance) {
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	4b34      	ldr	r3, [pc, #208]	; (8002334 <HAL_UART_RxCpltCallback+0xe0>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	429a      	cmp	r2, r3
 8002266:	d161      	bne.n	800232c <HAL_UART_RxCpltCallback+0xd8>
		HAL_UART_Receive_IT(&huart3, usart_Message, 5);
 8002268:	2205      	movs	r2, #5
 800226a:	4933      	ldr	r1, [pc, #204]	; (8002338 <HAL_UART_RxCpltCallback+0xe4>)
 800226c:	4831      	ldr	r0, [pc, #196]	; (8002334 <HAL_UART_RxCpltCallback+0xe0>)
 800226e:	f003 ff56 	bl	800611e <HAL_UART_Receive_IT>
		if (!potentiometerEnabled) {
 8002272:	4b32      	ldr	r3, [pc, #200]	; (800233c <HAL_UART_RxCpltCallback+0xe8>)
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	f083 0301 	eor.w	r3, r3, #1
 800227a:	b2db      	uxtb	r3, r3
 800227c:	2b00      	cmp	r3, #0
 800227e:	d055      	beq.n	800232c <HAL_UART_RxCpltCallback+0xd8>
			char *ptr;
			long messageToSend = 0;
 8002280:	2300      	movs	r3, #0
 8002282:	627b      	str	r3, [r7, #36]	; 0x24
			char usartCharBuffer[5] ={0};
 8002284:	2300      	movs	r3, #0
 8002286:	60fb      	str	r3, [r7, #12]
 8002288:	2300      	movs	r3, #0
 800228a:	743b      	strb	r3, [r7, #16]
			messageToSend = 0;
 800228c:	2300      	movs	r3, #0
 800228e:	627b      	str	r3, [r7, #36]	; 0x24
			for (int i = 0; i<5; i++){
 8002290:	2300      	movs	r3, #0
 8002292:	623b      	str	r3, [r7, #32]
 8002294:	e00c      	b.n	80022b0 <HAL_UART_RxCpltCallback+0x5c>
				usartCharBuffer[i] = usart_Message[i];
 8002296:	4a28      	ldr	r2, [pc, #160]	; (8002338 <HAL_UART_RxCpltCallback+0xe4>)
 8002298:	6a3b      	ldr	r3, [r7, #32]
 800229a:	4413      	add	r3, r2
 800229c:	7819      	ldrb	r1, [r3, #0]
 800229e:	f107 020c 	add.w	r2, r7, #12
 80022a2:	6a3b      	ldr	r3, [r7, #32]
 80022a4:	4413      	add	r3, r2
 80022a6:	460a      	mov	r2, r1
 80022a8:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i<5; i++){
 80022aa:	6a3b      	ldr	r3, [r7, #32]
 80022ac:	3301      	adds	r3, #1
 80022ae:	623b      	str	r3, [r7, #32]
 80022b0:	6a3b      	ldr	r3, [r7, #32]
 80022b2:	2b04      	cmp	r3, #4
 80022b4:	ddef      	ble.n	8002296 <HAL_UART_RxCpltCallback+0x42>
			}
			int sto = (usart_Message[0]-48)*100;
 80022b6:	4b20      	ldr	r3, [pc, #128]	; (8002338 <HAL_UART_RxCpltCallback+0xe4>)
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	3b30      	subs	r3, #48	; 0x30
 80022bc:	2264      	movs	r2, #100	; 0x64
 80022be:	fb02 f303 	mul.w	r3, r2, r3
 80022c2:	61fb      	str	r3, [r7, #28]
			int dziesiec = (usart_Message[1]-48)*10;
 80022c4:	4b1c      	ldr	r3, [pc, #112]	; (8002338 <HAL_UART_RxCpltCallback+0xe4>)
 80022c6:	785b      	ldrb	r3, [r3, #1]
 80022c8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80022cc:	4613      	mov	r3, r2
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	4413      	add	r3, r2
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	61bb      	str	r3, [r7, #24]
			int jednostki = (usart_Message[2]-48);
 80022d6:	4b18      	ldr	r3, [pc, #96]	; (8002338 <HAL_UART_RxCpltCallback+0xe4>)
 80022d8:	789b      	ldrb	r3, [r3, #2]
 80022da:	3b30      	subs	r3, #48	; 0x30
 80022dc:	617b      	str	r3, [r7, #20]
			if (sto < 0)
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	da01      	bge.n	80022e8 <HAL_UART_RxCpltCallback+0x94>
				sto = 0;
 80022e4:	2300      	movs	r3, #0
 80022e6:	61fb      	str	r3, [r7, #28]
			if (dziesiec < 0)
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	da01      	bge.n	80022f2 <HAL_UART_RxCpltCallback+0x9e>
				dziesiec = 0;
 80022ee:	2300      	movs	r3, #0
 80022f0:	61bb      	str	r3, [r7, #24]
			if (jednostki < 0)
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	da01      	bge.n	80022fc <HAL_UART_RxCpltCallback+0xa8>
				jednostki = 0;
 80022f8:	2300      	movs	r3, #0
 80022fa:	617b      	str	r3, [r7, #20]
			messageToSend = sto + dziesiec + jednostki;
 80022fc:	69fa      	ldr	r2, [r7, #28]
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	4413      	add	r3, r2
 8002302:	697a      	ldr	r2, [r7, #20]
 8002304:	4413      	add	r3, r2
 8002306:	627b      	str	r3, [r7, #36]	; 0x24

			//messageToSend = strtol(usartCharBuffer, &ptr, 5);
			if (messageToSend > 130) {
 8002308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230a:	2b82      	cmp	r3, #130	; 0x82
 800230c:	dd01      	ble.n	8002312 <HAL_UART_RxCpltCallback+0xbe>
				messageToSend = 130;
 800230e:	2382      	movs	r3, #130	; 0x82
 8002310:	627b      	str	r3, [r7, #36]	; 0x24
			}
			if (messageToSend < 0) {
 8002312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002314:	2b00      	cmp	r3, #0
 8002316:	da01      	bge.n	800231c <HAL_UART_RxCpltCallback+0xc8>
				messageToSend = 0;
 8002318:	2300      	movs	r3, #0
 800231a:	627b      	str	r3, [r7, #36]	; 0x24
			}
			pidController.referenceSignal = messageToSend;
 800231c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800231e:	f7fe f921 	bl	8000564 <__aeabi_i2d>
 8002322:	4602      	mov	r2, r0
 8002324:	460b      	mov	r3, r1
 8002326:	4906      	ldr	r1, [pc, #24]	; (8002340 <HAL_UART_RxCpltCallback+0xec>)
 8002328:	e9c1 2300 	strd	r2, r3, [r1]
		}
//		 HAL_UART_Receive(&huart3, usart_Message, 5, 5);
	}
}
 800232c:	bf00      	nop
 800232e:	3728      	adds	r7, #40	; 0x28
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	200002f4 	.word	0x200002f4
 8002338:	200000e0 	.word	0x200000e0
 800233c:	20000000 	.word	0x20000000
 8002340:	20000138 	.word	0x20000138

08002344 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002348:	4b14      	ldr	r3, [pc, #80]	; (800239c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800234a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800234e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002350:	4b12      	ldr	r3, [pc, #72]	; (800239c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002352:	2206      	movs	r2, #6
 8002354:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002356:	4b11      	ldr	r3, [pc, #68]	; (800239c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002358:	2202      	movs	r2, #2
 800235a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800235c:	4b0f      	ldr	r3, [pc, #60]	; (800239c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800235e:	2200      	movs	r2, #0
 8002360:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002362:	4b0e      	ldr	r3, [pc, #56]	; (800239c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002364:	2202      	movs	r2, #2
 8002366:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002368:	4b0c      	ldr	r3, [pc, #48]	; (800239c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800236a:	2201      	movs	r2, #1
 800236c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800236e:	4b0b      	ldr	r3, [pc, #44]	; (800239c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002370:	2200      	movs	r2, #0
 8002372:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002374:	4b09      	ldr	r3, [pc, #36]	; (800239c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002376:	2200      	movs	r2, #0
 8002378:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800237a:	4b08      	ldr	r3, [pc, #32]	; (800239c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800237c:	2201      	movs	r2, #1
 800237e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002380:	4b06      	ldr	r3, [pc, #24]	; (800239c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002382:	2200      	movs	r2, #0
 8002384:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002386:	4805      	ldr	r0, [pc, #20]	; (800239c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002388:	f001 f88c 	bl	80034a4 <HAL_PCD_Init>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002392:	f7ff f871 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002396:	bf00      	nop
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	20000378 	.word	0x20000378

080023a0 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b08a      	sub	sp, #40	; 0x28
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a8:	f107 0314 	add.w	r3, r7, #20
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	605a      	str	r2, [r3, #4]
 80023b2:	609a      	str	r2, [r3, #8]
 80023b4:	60da      	str	r2, [r3, #12]
 80023b6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023c0:	d141      	bne.n	8002446 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023c2:	4b23      	ldr	r3, [pc, #140]	; (8002450 <HAL_PCD_MspInit+0xb0>)
 80023c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c6:	4a22      	ldr	r2, [pc, #136]	; (8002450 <HAL_PCD_MspInit+0xb0>)
 80023c8:	f043 0301 	orr.w	r3, r3, #1
 80023cc:	6313      	str	r3, [r2, #48]	; 0x30
 80023ce:	4b20      	ldr	r3, [pc, #128]	; (8002450 <HAL_PCD_MspInit+0xb0>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	613b      	str	r3, [r7, #16]
 80023d8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80023da:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80023de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e0:	2302      	movs	r3, #2
 80023e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e4:	2300      	movs	r3, #0
 80023e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023e8:	2303      	movs	r3, #3
 80023ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80023ec:	230a      	movs	r3, #10
 80023ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023f0:	f107 0314 	add.w	r3, r7, #20
 80023f4:	4619      	mov	r1, r3
 80023f6:	4817      	ldr	r0, [pc, #92]	; (8002454 <HAL_PCD_MspInit+0xb4>)
 80023f8:	f000 fe76 	bl	80030e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80023fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002400:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002402:	2300      	movs	r3, #0
 8002404:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002406:	2300      	movs	r3, #0
 8002408:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800240a:	f107 0314 	add.w	r3, r7, #20
 800240e:	4619      	mov	r1, r3
 8002410:	4810      	ldr	r0, [pc, #64]	; (8002454 <HAL_PCD_MspInit+0xb4>)
 8002412:	f000 fe69 	bl	80030e8 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002416:	4b0e      	ldr	r3, [pc, #56]	; (8002450 <HAL_PCD_MspInit+0xb0>)
 8002418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800241a:	4a0d      	ldr	r2, [pc, #52]	; (8002450 <HAL_PCD_MspInit+0xb0>)
 800241c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002420:	6353      	str	r3, [r2, #52]	; 0x34
 8002422:	4b0b      	ldr	r3, [pc, #44]	; (8002450 <HAL_PCD_MspInit+0xb0>)
 8002424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002426:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800242a:	60fb      	str	r3, [r7, #12]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	4b08      	ldr	r3, [pc, #32]	; (8002450 <HAL_PCD_MspInit+0xb0>)
 8002430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002432:	4a07      	ldr	r2, [pc, #28]	; (8002450 <HAL_PCD_MspInit+0xb0>)
 8002434:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002438:	6453      	str	r3, [r2, #68]	; 0x44
 800243a:	4b05      	ldr	r3, [pc, #20]	; (8002450 <HAL_PCD_MspInit+0xb0>)
 800243c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800243e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002442:	60bb      	str	r3, [r7, #8]
 8002444:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8002446:	bf00      	nop
 8002448:	3728      	adds	r7, #40	; 0x28
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	40023800 	.word	0x40023800
 8002454:	40020000 	.word	0x40020000

08002458 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002458:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002490 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800245c:	480d      	ldr	r0, [pc, #52]	; (8002494 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800245e:	490e      	ldr	r1, [pc, #56]	; (8002498 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002460:	4a0e      	ldr	r2, [pc, #56]	; (800249c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002462:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002464:	e002      	b.n	800246c <LoopCopyDataInit>

08002466 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002466:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002468:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800246a:	3304      	adds	r3, #4

0800246c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800246c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800246e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002470:	d3f9      	bcc.n	8002466 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002472:	4a0b      	ldr	r2, [pc, #44]	; (80024a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002474:	4c0b      	ldr	r4, [pc, #44]	; (80024a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002476:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002478:	e001      	b.n	800247e <LoopFillZerobss>

0800247a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800247a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800247c:	3204      	adds	r2, #4

0800247e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800247e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002480:	d3fb      	bcc.n	800247a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002482:	f7ff f91d 	bl	80016c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002486:	f005 fb45 	bl	8007b14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800248a:	f7fe ff29 	bl	80012e0 <main>
  bx  lr    
 800248e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002490:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002494:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002498:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800249c:	08008474 	.word	0x08008474
  ldr r2, =_sbss
 80024a0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80024a4:	20000790 	.word	0x20000790

080024a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024a8:	e7fe      	b.n	80024a8 <ADC_IRQHandler>

080024aa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024ae:	2003      	movs	r0, #3
 80024b0:	f000 fd46 	bl	8002f40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024b4:	2000      	movs	r0, #0
 80024b6:	f000 f805 	bl	80024c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024ba:	f7ff f853 	bl	8001564 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024be:	2300      	movs	r3, #0
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024cc:	4b12      	ldr	r3, [pc, #72]	; (8002518 <HAL_InitTick+0x54>)
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	4b12      	ldr	r3, [pc, #72]	; (800251c <HAL_InitTick+0x58>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	4619      	mov	r1, r3
 80024d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024da:	fbb3 f3f1 	udiv	r3, r3, r1
 80024de:	fbb2 f3f3 	udiv	r3, r2, r3
 80024e2:	4618      	mov	r0, r3
 80024e4:	f000 fd61 	bl	8002faa <HAL_SYSTICK_Config>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e00e      	b.n	8002510 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2b0f      	cmp	r3, #15
 80024f6:	d80a      	bhi.n	800250e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024f8:	2200      	movs	r2, #0
 80024fa:	6879      	ldr	r1, [r7, #4]
 80024fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002500:	f000 fd29 	bl	8002f56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002504:	4a06      	ldr	r2, [pc, #24]	; (8002520 <HAL_InitTick+0x5c>)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800250a:	2300      	movs	r3, #0
 800250c:	e000      	b.n	8002510 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
}
 8002510:	4618      	mov	r0, r3
 8002512:	3708      	adds	r7, #8
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	20000004 	.word	0x20000004
 800251c:	2000000c 	.word	0x2000000c
 8002520:	20000008 	.word	0x20000008

08002524 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002528:	4b06      	ldr	r3, [pc, #24]	; (8002544 <HAL_IncTick+0x20>)
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	461a      	mov	r2, r3
 800252e:	4b06      	ldr	r3, [pc, #24]	; (8002548 <HAL_IncTick+0x24>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4413      	add	r3, r2
 8002534:	4a04      	ldr	r2, [pc, #16]	; (8002548 <HAL_IncTick+0x24>)
 8002536:	6013      	str	r3, [r2, #0]
}
 8002538:	bf00      	nop
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	2000000c 	.word	0x2000000c
 8002548:	2000077c 	.word	0x2000077c

0800254c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  return uwTick;
 8002550:	4b03      	ldr	r3, [pc, #12]	; (8002560 <HAL_GetTick+0x14>)
 8002552:	681b      	ldr	r3, [r3, #0]
}
 8002554:	4618      	mov	r0, r3
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	2000077c 	.word	0x2000077c

08002564 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800256c:	f7ff ffee 	bl	800254c <HAL_GetTick>
 8002570:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800257c:	d005      	beq.n	800258a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800257e:	4b0a      	ldr	r3, [pc, #40]	; (80025a8 <HAL_Delay+0x44>)
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	461a      	mov	r2, r3
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	4413      	add	r3, r2
 8002588:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800258a:	bf00      	nop
 800258c:	f7ff ffde 	bl	800254c <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	68fa      	ldr	r2, [r7, #12]
 8002598:	429a      	cmp	r2, r3
 800259a:	d8f7      	bhi.n	800258c <HAL_Delay+0x28>
  {
  }
}
 800259c:	bf00      	nop
 800259e:	bf00      	nop
 80025a0:	3710      	adds	r7, #16
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	2000000c 	.word	0x2000000c

080025ac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025b4:	2300      	movs	r3, #0
 80025b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d101      	bne.n	80025c2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e031      	b.n	8002626 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d109      	bne.n	80025de <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f7fe fce4 	bl	8000f98 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e2:	f003 0310 	and.w	r3, r3, #16
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d116      	bne.n	8002618 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025ee:	4b10      	ldr	r3, [pc, #64]	; (8002630 <HAL_ADC_Init+0x84>)
 80025f0:	4013      	ands	r3, r2
 80025f2:	f043 0202 	orr.w	r2, r3, #2
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 fad6 	bl	8002bac <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260a:	f023 0303 	bic.w	r3, r3, #3
 800260e:	f043 0201 	orr.w	r2, r3, #1
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	641a      	str	r2, [r3, #64]	; 0x40
 8002616:	e001      	b.n	800261c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002624:	7bfb      	ldrb	r3, [r7, #15]
}
 8002626:	4618      	mov	r0, r3
 8002628:	3710      	adds	r7, #16
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	ffffeefd 	.word	0xffffeefd

08002634 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002634:	b480      	push	{r7}
 8002636:	b085      	sub	sp, #20
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 800263c:	2300      	movs	r3, #0
 800263e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002646:	2b01      	cmp	r3, #1
 8002648:	d101      	bne.n	800264e <HAL_ADC_Start+0x1a>
 800264a:	2302      	movs	r3, #2
 800264c:	e0ad      	b.n	80027aa <HAL_ADC_Start+0x176>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2201      	movs	r2, #1
 8002652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f003 0301 	and.w	r3, r3, #1
 8002660:	2b01      	cmp	r3, #1
 8002662:	d018      	beq.n	8002696 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	689a      	ldr	r2, [r3, #8]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f042 0201 	orr.w	r2, r2, #1
 8002672:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002674:	4b50      	ldr	r3, [pc, #320]	; (80027b8 <HAL_ADC_Start+0x184>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a50      	ldr	r2, [pc, #320]	; (80027bc <HAL_ADC_Start+0x188>)
 800267a:	fba2 2303 	umull	r2, r3, r2, r3
 800267e:	0c9a      	lsrs	r2, r3, #18
 8002680:	4613      	mov	r3, r2
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	4413      	add	r3, r2
 8002686:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002688:	e002      	b.n	8002690 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	3b01      	subs	r3, #1
 800268e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1f9      	bne.n	800268a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	f003 0301 	and.w	r3, r3, #1
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d175      	bne.n	8002790 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026a8:	4b45      	ldr	r3, [pc, #276]	; (80027c0 <HAL_ADC_Start+0x18c>)
 80026aa:	4013      	ands	r3, r2
 80026ac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d007      	beq.n	80026d2 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80026ca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026de:	d106      	bne.n	80026ee <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e4:	f023 0206 	bic.w	r2, r3, #6
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	645a      	str	r2, [r3, #68]	; 0x44
 80026ec:	e002      	b.n	80026f4 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002704:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002706:	4b2f      	ldr	r3, [pc, #188]	; (80027c4 <HAL_ADC_Start+0x190>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f003 031f 	and.w	r3, r3, #31
 800270e:	2b00      	cmp	r3, #0
 8002710:	d10f      	bne.n	8002732 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d143      	bne.n	80027a8 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	689a      	ldr	r2, [r3, #8]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800272e:	609a      	str	r2, [r3, #8]
 8002730:	e03a      	b.n	80027a8 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a24      	ldr	r2, [pc, #144]	; (80027c8 <HAL_ADC_Start+0x194>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d10e      	bne.n	800275a <HAL_ADC_Start+0x126>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d107      	bne.n	800275a <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	689a      	ldr	r2, [r3, #8]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002758:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800275a:	4b1a      	ldr	r3, [pc, #104]	; (80027c4 <HAL_ADC_Start+0x190>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f003 0310 	and.w	r3, r3, #16
 8002762:	2b00      	cmp	r3, #0
 8002764:	d120      	bne.n	80027a8 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a18      	ldr	r2, [pc, #96]	; (80027cc <HAL_ADC_Start+0x198>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d11b      	bne.n	80027a8 <HAL_ADC_Start+0x174>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d114      	bne.n	80027a8 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	689a      	ldr	r2, [r3, #8]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800278c:	609a      	str	r2, [r3, #8]
 800278e:	e00b      	b.n	80027a8 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002794:	f043 0210 	orr.w	r2, r3, #16
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a0:	f043 0201 	orr.w	r2, r3, #1
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3714      	adds	r7, #20
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	20000004 	.word	0x20000004
 80027bc:	431bde83 	.word	0x431bde83
 80027c0:	fffff8fe 	.word	0xfffff8fe
 80027c4:	40012300 	.word	0x40012300
 80027c8:	40012000 	.word	0x40012000
 80027cc:	40012200 	.word	0x40012200

080027d0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80027da:	2300      	movs	r3, #0
 80027dc:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027ec:	d113      	bne.n	8002816 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80027f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027fc:	d10b      	bne.n	8002816 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002802:	f043 0220 	orr.w	r2, r3, #32
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e063      	b.n	80028de <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002816:	f7ff fe99 	bl	800254c <HAL_GetTick>
 800281a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800281c:	e021      	b.n	8002862 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002824:	d01d      	beq.n	8002862 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d007      	beq.n	800283c <HAL_ADC_PollForConversion+0x6c>
 800282c:	f7ff fe8e 	bl	800254c <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	683a      	ldr	r2, [r7, #0]
 8002838:	429a      	cmp	r2, r3
 800283a:	d212      	bcs.n	8002862 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b02      	cmp	r3, #2
 8002848:	d00b      	beq.n	8002862 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	f043 0204 	orr.w	r2, r3, #4
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e03d      	b.n	80028de <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0302 	and.w	r3, r3, #2
 800286c:	2b02      	cmp	r3, #2
 800286e:	d1d6      	bne.n	800281e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f06f 0212 	mvn.w	r2, #18
 8002878:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d123      	bne.n	80028dc <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002898:	2b00      	cmp	r3, #0
 800289a:	d11f      	bne.n	80028dc <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d006      	beq.n	80028b8 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d111      	bne.n	80028dc <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d105      	bne.n	80028dc <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d4:	f043 0201 	orr.w	r2, r3, #1
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3710      	adds	r7, #16
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80028e6:	b480      	push	{r7}
 80028e8:	b083      	sub	sp, #12
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800290a:	2300      	movs	r3, #0
 800290c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002914:	2b01      	cmp	r3, #1
 8002916:	d101      	bne.n	800291c <HAL_ADC_ConfigChannel+0x1c>
 8002918:	2302      	movs	r3, #2
 800291a:	e136      	b.n	8002b8a <HAL_ADC_ConfigChannel+0x28a>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2b09      	cmp	r3, #9
 800292a:	d93a      	bls.n	80029a2 <HAL_ADC_ConfigChannel+0xa2>
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002934:	d035      	beq.n	80029a2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	68d9      	ldr	r1, [r3, #12]
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	b29b      	uxth	r3, r3
 8002942:	461a      	mov	r2, r3
 8002944:	4613      	mov	r3, r2
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	4413      	add	r3, r2
 800294a:	3b1e      	subs	r3, #30
 800294c:	2207      	movs	r2, #7
 800294e:	fa02 f303 	lsl.w	r3, r2, r3
 8002952:	43da      	mvns	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	400a      	ands	r2, r1
 800295a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a8d      	ldr	r2, [pc, #564]	; (8002b98 <HAL_ADC_ConfigChannel+0x298>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d10a      	bne.n	800297c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	68d9      	ldr	r1, [r3, #12]
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	061a      	lsls	r2, r3, #24
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	430a      	orrs	r2, r1
 8002978:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800297a:	e035      	b.n	80029e8 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68d9      	ldr	r1, [r3, #12]
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	689a      	ldr	r2, [r3, #8]
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	b29b      	uxth	r3, r3
 800298c:	4618      	mov	r0, r3
 800298e:	4603      	mov	r3, r0
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	4403      	add	r3, r0
 8002994:	3b1e      	subs	r3, #30
 8002996:	409a      	lsls	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	430a      	orrs	r2, r1
 800299e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029a0:	e022      	b.n	80029e8 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	6919      	ldr	r1, [r3, #16]
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	461a      	mov	r2, r3
 80029b0:	4613      	mov	r3, r2
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	4413      	add	r3, r2
 80029b6:	2207      	movs	r2, #7
 80029b8:	fa02 f303 	lsl.w	r3, r2, r3
 80029bc:	43da      	mvns	r2, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	400a      	ands	r2, r1
 80029c4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	6919      	ldr	r1, [r3, #16]
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	689a      	ldr	r2, [r3, #8]
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	4618      	mov	r0, r3
 80029d8:	4603      	mov	r3, r0
 80029da:	005b      	lsls	r3, r3, #1
 80029dc:	4403      	add	r3, r0
 80029de:	409a      	lsls	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	430a      	orrs	r2, r1
 80029e6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	2b06      	cmp	r3, #6
 80029ee:	d824      	bhi.n	8002a3a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	685a      	ldr	r2, [r3, #4]
 80029fa:	4613      	mov	r3, r2
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	4413      	add	r3, r2
 8002a00:	3b05      	subs	r3, #5
 8002a02:	221f      	movs	r2, #31
 8002a04:	fa02 f303 	lsl.w	r3, r2, r3
 8002a08:	43da      	mvns	r2, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	400a      	ands	r2, r1
 8002a10:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	4618      	mov	r0, r3
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685a      	ldr	r2, [r3, #4]
 8002a24:	4613      	mov	r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	4413      	add	r3, r2
 8002a2a:	3b05      	subs	r3, #5
 8002a2c:	fa00 f203 	lsl.w	r2, r0, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	430a      	orrs	r2, r1
 8002a36:	635a      	str	r2, [r3, #52]	; 0x34
 8002a38:	e04c      	b.n	8002ad4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	2b0c      	cmp	r3, #12
 8002a40:	d824      	bhi.n	8002a8c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685a      	ldr	r2, [r3, #4]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	4413      	add	r3, r2
 8002a52:	3b23      	subs	r3, #35	; 0x23
 8002a54:	221f      	movs	r2, #31
 8002a56:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5a:	43da      	mvns	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	400a      	ands	r2, r1
 8002a62:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	4618      	mov	r0, r3
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	685a      	ldr	r2, [r3, #4]
 8002a76:	4613      	mov	r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	4413      	add	r3, r2
 8002a7c:	3b23      	subs	r3, #35	; 0x23
 8002a7e:	fa00 f203 	lsl.w	r2, r0, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	430a      	orrs	r2, r1
 8002a88:	631a      	str	r2, [r3, #48]	; 0x30
 8002a8a:	e023      	b.n	8002ad4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685a      	ldr	r2, [r3, #4]
 8002a96:	4613      	mov	r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	4413      	add	r3, r2
 8002a9c:	3b41      	subs	r3, #65	; 0x41
 8002a9e:	221f      	movs	r2, #31
 8002aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa4:	43da      	mvns	r2, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	400a      	ands	r2, r1
 8002aac:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	4618      	mov	r0, r3
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685a      	ldr	r2, [r3, #4]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	4413      	add	r3, r2
 8002ac6:	3b41      	subs	r3, #65	; 0x41
 8002ac8:	fa00 f203 	lsl.w	r2, r0, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a30      	ldr	r2, [pc, #192]	; (8002b9c <HAL_ADC_ConfigChannel+0x29c>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d10a      	bne.n	8002af4 <HAL_ADC_ConfigChannel+0x1f4>
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ae6:	d105      	bne.n	8002af4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002ae8:	4b2d      	ldr	r3, [pc, #180]	; (8002ba0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	4a2c      	ldr	r2, [pc, #176]	; (8002ba0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002aee:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002af2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a28      	ldr	r2, [pc, #160]	; (8002b9c <HAL_ADC_ConfigChannel+0x29c>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d10f      	bne.n	8002b1e <HAL_ADC_ConfigChannel+0x21e>
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2b12      	cmp	r3, #18
 8002b04:	d10b      	bne.n	8002b1e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002b06:	4b26      	ldr	r3, [pc, #152]	; (8002ba0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	4a25      	ldr	r2, [pc, #148]	; (8002ba0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002b0c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002b10:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002b12:	4b23      	ldr	r3, [pc, #140]	; (8002ba0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	4a22      	ldr	r2, [pc, #136]	; (8002ba0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002b18:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b1c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a1e      	ldr	r2, [pc, #120]	; (8002b9c <HAL_ADC_ConfigChannel+0x29c>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d12b      	bne.n	8002b80 <HAL_ADC_ConfigChannel+0x280>
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a1a      	ldr	r2, [pc, #104]	; (8002b98 <HAL_ADC_ConfigChannel+0x298>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d003      	beq.n	8002b3a <HAL_ADC_ConfigChannel+0x23a>
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2b11      	cmp	r3, #17
 8002b38:	d122      	bne.n	8002b80 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002b3a:	4b19      	ldr	r3, [pc, #100]	; (8002ba0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	4a18      	ldr	r2, [pc, #96]	; (8002ba0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002b40:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002b44:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002b46:	4b16      	ldr	r3, [pc, #88]	; (8002ba0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	4a15      	ldr	r2, [pc, #84]	; (8002ba0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002b4c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b50:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a10      	ldr	r2, [pc, #64]	; (8002b98 <HAL_ADC_ConfigChannel+0x298>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d111      	bne.n	8002b80 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002b5c:	4b11      	ldr	r3, [pc, #68]	; (8002ba4 <HAL_ADC_ConfigChannel+0x2a4>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a11      	ldr	r2, [pc, #68]	; (8002ba8 <HAL_ADC_ConfigChannel+0x2a8>)
 8002b62:	fba2 2303 	umull	r2, r3, r2, r3
 8002b66:	0c9a      	lsrs	r2, r3, #18
 8002b68:	4613      	mov	r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	4413      	add	r3, r2
 8002b6e:	005b      	lsls	r3, r3, #1
 8002b70:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002b72:	e002      	b.n	8002b7a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	3b01      	subs	r3, #1
 8002b78:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d1f9      	bne.n	8002b74 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3714      	adds	r7, #20
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	10000012 	.word	0x10000012
 8002b9c:	40012000 	.word	0x40012000
 8002ba0:	40012300 	.word	0x40012300
 8002ba4:	20000004 	.word	0x20000004
 8002ba8:	431bde83 	.word	0x431bde83

08002bac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002bb4:	4b78      	ldr	r3, [pc, #480]	; (8002d98 <ADC_Init+0x1ec>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	4a77      	ldr	r2, [pc, #476]	; (8002d98 <ADC_Init+0x1ec>)
 8002bba:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002bbe:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002bc0:	4b75      	ldr	r3, [pc, #468]	; (8002d98 <ADC_Init+0x1ec>)
 8002bc2:	685a      	ldr	r2, [r3, #4]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	4973      	ldr	r1, [pc, #460]	; (8002d98 <ADC_Init+0x1ec>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	685a      	ldr	r2, [r3, #4]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bdc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	6859      	ldr	r1, [r3, #4]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	691b      	ldr	r3, [r3, #16]
 8002be8:	021a      	lsls	r2, r3, #8
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	685a      	ldr	r2, [r3, #4]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002c00:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	6859      	ldr	r1, [r3, #4]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	689a      	ldr	r2, [r3, #8]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	430a      	orrs	r2, r1
 8002c12:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	689a      	ldr	r2, [r3, #8]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c22:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	6899      	ldr	r1, [r3, #8]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	68da      	ldr	r2, [r3, #12]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	430a      	orrs	r2, r1
 8002c34:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c3a:	4a58      	ldr	r2, [pc, #352]	; (8002d9c <ADC_Init+0x1f0>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d022      	beq.n	8002c86 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	689a      	ldr	r2, [r3, #8]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c4e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	6899      	ldr	r1, [r3, #8]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	430a      	orrs	r2, r1
 8002c60:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	689a      	ldr	r2, [r3, #8]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c70:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	6899      	ldr	r1, [r3, #8]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	430a      	orrs	r2, r1
 8002c82:	609a      	str	r2, [r3, #8]
 8002c84:	e00f      	b.n	8002ca6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	689a      	ldr	r2, [r3, #8]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c94:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	689a      	ldr	r2, [r3, #8]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ca4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	689a      	ldr	r2, [r3, #8]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f022 0202 	bic.w	r2, r2, #2
 8002cb4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	6899      	ldr	r1, [r3, #8]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	005a      	lsls	r2, r3, #1
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d01b      	beq.n	8002d0c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	685a      	ldr	r2, [r3, #4]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ce2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	685a      	ldr	r2, [r3, #4]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002cf2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	6859      	ldr	r1, [r3, #4]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	035a      	lsls	r2, r3, #13
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	430a      	orrs	r2, r1
 8002d08:	605a      	str	r2, [r3, #4]
 8002d0a:	e007      	b.n	8002d1c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	685a      	ldr	r2, [r3, #4]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d1a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002d2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	69db      	ldr	r3, [r3, #28]
 8002d36:	3b01      	subs	r3, #1
 8002d38:	051a      	lsls	r2, r3, #20
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	689a      	ldr	r2, [r3, #8]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002d50:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	6899      	ldr	r1, [r3, #8]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d5e:	025a      	lsls	r2, r3, #9
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	430a      	orrs	r2, r1
 8002d66:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	689a      	ldr	r2, [r3, #8]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d76:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	6899      	ldr	r1, [r3, #8]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	029a      	lsls	r2, r3, #10
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	609a      	str	r2, [r3, #8]
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr
 8002d98:	40012300 	.word	0x40012300
 8002d9c:	0f000001 	.word	0x0f000001

08002da0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b085      	sub	sp, #20
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f003 0307 	and.w	r3, r3, #7
 8002dae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002db0:	4b0b      	ldr	r3, [pc, #44]	; (8002de0 <__NVIC_SetPriorityGrouping+0x40>)
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002db6:	68ba      	ldr	r2, [r7, #8]
 8002db8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002dc8:	4b06      	ldr	r3, [pc, #24]	; (8002de4 <__NVIC_SetPriorityGrouping+0x44>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dce:	4a04      	ldr	r2, [pc, #16]	; (8002de0 <__NVIC_SetPriorityGrouping+0x40>)
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	60d3      	str	r3, [r2, #12]
}
 8002dd4:	bf00      	nop
 8002dd6:	3714      	adds	r7, #20
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr
 8002de0:	e000ed00 	.word	0xe000ed00
 8002de4:	05fa0000 	.word	0x05fa0000

08002de8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002dec:	4b04      	ldr	r3, [pc, #16]	; (8002e00 <__NVIC_GetPriorityGrouping+0x18>)
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	0a1b      	lsrs	r3, r3, #8
 8002df2:	f003 0307 	and.w	r3, r3, #7
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr
 8002e00:	e000ed00 	.word	0xe000ed00

08002e04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	db0b      	blt.n	8002e2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e16:	79fb      	ldrb	r3, [r7, #7]
 8002e18:	f003 021f 	and.w	r2, r3, #31
 8002e1c:	4907      	ldr	r1, [pc, #28]	; (8002e3c <__NVIC_EnableIRQ+0x38>)
 8002e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e22:	095b      	lsrs	r3, r3, #5
 8002e24:	2001      	movs	r0, #1
 8002e26:	fa00 f202 	lsl.w	r2, r0, r2
 8002e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e2e:	bf00      	nop
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	e000e100 	.word	0xe000e100

08002e40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	4603      	mov	r3, r0
 8002e48:	6039      	str	r1, [r7, #0]
 8002e4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	db0a      	blt.n	8002e6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	b2da      	uxtb	r2, r3
 8002e58:	490c      	ldr	r1, [pc, #48]	; (8002e8c <__NVIC_SetPriority+0x4c>)
 8002e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e5e:	0112      	lsls	r2, r2, #4
 8002e60:	b2d2      	uxtb	r2, r2
 8002e62:	440b      	add	r3, r1
 8002e64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e68:	e00a      	b.n	8002e80 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	b2da      	uxtb	r2, r3
 8002e6e:	4908      	ldr	r1, [pc, #32]	; (8002e90 <__NVIC_SetPriority+0x50>)
 8002e70:	79fb      	ldrb	r3, [r7, #7]
 8002e72:	f003 030f 	and.w	r3, r3, #15
 8002e76:	3b04      	subs	r3, #4
 8002e78:	0112      	lsls	r2, r2, #4
 8002e7a:	b2d2      	uxtb	r2, r2
 8002e7c:	440b      	add	r3, r1
 8002e7e:	761a      	strb	r2, [r3, #24]
}
 8002e80:	bf00      	nop
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr
 8002e8c:	e000e100 	.word	0xe000e100
 8002e90:	e000ed00 	.word	0xe000ed00

08002e94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b089      	sub	sp, #36	; 0x24
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f003 0307 	and.w	r3, r3, #7
 8002ea6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	f1c3 0307 	rsb	r3, r3, #7
 8002eae:	2b04      	cmp	r3, #4
 8002eb0:	bf28      	it	cs
 8002eb2:	2304      	movcs	r3, #4
 8002eb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	3304      	adds	r3, #4
 8002eba:	2b06      	cmp	r3, #6
 8002ebc:	d902      	bls.n	8002ec4 <NVIC_EncodePriority+0x30>
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	3b03      	subs	r3, #3
 8002ec2:	e000      	b.n	8002ec6 <NVIC_EncodePriority+0x32>
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed2:	43da      	mvns	r2, r3
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	401a      	ands	r2, r3
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002edc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee6:	43d9      	mvns	r1, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eec:	4313      	orrs	r3, r2
         );
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3724      	adds	r7, #36	; 0x24
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
	...

08002efc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	3b01      	subs	r3, #1
 8002f08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f0c:	d301      	bcc.n	8002f12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e00f      	b.n	8002f32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f12:	4a0a      	ldr	r2, [pc, #40]	; (8002f3c <SysTick_Config+0x40>)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	3b01      	subs	r3, #1
 8002f18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f1a:	210f      	movs	r1, #15
 8002f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f20:	f7ff ff8e 	bl	8002e40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f24:	4b05      	ldr	r3, [pc, #20]	; (8002f3c <SysTick_Config+0x40>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f2a:	4b04      	ldr	r3, [pc, #16]	; (8002f3c <SysTick_Config+0x40>)
 8002f2c:	2207      	movs	r2, #7
 8002f2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3708      	adds	r7, #8
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	e000e010 	.word	0xe000e010

08002f40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f7ff ff29 	bl	8002da0 <__NVIC_SetPriorityGrouping>
}
 8002f4e:	bf00      	nop
 8002f50:	3708      	adds	r7, #8
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b086      	sub	sp, #24
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	60b9      	str	r1, [r7, #8]
 8002f60:	607a      	str	r2, [r7, #4]
 8002f62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002f64:	2300      	movs	r3, #0
 8002f66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f68:	f7ff ff3e 	bl	8002de8 <__NVIC_GetPriorityGrouping>
 8002f6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	68b9      	ldr	r1, [r7, #8]
 8002f72:	6978      	ldr	r0, [r7, #20]
 8002f74:	f7ff ff8e 	bl	8002e94 <NVIC_EncodePriority>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f7e:	4611      	mov	r1, r2
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7ff ff5d 	bl	8002e40 <__NVIC_SetPriority>
}
 8002f86:	bf00      	nop
 8002f88:	3718      	adds	r7, #24
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b082      	sub	sp, #8
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	4603      	mov	r3, r0
 8002f96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7ff ff31 	bl	8002e04 <__NVIC_EnableIRQ>
}
 8002fa2:	bf00      	nop
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b082      	sub	sp, #8
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f7ff ffa2 	bl	8002efc <SysTick_Config>
 8002fb8:	4603      	mov	r3, r0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3708      	adds	r7, #8
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}

08002fc2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002fc2:	b580      	push	{r7, lr}
 8002fc4:	b084      	sub	sp, #16
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fce:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002fd0:	f7ff fabc 	bl	800254c <HAL_GetTick>
 8002fd4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d008      	beq.n	8002ff4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2280      	movs	r2, #128	; 0x80
 8002fe6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e052      	b.n	800309a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f022 0216 	bic.w	r2, r2, #22
 8003002:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	695a      	ldr	r2, [r3, #20]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003012:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003018:	2b00      	cmp	r3, #0
 800301a:	d103      	bne.n	8003024 <HAL_DMA_Abort+0x62>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003020:	2b00      	cmp	r3, #0
 8003022:	d007      	beq.n	8003034 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f022 0208 	bic.w	r2, r2, #8
 8003032:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f022 0201 	bic.w	r2, r2, #1
 8003042:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003044:	e013      	b.n	800306e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003046:	f7ff fa81 	bl	800254c <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	2b05      	cmp	r3, #5
 8003052:	d90c      	bls.n	800306e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2220      	movs	r2, #32
 8003058:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2203      	movs	r2, #3
 800305e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e015      	b.n	800309a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0301 	and.w	r3, r3, #1
 8003078:	2b00      	cmp	r3, #0
 800307a:	d1e4      	bne.n	8003046 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003080:	223f      	movs	r2, #63	; 0x3f
 8003082:	409a      	lsls	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8003098:	2300      	movs	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	3710      	adds	r7, #16
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80030a2:	b480      	push	{r7}
 80030a4:	b083      	sub	sp, #12
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d004      	beq.n	80030c0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2280      	movs	r2, #128	; 0x80
 80030ba:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e00c      	b.n	80030da <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2205      	movs	r2, #5
 80030c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f022 0201 	bic.w	r2, r2, #1
 80030d6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	370c      	adds	r7, #12
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
	...

080030e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b089      	sub	sp, #36	; 0x24
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80030f2:	2300      	movs	r3, #0
 80030f4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80030f6:	2300      	movs	r3, #0
 80030f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80030fa:	2300      	movs	r3, #0
 80030fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80030fe:	2300      	movs	r3, #0
 8003100:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003102:	2300      	movs	r3, #0
 8003104:	61fb      	str	r3, [r7, #28]
 8003106:	e175      	b.n	80033f4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003108:	2201      	movs	r2, #1
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	fa02 f303 	lsl.w	r3, r2, r3
 8003110:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	697a      	ldr	r2, [r7, #20]
 8003118:	4013      	ands	r3, r2
 800311a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800311c:	693a      	ldr	r2, [r7, #16]
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	429a      	cmp	r2, r3
 8003122:	f040 8164 	bne.w	80033ee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f003 0303 	and.w	r3, r3, #3
 800312e:	2b01      	cmp	r3, #1
 8003130:	d005      	beq.n	800313e <HAL_GPIO_Init+0x56>
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f003 0303 	and.w	r3, r3, #3
 800313a:	2b02      	cmp	r3, #2
 800313c:	d130      	bne.n	80031a0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	005b      	lsls	r3, r3, #1
 8003148:	2203      	movs	r2, #3
 800314a:	fa02 f303 	lsl.w	r3, r2, r3
 800314e:	43db      	mvns	r3, r3
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	4013      	ands	r3, r2
 8003154:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	68da      	ldr	r2, [r3, #12]
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	005b      	lsls	r3, r3, #1
 800315e:	fa02 f303 	lsl.w	r3, r2, r3
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	4313      	orrs	r3, r2
 8003166:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	69ba      	ldr	r2, [r7, #24]
 800316c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003174:	2201      	movs	r2, #1
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	fa02 f303 	lsl.w	r3, r2, r3
 800317c:	43db      	mvns	r3, r3
 800317e:	69ba      	ldr	r2, [r7, #24]
 8003180:	4013      	ands	r3, r2
 8003182:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	091b      	lsrs	r3, r3, #4
 800318a:	f003 0201 	and.w	r2, r3, #1
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	fa02 f303 	lsl.w	r3, r2, r3
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	4313      	orrs	r3, r2
 8003198:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f003 0303 	and.w	r3, r3, #3
 80031a8:	2b03      	cmp	r3, #3
 80031aa:	d017      	beq.n	80031dc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	2203      	movs	r2, #3
 80031b8:	fa02 f303 	lsl.w	r3, r2, r3
 80031bc:	43db      	mvns	r3, r3
 80031be:	69ba      	ldr	r2, [r7, #24]
 80031c0:	4013      	ands	r3, r2
 80031c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	689a      	ldr	r2, [r3, #8]
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	005b      	lsls	r3, r3, #1
 80031cc:	fa02 f303 	lsl.w	r3, r2, r3
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	69ba      	ldr	r2, [r7, #24]
 80031da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f003 0303 	and.w	r3, r3, #3
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d123      	bne.n	8003230 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	08da      	lsrs	r2, r3, #3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	3208      	adds	r2, #8
 80031f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	f003 0307 	and.w	r3, r3, #7
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	220f      	movs	r2, #15
 8003200:	fa02 f303 	lsl.w	r3, r2, r3
 8003204:	43db      	mvns	r3, r3
 8003206:	69ba      	ldr	r2, [r7, #24]
 8003208:	4013      	ands	r3, r2
 800320a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	691a      	ldr	r2, [r3, #16]
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	f003 0307 	and.w	r3, r3, #7
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	fa02 f303 	lsl.w	r3, r2, r3
 800321c:	69ba      	ldr	r2, [r7, #24]
 800321e:	4313      	orrs	r3, r2
 8003220:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	08da      	lsrs	r2, r3, #3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	3208      	adds	r2, #8
 800322a:	69b9      	ldr	r1, [r7, #24]
 800322c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	2203      	movs	r2, #3
 800323c:	fa02 f303 	lsl.w	r3, r2, r3
 8003240:	43db      	mvns	r3, r3
 8003242:	69ba      	ldr	r2, [r7, #24]
 8003244:	4013      	ands	r3, r2
 8003246:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f003 0203 	and.w	r2, r3, #3
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	005b      	lsls	r3, r3, #1
 8003254:	fa02 f303 	lsl.w	r3, r2, r3
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	4313      	orrs	r3, r2
 800325c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800326c:	2b00      	cmp	r3, #0
 800326e:	f000 80be 	beq.w	80033ee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003272:	4b66      	ldr	r3, [pc, #408]	; (800340c <HAL_GPIO_Init+0x324>)
 8003274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003276:	4a65      	ldr	r2, [pc, #404]	; (800340c <HAL_GPIO_Init+0x324>)
 8003278:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800327c:	6453      	str	r3, [r2, #68]	; 0x44
 800327e:	4b63      	ldr	r3, [pc, #396]	; (800340c <HAL_GPIO_Init+0x324>)
 8003280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003282:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003286:	60fb      	str	r3, [r7, #12]
 8003288:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800328a:	4a61      	ldr	r2, [pc, #388]	; (8003410 <HAL_GPIO_Init+0x328>)
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	089b      	lsrs	r3, r3, #2
 8003290:	3302      	adds	r3, #2
 8003292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003296:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	f003 0303 	and.w	r3, r3, #3
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	220f      	movs	r2, #15
 80032a2:	fa02 f303 	lsl.w	r3, r2, r3
 80032a6:	43db      	mvns	r3, r3
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	4013      	ands	r3, r2
 80032ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a58      	ldr	r2, [pc, #352]	; (8003414 <HAL_GPIO_Init+0x32c>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d037      	beq.n	8003326 <HAL_GPIO_Init+0x23e>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a57      	ldr	r2, [pc, #348]	; (8003418 <HAL_GPIO_Init+0x330>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d031      	beq.n	8003322 <HAL_GPIO_Init+0x23a>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a56      	ldr	r2, [pc, #344]	; (800341c <HAL_GPIO_Init+0x334>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d02b      	beq.n	800331e <HAL_GPIO_Init+0x236>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a55      	ldr	r2, [pc, #340]	; (8003420 <HAL_GPIO_Init+0x338>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d025      	beq.n	800331a <HAL_GPIO_Init+0x232>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a54      	ldr	r2, [pc, #336]	; (8003424 <HAL_GPIO_Init+0x33c>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d01f      	beq.n	8003316 <HAL_GPIO_Init+0x22e>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a53      	ldr	r2, [pc, #332]	; (8003428 <HAL_GPIO_Init+0x340>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d019      	beq.n	8003312 <HAL_GPIO_Init+0x22a>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a52      	ldr	r2, [pc, #328]	; (800342c <HAL_GPIO_Init+0x344>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d013      	beq.n	800330e <HAL_GPIO_Init+0x226>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a51      	ldr	r2, [pc, #324]	; (8003430 <HAL_GPIO_Init+0x348>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d00d      	beq.n	800330a <HAL_GPIO_Init+0x222>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a50      	ldr	r2, [pc, #320]	; (8003434 <HAL_GPIO_Init+0x34c>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d007      	beq.n	8003306 <HAL_GPIO_Init+0x21e>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a4f      	ldr	r2, [pc, #316]	; (8003438 <HAL_GPIO_Init+0x350>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d101      	bne.n	8003302 <HAL_GPIO_Init+0x21a>
 80032fe:	2309      	movs	r3, #9
 8003300:	e012      	b.n	8003328 <HAL_GPIO_Init+0x240>
 8003302:	230a      	movs	r3, #10
 8003304:	e010      	b.n	8003328 <HAL_GPIO_Init+0x240>
 8003306:	2308      	movs	r3, #8
 8003308:	e00e      	b.n	8003328 <HAL_GPIO_Init+0x240>
 800330a:	2307      	movs	r3, #7
 800330c:	e00c      	b.n	8003328 <HAL_GPIO_Init+0x240>
 800330e:	2306      	movs	r3, #6
 8003310:	e00a      	b.n	8003328 <HAL_GPIO_Init+0x240>
 8003312:	2305      	movs	r3, #5
 8003314:	e008      	b.n	8003328 <HAL_GPIO_Init+0x240>
 8003316:	2304      	movs	r3, #4
 8003318:	e006      	b.n	8003328 <HAL_GPIO_Init+0x240>
 800331a:	2303      	movs	r3, #3
 800331c:	e004      	b.n	8003328 <HAL_GPIO_Init+0x240>
 800331e:	2302      	movs	r3, #2
 8003320:	e002      	b.n	8003328 <HAL_GPIO_Init+0x240>
 8003322:	2301      	movs	r3, #1
 8003324:	e000      	b.n	8003328 <HAL_GPIO_Init+0x240>
 8003326:	2300      	movs	r3, #0
 8003328:	69fa      	ldr	r2, [r7, #28]
 800332a:	f002 0203 	and.w	r2, r2, #3
 800332e:	0092      	lsls	r2, r2, #2
 8003330:	4093      	lsls	r3, r2
 8003332:	69ba      	ldr	r2, [r7, #24]
 8003334:	4313      	orrs	r3, r2
 8003336:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003338:	4935      	ldr	r1, [pc, #212]	; (8003410 <HAL_GPIO_Init+0x328>)
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	089b      	lsrs	r3, r3, #2
 800333e:	3302      	adds	r3, #2
 8003340:	69ba      	ldr	r2, [r7, #24]
 8003342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003346:	4b3d      	ldr	r3, [pc, #244]	; (800343c <HAL_GPIO_Init+0x354>)
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	43db      	mvns	r3, r3
 8003350:	69ba      	ldr	r2, [r7, #24]
 8003352:	4013      	ands	r3, r2
 8003354:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d003      	beq.n	800336a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003362:	69ba      	ldr	r2, [r7, #24]
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	4313      	orrs	r3, r2
 8003368:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800336a:	4a34      	ldr	r2, [pc, #208]	; (800343c <HAL_GPIO_Init+0x354>)
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003370:	4b32      	ldr	r3, [pc, #200]	; (800343c <HAL_GPIO_Init+0x354>)
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	43db      	mvns	r3, r3
 800337a:	69ba      	ldr	r2, [r7, #24]
 800337c:	4013      	ands	r3, r2
 800337e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d003      	beq.n	8003394 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	4313      	orrs	r3, r2
 8003392:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003394:	4a29      	ldr	r2, [pc, #164]	; (800343c <HAL_GPIO_Init+0x354>)
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800339a:	4b28      	ldr	r3, [pc, #160]	; (800343c <HAL_GPIO_Init+0x354>)
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	43db      	mvns	r3, r3
 80033a4:	69ba      	ldr	r2, [r7, #24]
 80033a6:	4013      	ands	r3, r2
 80033a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d003      	beq.n	80033be <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80033b6:	69ba      	ldr	r2, [r7, #24]
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033be:	4a1f      	ldr	r2, [pc, #124]	; (800343c <HAL_GPIO_Init+0x354>)
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033c4:	4b1d      	ldr	r3, [pc, #116]	; (800343c <HAL_GPIO_Init+0x354>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	43db      	mvns	r3, r3
 80033ce:	69ba      	ldr	r2, [r7, #24]
 80033d0:	4013      	ands	r3, r2
 80033d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d003      	beq.n	80033e8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80033e0:	69ba      	ldr	r2, [r7, #24]
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033e8:	4a14      	ldr	r2, [pc, #80]	; (800343c <HAL_GPIO_Init+0x354>)
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	3301      	adds	r3, #1
 80033f2:	61fb      	str	r3, [r7, #28]
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	2b0f      	cmp	r3, #15
 80033f8:	f67f ae86 	bls.w	8003108 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80033fc:	bf00      	nop
 80033fe:	bf00      	nop
 8003400:	3724      	adds	r7, #36	; 0x24
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	40023800 	.word	0x40023800
 8003410:	40013800 	.word	0x40013800
 8003414:	40020000 	.word	0x40020000
 8003418:	40020400 	.word	0x40020400
 800341c:	40020800 	.word	0x40020800
 8003420:	40020c00 	.word	0x40020c00
 8003424:	40021000 	.word	0x40021000
 8003428:	40021400 	.word	0x40021400
 800342c:	40021800 	.word	0x40021800
 8003430:	40021c00 	.word	0x40021c00
 8003434:	40022000 	.word	0x40022000
 8003438:	40022400 	.word	0x40022400
 800343c:	40013c00 	.word	0x40013c00

08003440 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	460b      	mov	r3, r1
 800344a:	807b      	strh	r3, [r7, #2]
 800344c:	4613      	mov	r3, r2
 800344e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003450:	787b      	ldrb	r3, [r7, #1]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d003      	beq.n	800345e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003456:	887a      	ldrh	r2, [r7, #2]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800345c:	e003      	b.n	8003466 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800345e:	887b      	ldrh	r3, [r7, #2]
 8003460:	041a      	lsls	r2, r3, #16
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	619a      	str	r2, [r3, #24]
}
 8003466:	bf00      	nop
 8003468:	370c      	adds	r7, #12
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
	...

08003474 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	4603      	mov	r3, r0
 800347c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800347e:	4b08      	ldr	r3, [pc, #32]	; (80034a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003480:	695a      	ldr	r2, [r3, #20]
 8003482:	88fb      	ldrh	r3, [r7, #6]
 8003484:	4013      	ands	r3, r2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d006      	beq.n	8003498 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800348a:	4a05      	ldr	r2, [pc, #20]	; (80034a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800348c:	88fb      	ldrh	r3, [r7, #6]
 800348e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003490:	88fb      	ldrh	r3, [r7, #6]
 8003492:	4618      	mov	r0, r3
 8003494:	f7fd ff04 	bl	80012a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003498:	bf00      	nop
 800349a:	3708      	adds	r7, #8
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	40013c00 	.word	0x40013c00

080034a4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80034a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034a6:	b08f      	sub	sp, #60	; 0x3c
 80034a8:	af0a      	add	r7, sp, #40	; 0x28
 80034aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d101      	bne.n	80034b6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e116      	b.n	80036e4 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d106      	bne.n	80034d6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f7fe ff65 	bl	80023a0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2203      	movs	r2, #3
 80034da:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d102      	bne.n	80034f0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4618      	mov	r0, r3
 80034f6:	f004 f869 	bl	80075cc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	603b      	str	r3, [r7, #0]
 8003500:	687e      	ldr	r6, [r7, #4]
 8003502:	466d      	mov	r5, sp
 8003504:	f106 0410 	add.w	r4, r6, #16
 8003508:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800350a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800350c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800350e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003510:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003514:	e885 0003 	stmia.w	r5, {r0, r1}
 8003518:	1d33      	adds	r3, r6, #4
 800351a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800351c:	6838      	ldr	r0, [r7, #0]
 800351e:	f003 fffd 	bl	800751c <USB_CoreInit>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d005      	beq.n	8003534 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2202      	movs	r2, #2
 800352c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e0d7      	b.n	80036e4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2100      	movs	r1, #0
 800353a:	4618      	mov	r0, r3
 800353c:	f004 f857 	bl	80075ee <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003540:	2300      	movs	r3, #0
 8003542:	73fb      	strb	r3, [r7, #15]
 8003544:	e04a      	b.n	80035dc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003546:	7bfa      	ldrb	r2, [r7, #15]
 8003548:	6879      	ldr	r1, [r7, #4]
 800354a:	4613      	mov	r3, r2
 800354c:	00db      	lsls	r3, r3, #3
 800354e:	1a9b      	subs	r3, r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	440b      	add	r3, r1
 8003554:	333d      	adds	r3, #61	; 0x3d
 8003556:	2201      	movs	r2, #1
 8003558:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800355a:	7bfa      	ldrb	r2, [r7, #15]
 800355c:	6879      	ldr	r1, [r7, #4]
 800355e:	4613      	mov	r3, r2
 8003560:	00db      	lsls	r3, r3, #3
 8003562:	1a9b      	subs	r3, r3, r2
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	440b      	add	r3, r1
 8003568:	333c      	adds	r3, #60	; 0x3c
 800356a:	7bfa      	ldrb	r2, [r7, #15]
 800356c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800356e:	7bfa      	ldrb	r2, [r7, #15]
 8003570:	7bfb      	ldrb	r3, [r7, #15]
 8003572:	b298      	uxth	r0, r3
 8003574:	6879      	ldr	r1, [r7, #4]
 8003576:	4613      	mov	r3, r2
 8003578:	00db      	lsls	r3, r3, #3
 800357a:	1a9b      	subs	r3, r3, r2
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	440b      	add	r3, r1
 8003580:	3342      	adds	r3, #66	; 0x42
 8003582:	4602      	mov	r2, r0
 8003584:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003586:	7bfa      	ldrb	r2, [r7, #15]
 8003588:	6879      	ldr	r1, [r7, #4]
 800358a:	4613      	mov	r3, r2
 800358c:	00db      	lsls	r3, r3, #3
 800358e:	1a9b      	subs	r3, r3, r2
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	440b      	add	r3, r1
 8003594:	333f      	adds	r3, #63	; 0x3f
 8003596:	2200      	movs	r2, #0
 8003598:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800359a:	7bfa      	ldrb	r2, [r7, #15]
 800359c:	6879      	ldr	r1, [r7, #4]
 800359e:	4613      	mov	r3, r2
 80035a0:	00db      	lsls	r3, r3, #3
 80035a2:	1a9b      	subs	r3, r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	440b      	add	r3, r1
 80035a8:	3344      	adds	r3, #68	; 0x44
 80035aa:	2200      	movs	r2, #0
 80035ac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80035ae:	7bfa      	ldrb	r2, [r7, #15]
 80035b0:	6879      	ldr	r1, [r7, #4]
 80035b2:	4613      	mov	r3, r2
 80035b4:	00db      	lsls	r3, r3, #3
 80035b6:	1a9b      	subs	r3, r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	440b      	add	r3, r1
 80035bc:	3348      	adds	r3, #72	; 0x48
 80035be:	2200      	movs	r2, #0
 80035c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80035c2:	7bfa      	ldrb	r2, [r7, #15]
 80035c4:	6879      	ldr	r1, [r7, #4]
 80035c6:	4613      	mov	r3, r2
 80035c8:	00db      	lsls	r3, r3, #3
 80035ca:	1a9b      	subs	r3, r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	440b      	add	r3, r1
 80035d0:	3350      	adds	r3, #80	; 0x50
 80035d2:	2200      	movs	r2, #0
 80035d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035d6:	7bfb      	ldrb	r3, [r7, #15]
 80035d8:	3301      	adds	r3, #1
 80035da:	73fb      	strb	r3, [r7, #15]
 80035dc:	7bfa      	ldrb	r2, [r7, #15]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d3af      	bcc.n	8003546 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035e6:	2300      	movs	r3, #0
 80035e8:	73fb      	strb	r3, [r7, #15]
 80035ea:	e044      	b.n	8003676 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80035ec:	7bfa      	ldrb	r2, [r7, #15]
 80035ee:	6879      	ldr	r1, [r7, #4]
 80035f0:	4613      	mov	r3, r2
 80035f2:	00db      	lsls	r3, r3, #3
 80035f4:	1a9b      	subs	r3, r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	440b      	add	r3, r1
 80035fa:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80035fe:	2200      	movs	r2, #0
 8003600:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003602:	7bfa      	ldrb	r2, [r7, #15]
 8003604:	6879      	ldr	r1, [r7, #4]
 8003606:	4613      	mov	r3, r2
 8003608:	00db      	lsls	r3, r3, #3
 800360a:	1a9b      	subs	r3, r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	440b      	add	r3, r1
 8003610:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003614:	7bfa      	ldrb	r2, [r7, #15]
 8003616:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003618:	7bfa      	ldrb	r2, [r7, #15]
 800361a:	6879      	ldr	r1, [r7, #4]
 800361c:	4613      	mov	r3, r2
 800361e:	00db      	lsls	r3, r3, #3
 8003620:	1a9b      	subs	r3, r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	440b      	add	r3, r1
 8003626:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800362a:	2200      	movs	r2, #0
 800362c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800362e:	7bfa      	ldrb	r2, [r7, #15]
 8003630:	6879      	ldr	r1, [r7, #4]
 8003632:	4613      	mov	r3, r2
 8003634:	00db      	lsls	r3, r3, #3
 8003636:	1a9b      	subs	r3, r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	440b      	add	r3, r1
 800363c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003640:	2200      	movs	r2, #0
 8003642:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003644:	7bfa      	ldrb	r2, [r7, #15]
 8003646:	6879      	ldr	r1, [r7, #4]
 8003648:	4613      	mov	r3, r2
 800364a:	00db      	lsls	r3, r3, #3
 800364c:	1a9b      	subs	r3, r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	440b      	add	r3, r1
 8003652:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003656:	2200      	movs	r2, #0
 8003658:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800365a:	7bfa      	ldrb	r2, [r7, #15]
 800365c:	6879      	ldr	r1, [r7, #4]
 800365e:	4613      	mov	r3, r2
 8003660:	00db      	lsls	r3, r3, #3
 8003662:	1a9b      	subs	r3, r3, r2
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	440b      	add	r3, r1
 8003668:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800366c:	2200      	movs	r2, #0
 800366e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003670:	7bfb      	ldrb	r3, [r7, #15]
 8003672:	3301      	adds	r3, #1
 8003674:	73fb      	strb	r3, [r7, #15]
 8003676:	7bfa      	ldrb	r2, [r7, #15]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	429a      	cmp	r2, r3
 800367e:	d3b5      	bcc.n	80035ec <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	603b      	str	r3, [r7, #0]
 8003686:	687e      	ldr	r6, [r7, #4]
 8003688:	466d      	mov	r5, sp
 800368a:	f106 0410 	add.w	r4, r6, #16
 800368e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003690:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003692:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003694:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003696:	e894 0003 	ldmia.w	r4, {r0, r1}
 800369a:	e885 0003 	stmia.w	r5, {r0, r1}
 800369e:	1d33      	adds	r3, r6, #4
 80036a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036a2:	6838      	ldr	r0, [r7, #0]
 80036a4:	f003 fff0 	bl	8007688 <USB_DevInit>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d005      	beq.n	80036ba <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2202      	movs	r2, #2
 80036b2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e014      	b.n	80036e4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2201      	movs	r2, #1
 80036c6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d102      	bne.n	80036d8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 f80a 	bl	80036ec <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4618      	mov	r0, r3
 80036de:	f004 f9aa 	bl	8007a36 <USB_DevDisconnect>

  return HAL_OK;
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3714      	adds	r7, #20
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080036ec <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b085      	sub	sp, #20
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2201      	movs	r2, #1
 80036fe:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800371a:	4b05      	ldr	r3, [pc, #20]	; (8003730 <HAL_PCDEx_ActivateLPM+0x44>)
 800371c:	4313      	orrs	r3, r2
 800371e:	68fa      	ldr	r2, [r7, #12]
 8003720:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003722:	2300      	movs	r3, #0
}
 8003724:	4618      	mov	r0, r3
 8003726:	3714      	adds	r7, #20
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr
 8003730:	10000003 	.word	0x10000003

08003734 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003734:	b480      	push	{r7}
 8003736:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003738:	4b05      	ldr	r3, [pc, #20]	; (8003750 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a04      	ldr	r2, [pc, #16]	; (8003750 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800373e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003742:	6013      	str	r3, [r2, #0]
}
 8003744:	bf00      	nop
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop
 8003750:	40007000 	.word	0x40007000

08003754 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b086      	sub	sp, #24
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800375c:	2300      	movs	r3, #0
 800375e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d101      	bne.n	800376a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e291      	b.n	8003c8e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0301 	and.w	r3, r3, #1
 8003772:	2b00      	cmp	r3, #0
 8003774:	f000 8087 	beq.w	8003886 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003778:	4b96      	ldr	r3, [pc, #600]	; (80039d4 <HAL_RCC_OscConfig+0x280>)
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f003 030c 	and.w	r3, r3, #12
 8003780:	2b04      	cmp	r3, #4
 8003782:	d00c      	beq.n	800379e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003784:	4b93      	ldr	r3, [pc, #588]	; (80039d4 <HAL_RCC_OscConfig+0x280>)
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	f003 030c 	and.w	r3, r3, #12
 800378c:	2b08      	cmp	r3, #8
 800378e:	d112      	bne.n	80037b6 <HAL_RCC_OscConfig+0x62>
 8003790:	4b90      	ldr	r3, [pc, #576]	; (80039d4 <HAL_RCC_OscConfig+0x280>)
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003798:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800379c:	d10b      	bne.n	80037b6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800379e:	4b8d      	ldr	r3, [pc, #564]	; (80039d4 <HAL_RCC_OscConfig+0x280>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d06c      	beq.n	8003884 <HAL_RCC_OscConfig+0x130>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d168      	bne.n	8003884 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e26b      	b.n	8003c8e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037be:	d106      	bne.n	80037ce <HAL_RCC_OscConfig+0x7a>
 80037c0:	4b84      	ldr	r3, [pc, #528]	; (80039d4 <HAL_RCC_OscConfig+0x280>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a83      	ldr	r2, [pc, #524]	; (80039d4 <HAL_RCC_OscConfig+0x280>)
 80037c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037ca:	6013      	str	r3, [r2, #0]
 80037cc:	e02e      	b.n	800382c <HAL_RCC_OscConfig+0xd8>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d10c      	bne.n	80037f0 <HAL_RCC_OscConfig+0x9c>
 80037d6:	4b7f      	ldr	r3, [pc, #508]	; (80039d4 <HAL_RCC_OscConfig+0x280>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a7e      	ldr	r2, [pc, #504]	; (80039d4 <HAL_RCC_OscConfig+0x280>)
 80037dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037e0:	6013      	str	r3, [r2, #0]
 80037e2:	4b7c      	ldr	r3, [pc, #496]	; (80039d4 <HAL_RCC_OscConfig+0x280>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a7b      	ldr	r2, [pc, #492]	; (80039d4 <HAL_RCC_OscConfig+0x280>)
 80037e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037ec:	6013      	str	r3, [r2, #0]
 80037ee:	e01d      	b.n	800382c <HAL_RCC_OscConfig+0xd8>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037f8:	d10c      	bne.n	8003814 <HAL_RCC_OscConfig+0xc0>
 80037fa:	4b76      	ldr	r3, [pc, #472]	; (80039d4 <HAL_RCC_OscConfig+0x280>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a75      	ldr	r2, [pc, #468]	; (80039d4 <HAL_RCC_OscConfig+0x280>)
 8003800:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003804:	6013      	str	r3, [r2, #0]
 8003806:	4b73      	ldr	r3, [pc, #460]	; (80039d4 <HAL_RCC_OscConfig+0x280>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a72      	ldr	r2, [pc, #456]	; (80039d4 <HAL_RCC_OscConfig+0x280>)
 800380c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003810:	6013      	str	r3, [r2, #0]
 8003812:	e00b      	b.n	800382c <HAL_RCC_OscConfig+0xd8>
 8003814:	4b6f      	ldr	r3, [pc, #444]	; (80039d4 <HAL_RCC_OscConfig+0x280>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a6e      	ldr	r2, [pc, #440]	; (80039d4 <HAL_RCC_OscConfig+0x280>)
 800381a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800381e:	6013      	str	r3, [r2, #0]
 8003820:	4b6c      	ldr	r3, [pc, #432]	; (80039d4 <HAL_RCC_OscConfig+0x280>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a6b      	ldr	r2, [pc, #428]	; (80039d4 <HAL_RCC_OscConfig+0x280>)
 8003826:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800382a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d013      	beq.n	800385c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003834:	f7fe fe8a 	bl	800254c <HAL_GetTick>
 8003838:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800383a:	e008      	b.n	800384e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800383c:	f7fe fe86 	bl	800254c <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	2b64      	cmp	r3, #100	; 0x64
 8003848:	d901      	bls.n	800384e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e21f      	b.n	8003c8e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800384e:	4b61      	ldr	r3, [pc, #388]	; (80039d4 <HAL_RCC_OscConfig+0x280>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d0f0      	beq.n	800383c <HAL_RCC_OscConfig+0xe8>
 800385a:	e014      	b.n	8003886 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800385c:	f7fe fe76 	bl	800254c <HAL_GetTick>
 8003860:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003862:	e008      	b.n	8003876 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003864:	f7fe fe72 	bl	800254c <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	2b64      	cmp	r3, #100	; 0x64
 8003870:	d901      	bls.n	8003876 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e20b      	b.n	8003c8e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003876:	4b57      	ldr	r3, [pc, #348]	; (80039d4 <HAL_RCC_OscConfig+0x280>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d1f0      	bne.n	8003864 <HAL_RCC_OscConfig+0x110>
 8003882:	e000      	b.n	8003886 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003884:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0302 	and.w	r3, r3, #2
 800388e:	2b00      	cmp	r3, #0
 8003890:	d069      	beq.n	8003966 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003892:	4b50      	ldr	r3, [pc, #320]	; (80039d4 <HAL_RCC_OscConfig+0x280>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f003 030c 	and.w	r3, r3, #12
 800389a:	2b00      	cmp	r3, #0
 800389c:	d00b      	beq.n	80038b6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800389e:	4b4d      	ldr	r3, [pc, #308]	; (80039d4 <HAL_RCC_OscConfig+0x280>)
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	f003 030c 	and.w	r3, r3, #12
 80038a6:	2b08      	cmp	r3, #8
 80038a8:	d11c      	bne.n	80038e4 <HAL_RCC_OscConfig+0x190>
 80038aa:	4b4a      	ldr	r3, [pc, #296]	; (80039d4 <HAL_RCC_OscConfig+0x280>)
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d116      	bne.n	80038e4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038b6:	4b47      	ldr	r3, [pc, #284]	; (80039d4 <HAL_RCC_OscConfig+0x280>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0302 	and.w	r3, r3, #2
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d005      	beq.n	80038ce <HAL_RCC_OscConfig+0x17a>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d001      	beq.n	80038ce <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e1df      	b.n	8003c8e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038ce:	4b41      	ldr	r3, [pc, #260]	; (80039d4 <HAL_RCC_OscConfig+0x280>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	00db      	lsls	r3, r3, #3
 80038dc:	493d      	ldr	r1, [pc, #244]	; (80039d4 <HAL_RCC_OscConfig+0x280>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038e2:	e040      	b.n	8003966 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d023      	beq.n	8003934 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038ec:	4b39      	ldr	r3, [pc, #228]	; (80039d4 <HAL_RCC_OscConfig+0x280>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a38      	ldr	r2, [pc, #224]	; (80039d4 <HAL_RCC_OscConfig+0x280>)
 80038f2:	f043 0301 	orr.w	r3, r3, #1
 80038f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f8:	f7fe fe28 	bl	800254c <HAL_GetTick>
 80038fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038fe:	e008      	b.n	8003912 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003900:	f7fe fe24 	bl	800254c <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	2b02      	cmp	r3, #2
 800390c:	d901      	bls.n	8003912 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e1bd      	b.n	8003c8e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003912:	4b30      	ldr	r3, [pc, #192]	; (80039d4 <HAL_RCC_OscConfig+0x280>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0302 	and.w	r3, r3, #2
 800391a:	2b00      	cmp	r3, #0
 800391c:	d0f0      	beq.n	8003900 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800391e:	4b2d      	ldr	r3, [pc, #180]	; (80039d4 <HAL_RCC_OscConfig+0x280>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	00db      	lsls	r3, r3, #3
 800392c:	4929      	ldr	r1, [pc, #164]	; (80039d4 <HAL_RCC_OscConfig+0x280>)
 800392e:	4313      	orrs	r3, r2
 8003930:	600b      	str	r3, [r1, #0]
 8003932:	e018      	b.n	8003966 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003934:	4b27      	ldr	r3, [pc, #156]	; (80039d4 <HAL_RCC_OscConfig+0x280>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a26      	ldr	r2, [pc, #152]	; (80039d4 <HAL_RCC_OscConfig+0x280>)
 800393a:	f023 0301 	bic.w	r3, r3, #1
 800393e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003940:	f7fe fe04 	bl	800254c <HAL_GetTick>
 8003944:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003946:	e008      	b.n	800395a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003948:	f7fe fe00 	bl	800254c <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b02      	cmp	r3, #2
 8003954:	d901      	bls.n	800395a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e199      	b.n	8003c8e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800395a:	4b1e      	ldr	r3, [pc, #120]	; (80039d4 <HAL_RCC_OscConfig+0x280>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1f0      	bne.n	8003948 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0308 	and.w	r3, r3, #8
 800396e:	2b00      	cmp	r3, #0
 8003970:	d038      	beq.n	80039e4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	695b      	ldr	r3, [r3, #20]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d019      	beq.n	80039ae <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800397a:	4b16      	ldr	r3, [pc, #88]	; (80039d4 <HAL_RCC_OscConfig+0x280>)
 800397c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800397e:	4a15      	ldr	r2, [pc, #84]	; (80039d4 <HAL_RCC_OscConfig+0x280>)
 8003980:	f043 0301 	orr.w	r3, r3, #1
 8003984:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003986:	f7fe fde1 	bl	800254c <HAL_GetTick>
 800398a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800398c:	e008      	b.n	80039a0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800398e:	f7fe fddd 	bl	800254c <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	2b02      	cmp	r3, #2
 800399a:	d901      	bls.n	80039a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	e176      	b.n	8003c8e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039a0:	4b0c      	ldr	r3, [pc, #48]	; (80039d4 <HAL_RCC_OscConfig+0x280>)
 80039a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039a4:	f003 0302 	and.w	r3, r3, #2
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d0f0      	beq.n	800398e <HAL_RCC_OscConfig+0x23a>
 80039ac:	e01a      	b.n	80039e4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039ae:	4b09      	ldr	r3, [pc, #36]	; (80039d4 <HAL_RCC_OscConfig+0x280>)
 80039b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039b2:	4a08      	ldr	r2, [pc, #32]	; (80039d4 <HAL_RCC_OscConfig+0x280>)
 80039b4:	f023 0301 	bic.w	r3, r3, #1
 80039b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ba:	f7fe fdc7 	bl	800254c <HAL_GetTick>
 80039be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039c0:	e00a      	b.n	80039d8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039c2:	f7fe fdc3 	bl	800254c <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d903      	bls.n	80039d8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e15c      	b.n	8003c8e <HAL_RCC_OscConfig+0x53a>
 80039d4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039d8:	4b91      	ldr	r3, [pc, #580]	; (8003c20 <HAL_RCC_OscConfig+0x4cc>)
 80039da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039dc:	f003 0302 	and.w	r3, r3, #2
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d1ee      	bne.n	80039c2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0304 	and.w	r3, r3, #4
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	f000 80a4 	beq.w	8003b3a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039f2:	4b8b      	ldr	r3, [pc, #556]	; (8003c20 <HAL_RCC_OscConfig+0x4cc>)
 80039f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d10d      	bne.n	8003a1a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80039fe:	4b88      	ldr	r3, [pc, #544]	; (8003c20 <HAL_RCC_OscConfig+0x4cc>)
 8003a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a02:	4a87      	ldr	r2, [pc, #540]	; (8003c20 <HAL_RCC_OscConfig+0x4cc>)
 8003a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a08:	6413      	str	r3, [r2, #64]	; 0x40
 8003a0a:	4b85      	ldr	r3, [pc, #532]	; (8003c20 <HAL_RCC_OscConfig+0x4cc>)
 8003a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a12:	60bb      	str	r3, [r7, #8]
 8003a14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a16:	2301      	movs	r3, #1
 8003a18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a1a:	4b82      	ldr	r3, [pc, #520]	; (8003c24 <HAL_RCC_OscConfig+0x4d0>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d118      	bne.n	8003a58 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003a26:	4b7f      	ldr	r3, [pc, #508]	; (8003c24 <HAL_RCC_OscConfig+0x4d0>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a7e      	ldr	r2, [pc, #504]	; (8003c24 <HAL_RCC_OscConfig+0x4d0>)
 8003a2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a32:	f7fe fd8b 	bl	800254c <HAL_GetTick>
 8003a36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a38:	e008      	b.n	8003a4c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a3a:	f7fe fd87 	bl	800254c <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	2b64      	cmp	r3, #100	; 0x64
 8003a46:	d901      	bls.n	8003a4c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e120      	b.n	8003c8e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a4c:	4b75      	ldr	r3, [pc, #468]	; (8003c24 <HAL_RCC_OscConfig+0x4d0>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d0f0      	beq.n	8003a3a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d106      	bne.n	8003a6e <HAL_RCC_OscConfig+0x31a>
 8003a60:	4b6f      	ldr	r3, [pc, #444]	; (8003c20 <HAL_RCC_OscConfig+0x4cc>)
 8003a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a64:	4a6e      	ldr	r2, [pc, #440]	; (8003c20 <HAL_RCC_OscConfig+0x4cc>)
 8003a66:	f043 0301 	orr.w	r3, r3, #1
 8003a6a:	6713      	str	r3, [r2, #112]	; 0x70
 8003a6c:	e02d      	b.n	8003aca <HAL_RCC_OscConfig+0x376>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d10c      	bne.n	8003a90 <HAL_RCC_OscConfig+0x33c>
 8003a76:	4b6a      	ldr	r3, [pc, #424]	; (8003c20 <HAL_RCC_OscConfig+0x4cc>)
 8003a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a7a:	4a69      	ldr	r2, [pc, #420]	; (8003c20 <HAL_RCC_OscConfig+0x4cc>)
 8003a7c:	f023 0301 	bic.w	r3, r3, #1
 8003a80:	6713      	str	r3, [r2, #112]	; 0x70
 8003a82:	4b67      	ldr	r3, [pc, #412]	; (8003c20 <HAL_RCC_OscConfig+0x4cc>)
 8003a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a86:	4a66      	ldr	r2, [pc, #408]	; (8003c20 <HAL_RCC_OscConfig+0x4cc>)
 8003a88:	f023 0304 	bic.w	r3, r3, #4
 8003a8c:	6713      	str	r3, [r2, #112]	; 0x70
 8003a8e:	e01c      	b.n	8003aca <HAL_RCC_OscConfig+0x376>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	2b05      	cmp	r3, #5
 8003a96:	d10c      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x35e>
 8003a98:	4b61      	ldr	r3, [pc, #388]	; (8003c20 <HAL_RCC_OscConfig+0x4cc>)
 8003a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a9c:	4a60      	ldr	r2, [pc, #384]	; (8003c20 <HAL_RCC_OscConfig+0x4cc>)
 8003a9e:	f043 0304 	orr.w	r3, r3, #4
 8003aa2:	6713      	str	r3, [r2, #112]	; 0x70
 8003aa4:	4b5e      	ldr	r3, [pc, #376]	; (8003c20 <HAL_RCC_OscConfig+0x4cc>)
 8003aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa8:	4a5d      	ldr	r2, [pc, #372]	; (8003c20 <HAL_RCC_OscConfig+0x4cc>)
 8003aaa:	f043 0301 	orr.w	r3, r3, #1
 8003aae:	6713      	str	r3, [r2, #112]	; 0x70
 8003ab0:	e00b      	b.n	8003aca <HAL_RCC_OscConfig+0x376>
 8003ab2:	4b5b      	ldr	r3, [pc, #364]	; (8003c20 <HAL_RCC_OscConfig+0x4cc>)
 8003ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab6:	4a5a      	ldr	r2, [pc, #360]	; (8003c20 <HAL_RCC_OscConfig+0x4cc>)
 8003ab8:	f023 0301 	bic.w	r3, r3, #1
 8003abc:	6713      	str	r3, [r2, #112]	; 0x70
 8003abe:	4b58      	ldr	r3, [pc, #352]	; (8003c20 <HAL_RCC_OscConfig+0x4cc>)
 8003ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac2:	4a57      	ldr	r2, [pc, #348]	; (8003c20 <HAL_RCC_OscConfig+0x4cc>)
 8003ac4:	f023 0304 	bic.w	r3, r3, #4
 8003ac8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d015      	beq.n	8003afe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ad2:	f7fe fd3b 	bl	800254c <HAL_GetTick>
 8003ad6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ad8:	e00a      	b.n	8003af0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ada:	f7fe fd37 	bl	800254c <HAL_GetTick>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d901      	bls.n	8003af0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	e0ce      	b.n	8003c8e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003af0:	4b4b      	ldr	r3, [pc, #300]	; (8003c20 <HAL_RCC_OscConfig+0x4cc>)
 8003af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af4:	f003 0302 	and.w	r3, r3, #2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d0ee      	beq.n	8003ada <HAL_RCC_OscConfig+0x386>
 8003afc:	e014      	b.n	8003b28 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003afe:	f7fe fd25 	bl	800254c <HAL_GetTick>
 8003b02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b04:	e00a      	b.n	8003b1c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b06:	f7fe fd21 	bl	800254c <HAL_GetTick>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d901      	bls.n	8003b1c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e0b8      	b.n	8003c8e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b1c:	4b40      	ldr	r3, [pc, #256]	; (8003c20 <HAL_RCC_OscConfig+0x4cc>)
 8003b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b20:	f003 0302 	and.w	r3, r3, #2
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d1ee      	bne.n	8003b06 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b28:	7dfb      	ldrb	r3, [r7, #23]
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d105      	bne.n	8003b3a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b2e:	4b3c      	ldr	r3, [pc, #240]	; (8003c20 <HAL_RCC_OscConfig+0x4cc>)
 8003b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b32:	4a3b      	ldr	r2, [pc, #236]	; (8003c20 <HAL_RCC_OscConfig+0x4cc>)
 8003b34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b38:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	699b      	ldr	r3, [r3, #24]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	f000 80a4 	beq.w	8003c8c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b44:	4b36      	ldr	r3, [pc, #216]	; (8003c20 <HAL_RCC_OscConfig+0x4cc>)
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	f003 030c 	and.w	r3, r3, #12
 8003b4c:	2b08      	cmp	r3, #8
 8003b4e:	d06b      	beq.n	8003c28 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	699b      	ldr	r3, [r3, #24]
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d149      	bne.n	8003bec <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b58:	4b31      	ldr	r3, [pc, #196]	; (8003c20 <HAL_RCC_OscConfig+0x4cc>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a30      	ldr	r2, [pc, #192]	; (8003c20 <HAL_RCC_OscConfig+0x4cc>)
 8003b5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b64:	f7fe fcf2 	bl	800254c <HAL_GetTick>
 8003b68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b6a:	e008      	b.n	8003b7e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b6c:	f7fe fcee 	bl	800254c <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d901      	bls.n	8003b7e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e087      	b.n	8003c8e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b7e:	4b28      	ldr	r3, [pc, #160]	; (8003c20 <HAL_RCC_OscConfig+0x4cc>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d1f0      	bne.n	8003b6c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	69da      	ldr	r2, [r3, #28]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a1b      	ldr	r3, [r3, #32]
 8003b92:	431a      	orrs	r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b98:	019b      	lsls	r3, r3, #6
 8003b9a:	431a      	orrs	r2, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba0:	085b      	lsrs	r3, r3, #1
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	041b      	lsls	r3, r3, #16
 8003ba6:	431a      	orrs	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bac:	061b      	lsls	r3, r3, #24
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	4a1b      	ldr	r2, [pc, #108]	; (8003c20 <HAL_RCC_OscConfig+0x4cc>)
 8003bb2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003bb6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bb8:	4b19      	ldr	r3, [pc, #100]	; (8003c20 <HAL_RCC_OscConfig+0x4cc>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a18      	ldr	r2, [pc, #96]	; (8003c20 <HAL_RCC_OscConfig+0x4cc>)
 8003bbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc4:	f7fe fcc2 	bl	800254c <HAL_GetTick>
 8003bc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bca:	e008      	b.n	8003bde <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bcc:	f7fe fcbe 	bl	800254c <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d901      	bls.n	8003bde <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e057      	b.n	8003c8e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bde:	4b10      	ldr	r3, [pc, #64]	; (8003c20 <HAL_RCC_OscConfig+0x4cc>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d0f0      	beq.n	8003bcc <HAL_RCC_OscConfig+0x478>
 8003bea:	e04f      	b.n	8003c8c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bec:	4b0c      	ldr	r3, [pc, #48]	; (8003c20 <HAL_RCC_OscConfig+0x4cc>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a0b      	ldr	r2, [pc, #44]	; (8003c20 <HAL_RCC_OscConfig+0x4cc>)
 8003bf2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bf6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf8:	f7fe fca8 	bl	800254c <HAL_GetTick>
 8003bfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bfe:	e008      	b.n	8003c12 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c00:	f7fe fca4 	bl	800254c <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e03d      	b.n	8003c8e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c12:	4b03      	ldr	r3, [pc, #12]	; (8003c20 <HAL_RCC_OscConfig+0x4cc>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d1f0      	bne.n	8003c00 <HAL_RCC_OscConfig+0x4ac>
 8003c1e:	e035      	b.n	8003c8c <HAL_RCC_OscConfig+0x538>
 8003c20:	40023800 	.word	0x40023800
 8003c24:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003c28:	4b1b      	ldr	r3, [pc, #108]	; (8003c98 <HAL_RCC_OscConfig+0x544>)
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	699b      	ldr	r3, [r3, #24]
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d028      	beq.n	8003c88 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d121      	bne.n	8003c88 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d11a      	bne.n	8003c88 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c52:	68fa      	ldr	r2, [r7, #12]
 8003c54:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c58:	4013      	ands	r3, r2
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c5e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d111      	bne.n	8003c88 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6e:	085b      	lsrs	r3, r3, #1
 8003c70:	3b01      	subs	r3, #1
 8003c72:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d107      	bne.n	8003c88 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c82:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d001      	beq.n	8003c8c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e000      	b.n	8003c8e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3718      	adds	r7, #24
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	40023800 	.word	0x40023800

08003c9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d101      	bne.n	8003cb4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e0d0      	b.n	8003e56 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003cb4:	4b6a      	ldr	r3, [pc, #424]	; (8003e60 <HAL_RCC_ClockConfig+0x1c4>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 030f 	and.w	r3, r3, #15
 8003cbc:	683a      	ldr	r2, [r7, #0]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d910      	bls.n	8003ce4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cc2:	4b67      	ldr	r3, [pc, #412]	; (8003e60 <HAL_RCC_ClockConfig+0x1c4>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f023 020f 	bic.w	r2, r3, #15
 8003cca:	4965      	ldr	r1, [pc, #404]	; (8003e60 <HAL_RCC_ClockConfig+0x1c4>)
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cd2:	4b63      	ldr	r3, [pc, #396]	; (8003e60 <HAL_RCC_ClockConfig+0x1c4>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 030f 	and.w	r3, r3, #15
 8003cda:	683a      	ldr	r2, [r7, #0]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d001      	beq.n	8003ce4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e0b8      	b.n	8003e56 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0302 	and.w	r3, r3, #2
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d020      	beq.n	8003d32 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0304 	and.w	r3, r3, #4
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d005      	beq.n	8003d08 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cfc:	4b59      	ldr	r3, [pc, #356]	; (8003e64 <HAL_RCC_ClockConfig+0x1c8>)
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	4a58      	ldr	r2, [pc, #352]	; (8003e64 <HAL_RCC_ClockConfig+0x1c8>)
 8003d02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d06:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0308 	and.w	r3, r3, #8
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d005      	beq.n	8003d20 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d14:	4b53      	ldr	r3, [pc, #332]	; (8003e64 <HAL_RCC_ClockConfig+0x1c8>)
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	4a52      	ldr	r2, [pc, #328]	; (8003e64 <HAL_RCC_ClockConfig+0x1c8>)
 8003d1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d1e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d20:	4b50      	ldr	r3, [pc, #320]	; (8003e64 <HAL_RCC_ClockConfig+0x1c8>)
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	494d      	ldr	r1, [pc, #308]	; (8003e64 <HAL_RCC_ClockConfig+0x1c8>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0301 	and.w	r3, r3, #1
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d040      	beq.n	8003dc0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d107      	bne.n	8003d56 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d46:	4b47      	ldr	r3, [pc, #284]	; (8003e64 <HAL_RCC_ClockConfig+0x1c8>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d115      	bne.n	8003d7e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e07f      	b.n	8003e56 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d107      	bne.n	8003d6e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d5e:	4b41      	ldr	r3, [pc, #260]	; (8003e64 <HAL_RCC_ClockConfig+0x1c8>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d109      	bne.n	8003d7e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e073      	b.n	8003e56 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d6e:	4b3d      	ldr	r3, [pc, #244]	; (8003e64 <HAL_RCC_ClockConfig+0x1c8>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d101      	bne.n	8003d7e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e06b      	b.n	8003e56 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d7e:	4b39      	ldr	r3, [pc, #228]	; (8003e64 <HAL_RCC_ClockConfig+0x1c8>)
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	f023 0203 	bic.w	r2, r3, #3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	4936      	ldr	r1, [pc, #216]	; (8003e64 <HAL_RCC_ClockConfig+0x1c8>)
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d90:	f7fe fbdc 	bl	800254c <HAL_GetTick>
 8003d94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d96:	e00a      	b.n	8003dae <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d98:	f7fe fbd8 	bl	800254c <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d901      	bls.n	8003dae <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e053      	b.n	8003e56 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dae:	4b2d      	ldr	r3, [pc, #180]	; (8003e64 <HAL_RCC_ClockConfig+0x1c8>)
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f003 020c 	and.w	r2, r3, #12
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d1eb      	bne.n	8003d98 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003dc0:	4b27      	ldr	r3, [pc, #156]	; (8003e60 <HAL_RCC_ClockConfig+0x1c4>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 030f 	and.w	r3, r3, #15
 8003dc8:	683a      	ldr	r2, [r7, #0]
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d210      	bcs.n	8003df0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dce:	4b24      	ldr	r3, [pc, #144]	; (8003e60 <HAL_RCC_ClockConfig+0x1c4>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f023 020f 	bic.w	r2, r3, #15
 8003dd6:	4922      	ldr	r1, [pc, #136]	; (8003e60 <HAL_RCC_ClockConfig+0x1c4>)
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dde:	4b20      	ldr	r3, [pc, #128]	; (8003e60 <HAL_RCC_ClockConfig+0x1c4>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 030f 	and.w	r3, r3, #15
 8003de6:	683a      	ldr	r2, [r7, #0]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d001      	beq.n	8003df0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e032      	b.n	8003e56 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0304 	and.w	r3, r3, #4
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d008      	beq.n	8003e0e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dfc:	4b19      	ldr	r3, [pc, #100]	; (8003e64 <HAL_RCC_ClockConfig+0x1c8>)
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	4916      	ldr	r1, [pc, #88]	; (8003e64 <HAL_RCC_ClockConfig+0x1c8>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0308 	and.w	r3, r3, #8
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d009      	beq.n	8003e2e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e1a:	4b12      	ldr	r3, [pc, #72]	; (8003e64 <HAL_RCC_ClockConfig+0x1c8>)
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	00db      	lsls	r3, r3, #3
 8003e28:	490e      	ldr	r1, [pc, #56]	; (8003e64 <HAL_RCC_ClockConfig+0x1c8>)
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e2e:	f000 f821 	bl	8003e74 <HAL_RCC_GetSysClockFreq>
 8003e32:	4602      	mov	r2, r0
 8003e34:	4b0b      	ldr	r3, [pc, #44]	; (8003e64 <HAL_RCC_ClockConfig+0x1c8>)
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	091b      	lsrs	r3, r3, #4
 8003e3a:	f003 030f 	and.w	r3, r3, #15
 8003e3e:	490a      	ldr	r1, [pc, #40]	; (8003e68 <HAL_RCC_ClockConfig+0x1cc>)
 8003e40:	5ccb      	ldrb	r3, [r1, r3]
 8003e42:	fa22 f303 	lsr.w	r3, r2, r3
 8003e46:	4a09      	ldr	r2, [pc, #36]	; (8003e6c <HAL_RCC_ClockConfig+0x1d0>)
 8003e48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003e4a:	4b09      	ldr	r3, [pc, #36]	; (8003e70 <HAL_RCC_ClockConfig+0x1d4>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f7fe fb38 	bl	80024c4 <HAL_InitTick>

  return HAL_OK;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3710      	adds	r7, #16
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	40023c00 	.word	0x40023c00
 8003e64:	40023800 	.word	0x40023800
 8003e68:	08008418 	.word	0x08008418
 8003e6c:	20000004 	.word	0x20000004
 8003e70:	20000008 	.word	0x20000008

08003e74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e74:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003e78:	b084      	sub	sp, #16
 8003e7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	607b      	str	r3, [r7, #4]
 8003e80:	2300      	movs	r3, #0
 8003e82:	60fb      	str	r3, [r7, #12]
 8003e84:	2300      	movs	r3, #0
 8003e86:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e8c:	4b67      	ldr	r3, [pc, #412]	; (800402c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	f003 030c 	and.w	r3, r3, #12
 8003e94:	2b08      	cmp	r3, #8
 8003e96:	d00d      	beq.n	8003eb4 <HAL_RCC_GetSysClockFreq+0x40>
 8003e98:	2b08      	cmp	r3, #8
 8003e9a:	f200 80bd 	bhi.w	8004018 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d002      	beq.n	8003ea8 <HAL_RCC_GetSysClockFreq+0x34>
 8003ea2:	2b04      	cmp	r3, #4
 8003ea4:	d003      	beq.n	8003eae <HAL_RCC_GetSysClockFreq+0x3a>
 8003ea6:	e0b7      	b.n	8004018 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ea8:	4b61      	ldr	r3, [pc, #388]	; (8004030 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003eaa:	60bb      	str	r3, [r7, #8]
      break;
 8003eac:	e0b7      	b.n	800401e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003eae:	4b61      	ldr	r3, [pc, #388]	; (8004034 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003eb0:	60bb      	str	r3, [r7, #8]
      break;
 8003eb2:	e0b4      	b.n	800401e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003eb4:	4b5d      	ldr	r3, [pc, #372]	; (800402c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ebc:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003ebe:	4b5b      	ldr	r3, [pc, #364]	; (800402c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d04d      	beq.n	8003f66 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003eca:	4b58      	ldr	r3, [pc, #352]	; (800402c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	099b      	lsrs	r3, r3, #6
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	f04f 0300 	mov.w	r3, #0
 8003ed6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003eda:	f04f 0100 	mov.w	r1, #0
 8003ede:	ea02 0800 	and.w	r8, r2, r0
 8003ee2:	ea03 0901 	and.w	r9, r3, r1
 8003ee6:	4640      	mov	r0, r8
 8003ee8:	4649      	mov	r1, r9
 8003eea:	f04f 0200 	mov.w	r2, #0
 8003eee:	f04f 0300 	mov.w	r3, #0
 8003ef2:	014b      	lsls	r3, r1, #5
 8003ef4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003ef8:	0142      	lsls	r2, r0, #5
 8003efa:	4610      	mov	r0, r2
 8003efc:	4619      	mov	r1, r3
 8003efe:	ebb0 0008 	subs.w	r0, r0, r8
 8003f02:	eb61 0109 	sbc.w	r1, r1, r9
 8003f06:	f04f 0200 	mov.w	r2, #0
 8003f0a:	f04f 0300 	mov.w	r3, #0
 8003f0e:	018b      	lsls	r3, r1, #6
 8003f10:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003f14:	0182      	lsls	r2, r0, #6
 8003f16:	1a12      	subs	r2, r2, r0
 8003f18:	eb63 0301 	sbc.w	r3, r3, r1
 8003f1c:	f04f 0000 	mov.w	r0, #0
 8003f20:	f04f 0100 	mov.w	r1, #0
 8003f24:	00d9      	lsls	r1, r3, #3
 8003f26:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f2a:	00d0      	lsls	r0, r2, #3
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	460b      	mov	r3, r1
 8003f30:	eb12 0208 	adds.w	r2, r2, r8
 8003f34:	eb43 0309 	adc.w	r3, r3, r9
 8003f38:	f04f 0000 	mov.w	r0, #0
 8003f3c:	f04f 0100 	mov.w	r1, #0
 8003f40:	0259      	lsls	r1, r3, #9
 8003f42:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003f46:	0250      	lsls	r0, r2, #9
 8003f48:	4602      	mov	r2, r0
 8003f4a:	460b      	mov	r3, r1
 8003f4c:	4610      	mov	r0, r2
 8003f4e:	4619      	mov	r1, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	461a      	mov	r2, r3
 8003f54:	f04f 0300 	mov.w	r3, #0
 8003f58:	f7fc fe50 	bl	8000bfc <__aeabi_uldivmod>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	460b      	mov	r3, r1
 8003f60:	4613      	mov	r3, r2
 8003f62:	60fb      	str	r3, [r7, #12]
 8003f64:	e04a      	b.n	8003ffc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f66:	4b31      	ldr	r3, [pc, #196]	; (800402c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	099b      	lsrs	r3, r3, #6
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	f04f 0300 	mov.w	r3, #0
 8003f72:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003f76:	f04f 0100 	mov.w	r1, #0
 8003f7a:	ea02 0400 	and.w	r4, r2, r0
 8003f7e:	ea03 0501 	and.w	r5, r3, r1
 8003f82:	4620      	mov	r0, r4
 8003f84:	4629      	mov	r1, r5
 8003f86:	f04f 0200 	mov.w	r2, #0
 8003f8a:	f04f 0300 	mov.w	r3, #0
 8003f8e:	014b      	lsls	r3, r1, #5
 8003f90:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003f94:	0142      	lsls	r2, r0, #5
 8003f96:	4610      	mov	r0, r2
 8003f98:	4619      	mov	r1, r3
 8003f9a:	1b00      	subs	r0, r0, r4
 8003f9c:	eb61 0105 	sbc.w	r1, r1, r5
 8003fa0:	f04f 0200 	mov.w	r2, #0
 8003fa4:	f04f 0300 	mov.w	r3, #0
 8003fa8:	018b      	lsls	r3, r1, #6
 8003faa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003fae:	0182      	lsls	r2, r0, #6
 8003fb0:	1a12      	subs	r2, r2, r0
 8003fb2:	eb63 0301 	sbc.w	r3, r3, r1
 8003fb6:	f04f 0000 	mov.w	r0, #0
 8003fba:	f04f 0100 	mov.w	r1, #0
 8003fbe:	00d9      	lsls	r1, r3, #3
 8003fc0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003fc4:	00d0      	lsls	r0, r2, #3
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	460b      	mov	r3, r1
 8003fca:	1912      	adds	r2, r2, r4
 8003fcc:	eb45 0303 	adc.w	r3, r5, r3
 8003fd0:	f04f 0000 	mov.w	r0, #0
 8003fd4:	f04f 0100 	mov.w	r1, #0
 8003fd8:	0299      	lsls	r1, r3, #10
 8003fda:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003fde:	0290      	lsls	r0, r2, #10
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	460b      	mov	r3, r1
 8003fe4:	4610      	mov	r0, r2
 8003fe6:	4619      	mov	r1, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	461a      	mov	r2, r3
 8003fec:	f04f 0300 	mov.w	r3, #0
 8003ff0:	f7fc fe04 	bl	8000bfc <__aeabi_uldivmod>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	460b      	mov	r3, r1
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003ffc:	4b0b      	ldr	r3, [pc, #44]	; (800402c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	0c1b      	lsrs	r3, r3, #16
 8004002:	f003 0303 	and.w	r3, r3, #3
 8004006:	3301      	adds	r3, #1
 8004008:	005b      	lsls	r3, r3, #1
 800400a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800400c:	68fa      	ldr	r2, [r7, #12]
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	fbb2 f3f3 	udiv	r3, r2, r3
 8004014:	60bb      	str	r3, [r7, #8]
      break;
 8004016:	e002      	b.n	800401e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004018:	4b05      	ldr	r3, [pc, #20]	; (8004030 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800401a:	60bb      	str	r3, [r7, #8]
      break;
 800401c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800401e:	68bb      	ldr	r3, [r7, #8]
}
 8004020:	4618      	mov	r0, r3
 8004022:	3710      	adds	r7, #16
 8004024:	46bd      	mov	sp, r7
 8004026:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800402a:	bf00      	nop
 800402c:	40023800 	.word	0x40023800
 8004030:	00f42400 	.word	0x00f42400
 8004034:	007a1200 	.word	0x007a1200

08004038 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004038:	b480      	push	{r7}
 800403a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800403c:	4b03      	ldr	r3, [pc, #12]	; (800404c <HAL_RCC_GetHCLKFreq+0x14>)
 800403e:	681b      	ldr	r3, [r3, #0]
}
 8004040:	4618      	mov	r0, r3
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	20000004 	.word	0x20000004

08004050 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004054:	f7ff fff0 	bl	8004038 <HAL_RCC_GetHCLKFreq>
 8004058:	4602      	mov	r2, r0
 800405a:	4b05      	ldr	r3, [pc, #20]	; (8004070 <HAL_RCC_GetPCLK1Freq+0x20>)
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	0a9b      	lsrs	r3, r3, #10
 8004060:	f003 0307 	and.w	r3, r3, #7
 8004064:	4903      	ldr	r1, [pc, #12]	; (8004074 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004066:	5ccb      	ldrb	r3, [r1, r3]
 8004068:	fa22 f303 	lsr.w	r3, r2, r3
}
 800406c:	4618      	mov	r0, r3
 800406e:	bd80      	pop	{r7, pc}
 8004070:	40023800 	.word	0x40023800
 8004074:	08008428 	.word	0x08008428

08004078 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800407c:	f7ff ffdc 	bl	8004038 <HAL_RCC_GetHCLKFreq>
 8004080:	4602      	mov	r2, r0
 8004082:	4b05      	ldr	r3, [pc, #20]	; (8004098 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	0b5b      	lsrs	r3, r3, #13
 8004088:	f003 0307 	and.w	r3, r3, #7
 800408c:	4903      	ldr	r1, [pc, #12]	; (800409c <HAL_RCC_GetPCLK2Freq+0x24>)
 800408e:	5ccb      	ldrb	r3, [r1, r3]
 8004090:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004094:	4618      	mov	r0, r3
 8004096:	bd80      	pop	{r7, pc}
 8004098:	40023800 	.word	0x40023800
 800409c:	08008428 	.word	0x08008428

080040a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b088      	sub	sp, #32
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80040a8:	2300      	movs	r3, #0
 80040aa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80040ac:	2300      	movs	r3, #0
 80040ae:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80040b0:	2300      	movs	r3, #0
 80040b2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80040b4:	2300      	movs	r3, #0
 80040b6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80040b8:	2300      	movs	r3, #0
 80040ba:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0301 	and.w	r3, r3, #1
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d012      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80040c8:	4b69      	ldr	r3, [pc, #420]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	4a68      	ldr	r2, [pc, #416]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040ce:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80040d2:	6093      	str	r3, [r2, #8]
 80040d4:	4b66      	ldr	r3, [pc, #408]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040d6:	689a      	ldr	r2, [r3, #8]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040dc:	4964      	ldr	r1, [pc, #400]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d101      	bne.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80040ea:	2301      	movs	r3, #1
 80040ec:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d017      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80040fa:	4b5d      	ldr	r3, [pc, #372]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004100:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004108:	4959      	ldr	r1, [pc, #356]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800410a:	4313      	orrs	r3, r2
 800410c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004114:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004118:	d101      	bne.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800411a:	2301      	movs	r3, #1
 800411c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004122:	2b00      	cmp	r3, #0
 8004124:	d101      	bne.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004126:	2301      	movs	r3, #1
 8004128:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d017      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004136:	4b4e      	ldr	r3, [pc, #312]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004138:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800413c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004144:	494a      	ldr	r1, [pc, #296]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004146:	4313      	orrs	r3, r2
 8004148:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004150:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004154:	d101      	bne.n	800415a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004156:	2301      	movs	r3, #1
 8004158:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415e:	2b00      	cmp	r3, #0
 8004160:	d101      	bne.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004162:	2301      	movs	r3, #1
 8004164:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d001      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004172:	2301      	movs	r3, #1
 8004174:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0320 	and.w	r3, r3, #32
 800417e:	2b00      	cmp	r3, #0
 8004180:	f000 808b 	beq.w	800429a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004184:	4b3a      	ldr	r3, [pc, #232]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004188:	4a39      	ldr	r2, [pc, #228]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800418a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800418e:	6413      	str	r3, [r2, #64]	; 0x40
 8004190:	4b37      	ldr	r3, [pc, #220]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004194:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004198:	60bb      	str	r3, [r7, #8]
 800419a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800419c:	4b35      	ldr	r3, [pc, #212]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a34      	ldr	r2, [pc, #208]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80041a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041a8:	f7fe f9d0 	bl	800254c <HAL_GetTick>
 80041ac:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80041ae:	e008      	b.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041b0:	f7fe f9cc 	bl	800254c <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	2b64      	cmp	r3, #100	; 0x64
 80041bc:	d901      	bls.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e357      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80041c2:	4b2c      	ldr	r3, [pc, #176]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d0f0      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80041ce:	4b28      	ldr	r3, [pc, #160]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041d6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d035      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041e6:	693a      	ldr	r2, [r7, #16]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d02e      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80041ec:	4b20      	ldr	r3, [pc, #128]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041f4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80041f6:	4b1e      	ldr	r3, [pc, #120]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041fa:	4a1d      	ldr	r2, [pc, #116]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004200:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004202:	4b1b      	ldr	r3, [pc, #108]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004206:	4a1a      	ldr	r2, [pc, #104]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004208:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800420c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800420e:	4a18      	ldr	r2, [pc, #96]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004214:	4b16      	ldr	r3, [pc, #88]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004218:	f003 0301 	and.w	r3, r3, #1
 800421c:	2b01      	cmp	r3, #1
 800421e:	d114      	bne.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004220:	f7fe f994 	bl	800254c <HAL_GetTick>
 8004224:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004226:	e00a      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004228:	f7fe f990 	bl	800254c <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	f241 3288 	movw	r2, #5000	; 0x1388
 8004236:	4293      	cmp	r3, r2
 8004238:	d901      	bls.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e319      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800423e:	4b0c      	ldr	r3, [pc, #48]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004242:	f003 0302 	and.w	r3, r3, #2
 8004246:	2b00      	cmp	r3, #0
 8004248:	d0ee      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004252:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004256:	d111      	bne.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004258:	4b05      	ldr	r3, [pc, #20]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004264:	4b04      	ldr	r3, [pc, #16]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004266:	400b      	ands	r3, r1
 8004268:	4901      	ldr	r1, [pc, #4]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800426a:	4313      	orrs	r3, r2
 800426c:	608b      	str	r3, [r1, #8]
 800426e:	e00b      	b.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004270:	40023800 	.word	0x40023800
 8004274:	40007000 	.word	0x40007000
 8004278:	0ffffcff 	.word	0x0ffffcff
 800427c:	4bb1      	ldr	r3, [pc, #708]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	4ab0      	ldr	r2, [pc, #704]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004282:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004286:	6093      	str	r3, [r2, #8]
 8004288:	4bae      	ldr	r3, [pc, #696]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800428a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004290:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004294:	49ab      	ldr	r1, [pc, #684]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004296:	4313      	orrs	r3, r2
 8004298:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0310 	and.w	r3, r3, #16
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d010      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80042a6:	4ba7      	ldr	r3, [pc, #668]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80042a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042ac:	4aa5      	ldr	r2, [pc, #660]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80042ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042b2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80042b6:	4ba3      	ldr	r3, [pc, #652]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80042b8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c0:	49a0      	ldr	r1, [pc, #640]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d00a      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042d4:	4b9b      	ldr	r3, [pc, #620]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80042d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042da:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042e2:	4998      	ldr	r1, [pc, #608]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d00a      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80042f6:	4b93      	ldr	r3, [pc, #588]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80042f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004304:	498f      	ldr	r1, [pc, #572]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004306:	4313      	orrs	r3, r2
 8004308:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d00a      	beq.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004318:	4b8a      	ldr	r3, [pc, #552]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800431a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800431e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004326:	4987      	ldr	r1, [pc, #540]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004328:	4313      	orrs	r3, r2
 800432a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00a      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800433a:	4b82      	ldr	r3, [pc, #520]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800433c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004340:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004348:	497e      	ldr	r1, [pc, #504]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800434a:	4313      	orrs	r3, r2
 800434c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004358:	2b00      	cmp	r3, #0
 800435a:	d00a      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800435c:	4b79      	ldr	r3, [pc, #484]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800435e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004362:	f023 0203 	bic.w	r2, r3, #3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800436a:	4976      	ldr	r1, [pc, #472]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800436c:	4313      	orrs	r3, r2
 800436e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800437a:	2b00      	cmp	r3, #0
 800437c:	d00a      	beq.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800437e:	4b71      	ldr	r3, [pc, #452]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004380:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004384:	f023 020c 	bic.w	r2, r3, #12
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800438c:	496d      	ldr	r1, [pc, #436]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800438e:	4313      	orrs	r3, r2
 8004390:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800439c:	2b00      	cmp	r3, #0
 800439e:	d00a      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80043a0:	4b68      	ldr	r3, [pc, #416]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80043a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043a6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043ae:	4965      	ldr	r1, [pc, #404]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80043b0:	4313      	orrs	r3, r2
 80043b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d00a      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80043c2:	4b60      	ldr	r3, [pc, #384]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80043c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043c8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043d0:	495c      	ldr	r1, [pc, #368]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80043d2:	4313      	orrs	r3, r2
 80043d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d00a      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80043e4:	4b57      	ldr	r3, [pc, #348]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80043e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043f2:	4954      	ldr	r1, [pc, #336]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80043f4:	4313      	orrs	r3, r2
 80043f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004402:	2b00      	cmp	r3, #0
 8004404:	d00a      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004406:	4b4f      	ldr	r3, [pc, #316]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800440c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004414:	494b      	ldr	r1, [pc, #300]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004416:	4313      	orrs	r3, r2
 8004418:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004424:	2b00      	cmp	r3, #0
 8004426:	d00a      	beq.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004428:	4b46      	ldr	r3, [pc, #280]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800442a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800442e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004436:	4943      	ldr	r1, [pc, #268]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004438:	4313      	orrs	r3, r2
 800443a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00a      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800444a:	4b3e      	ldr	r3, [pc, #248]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800444c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004450:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004458:	493a      	ldr	r1, [pc, #232]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800445a:	4313      	orrs	r3, r2
 800445c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d00a      	beq.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800446c:	4b35      	ldr	r3, [pc, #212]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800446e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004472:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800447a:	4932      	ldr	r1, [pc, #200]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800447c:	4313      	orrs	r3, r2
 800447e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d011      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800448e:	4b2d      	ldr	r3, [pc, #180]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004494:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800449c:	4929      	ldr	r1, [pc, #164]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044ac:	d101      	bne.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80044ae:	2301      	movs	r3, #1
 80044b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0308 	and.w	r3, r3, #8
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d001      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80044be:	2301      	movs	r3, #1
 80044c0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00a      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80044ce:	4b1d      	ldr	r3, [pc, #116]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80044d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044d4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044dc:	4919      	ldr	r1, [pc, #100]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d00b      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80044f0:	4b14      	ldr	r3, [pc, #80]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80044f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044f6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004500:	4910      	ldr	r1, [pc, #64]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004502:	4313      	orrs	r3, r2
 8004504:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	2b01      	cmp	r3, #1
 800450c:	d006      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004516:	2b00      	cmp	r3, #0
 8004518:	f000 80d9 	beq.w	80046ce <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800451c:	4b09      	ldr	r3, [pc, #36]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a08      	ldr	r2, [pc, #32]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004522:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004526:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004528:	f7fe f810 	bl	800254c <HAL_GetTick>
 800452c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800452e:	e00b      	b.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004530:	f7fe f80c 	bl	800254c <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	2b64      	cmp	r3, #100	; 0x64
 800453c:	d904      	bls.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e197      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004542:	bf00      	nop
 8004544:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004548:	4b6c      	ldr	r3, [pc, #432]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d1ed      	bne.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0301 	and.w	r3, r3, #1
 800455c:	2b00      	cmp	r3, #0
 800455e:	d021      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004564:	2b00      	cmp	r3, #0
 8004566:	d11d      	bne.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004568:	4b64      	ldr	r3, [pc, #400]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800456a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800456e:	0c1b      	lsrs	r3, r3, #16
 8004570:	f003 0303 	and.w	r3, r3, #3
 8004574:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004576:	4b61      	ldr	r3, [pc, #388]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004578:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800457c:	0e1b      	lsrs	r3, r3, #24
 800457e:	f003 030f 	and.w	r3, r3, #15
 8004582:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	019a      	lsls	r2, r3, #6
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	041b      	lsls	r3, r3, #16
 800458e:	431a      	orrs	r2, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	061b      	lsls	r3, r3, #24
 8004594:	431a      	orrs	r2, r3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	071b      	lsls	r3, r3, #28
 800459c:	4957      	ldr	r1, [pc, #348]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800459e:	4313      	orrs	r3, r2
 80045a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d004      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045b8:	d00a      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d02e      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045ce:	d129      	bne.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80045d0:	4b4a      	ldr	r3, [pc, #296]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045d6:	0c1b      	lsrs	r3, r3, #16
 80045d8:	f003 0303 	and.w	r3, r3, #3
 80045dc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80045de:	4b47      	ldr	r3, [pc, #284]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045e4:	0f1b      	lsrs	r3, r3, #28
 80045e6:	f003 0307 	and.w	r3, r3, #7
 80045ea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	019a      	lsls	r2, r3, #6
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	041b      	lsls	r3, r3, #16
 80045f6:	431a      	orrs	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	061b      	lsls	r3, r3, #24
 80045fe:	431a      	orrs	r2, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	071b      	lsls	r3, r3, #28
 8004604:	493d      	ldr	r1, [pc, #244]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004606:	4313      	orrs	r3, r2
 8004608:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800460c:	4b3b      	ldr	r3, [pc, #236]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800460e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004612:	f023 021f 	bic.w	r2, r3, #31
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461a:	3b01      	subs	r3, #1
 800461c:	4937      	ldr	r1, [pc, #220]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800461e:	4313      	orrs	r3, r2
 8004620:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d01d      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004630:	4b32      	ldr	r3, [pc, #200]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004632:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004636:	0e1b      	lsrs	r3, r3, #24
 8004638:	f003 030f 	and.w	r3, r3, #15
 800463c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800463e:	4b2f      	ldr	r3, [pc, #188]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004640:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004644:	0f1b      	lsrs	r3, r3, #28
 8004646:	f003 0307 	and.w	r3, r3, #7
 800464a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	019a      	lsls	r2, r3, #6
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	041b      	lsls	r3, r3, #16
 8004658:	431a      	orrs	r2, r3
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	061b      	lsls	r3, r3, #24
 800465e:	431a      	orrs	r2, r3
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	071b      	lsls	r3, r3, #28
 8004664:	4925      	ldr	r1, [pc, #148]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004666:	4313      	orrs	r3, r2
 8004668:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004674:	2b00      	cmp	r3, #0
 8004676:	d011      	beq.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	019a      	lsls	r2, r3, #6
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	041b      	lsls	r3, r3, #16
 8004684:	431a      	orrs	r2, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	061b      	lsls	r3, r3, #24
 800468c:	431a      	orrs	r2, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	071b      	lsls	r3, r3, #28
 8004694:	4919      	ldr	r1, [pc, #100]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004696:	4313      	orrs	r3, r2
 8004698:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800469c:	4b17      	ldr	r3, [pc, #92]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a16      	ldr	r2, [pc, #88]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80046a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046a8:	f7fd ff50 	bl	800254c <HAL_GetTick>
 80046ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80046ae:	e008      	b.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80046b0:	f7fd ff4c 	bl	800254c <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	2b64      	cmp	r3, #100	; 0x64
 80046bc:	d901      	bls.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e0d7      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80046c2:	4b0e      	ldr	r3, [pc, #56]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d0f0      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	f040 80cd 	bne.w	8004870 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80046d6:	4b09      	ldr	r3, [pc, #36]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a08      	ldr	r2, [pc, #32]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046e2:	f7fd ff33 	bl	800254c <HAL_GetTick>
 80046e6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80046e8:	e00a      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80046ea:	f7fd ff2f 	bl	800254c <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	2b64      	cmp	r3, #100	; 0x64
 80046f6:	d903      	bls.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046f8:	2303      	movs	r3, #3
 80046fa:	e0ba      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80046fc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004700:	4b5e      	ldr	r3, [pc, #376]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004708:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800470c:	d0ed      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d003      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800471e:	2b00      	cmp	r3, #0
 8004720:	d009      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800472a:	2b00      	cmp	r3, #0
 800472c:	d02e      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004732:	2b00      	cmp	r3, #0
 8004734:	d12a      	bne.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004736:	4b51      	ldr	r3, [pc, #324]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004738:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800473c:	0c1b      	lsrs	r3, r3, #16
 800473e:	f003 0303 	and.w	r3, r3, #3
 8004742:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004744:	4b4d      	ldr	r3, [pc, #308]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800474a:	0f1b      	lsrs	r3, r3, #28
 800474c:	f003 0307 	and.w	r3, r3, #7
 8004750:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	695b      	ldr	r3, [r3, #20]
 8004756:	019a      	lsls	r2, r3, #6
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	041b      	lsls	r3, r3, #16
 800475c:	431a      	orrs	r2, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	699b      	ldr	r3, [r3, #24]
 8004762:	061b      	lsls	r3, r3, #24
 8004764:	431a      	orrs	r2, r3
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	071b      	lsls	r3, r3, #28
 800476a:	4944      	ldr	r1, [pc, #272]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800476c:	4313      	orrs	r3, r2
 800476e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004772:	4b42      	ldr	r3, [pc, #264]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004774:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004778:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004780:	3b01      	subs	r3, #1
 8004782:	021b      	lsls	r3, r3, #8
 8004784:	493d      	ldr	r1, [pc, #244]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004786:	4313      	orrs	r3, r2
 8004788:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004794:	2b00      	cmp	r3, #0
 8004796:	d022      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800479c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047a0:	d11d      	bne.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80047a2:	4b36      	ldr	r3, [pc, #216]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047a8:	0e1b      	lsrs	r3, r3, #24
 80047aa:	f003 030f 	and.w	r3, r3, #15
 80047ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80047b0:	4b32      	ldr	r3, [pc, #200]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047b6:	0f1b      	lsrs	r3, r3, #28
 80047b8:	f003 0307 	and.w	r3, r3, #7
 80047bc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	019a      	lsls	r2, r3, #6
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6a1b      	ldr	r3, [r3, #32]
 80047c8:	041b      	lsls	r3, r3, #16
 80047ca:	431a      	orrs	r2, r3
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	061b      	lsls	r3, r3, #24
 80047d0:	431a      	orrs	r2, r3
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	071b      	lsls	r3, r3, #28
 80047d6:	4929      	ldr	r1, [pc, #164]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047d8:	4313      	orrs	r3, r2
 80047da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0308 	and.w	r3, r3, #8
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d028      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80047ea:	4b24      	ldr	r3, [pc, #144]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047f0:	0e1b      	lsrs	r3, r3, #24
 80047f2:	f003 030f 	and.w	r3, r3, #15
 80047f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80047f8:	4b20      	ldr	r3, [pc, #128]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047fe:	0c1b      	lsrs	r3, r3, #16
 8004800:	f003 0303 	and.w	r3, r3, #3
 8004804:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	695b      	ldr	r3, [r3, #20]
 800480a:	019a      	lsls	r2, r3, #6
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	041b      	lsls	r3, r3, #16
 8004810:	431a      	orrs	r2, r3
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	061b      	lsls	r3, r3, #24
 8004816:	431a      	orrs	r2, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	69db      	ldr	r3, [r3, #28]
 800481c:	071b      	lsls	r3, r3, #28
 800481e:	4917      	ldr	r1, [pc, #92]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004820:	4313      	orrs	r3, r2
 8004822:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004826:	4b15      	ldr	r3, [pc, #84]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004828:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800482c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004834:	4911      	ldr	r1, [pc, #68]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004836:	4313      	orrs	r3, r2
 8004838:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800483c:	4b0f      	ldr	r3, [pc, #60]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a0e      	ldr	r2, [pc, #56]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004842:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004846:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004848:	f7fd fe80 	bl	800254c <HAL_GetTick>
 800484c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800484e:	e008      	b.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004850:	f7fd fe7c 	bl	800254c <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	2b64      	cmp	r3, #100	; 0x64
 800485c:	d901      	bls.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e007      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004862:	4b06      	ldr	r3, [pc, #24]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800486a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800486e:	d1ef      	bne.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004870:	2300      	movs	r3, #0
}
 8004872:	4618      	mov	r0, r3
 8004874:	3720      	adds	r7, #32
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	40023800 	.word	0x40023800

08004880 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b082      	sub	sp, #8
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d101      	bne.n	8004892 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e049      	b.n	8004926 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004898:	b2db      	uxtb	r3, r3
 800489a:	2b00      	cmp	r3, #0
 800489c:	d106      	bne.n	80048ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f7fd f8a6 	bl	80019f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2202      	movs	r2, #2
 80048b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	3304      	adds	r3, #4
 80048bc:	4619      	mov	r1, r3
 80048be:	4610      	mov	r0, r2
 80048c0:	f000 fe64 	bl	800558c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004924:	2300      	movs	r3, #0
}
 8004926:	4618      	mov	r0, r3
 8004928:	3708      	adds	r7, #8
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
	...

08004930 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004930:	b480      	push	{r7}
 8004932:	b085      	sub	sp, #20
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800493e:	b2db      	uxtb	r3, r3
 8004940:	2b01      	cmp	r3, #1
 8004942:	d001      	beq.n	8004948 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e054      	b.n	80049f2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2202      	movs	r2, #2
 800494c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	68da      	ldr	r2, [r3, #12]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f042 0201 	orr.w	r2, r2, #1
 800495e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a26      	ldr	r2, [pc, #152]	; (8004a00 <HAL_TIM_Base_Start_IT+0xd0>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d022      	beq.n	80049b0 <HAL_TIM_Base_Start_IT+0x80>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004972:	d01d      	beq.n	80049b0 <HAL_TIM_Base_Start_IT+0x80>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a22      	ldr	r2, [pc, #136]	; (8004a04 <HAL_TIM_Base_Start_IT+0xd4>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d018      	beq.n	80049b0 <HAL_TIM_Base_Start_IT+0x80>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a21      	ldr	r2, [pc, #132]	; (8004a08 <HAL_TIM_Base_Start_IT+0xd8>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d013      	beq.n	80049b0 <HAL_TIM_Base_Start_IT+0x80>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a1f      	ldr	r2, [pc, #124]	; (8004a0c <HAL_TIM_Base_Start_IT+0xdc>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d00e      	beq.n	80049b0 <HAL_TIM_Base_Start_IT+0x80>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a1e      	ldr	r2, [pc, #120]	; (8004a10 <HAL_TIM_Base_Start_IT+0xe0>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d009      	beq.n	80049b0 <HAL_TIM_Base_Start_IT+0x80>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a1c      	ldr	r2, [pc, #112]	; (8004a14 <HAL_TIM_Base_Start_IT+0xe4>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d004      	beq.n	80049b0 <HAL_TIM_Base_Start_IT+0x80>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a1b      	ldr	r2, [pc, #108]	; (8004a18 <HAL_TIM_Base_Start_IT+0xe8>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d115      	bne.n	80049dc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	689a      	ldr	r2, [r3, #8]
 80049b6:	4b19      	ldr	r3, [pc, #100]	; (8004a1c <HAL_TIM_Base_Start_IT+0xec>)
 80049b8:	4013      	ands	r3, r2
 80049ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2b06      	cmp	r3, #6
 80049c0:	d015      	beq.n	80049ee <HAL_TIM_Base_Start_IT+0xbe>
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049c8:	d011      	beq.n	80049ee <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f042 0201 	orr.w	r2, r2, #1
 80049d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049da:	e008      	b.n	80049ee <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f042 0201 	orr.w	r2, r2, #1
 80049ea:	601a      	str	r2, [r3, #0]
 80049ec:	e000      	b.n	80049f0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3714      	adds	r7, #20
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr
 80049fe:	bf00      	nop
 8004a00:	40010000 	.word	0x40010000
 8004a04:	40000400 	.word	0x40000400
 8004a08:	40000800 	.word	0x40000800
 8004a0c:	40000c00 	.word	0x40000c00
 8004a10:	40010400 	.word	0x40010400
 8004a14:	40014000 	.word	0x40014000
 8004a18:	40001800 	.word	0x40001800
 8004a1c:	00010007 	.word	0x00010007

08004a20 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b082      	sub	sp, #8
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d101      	bne.n	8004a32 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e049      	b.n	8004ac6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d106      	bne.n	8004a4c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 f841 	bl	8004ace <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2202      	movs	r2, #2
 8004a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	3304      	adds	r3, #4
 8004a5c:	4619      	mov	r1, r3
 8004a5e:	4610      	mov	r0, r2
 8004a60:	f000 fd94 	bl	800558c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3708      	adds	r7, #8
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}

08004ace <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004ace:	b480      	push	{r7}
 8004ad0:	b083      	sub	sp, #12
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004ad6:	bf00      	nop
 8004ad8:	370c      	adds	r7, #12
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr
	...

08004ae4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d109      	bne.n	8004b08 <HAL_TIM_PWM_Start+0x24>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	bf14      	ite	ne
 8004b00:	2301      	movne	r3, #1
 8004b02:	2300      	moveq	r3, #0
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	e03c      	b.n	8004b82 <HAL_TIM_PWM_Start+0x9e>
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	2b04      	cmp	r3, #4
 8004b0c:	d109      	bne.n	8004b22 <HAL_TIM_PWM_Start+0x3e>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	bf14      	ite	ne
 8004b1a:	2301      	movne	r3, #1
 8004b1c:	2300      	moveq	r3, #0
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	e02f      	b.n	8004b82 <HAL_TIM_PWM_Start+0x9e>
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	2b08      	cmp	r3, #8
 8004b26:	d109      	bne.n	8004b3c <HAL_TIM_PWM_Start+0x58>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	bf14      	ite	ne
 8004b34:	2301      	movne	r3, #1
 8004b36:	2300      	moveq	r3, #0
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	e022      	b.n	8004b82 <HAL_TIM_PWM_Start+0x9e>
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	2b0c      	cmp	r3, #12
 8004b40:	d109      	bne.n	8004b56 <HAL_TIM_PWM_Start+0x72>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	bf14      	ite	ne
 8004b4e:	2301      	movne	r3, #1
 8004b50:	2300      	moveq	r3, #0
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	e015      	b.n	8004b82 <HAL_TIM_PWM_Start+0x9e>
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	2b10      	cmp	r3, #16
 8004b5a:	d109      	bne.n	8004b70 <HAL_TIM_PWM_Start+0x8c>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	bf14      	ite	ne
 8004b68:	2301      	movne	r3, #1
 8004b6a:	2300      	moveq	r3, #0
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	e008      	b.n	8004b82 <HAL_TIM_PWM_Start+0x9e>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	bf14      	ite	ne
 8004b7c:	2301      	movne	r3, #1
 8004b7e:	2300      	moveq	r3, #0
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d001      	beq.n	8004b8a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e092      	b.n	8004cb0 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d104      	bne.n	8004b9a <HAL_TIM_PWM_Start+0xb6>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2202      	movs	r2, #2
 8004b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b98:	e023      	b.n	8004be2 <HAL_TIM_PWM_Start+0xfe>
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	2b04      	cmp	r3, #4
 8004b9e:	d104      	bne.n	8004baa <HAL_TIM_PWM_Start+0xc6>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2202      	movs	r2, #2
 8004ba4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ba8:	e01b      	b.n	8004be2 <HAL_TIM_PWM_Start+0xfe>
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	2b08      	cmp	r3, #8
 8004bae:	d104      	bne.n	8004bba <HAL_TIM_PWM_Start+0xd6>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2202      	movs	r2, #2
 8004bb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bb8:	e013      	b.n	8004be2 <HAL_TIM_PWM_Start+0xfe>
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	2b0c      	cmp	r3, #12
 8004bbe:	d104      	bne.n	8004bca <HAL_TIM_PWM_Start+0xe6>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2202      	movs	r2, #2
 8004bc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004bc8:	e00b      	b.n	8004be2 <HAL_TIM_PWM_Start+0xfe>
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	2b10      	cmp	r3, #16
 8004bce:	d104      	bne.n	8004bda <HAL_TIM_PWM_Start+0xf6>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2202      	movs	r2, #2
 8004bd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bd8:	e003      	b.n	8004be2 <HAL_TIM_PWM_Start+0xfe>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2202      	movs	r2, #2
 8004bde:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	2201      	movs	r2, #1
 8004be8:	6839      	ldr	r1, [r7, #0]
 8004bea:	4618      	mov	r0, r3
 8004bec:	f001 f866 	bl	8005cbc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a30      	ldr	r2, [pc, #192]	; (8004cb8 <HAL_TIM_PWM_Start+0x1d4>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d004      	beq.n	8004c04 <HAL_TIM_PWM_Start+0x120>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a2f      	ldr	r2, [pc, #188]	; (8004cbc <HAL_TIM_PWM_Start+0x1d8>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d101      	bne.n	8004c08 <HAL_TIM_PWM_Start+0x124>
 8004c04:	2301      	movs	r3, #1
 8004c06:	e000      	b.n	8004c0a <HAL_TIM_PWM_Start+0x126>
 8004c08:	2300      	movs	r3, #0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d007      	beq.n	8004c1e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c1c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a25      	ldr	r2, [pc, #148]	; (8004cb8 <HAL_TIM_PWM_Start+0x1d4>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d022      	beq.n	8004c6e <HAL_TIM_PWM_Start+0x18a>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c30:	d01d      	beq.n	8004c6e <HAL_TIM_PWM_Start+0x18a>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a22      	ldr	r2, [pc, #136]	; (8004cc0 <HAL_TIM_PWM_Start+0x1dc>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d018      	beq.n	8004c6e <HAL_TIM_PWM_Start+0x18a>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a20      	ldr	r2, [pc, #128]	; (8004cc4 <HAL_TIM_PWM_Start+0x1e0>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d013      	beq.n	8004c6e <HAL_TIM_PWM_Start+0x18a>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a1f      	ldr	r2, [pc, #124]	; (8004cc8 <HAL_TIM_PWM_Start+0x1e4>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d00e      	beq.n	8004c6e <HAL_TIM_PWM_Start+0x18a>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a19      	ldr	r2, [pc, #100]	; (8004cbc <HAL_TIM_PWM_Start+0x1d8>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d009      	beq.n	8004c6e <HAL_TIM_PWM_Start+0x18a>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a1b      	ldr	r2, [pc, #108]	; (8004ccc <HAL_TIM_PWM_Start+0x1e8>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d004      	beq.n	8004c6e <HAL_TIM_PWM_Start+0x18a>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a19      	ldr	r2, [pc, #100]	; (8004cd0 <HAL_TIM_PWM_Start+0x1ec>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d115      	bne.n	8004c9a <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	689a      	ldr	r2, [r3, #8]
 8004c74:	4b17      	ldr	r3, [pc, #92]	; (8004cd4 <HAL_TIM_PWM_Start+0x1f0>)
 8004c76:	4013      	ands	r3, r2
 8004c78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2b06      	cmp	r3, #6
 8004c7e:	d015      	beq.n	8004cac <HAL_TIM_PWM_Start+0x1c8>
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c86:	d011      	beq.n	8004cac <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f042 0201 	orr.w	r2, r2, #1
 8004c96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c98:	e008      	b.n	8004cac <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f042 0201 	orr.w	r2, r2, #1
 8004ca8:	601a      	str	r2, [r3, #0]
 8004caa:	e000      	b.n	8004cae <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004cae:	2300      	movs	r3, #0
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3710      	adds	r7, #16
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}
 8004cb8:	40010000 	.word	0x40010000
 8004cbc:	40010400 	.word	0x40010400
 8004cc0:	40000400 	.word	0x40000400
 8004cc4:	40000800 	.word	0x40000800
 8004cc8:	40000c00 	.word	0x40000c00
 8004ccc:	40014000 	.word	0x40014000
 8004cd0:	40001800 	.word	0x40001800
 8004cd4:	00010007 	.word	0x00010007

08004cd8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b086      	sub	sp, #24
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d101      	bne.n	8004cec <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e08f      	b.n	8004e0c <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d106      	bne.n	8004d06 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f7fc fed7 	bl	8001ab4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2202      	movs	r2, #2
 8004d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	6899      	ldr	r1, [r3, #8]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	4b3e      	ldr	r3, [pc, #248]	; (8004e14 <HAL_TIM_Encoder_Init+0x13c>)
 8004d1a:	400b      	ands	r3, r1
 8004d1c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	3304      	adds	r3, #4
 8004d26:	4619      	mov	r1, r3
 8004d28:	4610      	mov	r0, r2
 8004d2a:	f000 fc2f 	bl	800558c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	699b      	ldr	r3, [r3, #24]
 8004d3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	6a1b      	ldr	r3, [r3, #32]
 8004d44:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	697a      	ldr	r2, [r7, #20]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004d50:	693a      	ldr	r2, [r7, #16]
 8004d52:	4b31      	ldr	r3, [pc, #196]	; (8004e18 <HAL_TIM_Encoder_Init+0x140>)
 8004d54:	4013      	ands	r3, r2
 8004d56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	689a      	ldr	r2, [r3, #8]
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	699b      	ldr	r3, [r3, #24]
 8004d60:	021b      	lsls	r3, r3, #8
 8004d62:	4313      	orrs	r3, r2
 8004d64:	693a      	ldr	r2, [r7, #16]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004d6a:	693a      	ldr	r2, [r7, #16]
 8004d6c:	4b2b      	ldr	r3, [pc, #172]	; (8004e1c <HAL_TIM_Encoder_Init+0x144>)
 8004d6e:	4013      	ands	r3, r2
 8004d70:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004d72:	693a      	ldr	r2, [r7, #16]
 8004d74:	4b2a      	ldr	r3, [pc, #168]	; (8004e20 <HAL_TIM_Encoder_Init+0x148>)
 8004d76:	4013      	ands	r3, r2
 8004d78:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	68da      	ldr	r2, [r3, #12]
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	69db      	ldr	r3, [r3, #28]
 8004d82:	021b      	lsls	r3, r3, #8
 8004d84:	4313      	orrs	r3, r2
 8004d86:	693a      	ldr	r2, [r7, #16]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	011a      	lsls	r2, r3, #4
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	6a1b      	ldr	r3, [r3, #32]
 8004d96:	031b      	lsls	r3, r3, #12
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	693a      	ldr	r2, [r7, #16]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004da6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004dae:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	685a      	ldr	r2, [r3, #4]
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	695b      	ldr	r3, [r3, #20]
 8004db8:	011b      	lsls	r3, r3, #4
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	68fa      	ldr	r2, [r7, #12]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	697a      	ldr	r2, [r7, #20]
 8004dc8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	693a      	ldr	r2, [r7, #16]
 8004dd0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	68fa      	ldr	r2, [r7, #12]
 8004dd8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2201      	movs	r2, #1
 8004dde:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2201      	movs	r2, #1
 8004de6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2201      	movs	r2, #1
 8004dee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2201      	movs	r2, #1
 8004df6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2201      	movs	r2, #1
 8004e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e0a:	2300      	movs	r3, #0
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3718      	adds	r7, #24
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	fffebff8 	.word	0xfffebff8
 8004e18:	fffffcfc 	.word	0xfffffcfc
 8004e1c:	fffff3f3 	.word	0xfffff3f3
 8004e20:	ffff0f0f 	.word	0xffff0f0f

08004e24 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e34:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004e3c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e44:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e4c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d110      	bne.n	8004e76 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e54:	7bfb      	ldrb	r3, [r7, #15]
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d102      	bne.n	8004e60 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004e5a:	7b7b      	ldrb	r3, [r7, #13]
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d001      	beq.n	8004e64 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e069      	b.n	8004f38 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2202      	movs	r2, #2
 8004e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2202      	movs	r2, #2
 8004e70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e74:	e031      	b.n	8004eda <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	2b04      	cmp	r3, #4
 8004e7a:	d110      	bne.n	8004e9e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e7c:	7bbb      	ldrb	r3, [r7, #14]
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d102      	bne.n	8004e88 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004e82:	7b3b      	ldrb	r3, [r7, #12]
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d001      	beq.n	8004e8c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e055      	b.n	8004f38 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2202      	movs	r2, #2
 8004e90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2202      	movs	r2, #2
 8004e98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e9c:	e01d      	b.n	8004eda <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e9e:	7bfb      	ldrb	r3, [r7, #15]
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d108      	bne.n	8004eb6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ea4:	7bbb      	ldrb	r3, [r7, #14]
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d105      	bne.n	8004eb6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004eaa:	7b7b      	ldrb	r3, [r7, #13]
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d102      	bne.n	8004eb6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004eb0:	7b3b      	ldrb	r3, [r7, #12]
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d001      	beq.n	8004eba <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e03e      	b.n	8004f38 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2202      	movs	r2, #2
 8004ebe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2202      	movs	r2, #2
 8004ec6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2202      	movs	r2, #2
 8004ece:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2202      	movs	r2, #2
 8004ed6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d003      	beq.n	8004ee8 <HAL_TIM_Encoder_Start+0xc4>
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	2b04      	cmp	r3, #4
 8004ee4:	d008      	beq.n	8004ef8 <HAL_TIM_Encoder_Start+0xd4>
 8004ee6:	e00f      	b.n	8004f08 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2201      	movs	r2, #1
 8004eee:	2100      	movs	r1, #0
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f000 fee3 	bl	8005cbc <TIM_CCxChannelCmd>
      break;
 8004ef6:	e016      	b.n	8004f26 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2201      	movs	r2, #1
 8004efe:	2104      	movs	r1, #4
 8004f00:	4618      	mov	r0, r3
 8004f02:	f000 fedb 	bl	8005cbc <TIM_CCxChannelCmd>
      break;
 8004f06:	e00e      	b.n	8004f26 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	2100      	movs	r1, #0
 8004f10:	4618      	mov	r0, r3
 8004f12:	f000 fed3 	bl	8005cbc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	2104      	movs	r1, #4
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f000 fecc 	bl	8005cbc <TIM_CCxChannelCmd>
      break;
 8004f24:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f042 0201 	orr.w	r2, r2, #1
 8004f34:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004f36:	2300      	movs	r3, #0
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3710      	adds	r7, #16
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b082      	sub	sp, #8
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	691b      	ldr	r3, [r3, #16]
 8004f4e:	f003 0302 	and.w	r3, r3, #2
 8004f52:	2b02      	cmp	r3, #2
 8004f54:	d122      	bne.n	8004f9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	f003 0302 	and.w	r3, r3, #2
 8004f60:	2b02      	cmp	r3, #2
 8004f62:	d11b      	bne.n	8004f9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f06f 0202 	mvn.w	r2, #2
 8004f6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2201      	movs	r2, #1
 8004f72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	699b      	ldr	r3, [r3, #24]
 8004f7a:	f003 0303 	and.w	r3, r3, #3
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d003      	beq.n	8004f8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 fae4 	bl	8005550 <HAL_TIM_IC_CaptureCallback>
 8004f88:	e005      	b.n	8004f96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f000 fad6 	bl	800553c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f000 fae7 	bl	8005564 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	f003 0304 	and.w	r3, r3, #4
 8004fa6:	2b04      	cmp	r3, #4
 8004fa8:	d122      	bne.n	8004ff0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	f003 0304 	and.w	r3, r3, #4
 8004fb4:	2b04      	cmp	r3, #4
 8004fb6:	d11b      	bne.n	8004ff0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f06f 0204 	mvn.w	r2, #4
 8004fc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2202      	movs	r2, #2
 8004fc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	699b      	ldr	r3, [r3, #24]
 8004fce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d003      	beq.n	8004fde <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 faba 	bl	8005550 <HAL_TIM_IC_CaptureCallback>
 8004fdc:	e005      	b.n	8004fea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f000 faac 	bl	800553c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f000 fabd 	bl	8005564 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	f003 0308 	and.w	r3, r3, #8
 8004ffa:	2b08      	cmp	r3, #8
 8004ffc:	d122      	bne.n	8005044 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	f003 0308 	and.w	r3, r3, #8
 8005008:	2b08      	cmp	r3, #8
 800500a:	d11b      	bne.n	8005044 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f06f 0208 	mvn.w	r2, #8
 8005014:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2204      	movs	r2, #4
 800501a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	69db      	ldr	r3, [r3, #28]
 8005022:	f003 0303 	and.w	r3, r3, #3
 8005026:	2b00      	cmp	r3, #0
 8005028:	d003      	beq.n	8005032 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 fa90 	bl	8005550 <HAL_TIM_IC_CaptureCallback>
 8005030:	e005      	b.n	800503e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 fa82 	bl	800553c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f000 fa93 	bl	8005564 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	691b      	ldr	r3, [r3, #16]
 800504a:	f003 0310 	and.w	r3, r3, #16
 800504e:	2b10      	cmp	r3, #16
 8005050:	d122      	bne.n	8005098 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	f003 0310 	and.w	r3, r3, #16
 800505c:	2b10      	cmp	r3, #16
 800505e:	d11b      	bne.n	8005098 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f06f 0210 	mvn.w	r2, #16
 8005068:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2208      	movs	r2, #8
 800506e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	69db      	ldr	r3, [r3, #28]
 8005076:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800507a:	2b00      	cmp	r3, #0
 800507c:	d003      	beq.n	8005086 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 fa66 	bl	8005550 <HAL_TIM_IC_CaptureCallback>
 8005084:	e005      	b.n	8005092 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f000 fa58 	bl	800553c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f000 fa69 	bl	8005564 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	f003 0301 	and.w	r3, r3, #1
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d10e      	bne.n	80050c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	f003 0301 	and.w	r3, r3, #1
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d107      	bne.n	80050c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f06f 0201 	mvn.w	r2, #1
 80050bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f7fc fdd2 	bl	8001c68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ce:	2b80      	cmp	r3, #128	; 0x80
 80050d0:	d10e      	bne.n	80050f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050dc:	2b80      	cmp	r3, #128	; 0x80
 80050de:	d107      	bne.n	80050f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80050e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f000 ff22 	bl	8005f34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	691b      	ldr	r3, [r3, #16]
 80050f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050fe:	d10e      	bne.n	800511e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800510a:	2b80      	cmp	r3, #128	; 0x80
 800510c:	d107      	bne.n	800511e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005116:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f000 ff15 	bl	8005f48 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	691b      	ldr	r3, [r3, #16]
 8005124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005128:	2b40      	cmp	r3, #64	; 0x40
 800512a:	d10e      	bne.n	800514a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005136:	2b40      	cmp	r3, #64	; 0x40
 8005138:	d107      	bne.n	800514a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005142:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f000 fa17 	bl	8005578 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	691b      	ldr	r3, [r3, #16]
 8005150:	f003 0320 	and.w	r3, r3, #32
 8005154:	2b20      	cmp	r3, #32
 8005156:	d10e      	bne.n	8005176 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	f003 0320 	and.w	r3, r3, #32
 8005162:	2b20      	cmp	r3, #32
 8005164:	d107      	bne.n	8005176 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f06f 0220 	mvn.w	r2, #32
 800516e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f000 fed5 	bl	8005f20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005176:	bf00      	nop
 8005178:	3708      	adds	r7, #8
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
	...

08005180 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b086      	sub	sp, #24
 8005184:	af00      	add	r7, sp, #0
 8005186:	60f8      	str	r0, [r7, #12]
 8005188:	60b9      	str	r1, [r7, #8]
 800518a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800518c:	2300      	movs	r3, #0
 800518e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005196:	2b01      	cmp	r3, #1
 8005198:	d101      	bne.n	800519e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800519a:	2302      	movs	r3, #2
 800519c:	e0ff      	b.n	800539e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2201      	movs	r2, #1
 80051a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2b14      	cmp	r3, #20
 80051aa:	f200 80f0 	bhi.w	800538e <HAL_TIM_PWM_ConfigChannel+0x20e>
 80051ae:	a201      	add	r2, pc, #4	; (adr r2, 80051b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80051b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b4:	08005209 	.word	0x08005209
 80051b8:	0800538f 	.word	0x0800538f
 80051bc:	0800538f 	.word	0x0800538f
 80051c0:	0800538f 	.word	0x0800538f
 80051c4:	08005249 	.word	0x08005249
 80051c8:	0800538f 	.word	0x0800538f
 80051cc:	0800538f 	.word	0x0800538f
 80051d0:	0800538f 	.word	0x0800538f
 80051d4:	0800528b 	.word	0x0800528b
 80051d8:	0800538f 	.word	0x0800538f
 80051dc:	0800538f 	.word	0x0800538f
 80051e0:	0800538f 	.word	0x0800538f
 80051e4:	080052cb 	.word	0x080052cb
 80051e8:	0800538f 	.word	0x0800538f
 80051ec:	0800538f 	.word	0x0800538f
 80051f0:	0800538f 	.word	0x0800538f
 80051f4:	0800530d 	.word	0x0800530d
 80051f8:	0800538f 	.word	0x0800538f
 80051fc:	0800538f 	.word	0x0800538f
 8005200:	0800538f 	.word	0x0800538f
 8005204:	0800534d 	.word	0x0800534d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68b9      	ldr	r1, [r7, #8]
 800520e:	4618      	mov	r0, r3
 8005210:	f000 fa5c 	bl	80056cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	699a      	ldr	r2, [r3, #24]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f042 0208 	orr.w	r2, r2, #8
 8005222:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	699a      	ldr	r2, [r3, #24]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f022 0204 	bic.w	r2, r2, #4
 8005232:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	6999      	ldr	r1, [r3, #24]
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	691a      	ldr	r2, [r3, #16]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	430a      	orrs	r2, r1
 8005244:	619a      	str	r2, [r3, #24]
      break;
 8005246:	e0a5      	b.n	8005394 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	68b9      	ldr	r1, [r7, #8]
 800524e:	4618      	mov	r0, r3
 8005250:	f000 faae 	bl	80057b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	699a      	ldr	r2, [r3, #24]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005262:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	699a      	ldr	r2, [r3, #24]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005272:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	6999      	ldr	r1, [r3, #24]
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	691b      	ldr	r3, [r3, #16]
 800527e:	021a      	lsls	r2, r3, #8
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	430a      	orrs	r2, r1
 8005286:	619a      	str	r2, [r3, #24]
      break;
 8005288:	e084      	b.n	8005394 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68b9      	ldr	r1, [r7, #8]
 8005290:	4618      	mov	r0, r3
 8005292:	f000 fb05 	bl	80058a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	69da      	ldr	r2, [r3, #28]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f042 0208 	orr.w	r2, r2, #8
 80052a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	69da      	ldr	r2, [r3, #28]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f022 0204 	bic.w	r2, r2, #4
 80052b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	69d9      	ldr	r1, [r3, #28]
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	691a      	ldr	r2, [r3, #16]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	430a      	orrs	r2, r1
 80052c6:	61da      	str	r2, [r3, #28]
      break;
 80052c8:	e064      	b.n	8005394 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	68b9      	ldr	r1, [r7, #8]
 80052d0:	4618      	mov	r0, r3
 80052d2:	f000 fb5b 	bl	800598c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	69da      	ldr	r2, [r3, #28]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	69da      	ldr	r2, [r3, #28]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	69d9      	ldr	r1, [r3, #28]
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	691b      	ldr	r3, [r3, #16]
 8005300:	021a      	lsls	r2, r3, #8
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	430a      	orrs	r2, r1
 8005308:	61da      	str	r2, [r3, #28]
      break;
 800530a:	e043      	b.n	8005394 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	68b9      	ldr	r1, [r7, #8]
 8005312:	4618      	mov	r0, r3
 8005314:	f000 fb92 	bl	8005a3c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f042 0208 	orr.w	r2, r2, #8
 8005326:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f022 0204 	bic.w	r2, r2, #4
 8005336:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	691a      	ldr	r2, [r3, #16]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	430a      	orrs	r2, r1
 8005348:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800534a:	e023      	b.n	8005394 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	68b9      	ldr	r1, [r7, #8]
 8005352:	4618      	mov	r0, r3
 8005354:	f000 fbc4 	bl	8005ae0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005366:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005376:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	691b      	ldr	r3, [r3, #16]
 8005382:	021a      	lsls	r2, r3, #8
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	430a      	orrs	r2, r1
 800538a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800538c:	e002      	b.n	8005394 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	75fb      	strb	r3, [r7, #23]
      break;
 8005392:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2200      	movs	r2, #0
 8005398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800539c:	7dfb      	ldrb	r3, [r7, #23]
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3718      	adds	r7, #24
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	bf00      	nop

080053a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b084      	sub	sp, #16
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053b2:	2300      	movs	r3, #0
 80053b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d101      	bne.n	80053c4 <HAL_TIM_ConfigClockSource+0x1c>
 80053c0:	2302      	movs	r3, #2
 80053c2:	e0b4      	b.n	800552e <HAL_TIM_ConfigClockSource+0x186>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2202      	movs	r2, #2
 80053d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80053dc:	68ba      	ldr	r2, [r7, #8]
 80053de:	4b56      	ldr	r3, [pc, #344]	; (8005538 <HAL_TIM_ConfigClockSource+0x190>)
 80053e0:	4013      	ands	r3, r2
 80053e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	68ba      	ldr	r2, [r7, #8]
 80053f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053fc:	d03e      	beq.n	800547c <HAL_TIM_ConfigClockSource+0xd4>
 80053fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005402:	f200 8087 	bhi.w	8005514 <HAL_TIM_ConfigClockSource+0x16c>
 8005406:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800540a:	f000 8086 	beq.w	800551a <HAL_TIM_ConfigClockSource+0x172>
 800540e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005412:	d87f      	bhi.n	8005514 <HAL_TIM_ConfigClockSource+0x16c>
 8005414:	2b70      	cmp	r3, #112	; 0x70
 8005416:	d01a      	beq.n	800544e <HAL_TIM_ConfigClockSource+0xa6>
 8005418:	2b70      	cmp	r3, #112	; 0x70
 800541a:	d87b      	bhi.n	8005514 <HAL_TIM_ConfigClockSource+0x16c>
 800541c:	2b60      	cmp	r3, #96	; 0x60
 800541e:	d050      	beq.n	80054c2 <HAL_TIM_ConfigClockSource+0x11a>
 8005420:	2b60      	cmp	r3, #96	; 0x60
 8005422:	d877      	bhi.n	8005514 <HAL_TIM_ConfigClockSource+0x16c>
 8005424:	2b50      	cmp	r3, #80	; 0x50
 8005426:	d03c      	beq.n	80054a2 <HAL_TIM_ConfigClockSource+0xfa>
 8005428:	2b50      	cmp	r3, #80	; 0x50
 800542a:	d873      	bhi.n	8005514 <HAL_TIM_ConfigClockSource+0x16c>
 800542c:	2b40      	cmp	r3, #64	; 0x40
 800542e:	d058      	beq.n	80054e2 <HAL_TIM_ConfigClockSource+0x13a>
 8005430:	2b40      	cmp	r3, #64	; 0x40
 8005432:	d86f      	bhi.n	8005514 <HAL_TIM_ConfigClockSource+0x16c>
 8005434:	2b30      	cmp	r3, #48	; 0x30
 8005436:	d064      	beq.n	8005502 <HAL_TIM_ConfigClockSource+0x15a>
 8005438:	2b30      	cmp	r3, #48	; 0x30
 800543a:	d86b      	bhi.n	8005514 <HAL_TIM_ConfigClockSource+0x16c>
 800543c:	2b20      	cmp	r3, #32
 800543e:	d060      	beq.n	8005502 <HAL_TIM_ConfigClockSource+0x15a>
 8005440:	2b20      	cmp	r3, #32
 8005442:	d867      	bhi.n	8005514 <HAL_TIM_ConfigClockSource+0x16c>
 8005444:	2b00      	cmp	r3, #0
 8005446:	d05c      	beq.n	8005502 <HAL_TIM_ConfigClockSource+0x15a>
 8005448:	2b10      	cmp	r3, #16
 800544a:	d05a      	beq.n	8005502 <HAL_TIM_ConfigClockSource+0x15a>
 800544c:	e062      	b.n	8005514 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6818      	ldr	r0, [r3, #0]
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	6899      	ldr	r1, [r3, #8]
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	685a      	ldr	r2, [r3, #4]
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	f000 fc0d 	bl	8005c7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005470:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	68ba      	ldr	r2, [r7, #8]
 8005478:	609a      	str	r2, [r3, #8]
      break;
 800547a:	e04f      	b.n	800551c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6818      	ldr	r0, [r3, #0]
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	6899      	ldr	r1, [r3, #8]
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	685a      	ldr	r2, [r3, #4]
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	f000 fbf6 	bl	8005c7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	689a      	ldr	r2, [r3, #8]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800549e:	609a      	str	r2, [r3, #8]
      break;
 80054a0:	e03c      	b.n	800551c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6818      	ldr	r0, [r3, #0]
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	6859      	ldr	r1, [r3, #4]
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	461a      	mov	r2, r3
 80054b0:	f000 fb6a 	bl	8005b88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	2150      	movs	r1, #80	; 0x50
 80054ba:	4618      	mov	r0, r3
 80054bc:	f000 fbc3 	bl	8005c46 <TIM_ITRx_SetConfig>
      break;
 80054c0:	e02c      	b.n	800551c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6818      	ldr	r0, [r3, #0]
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	6859      	ldr	r1, [r3, #4]
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	461a      	mov	r2, r3
 80054d0:	f000 fb89 	bl	8005be6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	2160      	movs	r1, #96	; 0x60
 80054da:	4618      	mov	r0, r3
 80054dc:	f000 fbb3 	bl	8005c46 <TIM_ITRx_SetConfig>
      break;
 80054e0:	e01c      	b.n	800551c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6818      	ldr	r0, [r3, #0]
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	6859      	ldr	r1, [r3, #4]
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	461a      	mov	r2, r3
 80054f0:	f000 fb4a 	bl	8005b88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	2140      	movs	r1, #64	; 0x40
 80054fa:	4618      	mov	r0, r3
 80054fc:	f000 fba3 	bl	8005c46 <TIM_ITRx_SetConfig>
      break;
 8005500:	e00c      	b.n	800551c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4619      	mov	r1, r3
 800550c:	4610      	mov	r0, r2
 800550e:	f000 fb9a 	bl	8005c46 <TIM_ITRx_SetConfig>
      break;
 8005512:	e003      	b.n	800551c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	73fb      	strb	r3, [r7, #15]
      break;
 8005518:	e000      	b.n	800551c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800551a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800552c:	7bfb      	ldrb	r3, [r7, #15]
}
 800552e:	4618      	mov	r0, r3
 8005530:	3710      	adds	r7, #16
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	fffeff88 	.word	0xfffeff88

0800553c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005544:	bf00      	nop
 8005546:	370c      	adds	r7, #12
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005550:	b480      	push	{r7}
 8005552:	b083      	sub	sp, #12
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005558:	bf00      	nop
 800555a:	370c      	adds	r7, #12
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800556c:	bf00      	nop
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005580:	bf00      	nop
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800558c:	b480      	push	{r7}
 800558e:	b085      	sub	sp, #20
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4a40      	ldr	r2, [pc, #256]	; (80056a0 <TIM_Base_SetConfig+0x114>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d013      	beq.n	80055cc <TIM_Base_SetConfig+0x40>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055aa:	d00f      	beq.n	80055cc <TIM_Base_SetConfig+0x40>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	4a3d      	ldr	r2, [pc, #244]	; (80056a4 <TIM_Base_SetConfig+0x118>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d00b      	beq.n	80055cc <TIM_Base_SetConfig+0x40>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	4a3c      	ldr	r2, [pc, #240]	; (80056a8 <TIM_Base_SetConfig+0x11c>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d007      	beq.n	80055cc <TIM_Base_SetConfig+0x40>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	4a3b      	ldr	r2, [pc, #236]	; (80056ac <TIM_Base_SetConfig+0x120>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d003      	beq.n	80055cc <TIM_Base_SetConfig+0x40>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	4a3a      	ldr	r2, [pc, #232]	; (80056b0 <TIM_Base_SetConfig+0x124>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d108      	bne.n	80055de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	68fa      	ldr	r2, [r7, #12]
 80055da:	4313      	orrs	r3, r2
 80055dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a2f      	ldr	r2, [pc, #188]	; (80056a0 <TIM_Base_SetConfig+0x114>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d02b      	beq.n	800563e <TIM_Base_SetConfig+0xb2>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055ec:	d027      	beq.n	800563e <TIM_Base_SetConfig+0xb2>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a2c      	ldr	r2, [pc, #176]	; (80056a4 <TIM_Base_SetConfig+0x118>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d023      	beq.n	800563e <TIM_Base_SetConfig+0xb2>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a2b      	ldr	r2, [pc, #172]	; (80056a8 <TIM_Base_SetConfig+0x11c>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d01f      	beq.n	800563e <TIM_Base_SetConfig+0xb2>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a2a      	ldr	r2, [pc, #168]	; (80056ac <TIM_Base_SetConfig+0x120>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d01b      	beq.n	800563e <TIM_Base_SetConfig+0xb2>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4a29      	ldr	r2, [pc, #164]	; (80056b0 <TIM_Base_SetConfig+0x124>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d017      	beq.n	800563e <TIM_Base_SetConfig+0xb2>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a28      	ldr	r2, [pc, #160]	; (80056b4 <TIM_Base_SetConfig+0x128>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d013      	beq.n	800563e <TIM_Base_SetConfig+0xb2>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a27      	ldr	r2, [pc, #156]	; (80056b8 <TIM_Base_SetConfig+0x12c>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d00f      	beq.n	800563e <TIM_Base_SetConfig+0xb2>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a26      	ldr	r2, [pc, #152]	; (80056bc <TIM_Base_SetConfig+0x130>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d00b      	beq.n	800563e <TIM_Base_SetConfig+0xb2>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4a25      	ldr	r2, [pc, #148]	; (80056c0 <TIM_Base_SetConfig+0x134>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d007      	beq.n	800563e <TIM_Base_SetConfig+0xb2>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4a24      	ldr	r2, [pc, #144]	; (80056c4 <TIM_Base_SetConfig+0x138>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d003      	beq.n	800563e <TIM_Base_SetConfig+0xb2>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4a23      	ldr	r2, [pc, #140]	; (80056c8 <TIM_Base_SetConfig+0x13c>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d108      	bne.n	8005650 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005644:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	68fa      	ldr	r2, [r7, #12]
 800564c:	4313      	orrs	r3, r2
 800564e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	695b      	ldr	r3, [r3, #20]
 800565a:	4313      	orrs	r3, r2
 800565c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	68fa      	ldr	r2, [r7, #12]
 8005662:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	689a      	ldr	r2, [r3, #8]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4a0a      	ldr	r2, [pc, #40]	; (80056a0 <TIM_Base_SetConfig+0x114>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d003      	beq.n	8005684 <TIM_Base_SetConfig+0xf8>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	4a0c      	ldr	r2, [pc, #48]	; (80056b0 <TIM_Base_SetConfig+0x124>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d103      	bne.n	800568c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	691a      	ldr	r2, [r3, #16]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	615a      	str	r2, [r3, #20]
}
 8005692:	bf00      	nop
 8005694:	3714      	adds	r7, #20
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
 800569e:	bf00      	nop
 80056a0:	40010000 	.word	0x40010000
 80056a4:	40000400 	.word	0x40000400
 80056a8:	40000800 	.word	0x40000800
 80056ac:	40000c00 	.word	0x40000c00
 80056b0:	40010400 	.word	0x40010400
 80056b4:	40014000 	.word	0x40014000
 80056b8:	40014400 	.word	0x40014400
 80056bc:	40014800 	.word	0x40014800
 80056c0:	40001800 	.word	0x40001800
 80056c4:	40001c00 	.word	0x40001c00
 80056c8:	40002000 	.word	0x40002000

080056cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b087      	sub	sp, #28
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a1b      	ldr	r3, [r3, #32]
 80056da:	f023 0201 	bic.w	r2, r3, #1
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a1b      	ldr	r3, [r3, #32]
 80056e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	699b      	ldr	r3, [r3, #24]
 80056f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	4b2b      	ldr	r3, [pc, #172]	; (80057a4 <TIM_OC1_SetConfig+0xd8>)
 80056f8:	4013      	ands	r3, r2
 80056fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f023 0303 	bic.w	r3, r3, #3
 8005702:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	68fa      	ldr	r2, [r7, #12]
 800570a:	4313      	orrs	r3, r2
 800570c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	f023 0302 	bic.w	r3, r3, #2
 8005714:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	697a      	ldr	r2, [r7, #20]
 800571c:	4313      	orrs	r3, r2
 800571e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	4a21      	ldr	r2, [pc, #132]	; (80057a8 <TIM_OC1_SetConfig+0xdc>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d003      	beq.n	8005730 <TIM_OC1_SetConfig+0x64>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	4a20      	ldr	r2, [pc, #128]	; (80057ac <TIM_OC1_SetConfig+0xe0>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d10c      	bne.n	800574a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	f023 0308 	bic.w	r3, r3, #8
 8005736:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	697a      	ldr	r2, [r7, #20]
 800573e:	4313      	orrs	r3, r2
 8005740:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	f023 0304 	bic.w	r3, r3, #4
 8005748:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a16      	ldr	r2, [pc, #88]	; (80057a8 <TIM_OC1_SetConfig+0xdc>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d003      	beq.n	800575a <TIM_OC1_SetConfig+0x8e>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a15      	ldr	r2, [pc, #84]	; (80057ac <TIM_OC1_SetConfig+0xe0>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d111      	bne.n	800577e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005760:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005768:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	695b      	ldr	r3, [r3, #20]
 800576e:	693a      	ldr	r2, [r7, #16]
 8005770:	4313      	orrs	r3, r2
 8005772:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	699b      	ldr	r3, [r3, #24]
 8005778:	693a      	ldr	r2, [r7, #16]
 800577a:	4313      	orrs	r3, r2
 800577c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	693a      	ldr	r2, [r7, #16]
 8005782:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	68fa      	ldr	r2, [r7, #12]
 8005788:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	685a      	ldr	r2, [r3, #4]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	697a      	ldr	r2, [r7, #20]
 8005796:	621a      	str	r2, [r3, #32]
}
 8005798:	bf00      	nop
 800579a:	371c      	adds	r7, #28
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr
 80057a4:	fffeff8f 	.word	0xfffeff8f
 80057a8:	40010000 	.word	0x40010000
 80057ac:	40010400 	.word	0x40010400

080057b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b087      	sub	sp, #28
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6a1b      	ldr	r3, [r3, #32]
 80057be:	f023 0210 	bic.w	r2, r3, #16
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a1b      	ldr	r3, [r3, #32]
 80057ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	699b      	ldr	r3, [r3, #24]
 80057d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80057d8:	68fa      	ldr	r2, [r7, #12]
 80057da:	4b2e      	ldr	r3, [pc, #184]	; (8005894 <TIM_OC2_SetConfig+0xe4>)
 80057dc:	4013      	ands	r3, r2
 80057de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	021b      	lsls	r3, r3, #8
 80057ee:	68fa      	ldr	r2, [r7, #12]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	f023 0320 	bic.w	r3, r3, #32
 80057fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	011b      	lsls	r3, r3, #4
 8005802:	697a      	ldr	r2, [r7, #20]
 8005804:	4313      	orrs	r3, r2
 8005806:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	4a23      	ldr	r2, [pc, #140]	; (8005898 <TIM_OC2_SetConfig+0xe8>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d003      	beq.n	8005818 <TIM_OC2_SetConfig+0x68>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	4a22      	ldr	r2, [pc, #136]	; (800589c <TIM_OC2_SetConfig+0xec>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d10d      	bne.n	8005834 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800581e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	011b      	lsls	r3, r3, #4
 8005826:	697a      	ldr	r2, [r7, #20]
 8005828:	4313      	orrs	r3, r2
 800582a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005832:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4a18      	ldr	r2, [pc, #96]	; (8005898 <TIM_OC2_SetConfig+0xe8>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d003      	beq.n	8005844 <TIM_OC2_SetConfig+0x94>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	4a17      	ldr	r2, [pc, #92]	; (800589c <TIM_OC2_SetConfig+0xec>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d113      	bne.n	800586c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800584a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005852:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	695b      	ldr	r3, [r3, #20]
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	693a      	ldr	r2, [r7, #16]
 800585c:	4313      	orrs	r3, r2
 800585e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	699b      	ldr	r3, [r3, #24]
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	693a      	ldr	r2, [r7, #16]
 8005868:	4313      	orrs	r3, r2
 800586a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	693a      	ldr	r2, [r7, #16]
 8005870:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	685a      	ldr	r2, [r3, #4]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	697a      	ldr	r2, [r7, #20]
 8005884:	621a      	str	r2, [r3, #32]
}
 8005886:	bf00      	nop
 8005888:	371c      	adds	r7, #28
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr
 8005892:	bf00      	nop
 8005894:	feff8fff 	.word	0xfeff8fff
 8005898:	40010000 	.word	0x40010000
 800589c:	40010400 	.word	0x40010400

080058a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b087      	sub	sp, #28
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6a1b      	ldr	r3, [r3, #32]
 80058ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a1b      	ldr	r3, [r3, #32]
 80058ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	69db      	ldr	r3, [r3, #28]
 80058c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80058c8:	68fa      	ldr	r2, [r7, #12]
 80058ca:	4b2d      	ldr	r3, [pc, #180]	; (8005980 <TIM_OC3_SetConfig+0xe0>)
 80058cc:	4013      	ands	r3, r2
 80058ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f023 0303 	bic.w	r3, r3, #3
 80058d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	4313      	orrs	r3, r2
 80058e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	021b      	lsls	r3, r3, #8
 80058f0:	697a      	ldr	r2, [r7, #20]
 80058f2:	4313      	orrs	r3, r2
 80058f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a22      	ldr	r2, [pc, #136]	; (8005984 <TIM_OC3_SetConfig+0xe4>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d003      	beq.n	8005906 <TIM_OC3_SetConfig+0x66>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a21      	ldr	r2, [pc, #132]	; (8005988 <TIM_OC3_SetConfig+0xe8>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d10d      	bne.n	8005922 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800590c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	021b      	lsls	r3, r3, #8
 8005914:	697a      	ldr	r2, [r7, #20]
 8005916:	4313      	orrs	r3, r2
 8005918:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005920:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a17      	ldr	r2, [pc, #92]	; (8005984 <TIM_OC3_SetConfig+0xe4>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d003      	beq.n	8005932 <TIM_OC3_SetConfig+0x92>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a16      	ldr	r2, [pc, #88]	; (8005988 <TIM_OC3_SetConfig+0xe8>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d113      	bne.n	800595a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005938:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005940:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	695b      	ldr	r3, [r3, #20]
 8005946:	011b      	lsls	r3, r3, #4
 8005948:	693a      	ldr	r2, [r7, #16]
 800594a:	4313      	orrs	r3, r2
 800594c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	699b      	ldr	r3, [r3, #24]
 8005952:	011b      	lsls	r3, r3, #4
 8005954:	693a      	ldr	r2, [r7, #16]
 8005956:	4313      	orrs	r3, r2
 8005958:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	693a      	ldr	r2, [r7, #16]
 800595e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	68fa      	ldr	r2, [r7, #12]
 8005964:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	685a      	ldr	r2, [r3, #4]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	697a      	ldr	r2, [r7, #20]
 8005972:	621a      	str	r2, [r3, #32]
}
 8005974:	bf00      	nop
 8005976:	371c      	adds	r7, #28
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr
 8005980:	fffeff8f 	.word	0xfffeff8f
 8005984:	40010000 	.word	0x40010000
 8005988:	40010400 	.word	0x40010400

0800598c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800598c:	b480      	push	{r7}
 800598e:	b087      	sub	sp, #28
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6a1b      	ldr	r3, [r3, #32]
 800599a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a1b      	ldr	r3, [r3, #32]
 80059a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	69db      	ldr	r3, [r3, #28]
 80059b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80059b4:	68fa      	ldr	r2, [r7, #12]
 80059b6:	4b1e      	ldr	r3, [pc, #120]	; (8005a30 <TIM_OC4_SetConfig+0xa4>)
 80059b8:	4013      	ands	r3, r2
 80059ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	021b      	lsls	r3, r3, #8
 80059ca:	68fa      	ldr	r2, [r7, #12]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	031b      	lsls	r3, r3, #12
 80059de:	693a      	ldr	r2, [r7, #16]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4a13      	ldr	r2, [pc, #76]	; (8005a34 <TIM_OC4_SetConfig+0xa8>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d003      	beq.n	80059f4 <TIM_OC4_SetConfig+0x68>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	4a12      	ldr	r2, [pc, #72]	; (8005a38 <TIM_OC4_SetConfig+0xac>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d109      	bne.n	8005a08 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	695b      	ldr	r3, [r3, #20]
 8005a00:	019b      	lsls	r3, r3, #6
 8005a02:	697a      	ldr	r2, [r7, #20]
 8005a04:	4313      	orrs	r3, r2
 8005a06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	697a      	ldr	r2, [r7, #20]
 8005a0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	68fa      	ldr	r2, [r7, #12]
 8005a12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	685a      	ldr	r2, [r3, #4]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	693a      	ldr	r2, [r7, #16]
 8005a20:	621a      	str	r2, [r3, #32]
}
 8005a22:	bf00      	nop
 8005a24:	371c      	adds	r7, #28
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr
 8005a2e:	bf00      	nop
 8005a30:	feff8fff 	.word	0xfeff8fff
 8005a34:	40010000 	.word	0x40010000
 8005a38:	40010400 	.word	0x40010400

08005a3c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b087      	sub	sp, #28
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a1b      	ldr	r3, [r3, #32]
 8005a4a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6a1b      	ldr	r3, [r3, #32]
 8005a56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005a64:	68fa      	ldr	r2, [r7, #12]
 8005a66:	4b1b      	ldr	r3, [pc, #108]	; (8005ad4 <TIM_OC5_SetConfig+0x98>)
 8005a68:	4013      	ands	r3, r2
 8005a6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	68fa      	ldr	r2, [r7, #12]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005a7c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	041b      	lsls	r3, r3, #16
 8005a84:	693a      	ldr	r2, [r7, #16]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a12      	ldr	r2, [pc, #72]	; (8005ad8 <TIM_OC5_SetConfig+0x9c>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d003      	beq.n	8005a9a <TIM_OC5_SetConfig+0x5e>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a11      	ldr	r2, [pc, #68]	; (8005adc <TIM_OC5_SetConfig+0xa0>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d109      	bne.n	8005aae <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005aa0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	695b      	ldr	r3, [r3, #20]
 8005aa6:	021b      	lsls	r3, r3, #8
 8005aa8:	697a      	ldr	r2, [r7, #20]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	697a      	ldr	r2, [r7, #20]
 8005ab2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	68fa      	ldr	r2, [r7, #12]
 8005ab8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	685a      	ldr	r2, [r3, #4]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	693a      	ldr	r2, [r7, #16]
 8005ac6:	621a      	str	r2, [r3, #32]
}
 8005ac8:	bf00      	nop
 8005aca:	371c      	adds	r7, #28
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr
 8005ad4:	fffeff8f 	.word	0xfffeff8f
 8005ad8:	40010000 	.word	0x40010000
 8005adc:	40010400 	.word	0x40010400

08005ae0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b087      	sub	sp, #28
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6a1b      	ldr	r3, [r3, #32]
 8005aee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6a1b      	ldr	r3, [r3, #32]
 8005afa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005b08:	68fa      	ldr	r2, [r7, #12]
 8005b0a:	4b1c      	ldr	r3, [pc, #112]	; (8005b7c <TIM_OC6_SetConfig+0x9c>)
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	021b      	lsls	r3, r3, #8
 8005b16:	68fa      	ldr	r2, [r7, #12]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005b22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	051b      	lsls	r3, r3, #20
 8005b2a:	693a      	ldr	r2, [r7, #16]
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	4a13      	ldr	r2, [pc, #76]	; (8005b80 <TIM_OC6_SetConfig+0xa0>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d003      	beq.n	8005b40 <TIM_OC6_SetConfig+0x60>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4a12      	ldr	r2, [pc, #72]	; (8005b84 <TIM_OC6_SetConfig+0xa4>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d109      	bne.n	8005b54 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b46:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	695b      	ldr	r3, [r3, #20]
 8005b4c:	029b      	lsls	r3, r3, #10
 8005b4e:	697a      	ldr	r2, [r7, #20]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	697a      	ldr	r2, [r7, #20]
 8005b58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	68fa      	ldr	r2, [r7, #12]
 8005b5e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	685a      	ldr	r2, [r3, #4]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	693a      	ldr	r2, [r7, #16]
 8005b6c:	621a      	str	r2, [r3, #32]
}
 8005b6e:	bf00      	nop
 8005b70:	371c      	adds	r7, #28
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr
 8005b7a:	bf00      	nop
 8005b7c:	feff8fff 	.word	0xfeff8fff
 8005b80:	40010000 	.word	0x40010000
 8005b84:	40010400 	.word	0x40010400

08005b88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b087      	sub	sp, #28
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	60b9      	str	r1, [r7, #8]
 8005b92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	6a1b      	ldr	r3, [r3, #32]
 8005b98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6a1b      	ldr	r3, [r3, #32]
 8005b9e:	f023 0201 	bic.w	r2, r3, #1
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	699b      	ldr	r3, [r3, #24]
 8005baa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005bb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	011b      	lsls	r3, r3, #4
 8005bb8:	693a      	ldr	r2, [r7, #16]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	f023 030a 	bic.w	r3, r3, #10
 8005bc4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005bc6:	697a      	ldr	r2, [r7, #20]
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	693a      	ldr	r2, [r7, #16]
 8005bd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	697a      	ldr	r2, [r7, #20]
 8005bd8:	621a      	str	r2, [r3, #32]
}
 8005bda:	bf00      	nop
 8005bdc:	371c      	adds	r7, #28
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr

08005be6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005be6:	b480      	push	{r7}
 8005be8:	b087      	sub	sp, #28
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	60f8      	str	r0, [r7, #12]
 8005bee:	60b9      	str	r1, [r7, #8]
 8005bf0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6a1b      	ldr	r3, [r3, #32]
 8005bf6:	f023 0210 	bic.w	r2, r3, #16
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	699b      	ldr	r3, [r3, #24]
 8005c02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6a1b      	ldr	r3, [r3, #32]
 8005c08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	031b      	lsls	r3, r3, #12
 8005c16:	697a      	ldr	r2, [r7, #20]
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c22:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	011b      	lsls	r3, r3, #4
 8005c28:	693a      	ldr	r2, [r7, #16]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	697a      	ldr	r2, [r7, #20]
 8005c32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	693a      	ldr	r2, [r7, #16]
 8005c38:	621a      	str	r2, [r3, #32]
}
 8005c3a:	bf00      	nop
 8005c3c:	371c      	adds	r7, #28
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr

08005c46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c46:	b480      	push	{r7}
 8005c48:	b085      	sub	sp, #20
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	6078      	str	r0, [r7, #4]
 8005c4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c5e:	683a      	ldr	r2, [r7, #0]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	f043 0307 	orr.w	r3, r3, #7
 8005c68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	68fa      	ldr	r2, [r7, #12]
 8005c6e:	609a      	str	r2, [r3, #8]
}
 8005c70:	bf00      	nop
 8005c72:	3714      	adds	r7, #20
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr

08005c7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b087      	sub	sp, #28
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	60b9      	str	r1, [r7, #8]
 8005c86:	607a      	str	r2, [r7, #4]
 8005c88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	021a      	lsls	r2, r3, #8
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	431a      	orrs	r2, r3
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	697a      	ldr	r2, [r7, #20]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	697a      	ldr	r2, [r7, #20]
 8005cae:	609a      	str	r2, [r3, #8]
}
 8005cb0:	bf00      	nop
 8005cb2:	371c      	adds	r7, #28
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr

08005cbc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b087      	sub	sp, #28
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	60f8      	str	r0, [r7, #12]
 8005cc4:	60b9      	str	r1, [r7, #8]
 8005cc6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	f003 031f 	and.w	r3, r3, #31
 8005cce:	2201      	movs	r2, #1
 8005cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	6a1a      	ldr	r2, [r3, #32]
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	43db      	mvns	r3, r3
 8005cde:	401a      	ands	r2, r3
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6a1a      	ldr	r2, [r3, #32]
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	f003 031f 	and.w	r3, r3, #31
 8005cee:	6879      	ldr	r1, [r7, #4]
 8005cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8005cf4:	431a      	orrs	r2, r3
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	621a      	str	r2, [r3, #32]
}
 8005cfa:	bf00      	nop
 8005cfc:	371c      	adds	r7, #28
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr
	...

08005d08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b085      	sub	sp, #20
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d101      	bne.n	8005d20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d1c:	2302      	movs	r3, #2
 8005d1e:	e06d      	b.n	8005dfc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2202      	movs	r2, #2
 8005d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a30      	ldr	r2, [pc, #192]	; (8005e08 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d004      	beq.n	8005d54 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a2f      	ldr	r2, [pc, #188]	; (8005e0c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d108      	bne.n	8005d66 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005d5a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	68fa      	ldr	r2, [r7, #12]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d6c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	68fa      	ldr	r2, [r7, #12]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	68fa      	ldr	r2, [r7, #12]
 8005d7e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a20      	ldr	r2, [pc, #128]	; (8005e08 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d022      	beq.n	8005dd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d92:	d01d      	beq.n	8005dd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a1d      	ldr	r2, [pc, #116]	; (8005e10 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d018      	beq.n	8005dd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a1c      	ldr	r2, [pc, #112]	; (8005e14 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d013      	beq.n	8005dd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a1a      	ldr	r2, [pc, #104]	; (8005e18 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d00e      	beq.n	8005dd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a15      	ldr	r2, [pc, #84]	; (8005e0c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d009      	beq.n	8005dd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a16      	ldr	r2, [pc, #88]	; (8005e1c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d004      	beq.n	8005dd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a15      	ldr	r2, [pc, #84]	; (8005e20 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d10c      	bne.n	8005dea <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005dd6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	68ba      	ldr	r2, [r7, #8]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	68ba      	ldr	r2, [r7, #8]
 8005de8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2201      	movs	r2, #1
 8005dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005dfa:	2300      	movs	r3, #0
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3714      	adds	r7, #20
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr
 8005e08:	40010000 	.word	0x40010000
 8005e0c:	40010400 	.word	0x40010400
 8005e10:	40000400 	.word	0x40000400
 8005e14:	40000800 	.word	0x40000800
 8005e18:	40000c00 	.word	0x40000c00
 8005e1c:	40014000 	.word	0x40014000
 8005e20:	40001800 	.word	0x40001800

08005e24 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b085      	sub	sp, #20
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d101      	bne.n	8005e40 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005e3c:	2302      	movs	r3, #2
 8005e3e:	e065      	b.n	8005f0c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	4313      	orrs	r3, r2
 8005e62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	691b      	ldr	r3, [r3, #16]
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	695b      	ldr	r3, [r3, #20]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	699b      	ldr	r3, [r3, #24]
 8005eb4:	041b      	lsls	r3, r3, #16
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a16      	ldr	r2, [pc, #88]	; (8005f18 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d004      	beq.n	8005ece <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a14      	ldr	r2, [pc, #80]	; (8005f1c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d115      	bne.n	8005efa <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed8:	051b      	lsls	r3, r3, #20
 8005eda:	4313      	orrs	r3, r2
 8005edc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	69db      	ldr	r3, [r3, #28]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	6a1b      	ldr	r3, [r3, #32]
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	68fa      	ldr	r2, [r7, #12]
 8005f00:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f0a:	2300      	movs	r3, #0
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3714      	adds	r7, #20
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr
 8005f18:	40010000 	.word	0x40010000
 8005f1c:	40010400 	.word	0x40010400

08005f20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b083      	sub	sp, #12
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f28:	bf00      	nop
 8005f2a:	370c      	adds	r7, #12
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f3c:	bf00      	nop
 8005f3e:	370c      	adds	r7, #12
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr

08005f48 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b083      	sub	sp, #12
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005f50:	bf00      	nop
 8005f52:	370c      	adds	r7, #12
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr

08005f5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b082      	sub	sp, #8
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d101      	bne.n	8005f6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e040      	b.n	8005ff0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d106      	bne.n	8005f84 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f7fc f91c 	bl	80021bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2224      	movs	r2, #36	; 0x24
 8005f88:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f022 0201 	bic.w	r2, r2, #1
 8005f98:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 fbf8 	bl	8006790 <UART_SetConfig>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d101      	bne.n	8005faa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e022      	b.n	8005ff0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d002      	beq.n	8005fb8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 fe4e 	bl	8006c54 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	685a      	ldr	r2, [r3, #4]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005fc6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	689a      	ldr	r2, [r3, #8]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005fd6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f042 0201 	orr.w	r2, r2, #1
 8005fe6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f000 fed5 	bl	8006d98 <UART_CheckIdleState>
 8005fee:	4603      	mov	r3, r0
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3708      	adds	r7, #8
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b08a      	sub	sp, #40	; 0x28
 8005ffc:	af02      	add	r7, sp, #8
 8005ffe:	60f8      	str	r0, [r7, #12]
 8006000:	60b9      	str	r1, [r7, #8]
 8006002:	603b      	str	r3, [r7, #0]
 8006004:	4613      	mov	r3, r2
 8006006:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800600c:	2b20      	cmp	r3, #32
 800600e:	f040 8081 	bne.w	8006114 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d002      	beq.n	800601e <HAL_UART_Transmit+0x26>
 8006018:	88fb      	ldrh	r3, [r7, #6]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d101      	bne.n	8006022 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e079      	b.n	8006116 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006028:	2b01      	cmp	r3, #1
 800602a:	d101      	bne.n	8006030 <HAL_UART_Transmit+0x38>
 800602c:	2302      	movs	r3, #2
 800602e:	e072      	b.n	8006116 <HAL_UART_Transmit+0x11e>
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2201      	movs	r2, #1
 8006034:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2200      	movs	r2, #0
 800603c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2221      	movs	r2, #33	; 0x21
 8006044:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006046:	f7fc fa81 	bl	800254c <HAL_GetTick>
 800604a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	88fa      	ldrh	r2, [r7, #6]
 8006050:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	88fa      	ldrh	r2, [r7, #6]
 8006058:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006064:	d108      	bne.n	8006078 <HAL_UART_Transmit+0x80>
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	691b      	ldr	r3, [r3, #16]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d104      	bne.n	8006078 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800606e:	2300      	movs	r3, #0
 8006070:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	61bb      	str	r3, [r7, #24]
 8006076:	e003      	b.n	8006080 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800607c:	2300      	movs	r3, #0
 800607e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2200      	movs	r2, #0
 8006084:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006088:	e02c      	b.n	80060e4 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	9300      	str	r3, [sp, #0]
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	2200      	movs	r2, #0
 8006092:	2180      	movs	r1, #128	; 0x80
 8006094:	68f8      	ldr	r0, [r7, #12]
 8006096:	f000 feb2 	bl	8006dfe <UART_WaitOnFlagUntilTimeout>
 800609a:	4603      	mov	r3, r0
 800609c:	2b00      	cmp	r3, #0
 800609e:	d001      	beq.n	80060a4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80060a0:	2303      	movs	r3, #3
 80060a2:	e038      	b.n	8006116 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80060a4:	69fb      	ldr	r3, [r7, #28]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d10b      	bne.n	80060c2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80060aa:	69bb      	ldr	r3, [r7, #24]
 80060ac:	881b      	ldrh	r3, [r3, #0]
 80060ae:	461a      	mov	r2, r3
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060b8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80060ba:	69bb      	ldr	r3, [r7, #24]
 80060bc:	3302      	adds	r3, #2
 80060be:	61bb      	str	r3, [r7, #24]
 80060c0:	e007      	b.n	80060d2 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80060c2:	69fb      	ldr	r3, [r7, #28]
 80060c4:	781a      	ldrb	r2, [r3, #0]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80060cc:	69fb      	ldr	r3, [r7, #28]
 80060ce:	3301      	adds	r3, #1
 80060d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80060d8:	b29b      	uxth	r3, r3
 80060da:	3b01      	subs	r3, #1
 80060dc:	b29a      	uxth	r2, r3
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d1cc      	bne.n	800608a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	9300      	str	r3, [sp, #0]
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	2200      	movs	r2, #0
 80060f8:	2140      	movs	r1, #64	; 0x40
 80060fa:	68f8      	ldr	r0, [r7, #12]
 80060fc:	f000 fe7f 	bl	8006dfe <UART_WaitOnFlagUntilTimeout>
 8006100:	4603      	mov	r3, r0
 8006102:	2b00      	cmp	r3, #0
 8006104:	d001      	beq.n	800610a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8006106:	2303      	movs	r3, #3
 8006108:	e005      	b.n	8006116 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2220      	movs	r2, #32
 800610e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006110:	2300      	movs	r3, #0
 8006112:	e000      	b.n	8006116 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8006114:	2302      	movs	r3, #2
  }
}
 8006116:	4618      	mov	r0, r3
 8006118:	3720      	adds	r7, #32
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}

0800611e <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800611e:	b580      	push	{r7, lr}
 8006120:	b08a      	sub	sp, #40	; 0x28
 8006122:	af00      	add	r7, sp, #0
 8006124:	60f8      	str	r0, [r7, #12]
 8006126:	60b9      	str	r1, [r7, #8]
 8006128:	4613      	mov	r3, r2
 800612a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006130:	2b20      	cmp	r3, #32
 8006132:	d13d      	bne.n	80061b0 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d002      	beq.n	8006140 <HAL_UART_Receive_IT+0x22>
 800613a:	88fb      	ldrh	r3, [r7, #6]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d101      	bne.n	8006144 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	e036      	b.n	80061b2 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800614a:	2b01      	cmp	r3, #1
 800614c:	d101      	bne.n	8006152 <HAL_UART_Receive_IT+0x34>
 800614e:	2302      	movs	r3, #2
 8006150:	e02f      	b.n	80061b2 <HAL_UART_Receive_IT+0x94>
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2201      	movs	r2, #1
 8006156:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2200      	movs	r2, #0
 800615e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800616a:	2b00      	cmp	r3, #0
 800616c:	d018      	beq.n	80061a0 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	e853 3f00 	ldrex	r3, [r3]
 800617a:	613b      	str	r3, [r7, #16]
   return(result);
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006182:	627b      	str	r3, [r7, #36]	; 0x24
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	461a      	mov	r2, r3
 800618a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618c:	623b      	str	r3, [r7, #32]
 800618e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006190:	69f9      	ldr	r1, [r7, #28]
 8006192:	6a3a      	ldr	r2, [r7, #32]
 8006194:	e841 2300 	strex	r3, r2, [r1]
 8006198:	61bb      	str	r3, [r7, #24]
   return(result);
 800619a:	69bb      	ldr	r3, [r7, #24]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d1e6      	bne.n	800616e <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80061a0:	88fb      	ldrh	r3, [r7, #6]
 80061a2:	461a      	mov	r2, r3
 80061a4:	68b9      	ldr	r1, [r7, #8]
 80061a6:	68f8      	ldr	r0, [r7, #12]
 80061a8:	f000 feee 	bl	8006f88 <UART_Start_Receive_IT>
 80061ac:	4603      	mov	r3, r0
 80061ae:	e000      	b.n	80061b2 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80061b0:	2302      	movs	r3, #2
  }
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3728      	adds	r7, #40	; 0x28
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
	...

080061bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b0ba      	sub	sp, #232	; 0xe8
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	69db      	ldr	r3, [r3, #28]
 80061ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80061e2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80061e6:	f640 030f 	movw	r3, #2063	; 0x80f
 80061ea:	4013      	ands	r3, r2
 80061ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80061f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d115      	bne.n	8006224 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80061f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061fc:	f003 0320 	and.w	r3, r3, #32
 8006200:	2b00      	cmp	r3, #0
 8006202:	d00f      	beq.n	8006224 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006204:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006208:	f003 0320 	and.w	r3, r3, #32
 800620c:	2b00      	cmp	r3, #0
 800620e:	d009      	beq.n	8006224 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006214:	2b00      	cmp	r3, #0
 8006216:	f000 828f 	beq.w	8006738 <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	4798      	blx	r3
      }
      return;
 8006222:	e289      	b.n	8006738 <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006224:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006228:	2b00      	cmp	r3, #0
 800622a:	f000 8117 	beq.w	800645c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800622e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006232:	f003 0301 	and.w	r3, r3, #1
 8006236:	2b00      	cmp	r3, #0
 8006238:	d106      	bne.n	8006248 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800623a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800623e:	4b85      	ldr	r3, [pc, #532]	; (8006454 <HAL_UART_IRQHandler+0x298>)
 8006240:	4013      	ands	r3, r2
 8006242:	2b00      	cmp	r3, #0
 8006244:	f000 810a 	beq.w	800645c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006248:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800624c:	f003 0301 	and.w	r3, r3, #1
 8006250:	2b00      	cmp	r3, #0
 8006252:	d011      	beq.n	8006278 <HAL_UART_IRQHandler+0xbc>
 8006254:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800625c:	2b00      	cmp	r3, #0
 800625e:	d00b      	beq.n	8006278 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	2201      	movs	r2, #1
 8006266:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800626e:	f043 0201 	orr.w	r2, r3, #1
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006278:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800627c:	f003 0302 	and.w	r3, r3, #2
 8006280:	2b00      	cmp	r3, #0
 8006282:	d011      	beq.n	80062a8 <HAL_UART_IRQHandler+0xec>
 8006284:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006288:	f003 0301 	and.w	r3, r3, #1
 800628c:	2b00      	cmp	r3, #0
 800628e:	d00b      	beq.n	80062a8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	2202      	movs	r2, #2
 8006296:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800629e:	f043 0204 	orr.w	r2, r3, #4
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80062a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062ac:	f003 0304 	and.w	r3, r3, #4
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d011      	beq.n	80062d8 <HAL_UART_IRQHandler+0x11c>
 80062b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062b8:	f003 0301 	and.w	r3, r3, #1
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d00b      	beq.n	80062d8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	2204      	movs	r2, #4
 80062c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062ce:	f043 0202 	orr.w	r2, r3, #2
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80062d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062dc:	f003 0308 	and.w	r3, r3, #8
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d017      	beq.n	8006314 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80062e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062e8:	f003 0320 	and.w	r3, r3, #32
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d105      	bne.n	80062fc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80062f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062f4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d00b      	beq.n	8006314 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	2208      	movs	r2, #8
 8006302:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800630a:	f043 0208 	orr.w	r2, r3, #8
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006314:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006318:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800631c:	2b00      	cmp	r3, #0
 800631e:	d012      	beq.n	8006346 <HAL_UART_IRQHandler+0x18a>
 8006320:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006324:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006328:	2b00      	cmp	r3, #0
 800632a:	d00c      	beq.n	8006346 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006334:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800633c:	f043 0220 	orr.w	r2, r3, #32
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800634c:	2b00      	cmp	r3, #0
 800634e:	f000 81f5 	beq.w	800673c <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006356:	f003 0320 	and.w	r3, r3, #32
 800635a:	2b00      	cmp	r3, #0
 800635c:	d00d      	beq.n	800637a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800635e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006362:	f003 0320 	and.w	r3, r3, #32
 8006366:	2b00      	cmp	r3, #0
 8006368:	d007      	beq.n	800637a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800636e:	2b00      	cmp	r3, #0
 8006370:	d003      	beq.n	800637a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006380:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800638e:	2b40      	cmp	r3, #64	; 0x40
 8006390:	d005      	beq.n	800639e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006392:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006396:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800639a:	2b00      	cmp	r3, #0
 800639c:	d04f      	beq.n	800643e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f000 febc 	bl	800711c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ae:	2b40      	cmp	r3, #64	; 0x40
 80063b0:	d141      	bne.n	8006436 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	3308      	adds	r3, #8
 80063b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80063c0:	e853 3f00 	ldrex	r3, [r3]
 80063c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80063c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80063cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	3308      	adds	r3, #8
 80063da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80063de:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80063e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80063ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80063ee:	e841 2300 	strex	r3, r2, [r1]
 80063f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80063f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d1d9      	bne.n	80063b2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006402:	2b00      	cmp	r3, #0
 8006404:	d013      	beq.n	800642e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800640a:	4a13      	ldr	r2, [pc, #76]	; (8006458 <HAL_UART_IRQHandler+0x29c>)
 800640c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006412:	4618      	mov	r0, r3
 8006414:	f7fc fe45 	bl	80030a2 <HAL_DMA_Abort_IT>
 8006418:	4603      	mov	r3, r0
 800641a:	2b00      	cmp	r3, #0
 800641c:	d017      	beq.n	800644e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006422:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006424:	687a      	ldr	r2, [r7, #4]
 8006426:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006428:	4610      	mov	r0, r2
 800642a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800642c:	e00f      	b.n	800644e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 f998 	bl	8006764 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006434:	e00b      	b.n	800644e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 f994 	bl	8006764 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800643c:	e007      	b.n	800644e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f000 f990 	bl	8006764 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2200      	movs	r2, #0
 8006448:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800644c:	e176      	b.n	800673c <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800644e:	bf00      	nop
    return;
 8006450:	e174      	b.n	800673c <HAL_UART_IRQHandler+0x580>
 8006452:	bf00      	nop
 8006454:	04000120 	.word	0x04000120
 8006458:	080071e3 	.word	0x080071e3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006460:	2b01      	cmp	r3, #1
 8006462:	f040 8144 	bne.w	80066ee <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006466:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800646a:	f003 0310 	and.w	r3, r3, #16
 800646e:	2b00      	cmp	r3, #0
 8006470:	f000 813d 	beq.w	80066ee <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006474:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006478:	f003 0310 	and.w	r3, r3, #16
 800647c:	2b00      	cmp	r3, #0
 800647e:	f000 8136 	beq.w	80066ee <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	2210      	movs	r2, #16
 8006488:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006494:	2b40      	cmp	r3, #64	; 0x40
 8006496:	f040 80b2 	bne.w	80065fe <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80064a6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	f000 8148 	beq.w	8006740 <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80064b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80064ba:	429a      	cmp	r2, r3
 80064bc:	f080 8140 	bcs.w	8006740 <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80064c6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ce:	69db      	ldr	r3, [r3, #28]
 80064d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064d4:	f000 8085 	beq.w	80065e2 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80064e4:	e853 3f00 	ldrex	r3, [r3]
 80064e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80064ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80064f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	461a      	mov	r2, r3
 80064fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006502:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006506:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800650a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800650e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006512:	e841 2300 	strex	r3, r2, [r1]
 8006516:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800651a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800651e:	2b00      	cmp	r3, #0
 8006520:	d1da      	bne.n	80064d8 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	3308      	adds	r3, #8
 8006528:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800652a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800652c:	e853 3f00 	ldrex	r3, [r3]
 8006530:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006532:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006534:	f023 0301 	bic.w	r3, r3, #1
 8006538:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	3308      	adds	r3, #8
 8006542:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006546:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800654a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800654c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800654e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006552:	e841 2300 	strex	r3, r2, [r1]
 8006556:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006558:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800655a:	2b00      	cmp	r3, #0
 800655c:	d1e1      	bne.n	8006522 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	3308      	adds	r3, #8
 8006564:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006566:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006568:	e853 3f00 	ldrex	r3, [r3]
 800656c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800656e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006570:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006574:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	3308      	adds	r3, #8
 800657e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006582:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006584:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006586:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006588:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800658a:	e841 2300 	strex	r3, r2, [r1]
 800658e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006590:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006592:	2b00      	cmp	r3, #0
 8006594:	d1e3      	bne.n	800655e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2220      	movs	r2, #32
 800659a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2200      	movs	r2, #0
 80065a0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065aa:	e853 3f00 	ldrex	r3, [r3]
 80065ae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80065b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065b2:	f023 0310 	bic.w	r3, r3, #16
 80065b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	461a      	mov	r2, r3
 80065c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80065c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80065c6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80065ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80065cc:	e841 2300 	strex	r3, r2, [r1]
 80065d0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80065d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d1e4      	bne.n	80065a2 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065dc:	4618      	mov	r0, r3
 80065de:	f7fc fcf0 	bl	8002fc2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	1ad3      	subs	r3, r2, r3
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	4619      	mov	r1, r3
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f000 f8be 	bl	8006778 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80065fc:	e0a0      	b.n	8006740 <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800660a:	b29b      	uxth	r3, r3
 800660c:	1ad3      	subs	r3, r2, r3
 800660e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006618:	b29b      	uxth	r3, r3
 800661a:	2b00      	cmp	r3, #0
 800661c:	f000 8092 	beq.w	8006744 <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 8006620:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006624:	2b00      	cmp	r3, #0
 8006626:	f000 808d 	beq.w	8006744 <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006632:	e853 3f00 	ldrex	r3, [r3]
 8006636:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800663a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800663e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	461a      	mov	r2, r3
 8006648:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800664c:	647b      	str	r3, [r7, #68]	; 0x44
 800664e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006650:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006652:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006654:	e841 2300 	strex	r3, r2, [r1]
 8006658:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800665a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800665c:	2b00      	cmp	r3, #0
 800665e:	d1e4      	bne.n	800662a <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	3308      	adds	r3, #8
 8006666:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666a:	e853 3f00 	ldrex	r3, [r3]
 800666e:	623b      	str	r3, [r7, #32]
   return(result);
 8006670:	6a3b      	ldr	r3, [r7, #32]
 8006672:	f023 0301 	bic.w	r3, r3, #1
 8006676:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	3308      	adds	r3, #8
 8006680:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006684:	633a      	str	r2, [r7, #48]	; 0x30
 8006686:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006688:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800668a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800668c:	e841 2300 	strex	r3, r2, [r1]
 8006690:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006694:	2b00      	cmp	r3, #0
 8006696:	d1e3      	bne.n	8006660 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2220      	movs	r2, #32
 800669c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2200      	movs	r2, #0
 80066a2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2200      	movs	r2, #0
 80066a8:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	e853 3f00 	ldrex	r3, [r3]
 80066b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f023 0310 	bic.w	r3, r3, #16
 80066be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	461a      	mov	r2, r3
 80066c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80066cc:	61fb      	str	r3, [r7, #28]
 80066ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d0:	69b9      	ldr	r1, [r7, #24]
 80066d2:	69fa      	ldr	r2, [r7, #28]
 80066d4:	e841 2300 	strex	r3, r2, [r1]
 80066d8:	617b      	str	r3, [r7, #20]
   return(result);
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d1e4      	bne.n	80066aa <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80066e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80066e4:	4619      	mov	r1, r3
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 f846 	bl	8006778 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80066ec:	e02a      	b.n	8006744 <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80066ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d00e      	beq.n	8006718 <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80066fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006702:	2b00      	cmp	r3, #0
 8006704:	d008      	beq.n	8006718 <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800670a:	2b00      	cmp	r3, #0
 800670c:	d01c      	beq.n	8006748 <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	4798      	blx	r3
    }
    return;
 8006716:	e017      	b.n	8006748 <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006718:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800671c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006720:	2b00      	cmp	r3, #0
 8006722:	d012      	beq.n	800674a <HAL_UART_IRQHandler+0x58e>
 8006724:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800672c:	2b00      	cmp	r3, #0
 800672e:	d00c      	beq.n	800674a <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f000 fd6c 	bl	800720e <UART_EndTransmit_IT>
    return;
 8006736:	e008      	b.n	800674a <HAL_UART_IRQHandler+0x58e>
      return;
 8006738:	bf00      	nop
 800673a:	e006      	b.n	800674a <HAL_UART_IRQHandler+0x58e>
    return;
 800673c:	bf00      	nop
 800673e:	e004      	b.n	800674a <HAL_UART_IRQHandler+0x58e>
      return;
 8006740:	bf00      	nop
 8006742:	e002      	b.n	800674a <HAL_UART_IRQHandler+0x58e>
      return;
 8006744:	bf00      	nop
 8006746:	e000      	b.n	800674a <HAL_UART_IRQHandler+0x58e>
    return;
 8006748:	bf00      	nop
  }

}
 800674a:	37e8      	adds	r7, #232	; 0xe8
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}

08006750 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006750:	b480      	push	{r7}
 8006752:	b083      	sub	sp, #12
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006758:	bf00      	nop
 800675a:	370c      	adds	r7, #12
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr

08006764 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006764:	b480      	push	{r7}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800676c:	bf00      	nop
 800676e:	370c      	adds	r7, #12
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr

08006778 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006778:	b480      	push	{r7}
 800677a:	b083      	sub	sp, #12
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	460b      	mov	r3, r1
 8006782:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006784:	bf00      	nop
 8006786:	370c      	adds	r7, #12
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr

08006790 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b088      	sub	sp, #32
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006798:	2300      	movs	r3, #0
 800679a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	689a      	ldr	r2, [r3, #8]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	691b      	ldr	r3, [r3, #16]
 80067a4:	431a      	orrs	r2, r3
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	695b      	ldr	r3, [r3, #20]
 80067aa:	431a      	orrs	r2, r3
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	69db      	ldr	r3, [r3, #28]
 80067b0:	4313      	orrs	r3, r2
 80067b2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	4ba7      	ldr	r3, [pc, #668]	; (8006a58 <UART_SetConfig+0x2c8>)
 80067bc:	4013      	ands	r3, r2
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	6812      	ldr	r2, [r2, #0]
 80067c2:	6979      	ldr	r1, [r7, #20]
 80067c4:	430b      	orrs	r3, r1
 80067c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	68da      	ldr	r2, [r3, #12]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	430a      	orrs	r2, r1
 80067dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	699b      	ldr	r3, [r3, #24]
 80067e2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6a1b      	ldr	r3, [r3, #32]
 80067e8:	697a      	ldr	r2, [r7, #20]
 80067ea:	4313      	orrs	r3, r2
 80067ec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	697a      	ldr	r2, [r7, #20]
 80067fe:	430a      	orrs	r2, r1
 8006800:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a95      	ldr	r2, [pc, #596]	; (8006a5c <UART_SetConfig+0x2cc>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d120      	bne.n	800684e <UART_SetConfig+0xbe>
 800680c:	4b94      	ldr	r3, [pc, #592]	; (8006a60 <UART_SetConfig+0x2d0>)
 800680e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006812:	f003 0303 	and.w	r3, r3, #3
 8006816:	2b03      	cmp	r3, #3
 8006818:	d816      	bhi.n	8006848 <UART_SetConfig+0xb8>
 800681a:	a201      	add	r2, pc, #4	; (adr r2, 8006820 <UART_SetConfig+0x90>)
 800681c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006820:	08006831 	.word	0x08006831
 8006824:	0800683d 	.word	0x0800683d
 8006828:	08006837 	.word	0x08006837
 800682c:	08006843 	.word	0x08006843
 8006830:	2301      	movs	r3, #1
 8006832:	77fb      	strb	r3, [r7, #31]
 8006834:	e14f      	b.n	8006ad6 <UART_SetConfig+0x346>
 8006836:	2302      	movs	r3, #2
 8006838:	77fb      	strb	r3, [r7, #31]
 800683a:	e14c      	b.n	8006ad6 <UART_SetConfig+0x346>
 800683c:	2304      	movs	r3, #4
 800683e:	77fb      	strb	r3, [r7, #31]
 8006840:	e149      	b.n	8006ad6 <UART_SetConfig+0x346>
 8006842:	2308      	movs	r3, #8
 8006844:	77fb      	strb	r3, [r7, #31]
 8006846:	e146      	b.n	8006ad6 <UART_SetConfig+0x346>
 8006848:	2310      	movs	r3, #16
 800684a:	77fb      	strb	r3, [r7, #31]
 800684c:	e143      	b.n	8006ad6 <UART_SetConfig+0x346>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a84      	ldr	r2, [pc, #528]	; (8006a64 <UART_SetConfig+0x2d4>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d132      	bne.n	80068be <UART_SetConfig+0x12e>
 8006858:	4b81      	ldr	r3, [pc, #516]	; (8006a60 <UART_SetConfig+0x2d0>)
 800685a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800685e:	f003 030c 	and.w	r3, r3, #12
 8006862:	2b0c      	cmp	r3, #12
 8006864:	d828      	bhi.n	80068b8 <UART_SetConfig+0x128>
 8006866:	a201      	add	r2, pc, #4	; (adr r2, 800686c <UART_SetConfig+0xdc>)
 8006868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800686c:	080068a1 	.word	0x080068a1
 8006870:	080068b9 	.word	0x080068b9
 8006874:	080068b9 	.word	0x080068b9
 8006878:	080068b9 	.word	0x080068b9
 800687c:	080068ad 	.word	0x080068ad
 8006880:	080068b9 	.word	0x080068b9
 8006884:	080068b9 	.word	0x080068b9
 8006888:	080068b9 	.word	0x080068b9
 800688c:	080068a7 	.word	0x080068a7
 8006890:	080068b9 	.word	0x080068b9
 8006894:	080068b9 	.word	0x080068b9
 8006898:	080068b9 	.word	0x080068b9
 800689c:	080068b3 	.word	0x080068b3
 80068a0:	2300      	movs	r3, #0
 80068a2:	77fb      	strb	r3, [r7, #31]
 80068a4:	e117      	b.n	8006ad6 <UART_SetConfig+0x346>
 80068a6:	2302      	movs	r3, #2
 80068a8:	77fb      	strb	r3, [r7, #31]
 80068aa:	e114      	b.n	8006ad6 <UART_SetConfig+0x346>
 80068ac:	2304      	movs	r3, #4
 80068ae:	77fb      	strb	r3, [r7, #31]
 80068b0:	e111      	b.n	8006ad6 <UART_SetConfig+0x346>
 80068b2:	2308      	movs	r3, #8
 80068b4:	77fb      	strb	r3, [r7, #31]
 80068b6:	e10e      	b.n	8006ad6 <UART_SetConfig+0x346>
 80068b8:	2310      	movs	r3, #16
 80068ba:	77fb      	strb	r3, [r7, #31]
 80068bc:	e10b      	b.n	8006ad6 <UART_SetConfig+0x346>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a69      	ldr	r2, [pc, #420]	; (8006a68 <UART_SetConfig+0x2d8>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d120      	bne.n	800690a <UART_SetConfig+0x17a>
 80068c8:	4b65      	ldr	r3, [pc, #404]	; (8006a60 <UART_SetConfig+0x2d0>)
 80068ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068ce:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80068d2:	2b30      	cmp	r3, #48	; 0x30
 80068d4:	d013      	beq.n	80068fe <UART_SetConfig+0x16e>
 80068d6:	2b30      	cmp	r3, #48	; 0x30
 80068d8:	d814      	bhi.n	8006904 <UART_SetConfig+0x174>
 80068da:	2b20      	cmp	r3, #32
 80068dc:	d009      	beq.n	80068f2 <UART_SetConfig+0x162>
 80068de:	2b20      	cmp	r3, #32
 80068e0:	d810      	bhi.n	8006904 <UART_SetConfig+0x174>
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d002      	beq.n	80068ec <UART_SetConfig+0x15c>
 80068e6:	2b10      	cmp	r3, #16
 80068e8:	d006      	beq.n	80068f8 <UART_SetConfig+0x168>
 80068ea:	e00b      	b.n	8006904 <UART_SetConfig+0x174>
 80068ec:	2300      	movs	r3, #0
 80068ee:	77fb      	strb	r3, [r7, #31]
 80068f0:	e0f1      	b.n	8006ad6 <UART_SetConfig+0x346>
 80068f2:	2302      	movs	r3, #2
 80068f4:	77fb      	strb	r3, [r7, #31]
 80068f6:	e0ee      	b.n	8006ad6 <UART_SetConfig+0x346>
 80068f8:	2304      	movs	r3, #4
 80068fa:	77fb      	strb	r3, [r7, #31]
 80068fc:	e0eb      	b.n	8006ad6 <UART_SetConfig+0x346>
 80068fe:	2308      	movs	r3, #8
 8006900:	77fb      	strb	r3, [r7, #31]
 8006902:	e0e8      	b.n	8006ad6 <UART_SetConfig+0x346>
 8006904:	2310      	movs	r3, #16
 8006906:	77fb      	strb	r3, [r7, #31]
 8006908:	e0e5      	b.n	8006ad6 <UART_SetConfig+0x346>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a57      	ldr	r2, [pc, #348]	; (8006a6c <UART_SetConfig+0x2dc>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d120      	bne.n	8006956 <UART_SetConfig+0x1c6>
 8006914:	4b52      	ldr	r3, [pc, #328]	; (8006a60 <UART_SetConfig+0x2d0>)
 8006916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800691a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800691e:	2bc0      	cmp	r3, #192	; 0xc0
 8006920:	d013      	beq.n	800694a <UART_SetConfig+0x1ba>
 8006922:	2bc0      	cmp	r3, #192	; 0xc0
 8006924:	d814      	bhi.n	8006950 <UART_SetConfig+0x1c0>
 8006926:	2b80      	cmp	r3, #128	; 0x80
 8006928:	d009      	beq.n	800693e <UART_SetConfig+0x1ae>
 800692a:	2b80      	cmp	r3, #128	; 0x80
 800692c:	d810      	bhi.n	8006950 <UART_SetConfig+0x1c0>
 800692e:	2b00      	cmp	r3, #0
 8006930:	d002      	beq.n	8006938 <UART_SetConfig+0x1a8>
 8006932:	2b40      	cmp	r3, #64	; 0x40
 8006934:	d006      	beq.n	8006944 <UART_SetConfig+0x1b4>
 8006936:	e00b      	b.n	8006950 <UART_SetConfig+0x1c0>
 8006938:	2300      	movs	r3, #0
 800693a:	77fb      	strb	r3, [r7, #31]
 800693c:	e0cb      	b.n	8006ad6 <UART_SetConfig+0x346>
 800693e:	2302      	movs	r3, #2
 8006940:	77fb      	strb	r3, [r7, #31]
 8006942:	e0c8      	b.n	8006ad6 <UART_SetConfig+0x346>
 8006944:	2304      	movs	r3, #4
 8006946:	77fb      	strb	r3, [r7, #31]
 8006948:	e0c5      	b.n	8006ad6 <UART_SetConfig+0x346>
 800694a:	2308      	movs	r3, #8
 800694c:	77fb      	strb	r3, [r7, #31]
 800694e:	e0c2      	b.n	8006ad6 <UART_SetConfig+0x346>
 8006950:	2310      	movs	r3, #16
 8006952:	77fb      	strb	r3, [r7, #31]
 8006954:	e0bf      	b.n	8006ad6 <UART_SetConfig+0x346>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a45      	ldr	r2, [pc, #276]	; (8006a70 <UART_SetConfig+0x2e0>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d125      	bne.n	80069ac <UART_SetConfig+0x21c>
 8006960:	4b3f      	ldr	r3, [pc, #252]	; (8006a60 <UART_SetConfig+0x2d0>)
 8006962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006966:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800696a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800696e:	d017      	beq.n	80069a0 <UART_SetConfig+0x210>
 8006970:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006974:	d817      	bhi.n	80069a6 <UART_SetConfig+0x216>
 8006976:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800697a:	d00b      	beq.n	8006994 <UART_SetConfig+0x204>
 800697c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006980:	d811      	bhi.n	80069a6 <UART_SetConfig+0x216>
 8006982:	2b00      	cmp	r3, #0
 8006984:	d003      	beq.n	800698e <UART_SetConfig+0x1fe>
 8006986:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800698a:	d006      	beq.n	800699a <UART_SetConfig+0x20a>
 800698c:	e00b      	b.n	80069a6 <UART_SetConfig+0x216>
 800698e:	2300      	movs	r3, #0
 8006990:	77fb      	strb	r3, [r7, #31]
 8006992:	e0a0      	b.n	8006ad6 <UART_SetConfig+0x346>
 8006994:	2302      	movs	r3, #2
 8006996:	77fb      	strb	r3, [r7, #31]
 8006998:	e09d      	b.n	8006ad6 <UART_SetConfig+0x346>
 800699a:	2304      	movs	r3, #4
 800699c:	77fb      	strb	r3, [r7, #31]
 800699e:	e09a      	b.n	8006ad6 <UART_SetConfig+0x346>
 80069a0:	2308      	movs	r3, #8
 80069a2:	77fb      	strb	r3, [r7, #31]
 80069a4:	e097      	b.n	8006ad6 <UART_SetConfig+0x346>
 80069a6:	2310      	movs	r3, #16
 80069a8:	77fb      	strb	r3, [r7, #31]
 80069aa:	e094      	b.n	8006ad6 <UART_SetConfig+0x346>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a30      	ldr	r2, [pc, #192]	; (8006a74 <UART_SetConfig+0x2e4>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d125      	bne.n	8006a02 <UART_SetConfig+0x272>
 80069b6:	4b2a      	ldr	r3, [pc, #168]	; (8006a60 <UART_SetConfig+0x2d0>)
 80069b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069bc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80069c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80069c4:	d017      	beq.n	80069f6 <UART_SetConfig+0x266>
 80069c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80069ca:	d817      	bhi.n	80069fc <UART_SetConfig+0x26c>
 80069cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069d0:	d00b      	beq.n	80069ea <UART_SetConfig+0x25a>
 80069d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069d6:	d811      	bhi.n	80069fc <UART_SetConfig+0x26c>
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d003      	beq.n	80069e4 <UART_SetConfig+0x254>
 80069dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069e0:	d006      	beq.n	80069f0 <UART_SetConfig+0x260>
 80069e2:	e00b      	b.n	80069fc <UART_SetConfig+0x26c>
 80069e4:	2301      	movs	r3, #1
 80069e6:	77fb      	strb	r3, [r7, #31]
 80069e8:	e075      	b.n	8006ad6 <UART_SetConfig+0x346>
 80069ea:	2302      	movs	r3, #2
 80069ec:	77fb      	strb	r3, [r7, #31]
 80069ee:	e072      	b.n	8006ad6 <UART_SetConfig+0x346>
 80069f0:	2304      	movs	r3, #4
 80069f2:	77fb      	strb	r3, [r7, #31]
 80069f4:	e06f      	b.n	8006ad6 <UART_SetConfig+0x346>
 80069f6:	2308      	movs	r3, #8
 80069f8:	77fb      	strb	r3, [r7, #31]
 80069fa:	e06c      	b.n	8006ad6 <UART_SetConfig+0x346>
 80069fc:	2310      	movs	r3, #16
 80069fe:	77fb      	strb	r3, [r7, #31]
 8006a00:	e069      	b.n	8006ad6 <UART_SetConfig+0x346>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a1c      	ldr	r2, [pc, #112]	; (8006a78 <UART_SetConfig+0x2e8>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d137      	bne.n	8006a7c <UART_SetConfig+0x2ec>
 8006a0c:	4b14      	ldr	r3, [pc, #80]	; (8006a60 <UART_SetConfig+0x2d0>)
 8006a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a12:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006a16:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006a1a:	d017      	beq.n	8006a4c <UART_SetConfig+0x2bc>
 8006a1c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006a20:	d817      	bhi.n	8006a52 <UART_SetConfig+0x2c2>
 8006a22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a26:	d00b      	beq.n	8006a40 <UART_SetConfig+0x2b0>
 8006a28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a2c:	d811      	bhi.n	8006a52 <UART_SetConfig+0x2c2>
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d003      	beq.n	8006a3a <UART_SetConfig+0x2aa>
 8006a32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a36:	d006      	beq.n	8006a46 <UART_SetConfig+0x2b6>
 8006a38:	e00b      	b.n	8006a52 <UART_SetConfig+0x2c2>
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	77fb      	strb	r3, [r7, #31]
 8006a3e:	e04a      	b.n	8006ad6 <UART_SetConfig+0x346>
 8006a40:	2302      	movs	r3, #2
 8006a42:	77fb      	strb	r3, [r7, #31]
 8006a44:	e047      	b.n	8006ad6 <UART_SetConfig+0x346>
 8006a46:	2304      	movs	r3, #4
 8006a48:	77fb      	strb	r3, [r7, #31]
 8006a4a:	e044      	b.n	8006ad6 <UART_SetConfig+0x346>
 8006a4c:	2308      	movs	r3, #8
 8006a4e:	77fb      	strb	r3, [r7, #31]
 8006a50:	e041      	b.n	8006ad6 <UART_SetConfig+0x346>
 8006a52:	2310      	movs	r3, #16
 8006a54:	77fb      	strb	r3, [r7, #31]
 8006a56:	e03e      	b.n	8006ad6 <UART_SetConfig+0x346>
 8006a58:	efff69f3 	.word	0xefff69f3
 8006a5c:	40011000 	.word	0x40011000
 8006a60:	40023800 	.word	0x40023800
 8006a64:	40004400 	.word	0x40004400
 8006a68:	40004800 	.word	0x40004800
 8006a6c:	40004c00 	.word	0x40004c00
 8006a70:	40005000 	.word	0x40005000
 8006a74:	40011400 	.word	0x40011400
 8006a78:	40007800 	.word	0x40007800
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a71      	ldr	r2, [pc, #452]	; (8006c48 <UART_SetConfig+0x4b8>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d125      	bne.n	8006ad2 <UART_SetConfig+0x342>
 8006a86:	4b71      	ldr	r3, [pc, #452]	; (8006c4c <UART_SetConfig+0x4bc>)
 8006a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a8c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006a90:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006a94:	d017      	beq.n	8006ac6 <UART_SetConfig+0x336>
 8006a96:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006a9a:	d817      	bhi.n	8006acc <UART_SetConfig+0x33c>
 8006a9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006aa0:	d00b      	beq.n	8006aba <UART_SetConfig+0x32a>
 8006aa2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006aa6:	d811      	bhi.n	8006acc <UART_SetConfig+0x33c>
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d003      	beq.n	8006ab4 <UART_SetConfig+0x324>
 8006aac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ab0:	d006      	beq.n	8006ac0 <UART_SetConfig+0x330>
 8006ab2:	e00b      	b.n	8006acc <UART_SetConfig+0x33c>
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	77fb      	strb	r3, [r7, #31]
 8006ab8:	e00d      	b.n	8006ad6 <UART_SetConfig+0x346>
 8006aba:	2302      	movs	r3, #2
 8006abc:	77fb      	strb	r3, [r7, #31]
 8006abe:	e00a      	b.n	8006ad6 <UART_SetConfig+0x346>
 8006ac0:	2304      	movs	r3, #4
 8006ac2:	77fb      	strb	r3, [r7, #31]
 8006ac4:	e007      	b.n	8006ad6 <UART_SetConfig+0x346>
 8006ac6:	2308      	movs	r3, #8
 8006ac8:	77fb      	strb	r3, [r7, #31]
 8006aca:	e004      	b.n	8006ad6 <UART_SetConfig+0x346>
 8006acc:	2310      	movs	r3, #16
 8006ace:	77fb      	strb	r3, [r7, #31]
 8006ad0:	e001      	b.n	8006ad6 <UART_SetConfig+0x346>
 8006ad2:	2310      	movs	r3, #16
 8006ad4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	69db      	ldr	r3, [r3, #28]
 8006ada:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ade:	d15a      	bne.n	8006b96 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8006ae0:	7ffb      	ldrb	r3, [r7, #31]
 8006ae2:	2b08      	cmp	r3, #8
 8006ae4:	d827      	bhi.n	8006b36 <UART_SetConfig+0x3a6>
 8006ae6:	a201      	add	r2, pc, #4	; (adr r2, 8006aec <UART_SetConfig+0x35c>)
 8006ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aec:	08006b11 	.word	0x08006b11
 8006af0:	08006b19 	.word	0x08006b19
 8006af4:	08006b21 	.word	0x08006b21
 8006af8:	08006b37 	.word	0x08006b37
 8006afc:	08006b27 	.word	0x08006b27
 8006b00:	08006b37 	.word	0x08006b37
 8006b04:	08006b37 	.word	0x08006b37
 8006b08:	08006b37 	.word	0x08006b37
 8006b0c:	08006b2f 	.word	0x08006b2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b10:	f7fd fa9e 	bl	8004050 <HAL_RCC_GetPCLK1Freq>
 8006b14:	61b8      	str	r0, [r7, #24]
        break;
 8006b16:	e013      	b.n	8006b40 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b18:	f7fd faae 	bl	8004078 <HAL_RCC_GetPCLK2Freq>
 8006b1c:	61b8      	str	r0, [r7, #24]
        break;
 8006b1e:	e00f      	b.n	8006b40 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b20:	4b4b      	ldr	r3, [pc, #300]	; (8006c50 <UART_SetConfig+0x4c0>)
 8006b22:	61bb      	str	r3, [r7, #24]
        break;
 8006b24:	e00c      	b.n	8006b40 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b26:	f7fd f9a5 	bl	8003e74 <HAL_RCC_GetSysClockFreq>
 8006b2a:	61b8      	str	r0, [r7, #24]
        break;
 8006b2c:	e008      	b.n	8006b40 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b32:	61bb      	str	r3, [r7, #24]
        break;
 8006b34:	e004      	b.n	8006b40 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8006b36:	2300      	movs	r3, #0
 8006b38:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	77bb      	strb	r3, [r7, #30]
        break;
 8006b3e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006b40:	69bb      	ldr	r3, [r7, #24]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d074      	beq.n	8006c30 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006b46:	69bb      	ldr	r3, [r7, #24]
 8006b48:	005a      	lsls	r2, r3, #1
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	085b      	lsrs	r3, r3, #1
 8006b50:	441a      	add	r2, r3
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b5a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	2b0f      	cmp	r3, #15
 8006b60:	d916      	bls.n	8006b90 <UART_SetConfig+0x400>
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b68:	d212      	bcs.n	8006b90 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	f023 030f 	bic.w	r3, r3, #15
 8006b72:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	085b      	lsrs	r3, r3, #1
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	f003 0307 	and.w	r3, r3, #7
 8006b7e:	b29a      	uxth	r2, r3
 8006b80:	89fb      	ldrh	r3, [r7, #14]
 8006b82:	4313      	orrs	r3, r2
 8006b84:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	89fa      	ldrh	r2, [r7, #14]
 8006b8c:	60da      	str	r2, [r3, #12]
 8006b8e:	e04f      	b.n	8006c30 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006b90:	2301      	movs	r3, #1
 8006b92:	77bb      	strb	r3, [r7, #30]
 8006b94:	e04c      	b.n	8006c30 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006b96:	7ffb      	ldrb	r3, [r7, #31]
 8006b98:	2b08      	cmp	r3, #8
 8006b9a:	d828      	bhi.n	8006bee <UART_SetConfig+0x45e>
 8006b9c:	a201      	add	r2, pc, #4	; (adr r2, 8006ba4 <UART_SetConfig+0x414>)
 8006b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ba2:	bf00      	nop
 8006ba4:	08006bc9 	.word	0x08006bc9
 8006ba8:	08006bd1 	.word	0x08006bd1
 8006bac:	08006bd9 	.word	0x08006bd9
 8006bb0:	08006bef 	.word	0x08006bef
 8006bb4:	08006bdf 	.word	0x08006bdf
 8006bb8:	08006bef 	.word	0x08006bef
 8006bbc:	08006bef 	.word	0x08006bef
 8006bc0:	08006bef 	.word	0x08006bef
 8006bc4:	08006be7 	.word	0x08006be7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bc8:	f7fd fa42 	bl	8004050 <HAL_RCC_GetPCLK1Freq>
 8006bcc:	61b8      	str	r0, [r7, #24]
        break;
 8006bce:	e013      	b.n	8006bf8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006bd0:	f7fd fa52 	bl	8004078 <HAL_RCC_GetPCLK2Freq>
 8006bd4:	61b8      	str	r0, [r7, #24]
        break;
 8006bd6:	e00f      	b.n	8006bf8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006bd8:	4b1d      	ldr	r3, [pc, #116]	; (8006c50 <UART_SetConfig+0x4c0>)
 8006bda:	61bb      	str	r3, [r7, #24]
        break;
 8006bdc:	e00c      	b.n	8006bf8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bde:	f7fd f949 	bl	8003e74 <HAL_RCC_GetSysClockFreq>
 8006be2:	61b8      	str	r0, [r7, #24]
        break;
 8006be4:	e008      	b.n	8006bf8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006be6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006bea:	61bb      	str	r3, [r7, #24]
        break;
 8006bec:	e004      	b.n	8006bf8 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	77bb      	strb	r3, [r7, #30]
        break;
 8006bf6:	bf00      	nop
    }

    if (pclk != 0U)
 8006bf8:	69bb      	ldr	r3, [r7, #24]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d018      	beq.n	8006c30 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	085a      	lsrs	r2, r3, #1
 8006c04:	69bb      	ldr	r3, [r7, #24]
 8006c06:	441a      	add	r2, r3
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c10:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	2b0f      	cmp	r3, #15
 8006c16:	d909      	bls.n	8006c2c <UART_SetConfig+0x49c>
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c1e:	d205      	bcs.n	8006c2c <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	b29a      	uxth	r2, r3
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	60da      	str	r2, [r3, #12]
 8006c2a:	e001      	b.n	8006c30 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006c3c:	7fbb      	ldrb	r3, [r7, #30]
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3720      	adds	r7, #32
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}
 8006c46:	bf00      	nop
 8006c48:	40007c00 	.word	0x40007c00
 8006c4c:	40023800 	.word	0x40023800
 8006c50:	00f42400 	.word	0x00f42400

08006c54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b083      	sub	sp, #12
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c60:	f003 0301 	and.w	r3, r3, #1
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d00a      	beq.n	8006c7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	430a      	orrs	r2, r1
 8006c7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c82:	f003 0302 	and.w	r3, r3, #2
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d00a      	beq.n	8006ca0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	430a      	orrs	r2, r1
 8006c9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca4:	f003 0304 	and.w	r3, r3, #4
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d00a      	beq.n	8006cc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	430a      	orrs	r2, r1
 8006cc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc6:	f003 0308 	and.w	r3, r3, #8
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d00a      	beq.n	8006ce4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	430a      	orrs	r2, r1
 8006ce2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce8:	f003 0310 	and.w	r3, r3, #16
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d00a      	beq.n	8006d06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	689b      	ldr	r3, [r3, #8]
 8006cf6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	430a      	orrs	r2, r1
 8006d04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d0a:	f003 0320 	and.w	r3, r3, #32
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d00a      	beq.n	8006d28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	430a      	orrs	r2, r1
 8006d26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d01a      	beq.n	8006d6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	430a      	orrs	r2, r1
 8006d48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d52:	d10a      	bne.n	8006d6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	430a      	orrs	r2, r1
 8006d68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d00a      	beq.n	8006d8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	430a      	orrs	r2, r1
 8006d8a:	605a      	str	r2, [r3, #4]
  }
}
 8006d8c:	bf00      	nop
 8006d8e:	370c      	adds	r7, #12
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr

08006d98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b086      	sub	sp, #24
 8006d9c:	af02      	add	r7, sp, #8
 8006d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2200      	movs	r2, #0
 8006da4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006da8:	f7fb fbd0 	bl	800254c <HAL_GetTick>
 8006dac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f003 0308 	and.w	r3, r3, #8
 8006db8:	2b08      	cmp	r3, #8
 8006dba:	d10e      	bne.n	8006dda <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006dbc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006dc0:	9300      	str	r3, [sp, #0]
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f000 f817 	bl	8006dfe <UART_WaitOnFlagUntilTimeout>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d001      	beq.n	8006dda <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006dd6:	2303      	movs	r3, #3
 8006dd8:	e00d      	b.n	8006df6 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2220      	movs	r2, #32
 8006dde:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2220      	movs	r2, #32
 8006de4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2200      	movs	r2, #0
 8006dea:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006df4:	2300      	movs	r3, #0
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3710      	adds	r7, #16
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}

08006dfe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006dfe:	b580      	push	{r7, lr}
 8006e00:	b09c      	sub	sp, #112	; 0x70
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	60f8      	str	r0, [r7, #12]
 8006e06:	60b9      	str	r1, [r7, #8]
 8006e08:	603b      	str	r3, [r7, #0]
 8006e0a:	4613      	mov	r3, r2
 8006e0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e0e:	e0a5      	b.n	8006f5c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e16:	f000 80a1 	beq.w	8006f5c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e1a:	f7fb fb97 	bl	800254c <HAL_GetTick>
 8006e1e:	4602      	mov	r2, r0
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	1ad3      	subs	r3, r2, r3
 8006e24:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d302      	bcc.n	8006e30 <UART_WaitOnFlagUntilTimeout+0x32>
 8006e2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d13e      	bne.n	8006eae <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e38:	e853 3f00 	ldrex	r3, [r3]
 8006e3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006e3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e40:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006e44:	667b      	str	r3, [r7, #100]	; 0x64
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e50:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e52:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006e54:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006e56:	e841 2300 	strex	r3, r2, [r1]
 8006e5a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006e5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d1e6      	bne.n	8006e30 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	3308      	adds	r3, #8
 8006e68:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e6c:	e853 3f00 	ldrex	r3, [r3]
 8006e70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e74:	f023 0301 	bic.w	r3, r3, #1
 8006e78:	663b      	str	r3, [r7, #96]	; 0x60
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	3308      	adds	r3, #8
 8006e80:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006e82:	64ba      	str	r2, [r7, #72]	; 0x48
 8006e84:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e86:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006e88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e8a:	e841 2300 	strex	r3, r2, [r1]
 8006e8e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006e90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d1e5      	bne.n	8006e62 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2220      	movs	r2, #32
 8006e9a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2220      	movs	r2, #32
 8006ea0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006eaa:	2303      	movs	r3, #3
 8006eac:	e067      	b.n	8006f7e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f003 0304 	and.w	r3, r3, #4
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d04f      	beq.n	8006f5c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	69db      	ldr	r3, [r3, #28]
 8006ec2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ec6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006eca:	d147      	bne.n	8006f5c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ed4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ede:	e853 3f00 	ldrex	r3, [r3]
 8006ee2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006eea:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ef4:	637b      	str	r3, [r7, #52]	; 0x34
 8006ef6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006efa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006efc:	e841 2300 	strex	r3, r2, [r1]
 8006f00:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d1e6      	bne.n	8006ed6 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	3308      	adds	r3, #8
 8006f0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	e853 3f00 	ldrex	r3, [r3]
 8006f16:	613b      	str	r3, [r7, #16]
   return(result);
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	f023 0301 	bic.w	r3, r3, #1
 8006f1e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	3308      	adds	r3, #8
 8006f26:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006f28:	623a      	str	r2, [r7, #32]
 8006f2a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f2c:	69f9      	ldr	r1, [r7, #28]
 8006f2e:	6a3a      	ldr	r2, [r7, #32]
 8006f30:	e841 2300 	strex	r3, r2, [r1]
 8006f34:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f36:	69bb      	ldr	r3, [r7, #24]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d1e5      	bne.n	8006f08 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2220      	movs	r2, #32
 8006f40:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2220      	movs	r2, #32
 8006f46:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2220      	movs	r2, #32
 8006f4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2200      	movs	r2, #0
 8006f54:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006f58:	2303      	movs	r3, #3
 8006f5a:	e010      	b.n	8006f7e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	69da      	ldr	r2, [r3, #28]
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	4013      	ands	r3, r2
 8006f66:	68ba      	ldr	r2, [r7, #8]
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	bf0c      	ite	eq
 8006f6c:	2301      	moveq	r3, #1
 8006f6e:	2300      	movne	r3, #0
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	461a      	mov	r2, r3
 8006f74:	79fb      	ldrb	r3, [r7, #7]
 8006f76:	429a      	cmp	r2, r3
 8006f78:	f43f af4a 	beq.w	8006e10 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f7c:	2300      	movs	r3, #0
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3770      	adds	r7, #112	; 0x70
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
	...

08006f88 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b097      	sub	sp, #92	; 0x5c
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	60f8      	str	r0, [r7, #12]
 8006f90:	60b9      	str	r1, [r7, #8]
 8006f92:	4613      	mov	r3, r2
 8006f94:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	68ba      	ldr	r2, [r7, #8]
 8006f9a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	88fa      	ldrh	r2, [r7, #6]
 8006fa0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	88fa      	ldrh	r2, [r7, #6]
 8006fa8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	689b      	ldr	r3, [r3, #8]
 8006fb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fba:	d10e      	bne.n	8006fda <UART_Start_Receive_IT+0x52>
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	691b      	ldr	r3, [r3, #16]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d105      	bne.n	8006fd0 <UART_Start_Receive_IT+0x48>
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006fca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006fce:	e02d      	b.n	800702c <UART_Start_Receive_IT+0xa4>
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	22ff      	movs	r2, #255	; 0xff
 8006fd4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006fd8:	e028      	b.n	800702c <UART_Start_Receive_IT+0xa4>
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d10d      	bne.n	8006ffe <UART_Start_Receive_IT+0x76>
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	691b      	ldr	r3, [r3, #16]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d104      	bne.n	8006ff4 <UART_Start_Receive_IT+0x6c>
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	22ff      	movs	r2, #255	; 0xff
 8006fee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ff2:	e01b      	b.n	800702c <UART_Start_Receive_IT+0xa4>
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	227f      	movs	r2, #127	; 0x7f
 8006ff8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ffc:	e016      	b.n	800702c <UART_Start_Receive_IT+0xa4>
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007006:	d10d      	bne.n	8007024 <UART_Start_Receive_IT+0x9c>
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	691b      	ldr	r3, [r3, #16]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d104      	bne.n	800701a <UART_Start_Receive_IT+0x92>
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	227f      	movs	r2, #127	; 0x7f
 8007014:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007018:	e008      	b.n	800702c <UART_Start_Receive_IT+0xa4>
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	223f      	movs	r2, #63	; 0x3f
 800701e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007022:	e003      	b.n	800702c <UART_Start_Receive_IT+0xa4>
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2200      	movs	r2, #0
 8007028:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2200      	movs	r2, #0
 8007030:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2222      	movs	r2, #34	; 0x22
 8007038:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	3308      	adds	r3, #8
 8007040:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007042:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007044:	e853 3f00 	ldrex	r3, [r3]
 8007048:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800704a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800704c:	f043 0301 	orr.w	r3, r3, #1
 8007050:	657b      	str	r3, [r7, #84]	; 0x54
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	3308      	adds	r3, #8
 8007058:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800705a:	64ba      	str	r2, [r7, #72]	; 0x48
 800705c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800705e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007060:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007062:	e841 2300 	strex	r3, r2, [r1]
 8007066:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007068:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800706a:	2b00      	cmp	r3, #0
 800706c:	d1e5      	bne.n	800703a <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	689b      	ldr	r3, [r3, #8]
 8007072:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007076:	d107      	bne.n	8007088 <UART_Start_Receive_IT+0x100>
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	691b      	ldr	r3, [r3, #16]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d103      	bne.n	8007088 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	4a24      	ldr	r2, [pc, #144]	; (8007114 <UART_Start_Receive_IT+0x18c>)
 8007084:	665a      	str	r2, [r3, #100]	; 0x64
 8007086:	e002      	b.n	800708e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	4a23      	ldr	r2, [pc, #140]	; (8007118 <UART_Start_Receive_IT+0x190>)
 800708c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2200      	movs	r2, #0
 8007092:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	691b      	ldr	r3, [r3, #16]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d019      	beq.n	80070d2 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a6:	e853 3f00 	ldrex	r3, [r3]
 80070aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ae:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80070b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	461a      	mov	r2, r3
 80070ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070bc:	637b      	str	r3, [r7, #52]	; 0x34
 80070be:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80070c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070c4:	e841 2300 	strex	r3, r2, [r1]
 80070c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80070ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d1e6      	bne.n	800709e <UART_Start_Receive_IT+0x116>
 80070d0:	e018      	b.n	8007104 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	e853 3f00 	ldrex	r3, [r3]
 80070de:	613b      	str	r3, [r7, #16]
   return(result);
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	f043 0320 	orr.w	r3, r3, #32
 80070e6:	653b      	str	r3, [r7, #80]	; 0x50
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	461a      	mov	r2, r3
 80070ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070f0:	623b      	str	r3, [r7, #32]
 80070f2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f4:	69f9      	ldr	r1, [r7, #28]
 80070f6:	6a3a      	ldr	r2, [r7, #32]
 80070f8:	e841 2300 	strex	r3, r2, [r1]
 80070fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80070fe:	69bb      	ldr	r3, [r7, #24]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d1e6      	bne.n	80070d2 <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 8007104:	2300      	movs	r3, #0
}
 8007106:	4618      	mov	r0, r3
 8007108:	375c      	adds	r7, #92	; 0x5c
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr
 8007112:	bf00      	nop
 8007114:	080073bf 	.word	0x080073bf
 8007118:	08007263 	.word	0x08007263

0800711c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800711c:	b480      	push	{r7}
 800711e:	b095      	sub	sp, #84	; 0x54
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800712a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800712c:	e853 3f00 	ldrex	r3, [r3]
 8007130:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007134:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007138:	64fb      	str	r3, [r7, #76]	; 0x4c
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	461a      	mov	r2, r3
 8007140:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007142:	643b      	str	r3, [r7, #64]	; 0x40
 8007144:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007146:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007148:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800714a:	e841 2300 	strex	r3, r2, [r1]
 800714e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007152:	2b00      	cmp	r3, #0
 8007154:	d1e6      	bne.n	8007124 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	3308      	adds	r3, #8
 800715c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800715e:	6a3b      	ldr	r3, [r7, #32]
 8007160:	e853 3f00 	ldrex	r3, [r3]
 8007164:	61fb      	str	r3, [r7, #28]
   return(result);
 8007166:	69fb      	ldr	r3, [r7, #28]
 8007168:	f023 0301 	bic.w	r3, r3, #1
 800716c:	64bb      	str	r3, [r7, #72]	; 0x48
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	3308      	adds	r3, #8
 8007174:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007176:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007178:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800717a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800717c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800717e:	e841 2300 	strex	r3, r2, [r1]
 8007182:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007186:	2b00      	cmp	r3, #0
 8007188:	d1e5      	bne.n	8007156 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800718e:	2b01      	cmp	r3, #1
 8007190:	d118      	bne.n	80071c4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	e853 3f00 	ldrex	r3, [r3]
 800719e:	60bb      	str	r3, [r7, #8]
   return(result);
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	f023 0310 	bic.w	r3, r3, #16
 80071a6:	647b      	str	r3, [r7, #68]	; 0x44
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	461a      	mov	r2, r3
 80071ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071b0:	61bb      	str	r3, [r7, #24]
 80071b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071b4:	6979      	ldr	r1, [r7, #20]
 80071b6:	69ba      	ldr	r2, [r7, #24]
 80071b8:	e841 2300 	strex	r3, r2, [r1]
 80071bc:	613b      	str	r3, [r7, #16]
   return(result);
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d1e6      	bne.n	8007192 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2220      	movs	r2, #32
 80071c8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2200      	movs	r2, #0
 80071ce:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2200      	movs	r2, #0
 80071d4:	665a      	str	r2, [r3, #100]	; 0x64
}
 80071d6:	bf00      	nop
 80071d8:	3754      	adds	r7, #84	; 0x54
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr

080071e2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80071e2:	b580      	push	{r7, lr}
 80071e4:	b084      	sub	sp, #16
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2200      	movs	r2, #0
 80071f4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2200      	movs	r2, #0
 80071fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007200:	68f8      	ldr	r0, [r7, #12]
 8007202:	f7ff faaf 	bl	8006764 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007206:	bf00      	nop
 8007208:	3710      	adds	r7, #16
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}

0800720e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800720e:	b580      	push	{r7, lr}
 8007210:	b088      	sub	sp, #32
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	e853 3f00 	ldrex	r3, [r3]
 8007222:	60bb      	str	r3, [r7, #8]
   return(result);
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800722a:	61fb      	str	r3, [r7, #28]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	461a      	mov	r2, r3
 8007232:	69fb      	ldr	r3, [r7, #28]
 8007234:	61bb      	str	r3, [r7, #24]
 8007236:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007238:	6979      	ldr	r1, [r7, #20]
 800723a:	69ba      	ldr	r2, [r7, #24]
 800723c:	e841 2300 	strex	r3, r2, [r1]
 8007240:	613b      	str	r3, [r7, #16]
   return(result);
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d1e6      	bne.n	8007216 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2220      	movs	r2, #32
 800724c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2200      	movs	r2, #0
 8007252:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f7ff fa7b 	bl	8006750 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800725a:	bf00      	nop
 800725c:	3720      	adds	r7, #32
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}

08007262 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007262:	b580      	push	{r7, lr}
 8007264:	b096      	sub	sp, #88	; 0x58
 8007266:	af00      	add	r7, sp, #0
 8007268:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007270:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007278:	2b22      	cmp	r3, #34	; 0x22
 800727a:	f040 8094 	bne.w	80073a6 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007284:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007288:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800728c:	b2d9      	uxtb	r1, r3
 800728e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007292:	b2da      	uxtb	r2, r3
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007298:	400a      	ands	r2, r1
 800729a:	b2d2      	uxtb	r2, r2
 800729c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072a2:	1c5a      	adds	r2, r3, #1
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	3b01      	subs	r3, #1
 80072b2:	b29a      	uxth	r2, r3
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80072c0:	b29b      	uxth	r3, r3
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d177      	bne.n	80073b6 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ce:	e853 3f00 	ldrex	r3, [r3]
 80072d2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80072d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80072da:	653b      	str	r3, [r7, #80]	; 0x50
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	461a      	mov	r2, r3
 80072e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072e4:	647b      	str	r3, [r7, #68]	; 0x44
 80072e6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80072ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80072ec:	e841 2300 	strex	r3, r2, [r1]
 80072f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80072f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d1e6      	bne.n	80072c6 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	3308      	adds	r3, #8
 80072fe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007302:	e853 3f00 	ldrex	r3, [r3]
 8007306:	623b      	str	r3, [r7, #32]
   return(result);
 8007308:	6a3b      	ldr	r3, [r7, #32]
 800730a:	f023 0301 	bic.w	r3, r3, #1
 800730e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	3308      	adds	r3, #8
 8007316:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007318:	633a      	str	r2, [r7, #48]	; 0x30
 800731a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800731c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800731e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007320:	e841 2300 	strex	r3, r2, [r1]
 8007324:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007328:	2b00      	cmp	r3, #0
 800732a:	d1e5      	bne.n	80072f8 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2220      	movs	r2, #32
 8007330:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2200      	movs	r2, #0
 8007336:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800733c:	2b01      	cmp	r3, #1
 800733e:	d12e      	bne.n	800739e <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2200      	movs	r2, #0
 8007344:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	e853 3f00 	ldrex	r3, [r3]
 8007352:	60fb      	str	r3, [r7, #12]
   return(result);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f023 0310 	bic.w	r3, r3, #16
 800735a:	64bb      	str	r3, [r7, #72]	; 0x48
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	461a      	mov	r2, r3
 8007362:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007364:	61fb      	str	r3, [r7, #28]
 8007366:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007368:	69b9      	ldr	r1, [r7, #24]
 800736a:	69fa      	ldr	r2, [r7, #28]
 800736c:	e841 2300 	strex	r3, r2, [r1]
 8007370:	617b      	str	r3, [r7, #20]
   return(result);
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d1e6      	bne.n	8007346 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	69db      	ldr	r3, [r3, #28]
 800737e:	f003 0310 	and.w	r3, r3, #16
 8007382:	2b10      	cmp	r3, #16
 8007384:	d103      	bne.n	800738e <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	2210      	movs	r2, #16
 800738c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007394:	4619      	mov	r1, r3
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f7ff f9ee 	bl	8006778 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800739c:	e00b      	b.n	80073b6 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f7fa ff58 	bl	8002254 <HAL_UART_RxCpltCallback>
}
 80073a4:	e007      	b.n	80073b6 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	699a      	ldr	r2, [r3, #24]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f042 0208 	orr.w	r2, r2, #8
 80073b4:	619a      	str	r2, [r3, #24]
}
 80073b6:	bf00      	nop
 80073b8:	3758      	adds	r7, #88	; 0x58
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}

080073be <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80073be:	b580      	push	{r7, lr}
 80073c0:	b096      	sub	sp, #88	; 0x58
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80073cc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073d4:	2b22      	cmp	r3, #34	; 0x22
 80073d6:	f040 8094 	bne.w	8007502 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073e8:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80073ea:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80073ee:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80073f2:	4013      	ands	r3, r2
 80073f4:	b29a      	uxth	r2, r3
 80073f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073f8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073fe:	1c9a      	adds	r2, r3, #2
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800740a:	b29b      	uxth	r3, r3
 800740c:	3b01      	subs	r3, #1
 800740e:	b29a      	uxth	r2, r3
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800741c:	b29b      	uxth	r3, r3
 800741e:	2b00      	cmp	r3, #0
 8007420:	d177      	bne.n	8007512 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800742a:	e853 3f00 	ldrex	r3, [r3]
 800742e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007432:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007436:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	461a      	mov	r2, r3
 800743e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007440:	643b      	str	r3, [r7, #64]	; 0x40
 8007442:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007444:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007446:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007448:	e841 2300 	strex	r3, r2, [r1]
 800744c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800744e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007450:	2b00      	cmp	r3, #0
 8007452:	d1e6      	bne.n	8007422 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	3308      	adds	r3, #8
 800745a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800745c:	6a3b      	ldr	r3, [r7, #32]
 800745e:	e853 3f00 	ldrex	r3, [r3]
 8007462:	61fb      	str	r3, [r7, #28]
   return(result);
 8007464:	69fb      	ldr	r3, [r7, #28]
 8007466:	f023 0301 	bic.w	r3, r3, #1
 800746a:	64bb      	str	r3, [r7, #72]	; 0x48
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	3308      	adds	r3, #8
 8007472:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007474:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007476:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007478:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800747a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800747c:	e841 2300 	strex	r3, r2, [r1]
 8007480:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007484:	2b00      	cmp	r3, #0
 8007486:	d1e5      	bne.n	8007454 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2220      	movs	r2, #32
 800748c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2200      	movs	r2, #0
 8007492:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007498:	2b01      	cmp	r3, #1
 800749a:	d12e      	bne.n	80074fa <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2200      	movs	r2, #0
 80074a0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	e853 3f00 	ldrex	r3, [r3]
 80074ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	f023 0310 	bic.w	r3, r3, #16
 80074b6:	647b      	str	r3, [r7, #68]	; 0x44
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	461a      	mov	r2, r3
 80074be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074c0:	61bb      	str	r3, [r7, #24]
 80074c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c4:	6979      	ldr	r1, [r7, #20]
 80074c6:	69ba      	ldr	r2, [r7, #24]
 80074c8:	e841 2300 	strex	r3, r2, [r1]
 80074cc:	613b      	str	r3, [r7, #16]
   return(result);
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d1e6      	bne.n	80074a2 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	69db      	ldr	r3, [r3, #28]
 80074da:	f003 0310 	and.w	r3, r3, #16
 80074de:	2b10      	cmp	r3, #16
 80074e0:	d103      	bne.n	80074ea <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	2210      	movs	r2, #16
 80074e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80074f0:	4619      	mov	r1, r3
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f7ff f940 	bl	8006778 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80074f8:	e00b      	b.n	8007512 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f7fa feaa 	bl	8002254 <HAL_UART_RxCpltCallback>
}
 8007500:	e007      	b.n	8007512 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	699a      	ldr	r2, [r3, #24]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f042 0208 	orr.w	r2, r2, #8
 8007510:	619a      	str	r2, [r3, #24]
}
 8007512:	bf00      	nop
 8007514:	3758      	adds	r7, #88	; 0x58
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}
	...

0800751c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800751c:	b084      	sub	sp, #16
 800751e:	b580      	push	{r7, lr}
 8007520:	b084      	sub	sp, #16
 8007522:	af00      	add	r7, sp, #0
 8007524:	6078      	str	r0, [r7, #4]
 8007526:	f107 001c 	add.w	r0, r7, #28
 800752a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800752e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007530:	2b01      	cmp	r3, #1
 8007532:	d120      	bne.n	8007576 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007538:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	68da      	ldr	r2, [r3, #12]
 8007544:	4b20      	ldr	r3, [pc, #128]	; (80075c8 <USB_CoreInit+0xac>)
 8007546:	4013      	ands	r3, r2
 8007548:	687a      	ldr	r2, [r7, #4]
 800754a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	68db      	ldr	r3, [r3, #12]
 8007550:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007558:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800755a:	2b01      	cmp	r3, #1
 800755c:	d105      	bne.n	800756a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	68db      	ldr	r3, [r3, #12]
 8007562:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f000 fa92 	bl	8007a94 <USB_CoreReset>
 8007570:	4603      	mov	r3, r0
 8007572:	73fb      	strb	r3, [r7, #15]
 8007574:	e010      	b.n	8007598 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	68db      	ldr	r3, [r3, #12]
 800757a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 fa86 	bl	8007a94 <USB_CoreReset>
 8007588:	4603      	mov	r3, r0
 800758a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007590:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8007598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800759a:	2b01      	cmp	r3, #1
 800759c:	d10b      	bne.n	80075b6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	689b      	ldr	r3, [r3, #8]
 80075a2:	f043 0206 	orr.w	r2, r3, #6
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	689b      	ldr	r3, [r3, #8]
 80075ae:	f043 0220 	orr.w	r2, r3, #32
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80075b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3710      	adds	r7, #16
 80075bc:	46bd      	mov	sp, r7
 80075be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80075c2:	b004      	add	sp, #16
 80075c4:	4770      	bx	lr
 80075c6:	bf00      	nop
 80075c8:	ffbdffbf 	.word	0xffbdffbf

080075cc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b083      	sub	sp, #12
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	689b      	ldr	r3, [r3, #8]
 80075d8:	f023 0201 	bic.w	r2, r3, #1
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80075e0:	2300      	movs	r3, #0
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	370c      	adds	r7, #12
 80075e6:	46bd      	mov	sp, r7
 80075e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ec:	4770      	bx	lr

080075ee <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80075ee:	b580      	push	{r7, lr}
 80075f0:	b084      	sub	sp, #16
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	6078      	str	r0, [r7, #4]
 80075f6:	460b      	mov	r3, r1
 80075f8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80075fa:	2300      	movs	r3, #0
 80075fc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	68db      	ldr	r3, [r3, #12]
 8007602:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800760a:	78fb      	ldrb	r3, [r7, #3]
 800760c:	2b01      	cmp	r3, #1
 800760e:	d115      	bne.n	800763c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	68db      	ldr	r3, [r3, #12]
 8007614:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800761c:	2001      	movs	r0, #1
 800761e:	f7fa ffa1 	bl	8002564 <HAL_Delay>
      ms++;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	3301      	adds	r3, #1
 8007626:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f000 fa25 	bl	8007a78 <USB_GetMode>
 800762e:	4603      	mov	r3, r0
 8007630:	2b01      	cmp	r3, #1
 8007632:	d01e      	beq.n	8007672 <USB_SetCurrentMode+0x84>
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2b31      	cmp	r3, #49	; 0x31
 8007638:	d9f0      	bls.n	800761c <USB_SetCurrentMode+0x2e>
 800763a:	e01a      	b.n	8007672 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800763c:	78fb      	ldrb	r3, [r7, #3]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d115      	bne.n	800766e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	68db      	ldr	r3, [r3, #12]
 8007646:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800764e:	2001      	movs	r0, #1
 8007650:	f7fa ff88 	bl	8002564 <HAL_Delay>
      ms++;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	3301      	adds	r3, #1
 8007658:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f000 fa0c 	bl	8007a78 <USB_GetMode>
 8007660:	4603      	mov	r3, r0
 8007662:	2b00      	cmp	r3, #0
 8007664:	d005      	beq.n	8007672 <USB_SetCurrentMode+0x84>
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2b31      	cmp	r3, #49	; 0x31
 800766a:	d9f0      	bls.n	800764e <USB_SetCurrentMode+0x60>
 800766c:	e001      	b.n	8007672 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800766e:	2301      	movs	r3, #1
 8007670:	e005      	b.n	800767e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2b32      	cmp	r3, #50	; 0x32
 8007676:	d101      	bne.n	800767c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007678:	2301      	movs	r3, #1
 800767a:	e000      	b.n	800767e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800767c:	2300      	movs	r3, #0
}
 800767e:	4618      	mov	r0, r3
 8007680:	3710      	adds	r7, #16
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}
	...

08007688 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007688:	b084      	sub	sp, #16
 800768a:	b580      	push	{r7, lr}
 800768c:	b086      	sub	sp, #24
 800768e:	af00      	add	r7, sp, #0
 8007690:	6078      	str	r0, [r7, #4]
 8007692:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007696:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800769a:	2300      	movs	r3, #0
 800769c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80076a2:	2300      	movs	r3, #0
 80076a4:	613b      	str	r3, [r7, #16]
 80076a6:	e009      	b.n	80076bc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	3340      	adds	r3, #64	; 0x40
 80076ae:	009b      	lsls	r3, r3, #2
 80076b0:	4413      	add	r3, r2
 80076b2:	2200      	movs	r2, #0
 80076b4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	3301      	adds	r3, #1
 80076ba:	613b      	str	r3, [r7, #16]
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	2b0e      	cmp	r3, #14
 80076c0:	d9f2      	bls.n	80076a8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80076c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d11c      	bne.n	8007702 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	68fa      	ldr	r2, [r7, #12]
 80076d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076d6:	f043 0302 	orr.w	r3, r3, #2
 80076da:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076e0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	601a      	str	r2, [r3, #0]
 8007700:	e005      	b.n	800770e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007706:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007714:	461a      	mov	r2, r3
 8007716:	2300      	movs	r3, #0
 8007718:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007720:	4619      	mov	r1, r3
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007728:	461a      	mov	r2, r3
 800772a:	680b      	ldr	r3, [r1, #0]
 800772c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800772e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007730:	2b01      	cmp	r3, #1
 8007732:	d10c      	bne.n	800774e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007736:	2b00      	cmp	r3, #0
 8007738:	d104      	bne.n	8007744 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800773a:	2100      	movs	r1, #0
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f000 f961 	bl	8007a04 <USB_SetDevSpeed>
 8007742:	e008      	b.n	8007756 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007744:	2101      	movs	r1, #1
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 f95c 	bl	8007a04 <USB_SetDevSpeed>
 800774c:	e003      	b.n	8007756 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800774e:	2103      	movs	r1, #3
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f000 f957 	bl	8007a04 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007756:	2110      	movs	r1, #16
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f000 f8f3 	bl	8007944 <USB_FlushTxFifo>
 800775e:	4603      	mov	r3, r0
 8007760:	2b00      	cmp	r3, #0
 8007762:	d001      	beq.n	8007768 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007764:	2301      	movs	r3, #1
 8007766:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f000 f91d 	bl	80079a8 <USB_FlushRxFifo>
 800776e:	4603      	mov	r3, r0
 8007770:	2b00      	cmp	r3, #0
 8007772:	d001      	beq.n	8007778 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007774:	2301      	movs	r3, #1
 8007776:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800777e:	461a      	mov	r2, r3
 8007780:	2300      	movs	r3, #0
 8007782:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800778a:	461a      	mov	r2, r3
 800778c:	2300      	movs	r3, #0
 800778e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007796:	461a      	mov	r2, r3
 8007798:	2300      	movs	r3, #0
 800779a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800779c:	2300      	movs	r3, #0
 800779e:	613b      	str	r3, [r7, #16]
 80077a0:	e043      	b.n	800782a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	015a      	lsls	r2, r3, #5
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	4413      	add	r3, r2
 80077aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80077b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80077b8:	d118      	bne.n	80077ec <USB_DevInit+0x164>
    {
      if (i == 0U)
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d10a      	bne.n	80077d6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	015a      	lsls	r2, r3, #5
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	4413      	add	r3, r2
 80077c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077cc:	461a      	mov	r2, r3
 80077ce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80077d2:	6013      	str	r3, [r2, #0]
 80077d4:	e013      	b.n	80077fe <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80077d6:	693b      	ldr	r3, [r7, #16]
 80077d8:	015a      	lsls	r2, r3, #5
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	4413      	add	r3, r2
 80077de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077e2:	461a      	mov	r2, r3
 80077e4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80077e8:	6013      	str	r3, [r2, #0]
 80077ea:	e008      	b.n	80077fe <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	015a      	lsls	r2, r3, #5
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	4413      	add	r3, r2
 80077f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077f8:	461a      	mov	r2, r3
 80077fa:	2300      	movs	r3, #0
 80077fc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	015a      	lsls	r2, r3, #5
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	4413      	add	r3, r2
 8007806:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800780a:	461a      	mov	r2, r3
 800780c:	2300      	movs	r3, #0
 800780e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	015a      	lsls	r2, r3, #5
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	4413      	add	r3, r2
 8007818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800781c:	461a      	mov	r2, r3
 800781e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007822:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	3301      	adds	r3, #1
 8007828:	613b      	str	r3, [r7, #16]
 800782a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800782c:	693a      	ldr	r2, [r7, #16]
 800782e:	429a      	cmp	r2, r3
 8007830:	d3b7      	bcc.n	80077a2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007832:	2300      	movs	r3, #0
 8007834:	613b      	str	r3, [r7, #16]
 8007836:	e043      	b.n	80078c0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	015a      	lsls	r2, r3, #5
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	4413      	add	r3, r2
 8007840:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800784a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800784e:	d118      	bne.n	8007882 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d10a      	bne.n	800786c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	015a      	lsls	r2, r3, #5
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	4413      	add	r3, r2
 800785e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007862:	461a      	mov	r2, r3
 8007864:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007868:	6013      	str	r3, [r2, #0]
 800786a:	e013      	b.n	8007894 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	015a      	lsls	r2, r3, #5
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	4413      	add	r3, r2
 8007874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007878:	461a      	mov	r2, r3
 800787a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800787e:	6013      	str	r3, [r2, #0]
 8007880:	e008      	b.n	8007894 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	015a      	lsls	r2, r3, #5
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	4413      	add	r3, r2
 800788a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800788e:	461a      	mov	r2, r3
 8007890:	2300      	movs	r3, #0
 8007892:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	015a      	lsls	r2, r3, #5
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	4413      	add	r3, r2
 800789c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078a0:	461a      	mov	r2, r3
 80078a2:	2300      	movs	r3, #0
 80078a4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80078a6:	693b      	ldr	r3, [r7, #16]
 80078a8:	015a      	lsls	r2, r3, #5
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	4413      	add	r3, r2
 80078ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078b2:	461a      	mov	r2, r3
 80078b4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80078b8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	3301      	adds	r3, #1
 80078be:	613b      	str	r3, [r7, #16]
 80078c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c2:	693a      	ldr	r2, [r7, #16]
 80078c4:	429a      	cmp	r2, r3
 80078c6:	d3b7      	bcc.n	8007838 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078ce:	691b      	ldr	r3, [r3, #16]
 80078d0:	68fa      	ldr	r2, [r7, #12]
 80078d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80078d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078da:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2200      	movs	r2, #0
 80078e0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80078e8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80078ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d105      	bne.n	80078fc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	699b      	ldr	r3, [r3, #24]
 80078f4:	f043 0210 	orr.w	r2, r3, #16
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	699a      	ldr	r2, [r3, #24]
 8007900:	4b0e      	ldr	r3, [pc, #56]	; (800793c <USB_DevInit+0x2b4>)
 8007902:	4313      	orrs	r3, r2
 8007904:	687a      	ldr	r2, [r7, #4]
 8007906:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007908:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800790a:	2b00      	cmp	r3, #0
 800790c:	d005      	beq.n	800791a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	699b      	ldr	r3, [r3, #24]
 8007912:	f043 0208 	orr.w	r2, r3, #8
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800791a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800791c:	2b01      	cmp	r3, #1
 800791e:	d105      	bne.n	800792c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	699a      	ldr	r2, [r3, #24]
 8007924:	4b06      	ldr	r3, [pc, #24]	; (8007940 <USB_DevInit+0x2b8>)
 8007926:	4313      	orrs	r3, r2
 8007928:	687a      	ldr	r2, [r7, #4]
 800792a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800792c:	7dfb      	ldrb	r3, [r7, #23]
}
 800792e:	4618      	mov	r0, r3
 8007930:	3718      	adds	r7, #24
 8007932:	46bd      	mov	sp, r7
 8007934:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007938:	b004      	add	sp, #16
 800793a:	4770      	bx	lr
 800793c:	803c3800 	.word	0x803c3800
 8007940:	40000004 	.word	0x40000004

08007944 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007944:	b480      	push	{r7}
 8007946:	b085      	sub	sp, #20
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
 800794c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800794e:	2300      	movs	r3, #0
 8007950:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	3301      	adds	r3, #1
 8007956:	60fb      	str	r3, [r7, #12]
 8007958:	4a12      	ldr	r2, [pc, #72]	; (80079a4 <USB_FlushTxFifo+0x60>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d901      	bls.n	8007962 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800795e:	2303      	movs	r3, #3
 8007960:	e01a      	b.n	8007998 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	691b      	ldr	r3, [r3, #16]
 8007966:	2b00      	cmp	r3, #0
 8007968:	daf3      	bge.n	8007952 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800796a:	2300      	movs	r3, #0
 800796c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	019b      	lsls	r3, r3, #6
 8007972:	f043 0220 	orr.w	r2, r3, #32
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	3301      	adds	r3, #1
 800797e:	60fb      	str	r3, [r7, #12]
 8007980:	4a08      	ldr	r2, [pc, #32]	; (80079a4 <USB_FlushTxFifo+0x60>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d901      	bls.n	800798a <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8007986:	2303      	movs	r3, #3
 8007988:	e006      	b.n	8007998 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	691b      	ldr	r3, [r3, #16]
 800798e:	f003 0320 	and.w	r3, r3, #32
 8007992:	2b20      	cmp	r3, #32
 8007994:	d0f1      	beq.n	800797a <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8007996:	2300      	movs	r3, #0
}
 8007998:	4618      	mov	r0, r3
 800799a:	3714      	adds	r7, #20
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr
 80079a4:	00030d40 	.word	0x00030d40

080079a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b085      	sub	sp, #20
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80079b0:	2300      	movs	r3, #0
 80079b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	3301      	adds	r3, #1
 80079b8:	60fb      	str	r3, [r7, #12]
 80079ba:	4a11      	ldr	r2, [pc, #68]	; (8007a00 <USB_FlushRxFifo+0x58>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d901      	bls.n	80079c4 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 80079c0:	2303      	movs	r3, #3
 80079c2:	e017      	b.n	80079f4 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	691b      	ldr	r3, [r3, #16]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	daf3      	bge.n	80079b4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80079cc:	2300      	movs	r3, #0
 80079ce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2210      	movs	r2, #16
 80079d4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	3301      	adds	r3, #1
 80079da:	60fb      	str	r3, [r7, #12]
 80079dc:	4a08      	ldr	r2, [pc, #32]	; (8007a00 <USB_FlushRxFifo+0x58>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d901      	bls.n	80079e6 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 80079e2:	2303      	movs	r3, #3
 80079e4:	e006      	b.n	80079f4 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	691b      	ldr	r3, [r3, #16]
 80079ea:	f003 0310 	and.w	r3, r3, #16
 80079ee:	2b10      	cmp	r3, #16
 80079f0:	d0f1      	beq.n	80079d6 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 80079f2:	2300      	movs	r3, #0
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3714      	adds	r7, #20
 80079f8:	46bd      	mov	sp, r7
 80079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fe:	4770      	bx	lr
 8007a00:	00030d40 	.word	0x00030d40

08007a04 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b085      	sub	sp, #20
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	460b      	mov	r3, r1
 8007a0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a1a:	681a      	ldr	r2, [r3, #0]
 8007a1c:	78fb      	ldrb	r3, [r7, #3]
 8007a1e:	68f9      	ldr	r1, [r7, #12]
 8007a20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a24:	4313      	orrs	r3, r2
 8007a26:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007a28:	2300      	movs	r3, #0
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3714      	adds	r7, #20
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a34:	4770      	bx	lr

08007a36 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007a36:	b480      	push	{r7}
 8007a38:	b085      	sub	sp, #20
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	68fa      	ldr	r2, [r7, #12]
 8007a4c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007a50:	f023 0303 	bic.w	r3, r3, #3
 8007a54:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a5c:	685b      	ldr	r3, [r3, #4]
 8007a5e:	68fa      	ldr	r2, [r7, #12]
 8007a60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a64:	f043 0302 	orr.w	r3, r3, #2
 8007a68:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007a6a:	2300      	movs	r3, #0
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3714      	adds	r7, #20
 8007a70:	46bd      	mov	sp, r7
 8007a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a76:	4770      	bx	lr

08007a78 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b083      	sub	sp, #12
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	695b      	ldr	r3, [r3, #20]
 8007a84:	f003 0301 	and.w	r3, r3, #1
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	370c      	adds	r7, #12
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a92:	4770      	bx	lr

08007a94 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b085      	sub	sp, #20
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	3301      	adds	r3, #1
 8007aa4:	60fb      	str	r3, [r7, #12]
 8007aa6:	4a13      	ldr	r2, [pc, #76]	; (8007af4 <USB_CoreReset+0x60>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d901      	bls.n	8007ab0 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8007aac:	2303      	movs	r3, #3
 8007aae:	e01a      	b.n	8007ae6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	691b      	ldr	r3, [r3, #16]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	daf3      	bge.n	8007aa0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	691b      	ldr	r3, [r3, #16]
 8007ac0:	f043 0201 	orr.w	r2, r3, #1
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	3301      	adds	r3, #1
 8007acc:	60fb      	str	r3, [r7, #12]
 8007ace:	4a09      	ldr	r2, [pc, #36]	; (8007af4 <USB_CoreReset+0x60>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d901      	bls.n	8007ad8 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8007ad4:	2303      	movs	r3, #3
 8007ad6:	e006      	b.n	8007ae6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	691b      	ldr	r3, [r3, #16]
 8007adc:	f003 0301 	and.w	r3, r3, #1
 8007ae0:	2b01      	cmp	r3, #1
 8007ae2:	d0f1      	beq.n	8007ac8 <USB_CoreReset+0x34>

  return HAL_OK;
 8007ae4:	2300      	movs	r3, #0
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3714      	adds	r7, #20
 8007aea:	46bd      	mov	sp, r7
 8007aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af0:	4770      	bx	lr
 8007af2:	bf00      	nop
 8007af4:	00030d40 	.word	0x00030d40

08007af8 <calloc>:
 8007af8:	4b02      	ldr	r3, [pc, #8]	; (8007b04 <calloc+0xc>)
 8007afa:	460a      	mov	r2, r1
 8007afc:	4601      	mov	r1, r0
 8007afe:	6818      	ldr	r0, [r3, #0]
 8007b00:	f000 b83c 	b.w	8007b7c <_calloc_r>
 8007b04:	20000010 	.word	0x20000010

08007b08 <__errno>:
 8007b08:	4b01      	ldr	r3, [pc, #4]	; (8007b10 <__errno+0x8>)
 8007b0a:	6818      	ldr	r0, [r3, #0]
 8007b0c:	4770      	bx	lr
 8007b0e:	bf00      	nop
 8007b10:	20000010 	.word	0x20000010

08007b14 <__libc_init_array>:
 8007b14:	b570      	push	{r4, r5, r6, lr}
 8007b16:	4d0d      	ldr	r5, [pc, #52]	; (8007b4c <__libc_init_array+0x38>)
 8007b18:	4c0d      	ldr	r4, [pc, #52]	; (8007b50 <__libc_init_array+0x3c>)
 8007b1a:	1b64      	subs	r4, r4, r5
 8007b1c:	10a4      	asrs	r4, r4, #2
 8007b1e:	2600      	movs	r6, #0
 8007b20:	42a6      	cmp	r6, r4
 8007b22:	d109      	bne.n	8007b38 <__libc_init_array+0x24>
 8007b24:	4d0b      	ldr	r5, [pc, #44]	; (8007b54 <__libc_init_array+0x40>)
 8007b26:	4c0c      	ldr	r4, [pc, #48]	; (8007b58 <__libc_init_array+0x44>)
 8007b28:	f000 fc66 	bl	80083f8 <_init>
 8007b2c:	1b64      	subs	r4, r4, r5
 8007b2e:	10a4      	asrs	r4, r4, #2
 8007b30:	2600      	movs	r6, #0
 8007b32:	42a6      	cmp	r6, r4
 8007b34:	d105      	bne.n	8007b42 <__libc_init_array+0x2e>
 8007b36:	bd70      	pop	{r4, r5, r6, pc}
 8007b38:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b3c:	4798      	blx	r3
 8007b3e:	3601      	adds	r6, #1
 8007b40:	e7ee      	b.n	8007b20 <__libc_init_array+0xc>
 8007b42:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b46:	4798      	blx	r3
 8007b48:	3601      	adds	r6, #1
 8007b4a:	e7f2      	b.n	8007b32 <__libc_init_array+0x1e>
 8007b4c:	0800846c 	.word	0x0800846c
 8007b50:	0800846c 	.word	0x0800846c
 8007b54:	0800846c 	.word	0x0800846c
 8007b58:	08008470 	.word	0x08008470

08007b5c <free>:
 8007b5c:	4b02      	ldr	r3, [pc, #8]	; (8007b68 <free+0xc>)
 8007b5e:	4601      	mov	r1, r0
 8007b60:	6818      	ldr	r0, [r3, #0]
 8007b62:	f000 b81b 	b.w	8007b9c <_free_r>
 8007b66:	bf00      	nop
 8007b68:	20000010 	.word	0x20000010

08007b6c <memset>:
 8007b6c:	4402      	add	r2, r0
 8007b6e:	4603      	mov	r3, r0
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d100      	bne.n	8007b76 <memset+0xa>
 8007b74:	4770      	bx	lr
 8007b76:	f803 1b01 	strb.w	r1, [r3], #1
 8007b7a:	e7f9      	b.n	8007b70 <memset+0x4>

08007b7c <_calloc_r>:
 8007b7c:	b513      	push	{r0, r1, r4, lr}
 8007b7e:	434a      	muls	r2, r1
 8007b80:	4611      	mov	r1, r2
 8007b82:	9201      	str	r2, [sp, #4]
 8007b84:	f000 f85a 	bl	8007c3c <_malloc_r>
 8007b88:	4604      	mov	r4, r0
 8007b8a:	b118      	cbz	r0, 8007b94 <_calloc_r+0x18>
 8007b8c:	9a01      	ldr	r2, [sp, #4]
 8007b8e:	2100      	movs	r1, #0
 8007b90:	f7ff ffec 	bl	8007b6c <memset>
 8007b94:	4620      	mov	r0, r4
 8007b96:	b002      	add	sp, #8
 8007b98:	bd10      	pop	{r4, pc}
	...

08007b9c <_free_r>:
 8007b9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007b9e:	2900      	cmp	r1, #0
 8007ba0:	d048      	beq.n	8007c34 <_free_r+0x98>
 8007ba2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ba6:	9001      	str	r0, [sp, #4]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	f1a1 0404 	sub.w	r4, r1, #4
 8007bae:	bfb8      	it	lt
 8007bb0:	18e4      	addlt	r4, r4, r3
 8007bb2:	f000 f8cd 	bl	8007d50 <__malloc_lock>
 8007bb6:	4a20      	ldr	r2, [pc, #128]	; (8007c38 <_free_r+0x9c>)
 8007bb8:	9801      	ldr	r0, [sp, #4]
 8007bba:	6813      	ldr	r3, [r2, #0]
 8007bbc:	4615      	mov	r5, r2
 8007bbe:	b933      	cbnz	r3, 8007bce <_free_r+0x32>
 8007bc0:	6063      	str	r3, [r4, #4]
 8007bc2:	6014      	str	r4, [r2, #0]
 8007bc4:	b003      	add	sp, #12
 8007bc6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007bca:	f000 b8c7 	b.w	8007d5c <__malloc_unlock>
 8007bce:	42a3      	cmp	r3, r4
 8007bd0:	d90b      	bls.n	8007bea <_free_r+0x4e>
 8007bd2:	6821      	ldr	r1, [r4, #0]
 8007bd4:	1862      	adds	r2, r4, r1
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	bf04      	itt	eq
 8007bda:	681a      	ldreq	r2, [r3, #0]
 8007bdc:	685b      	ldreq	r3, [r3, #4]
 8007bde:	6063      	str	r3, [r4, #4]
 8007be0:	bf04      	itt	eq
 8007be2:	1852      	addeq	r2, r2, r1
 8007be4:	6022      	streq	r2, [r4, #0]
 8007be6:	602c      	str	r4, [r5, #0]
 8007be8:	e7ec      	b.n	8007bc4 <_free_r+0x28>
 8007bea:	461a      	mov	r2, r3
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	b10b      	cbz	r3, 8007bf4 <_free_r+0x58>
 8007bf0:	42a3      	cmp	r3, r4
 8007bf2:	d9fa      	bls.n	8007bea <_free_r+0x4e>
 8007bf4:	6811      	ldr	r1, [r2, #0]
 8007bf6:	1855      	adds	r5, r2, r1
 8007bf8:	42a5      	cmp	r5, r4
 8007bfa:	d10b      	bne.n	8007c14 <_free_r+0x78>
 8007bfc:	6824      	ldr	r4, [r4, #0]
 8007bfe:	4421      	add	r1, r4
 8007c00:	1854      	adds	r4, r2, r1
 8007c02:	42a3      	cmp	r3, r4
 8007c04:	6011      	str	r1, [r2, #0]
 8007c06:	d1dd      	bne.n	8007bc4 <_free_r+0x28>
 8007c08:	681c      	ldr	r4, [r3, #0]
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	6053      	str	r3, [r2, #4]
 8007c0e:	4421      	add	r1, r4
 8007c10:	6011      	str	r1, [r2, #0]
 8007c12:	e7d7      	b.n	8007bc4 <_free_r+0x28>
 8007c14:	d902      	bls.n	8007c1c <_free_r+0x80>
 8007c16:	230c      	movs	r3, #12
 8007c18:	6003      	str	r3, [r0, #0]
 8007c1a:	e7d3      	b.n	8007bc4 <_free_r+0x28>
 8007c1c:	6825      	ldr	r5, [r4, #0]
 8007c1e:	1961      	adds	r1, r4, r5
 8007c20:	428b      	cmp	r3, r1
 8007c22:	bf04      	itt	eq
 8007c24:	6819      	ldreq	r1, [r3, #0]
 8007c26:	685b      	ldreq	r3, [r3, #4]
 8007c28:	6063      	str	r3, [r4, #4]
 8007c2a:	bf04      	itt	eq
 8007c2c:	1949      	addeq	r1, r1, r5
 8007c2e:	6021      	streq	r1, [r4, #0]
 8007c30:	6054      	str	r4, [r2, #4]
 8007c32:	e7c7      	b.n	8007bc4 <_free_r+0x28>
 8007c34:	b003      	add	sp, #12
 8007c36:	bd30      	pop	{r4, r5, pc}
 8007c38:	200000e8 	.word	0x200000e8

08007c3c <_malloc_r>:
 8007c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c3e:	1ccd      	adds	r5, r1, #3
 8007c40:	f025 0503 	bic.w	r5, r5, #3
 8007c44:	3508      	adds	r5, #8
 8007c46:	2d0c      	cmp	r5, #12
 8007c48:	bf38      	it	cc
 8007c4a:	250c      	movcc	r5, #12
 8007c4c:	2d00      	cmp	r5, #0
 8007c4e:	4606      	mov	r6, r0
 8007c50:	db01      	blt.n	8007c56 <_malloc_r+0x1a>
 8007c52:	42a9      	cmp	r1, r5
 8007c54:	d903      	bls.n	8007c5e <_malloc_r+0x22>
 8007c56:	230c      	movs	r3, #12
 8007c58:	6033      	str	r3, [r6, #0]
 8007c5a:	2000      	movs	r0, #0
 8007c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c5e:	f000 f877 	bl	8007d50 <__malloc_lock>
 8007c62:	4921      	ldr	r1, [pc, #132]	; (8007ce8 <_malloc_r+0xac>)
 8007c64:	680a      	ldr	r2, [r1, #0]
 8007c66:	4614      	mov	r4, r2
 8007c68:	b99c      	cbnz	r4, 8007c92 <_malloc_r+0x56>
 8007c6a:	4f20      	ldr	r7, [pc, #128]	; (8007cec <_malloc_r+0xb0>)
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	b923      	cbnz	r3, 8007c7a <_malloc_r+0x3e>
 8007c70:	4621      	mov	r1, r4
 8007c72:	4630      	mov	r0, r6
 8007c74:	f000 f83c 	bl	8007cf0 <_sbrk_r>
 8007c78:	6038      	str	r0, [r7, #0]
 8007c7a:	4629      	mov	r1, r5
 8007c7c:	4630      	mov	r0, r6
 8007c7e:	f000 f837 	bl	8007cf0 <_sbrk_r>
 8007c82:	1c43      	adds	r3, r0, #1
 8007c84:	d123      	bne.n	8007cce <_malloc_r+0x92>
 8007c86:	230c      	movs	r3, #12
 8007c88:	6033      	str	r3, [r6, #0]
 8007c8a:	4630      	mov	r0, r6
 8007c8c:	f000 f866 	bl	8007d5c <__malloc_unlock>
 8007c90:	e7e3      	b.n	8007c5a <_malloc_r+0x1e>
 8007c92:	6823      	ldr	r3, [r4, #0]
 8007c94:	1b5b      	subs	r3, r3, r5
 8007c96:	d417      	bmi.n	8007cc8 <_malloc_r+0x8c>
 8007c98:	2b0b      	cmp	r3, #11
 8007c9a:	d903      	bls.n	8007ca4 <_malloc_r+0x68>
 8007c9c:	6023      	str	r3, [r4, #0]
 8007c9e:	441c      	add	r4, r3
 8007ca0:	6025      	str	r5, [r4, #0]
 8007ca2:	e004      	b.n	8007cae <_malloc_r+0x72>
 8007ca4:	6863      	ldr	r3, [r4, #4]
 8007ca6:	42a2      	cmp	r2, r4
 8007ca8:	bf0c      	ite	eq
 8007caa:	600b      	streq	r3, [r1, #0]
 8007cac:	6053      	strne	r3, [r2, #4]
 8007cae:	4630      	mov	r0, r6
 8007cb0:	f000 f854 	bl	8007d5c <__malloc_unlock>
 8007cb4:	f104 000b 	add.w	r0, r4, #11
 8007cb8:	1d23      	adds	r3, r4, #4
 8007cba:	f020 0007 	bic.w	r0, r0, #7
 8007cbe:	1ac2      	subs	r2, r0, r3
 8007cc0:	d0cc      	beq.n	8007c5c <_malloc_r+0x20>
 8007cc2:	1a1b      	subs	r3, r3, r0
 8007cc4:	50a3      	str	r3, [r4, r2]
 8007cc6:	e7c9      	b.n	8007c5c <_malloc_r+0x20>
 8007cc8:	4622      	mov	r2, r4
 8007cca:	6864      	ldr	r4, [r4, #4]
 8007ccc:	e7cc      	b.n	8007c68 <_malloc_r+0x2c>
 8007cce:	1cc4      	adds	r4, r0, #3
 8007cd0:	f024 0403 	bic.w	r4, r4, #3
 8007cd4:	42a0      	cmp	r0, r4
 8007cd6:	d0e3      	beq.n	8007ca0 <_malloc_r+0x64>
 8007cd8:	1a21      	subs	r1, r4, r0
 8007cda:	4630      	mov	r0, r6
 8007cdc:	f000 f808 	bl	8007cf0 <_sbrk_r>
 8007ce0:	3001      	adds	r0, #1
 8007ce2:	d1dd      	bne.n	8007ca0 <_malloc_r+0x64>
 8007ce4:	e7cf      	b.n	8007c86 <_malloc_r+0x4a>
 8007ce6:	bf00      	nop
 8007ce8:	200000e8 	.word	0x200000e8
 8007cec:	200000ec 	.word	0x200000ec

08007cf0 <_sbrk_r>:
 8007cf0:	b538      	push	{r3, r4, r5, lr}
 8007cf2:	4d06      	ldr	r5, [pc, #24]	; (8007d0c <_sbrk_r+0x1c>)
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	4604      	mov	r4, r0
 8007cf8:	4608      	mov	r0, r1
 8007cfa:	602b      	str	r3, [r5, #0]
 8007cfc:	f7f9 fcaa 	bl	8001654 <_sbrk>
 8007d00:	1c43      	adds	r3, r0, #1
 8007d02:	d102      	bne.n	8007d0a <_sbrk_r+0x1a>
 8007d04:	682b      	ldr	r3, [r5, #0]
 8007d06:	b103      	cbz	r3, 8007d0a <_sbrk_r+0x1a>
 8007d08:	6023      	str	r3, [r4, #0]
 8007d0a:	bd38      	pop	{r3, r4, r5, pc}
 8007d0c:	20000780 	.word	0x20000780

08007d10 <siprintf>:
 8007d10:	b40e      	push	{r1, r2, r3}
 8007d12:	b500      	push	{lr}
 8007d14:	b09c      	sub	sp, #112	; 0x70
 8007d16:	ab1d      	add	r3, sp, #116	; 0x74
 8007d18:	9002      	str	r0, [sp, #8]
 8007d1a:	9006      	str	r0, [sp, #24]
 8007d1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007d20:	4809      	ldr	r0, [pc, #36]	; (8007d48 <siprintf+0x38>)
 8007d22:	9107      	str	r1, [sp, #28]
 8007d24:	9104      	str	r1, [sp, #16]
 8007d26:	4909      	ldr	r1, [pc, #36]	; (8007d4c <siprintf+0x3c>)
 8007d28:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d2c:	9105      	str	r1, [sp, #20]
 8007d2e:	6800      	ldr	r0, [r0, #0]
 8007d30:	9301      	str	r3, [sp, #4]
 8007d32:	a902      	add	r1, sp, #8
 8007d34:	f000 f874 	bl	8007e20 <_svfiprintf_r>
 8007d38:	9b02      	ldr	r3, [sp, #8]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	701a      	strb	r2, [r3, #0]
 8007d3e:	b01c      	add	sp, #112	; 0x70
 8007d40:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d44:	b003      	add	sp, #12
 8007d46:	4770      	bx	lr
 8007d48:	20000010 	.word	0x20000010
 8007d4c:	ffff0208 	.word	0xffff0208

08007d50 <__malloc_lock>:
 8007d50:	4801      	ldr	r0, [pc, #4]	; (8007d58 <__malloc_lock+0x8>)
 8007d52:	f000 baf9 	b.w	8008348 <__retarget_lock_acquire_recursive>
 8007d56:	bf00      	nop
 8007d58:	20000788 	.word	0x20000788

08007d5c <__malloc_unlock>:
 8007d5c:	4801      	ldr	r0, [pc, #4]	; (8007d64 <__malloc_unlock+0x8>)
 8007d5e:	f000 baf4 	b.w	800834a <__retarget_lock_release_recursive>
 8007d62:	bf00      	nop
 8007d64:	20000788 	.word	0x20000788

08007d68 <__ssputs_r>:
 8007d68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d6c:	688e      	ldr	r6, [r1, #8]
 8007d6e:	429e      	cmp	r6, r3
 8007d70:	4682      	mov	sl, r0
 8007d72:	460c      	mov	r4, r1
 8007d74:	4690      	mov	r8, r2
 8007d76:	461f      	mov	r7, r3
 8007d78:	d838      	bhi.n	8007dec <__ssputs_r+0x84>
 8007d7a:	898a      	ldrh	r2, [r1, #12]
 8007d7c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007d80:	d032      	beq.n	8007de8 <__ssputs_r+0x80>
 8007d82:	6825      	ldr	r5, [r4, #0]
 8007d84:	6909      	ldr	r1, [r1, #16]
 8007d86:	eba5 0901 	sub.w	r9, r5, r1
 8007d8a:	6965      	ldr	r5, [r4, #20]
 8007d8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007d90:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007d94:	3301      	adds	r3, #1
 8007d96:	444b      	add	r3, r9
 8007d98:	106d      	asrs	r5, r5, #1
 8007d9a:	429d      	cmp	r5, r3
 8007d9c:	bf38      	it	cc
 8007d9e:	461d      	movcc	r5, r3
 8007da0:	0553      	lsls	r3, r2, #21
 8007da2:	d531      	bpl.n	8007e08 <__ssputs_r+0xa0>
 8007da4:	4629      	mov	r1, r5
 8007da6:	f7ff ff49 	bl	8007c3c <_malloc_r>
 8007daa:	4606      	mov	r6, r0
 8007dac:	b950      	cbnz	r0, 8007dc4 <__ssputs_r+0x5c>
 8007dae:	230c      	movs	r3, #12
 8007db0:	f8ca 3000 	str.w	r3, [sl]
 8007db4:	89a3      	ldrh	r3, [r4, #12]
 8007db6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007dba:	81a3      	strh	r3, [r4, #12]
 8007dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8007dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dc4:	6921      	ldr	r1, [r4, #16]
 8007dc6:	464a      	mov	r2, r9
 8007dc8:	f000 fac0 	bl	800834c <memcpy>
 8007dcc:	89a3      	ldrh	r3, [r4, #12]
 8007dce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007dd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dd6:	81a3      	strh	r3, [r4, #12]
 8007dd8:	6126      	str	r6, [r4, #16]
 8007dda:	6165      	str	r5, [r4, #20]
 8007ddc:	444e      	add	r6, r9
 8007dde:	eba5 0509 	sub.w	r5, r5, r9
 8007de2:	6026      	str	r6, [r4, #0]
 8007de4:	60a5      	str	r5, [r4, #8]
 8007de6:	463e      	mov	r6, r7
 8007de8:	42be      	cmp	r6, r7
 8007dea:	d900      	bls.n	8007dee <__ssputs_r+0x86>
 8007dec:	463e      	mov	r6, r7
 8007dee:	4632      	mov	r2, r6
 8007df0:	6820      	ldr	r0, [r4, #0]
 8007df2:	4641      	mov	r1, r8
 8007df4:	f000 fab8 	bl	8008368 <memmove>
 8007df8:	68a3      	ldr	r3, [r4, #8]
 8007dfa:	6822      	ldr	r2, [r4, #0]
 8007dfc:	1b9b      	subs	r3, r3, r6
 8007dfe:	4432      	add	r2, r6
 8007e00:	60a3      	str	r3, [r4, #8]
 8007e02:	6022      	str	r2, [r4, #0]
 8007e04:	2000      	movs	r0, #0
 8007e06:	e7db      	b.n	8007dc0 <__ssputs_r+0x58>
 8007e08:	462a      	mov	r2, r5
 8007e0a:	f000 fac7 	bl	800839c <_realloc_r>
 8007e0e:	4606      	mov	r6, r0
 8007e10:	2800      	cmp	r0, #0
 8007e12:	d1e1      	bne.n	8007dd8 <__ssputs_r+0x70>
 8007e14:	6921      	ldr	r1, [r4, #16]
 8007e16:	4650      	mov	r0, sl
 8007e18:	f7ff fec0 	bl	8007b9c <_free_r>
 8007e1c:	e7c7      	b.n	8007dae <__ssputs_r+0x46>
	...

08007e20 <_svfiprintf_r>:
 8007e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e24:	4698      	mov	r8, r3
 8007e26:	898b      	ldrh	r3, [r1, #12]
 8007e28:	061b      	lsls	r3, r3, #24
 8007e2a:	b09d      	sub	sp, #116	; 0x74
 8007e2c:	4607      	mov	r7, r0
 8007e2e:	460d      	mov	r5, r1
 8007e30:	4614      	mov	r4, r2
 8007e32:	d50e      	bpl.n	8007e52 <_svfiprintf_r+0x32>
 8007e34:	690b      	ldr	r3, [r1, #16]
 8007e36:	b963      	cbnz	r3, 8007e52 <_svfiprintf_r+0x32>
 8007e38:	2140      	movs	r1, #64	; 0x40
 8007e3a:	f7ff feff 	bl	8007c3c <_malloc_r>
 8007e3e:	6028      	str	r0, [r5, #0]
 8007e40:	6128      	str	r0, [r5, #16]
 8007e42:	b920      	cbnz	r0, 8007e4e <_svfiprintf_r+0x2e>
 8007e44:	230c      	movs	r3, #12
 8007e46:	603b      	str	r3, [r7, #0]
 8007e48:	f04f 30ff 	mov.w	r0, #4294967295
 8007e4c:	e0d1      	b.n	8007ff2 <_svfiprintf_r+0x1d2>
 8007e4e:	2340      	movs	r3, #64	; 0x40
 8007e50:	616b      	str	r3, [r5, #20]
 8007e52:	2300      	movs	r3, #0
 8007e54:	9309      	str	r3, [sp, #36]	; 0x24
 8007e56:	2320      	movs	r3, #32
 8007e58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e60:	2330      	movs	r3, #48	; 0x30
 8007e62:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800800c <_svfiprintf_r+0x1ec>
 8007e66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e6a:	f04f 0901 	mov.w	r9, #1
 8007e6e:	4623      	mov	r3, r4
 8007e70:	469a      	mov	sl, r3
 8007e72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e76:	b10a      	cbz	r2, 8007e7c <_svfiprintf_r+0x5c>
 8007e78:	2a25      	cmp	r2, #37	; 0x25
 8007e7a:	d1f9      	bne.n	8007e70 <_svfiprintf_r+0x50>
 8007e7c:	ebba 0b04 	subs.w	fp, sl, r4
 8007e80:	d00b      	beq.n	8007e9a <_svfiprintf_r+0x7a>
 8007e82:	465b      	mov	r3, fp
 8007e84:	4622      	mov	r2, r4
 8007e86:	4629      	mov	r1, r5
 8007e88:	4638      	mov	r0, r7
 8007e8a:	f7ff ff6d 	bl	8007d68 <__ssputs_r>
 8007e8e:	3001      	adds	r0, #1
 8007e90:	f000 80aa 	beq.w	8007fe8 <_svfiprintf_r+0x1c8>
 8007e94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e96:	445a      	add	r2, fp
 8007e98:	9209      	str	r2, [sp, #36]	; 0x24
 8007e9a:	f89a 3000 	ldrb.w	r3, [sl]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	f000 80a2 	beq.w	8007fe8 <_svfiprintf_r+0x1c8>
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	f04f 32ff 	mov.w	r2, #4294967295
 8007eaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007eae:	f10a 0a01 	add.w	sl, sl, #1
 8007eb2:	9304      	str	r3, [sp, #16]
 8007eb4:	9307      	str	r3, [sp, #28]
 8007eb6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007eba:	931a      	str	r3, [sp, #104]	; 0x68
 8007ebc:	4654      	mov	r4, sl
 8007ebe:	2205      	movs	r2, #5
 8007ec0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ec4:	4851      	ldr	r0, [pc, #324]	; (800800c <_svfiprintf_r+0x1ec>)
 8007ec6:	f7f8 f9ab 	bl	8000220 <memchr>
 8007eca:	9a04      	ldr	r2, [sp, #16]
 8007ecc:	b9d8      	cbnz	r0, 8007f06 <_svfiprintf_r+0xe6>
 8007ece:	06d0      	lsls	r0, r2, #27
 8007ed0:	bf44      	itt	mi
 8007ed2:	2320      	movmi	r3, #32
 8007ed4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ed8:	0711      	lsls	r1, r2, #28
 8007eda:	bf44      	itt	mi
 8007edc:	232b      	movmi	r3, #43	; 0x2b
 8007ede:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ee2:	f89a 3000 	ldrb.w	r3, [sl]
 8007ee6:	2b2a      	cmp	r3, #42	; 0x2a
 8007ee8:	d015      	beq.n	8007f16 <_svfiprintf_r+0xf6>
 8007eea:	9a07      	ldr	r2, [sp, #28]
 8007eec:	4654      	mov	r4, sl
 8007eee:	2000      	movs	r0, #0
 8007ef0:	f04f 0c0a 	mov.w	ip, #10
 8007ef4:	4621      	mov	r1, r4
 8007ef6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007efa:	3b30      	subs	r3, #48	; 0x30
 8007efc:	2b09      	cmp	r3, #9
 8007efe:	d94e      	bls.n	8007f9e <_svfiprintf_r+0x17e>
 8007f00:	b1b0      	cbz	r0, 8007f30 <_svfiprintf_r+0x110>
 8007f02:	9207      	str	r2, [sp, #28]
 8007f04:	e014      	b.n	8007f30 <_svfiprintf_r+0x110>
 8007f06:	eba0 0308 	sub.w	r3, r0, r8
 8007f0a:	fa09 f303 	lsl.w	r3, r9, r3
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	9304      	str	r3, [sp, #16]
 8007f12:	46a2      	mov	sl, r4
 8007f14:	e7d2      	b.n	8007ebc <_svfiprintf_r+0x9c>
 8007f16:	9b03      	ldr	r3, [sp, #12]
 8007f18:	1d19      	adds	r1, r3, #4
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	9103      	str	r1, [sp, #12]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	bfbb      	ittet	lt
 8007f22:	425b      	neglt	r3, r3
 8007f24:	f042 0202 	orrlt.w	r2, r2, #2
 8007f28:	9307      	strge	r3, [sp, #28]
 8007f2a:	9307      	strlt	r3, [sp, #28]
 8007f2c:	bfb8      	it	lt
 8007f2e:	9204      	strlt	r2, [sp, #16]
 8007f30:	7823      	ldrb	r3, [r4, #0]
 8007f32:	2b2e      	cmp	r3, #46	; 0x2e
 8007f34:	d10c      	bne.n	8007f50 <_svfiprintf_r+0x130>
 8007f36:	7863      	ldrb	r3, [r4, #1]
 8007f38:	2b2a      	cmp	r3, #42	; 0x2a
 8007f3a:	d135      	bne.n	8007fa8 <_svfiprintf_r+0x188>
 8007f3c:	9b03      	ldr	r3, [sp, #12]
 8007f3e:	1d1a      	adds	r2, r3, #4
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	9203      	str	r2, [sp, #12]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	bfb8      	it	lt
 8007f48:	f04f 33ff 	movlt.w	r3, #4294967295
 8007f4c:	3402      	adds	r4, #2
 8007f4e:	9305      	str	r3, [sp, #20]
 8007f50:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800801c <_svfiprintf_r+0x1fc>
 8007f54:	7821      	ldrb	r1, [r4, #0]
 8007f56:	2203      	movs	r2, #3
 8007f58:	4650      	mov	r0, sl
 8007f5a:	f7f8 f961 	bl	8000220 <memchr>
 8007f5e:	b140      	cbz	r0, 8007f72 <_svfiprintf_r+0x152>
 8007f60:	2340      	movs	r3, #64	; 0x40
 8007f62:	eba0 000a 	sub.w	r0, r0, sl
 8007f66:	fa03 f000 	lsl.w	r0, r3, r0
 8007f6a:	9b04      	ldr	r3, [sp, #16]
 8007f6c:	4303      	orrs	r3, r0
 8007f6e:	3401      	adds	r4, #1
 8007f70:	9304      	str	r3, [sp, #16]
 8007f72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f76:	4826      	ldr	r0, [pc, #152]	; (8008010 <_svfiprintf_r+0x1f0>)
 8007f78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f7c:	2206      	movs	r2, #6
 8007f7e:	f7f8 f94f 	bl	8000220 <memchr>
 8007f82:	2800      	cmp	r0, #0
 8007f84:	d038      	beq.n	8007ff8 <_svfiprintf_r+0x1d8>
 8007f86:	4b23      	ldr	r3, [pc, #140]	; (8008014 <_svfiprintf_r+0x1f4>)
 8007f88:	bb1b      	cbnz	r3, 8007fd2 <_svfiprintf_r+0x1b2>
 8007f8a:	9b03      	ldr	r3, [sp, #12]
 8007f8c:	3307      	adds	r3, #7
 8007f8e:	f023 0307 	bic.w	r3, r3, #7
 8007f92:	3308      	adds	r3, #8
 8007f94:	9303      	str	r3, [sp, #12]
 8007f96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f98:	4433      	add	r3, r6
 8007f9a:	9309      	str	r3, [sp, #36]	; 0x24
 8007f9c:	e767      	b.n	8007e6e <_svfiprintf_r+0x4e>
 8007f9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007fa2:	460c      	mov	r4, r1
 8007fa4:	2001      	movs	r0, #1
 8007fa6:	e7a5      	b.n	8007ef4 <_svfiprintf_r+0xd4>
 8007fa8:	2300      	movs	r3, #0
 8007faa:	3401      	adds	r4, #1
 8007fac:	9305      	str	r3, [sp, #20]
 8007fae:	4619      	mov	r1, r3
 8007fb0:	f04f 0c0a 	mov.w	ip, #10
 8007fb4:	4620      	mov	r0, r4
 8007fb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007fba:	3a30      	subs	r2, #48	; 0x30
 8007fbc:	2a09      	cmp	r2, #9
 8007fbe:	d903      	bls.n	8007fc8 <_svfiprintf_r+0x1a8>
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d0c5      	beq.n	8007f50 <_svfiprintf_r+0x130>
 8007fc4:	9105      	str	r1, [sp, #20]
 8007fc6:	e7c3      	b.n	8007f50 <_svfiprintf_r+0x130>
 8007fc8:	fb0c 2101 	mla	r1, ip, r1, r2
 8007fcc:	4604      	mov	r4, r0
 8007fce:	2301      	movs	r3, #1
 8007fd0:	e7f0      	b.n	8007fb4 <_svfiprintf_r+0x194>
 8007fd2:	ab03      	add	r3, sp, #12
 8007fd4:	9300      	str	r3, [sp, #0]
 8007fd6:	462a      	mov	r2, r5
 8007fd8:	4b0f      	ldr	r3, [pc, #60]	; (8008018 <_svfiprintf_r+0x1f8>)
 8007fda:	a904      	add	r1, sp, #16
 8007fdc:	4638      	mov	r0, r7
 8007fde:	f3af 8000 	nop.w
 8007fe2:	1c42      	adds	r2, r0, #1
 8007fe4:	4606      	mov	r6, r0
 8007fe6:	d1d6      	bne.n	8007f96 <_svfiprintf_r+0x176>
 8007fe8:	89ab      	ldrh	r3, [r5, #12]
 8007fea:	065b      	lsls	r3, r3, #25
 8007fec:	f53f af2c 	bmi.w	8007e48 <_svfiprintf_r+0x28>
 8007ff0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ff2:	b01d      	add	sp, #116	; 0x74
 8007ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ff8:	ab03      	add	r3, sp, #12
 8007ffa:	9300      	str	r3, [sp, #0]
 8007ffc:	462a      	mov	r2, r5
 8007ffe:	4b06      	ldr	r3, [pc, #24]	; (8008018 <_svfiprintf_r+0x1f8>)
 8008000:	a904      	add	r1, sp, #16
 8008002:	4638      	mov	r0, r7
 8008004:	f000 f87a 	bl	80080fc <_printf_i>
 8008008:	e7eb      	b.n	8007fe2 <_svfiprintf_r+0x1c2>
 800800a:	bf00      	nop
 800800c:	08008430 	.word	0x08008430
 8008010:	0800843a 	.word	0x0800843a
 8008014:	00000000 	.word	0x00000000
 8008018:	08007d69 	.word	0x08007d69
 800801c:	08008436 	.word	0x08008436

08008020 <_printf_common>:
 8008020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008024:	4616      	mov	r6, r2
 8008026:	4699      	mov	r9, r3
 8008028:	688a      	ldr	r2, [r1, #8]
 800802a:	690b      	ldr	r3, [r1, #16]
 800802c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008030:	4293      	cmp	r3, r2
 8008032:	bfb8      	it	lt
 8008034:	4613      	movlt	r3, r2
 8008036:	6033      	str	r3, [r6, #0]
 8008038:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800803c:	4607      	mov	r7, r0
 800803e:	460c      	mov	r4, r1
 8008040:	b10a      	cbz	r2, 8008046 <_printf_common+0x26>
 8008042:	3301      	adds	r3, #1
 8008044:	6033      	str	r3, [r6, #0]
 8008046:	6823      	ldr	r3, [r4, #0]
 8008048:	0699      	lsls	r1, r3, #26
 800804a:	bf42      	ittt	mi
 800804c:	6833      	ldrmi	r3, [r6, #0]
 800804e:	3302      	addmi	r3, #2
 8008050:	6033      	strmi	r3, [r6, #0]
 8008052:	6825      	ldr	r5, [r4, #0]
 8008054:	f015 0506 	ands.w	r5, r5, #6
 8008058:	d106      	bne.n	8008068 <_printf_common+0x48>
 800805a:	f104 0a19 	add.w	sl, r4, #25
 800805e:	68e3      	ldr	r3, [r4, #12]
 8008060:	6832      	ldr	r2, [r6, #0]
 8008062:	1a9b      	subs	r3, r3, r2
 8008064:	42ab      	cmp	r3, r5
 8008066:	dc26      	bgt.n	80080b6 <_printf_common+0x96>
 8008068:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800806c:	1e13      	subs	r3, r2, #0
 800806e:	6822      	ldr	r2, [r4, #0]
 8008070:	bf18      	it	ne
 8008072:	2301      	movne	r3, #1
 8008074:	0692      	lsls	r2, r2, #26
 8008076:	d42b      	bmi.n	80080d0 <_printf_common+0xb0>
 8008078:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800807c:	4649      	mov	r1, r9
 800807e:	4638      	mov	r0, r7
 8008080:	47c0      	blx	r8
 8008082:	3001      	adds	r0, #1
 8008084:	d01e      	beq.n	80080c4 <_printf_common+0xa4>
 8008086:	6823      	ldr	r3, [r4, #0]
 8008088:	68e5      	ldr	r5, [r4, #12]
 800808a:	6832      	ldr	r2, [r6, #0]
 800808c:	f003 0306 	and.w	r3, r3, #6
 8008090:	2b04      	cmp	r3, #4
 8008092:	bf08      	it	eq
 8008094:	1aad      	subeq	r5, r5, r2
 8008096:	68a3      	ldr	r3, [r4, #8]
 8008098:	6922      	ldr	r2, [r4, #16]
 800809a:	bf0c      	ite	eq
 800809c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80080a0:	2500      	movne	r5, #0
 80080a2:	4293      	cmp	r3, r2
 80080a4:	bfc4      	itt	gt
 80080a6:	1a9b      	subgt	r3, r3, r2
 80080a8:	18ed      	addgt	r5, r5, r3
 80080aa:	2600      	movs	r6, #0
 80080ac:	341a      	adds	r4, #26
 80080ae:	42b5      	cmp	r5, r6
 80080b0:	d11a      	bne.n	80080e8 <_printf_common+0xc8>
 80080b2:	2000      	movs	r0, #0
 80080b4:	e008      	b.n	80080c8 <_printf_common+0xa8>
 80080b6:	2301      	movs	r3, #1
 80080b8:	4652      	mov	r2, sl
 80080ba:	4649      	mov	r1, r9
 80080bc:	4638      	mov	r0, r7
 80080be:	47c0      	blx	r8
 80080c0:	3001      	adds	r0, #1
 80080c2:	d103      	bne.n	80080cc <_printf_common+0xac>
 80080c4:	f04f 30ff 	mov.w	r0, #4294967295
 80080c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080cc:	3501      	adds	r5, #1
 80080ce:	e7c6      	b.n	800805e <_printf_common+0x3e>
 80080d0:	18e1      	adds	r1, r4, r3
 80080d2:	1c5a      	adds	r2, r3, #1
 80080d4:	2030      	movs	r0, #48	; 0x30
 80080d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80080da:	4422      	add	r2, r4
 80080dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80080e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80080e4:	3302      	adds	r3, #2
 80080e6:	e7c7      	b.n	8008078 <_printf_common+0x58>
 80080e8:	2301      	movs	r3, #1
 80080ea:	4622      	mov	r2, r4
 80080ec:	4649      	mov	r1, r9
 80080ee:	4638      	mov	r0, r7
 80080f0:	47c0      	blx	r8
 80080f2:	3001      	adds	r0, #1
 80080f4:	d0e6      	beq.n	80080c4 <_printf_common+0xa4>
 80080f6:	3601      	adds	r6, #1
 80080f8:	e7d9      	b.n	80080ae <_printf_common+0x8e>
	...

080080fc <_printf_i>:
 80080fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008100:	460c      	mov	r4, r1
 8008102:	4691      	mov	r9, r2
 8008104:	7e27      	ldrb	r7, [r4, #24]
 8008106:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008108:	2f78      	cmp	r7, #120	; 0x78
 800810a:	4680      	mov	r8, r0
 800810c:	469a      	mov	sl, r3
 800810e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008112:	d807      	bhi.n	8008124 <_printf_i+0x28>
 8008114:	2f62      	cmp	r7, #98	; 0x62
 8008116:	d80a      	bhi.n	800812e <_printf_i+0x32>
 8008118:	2f00      	cmp	r7, #0
 800811a:	f000 80d8 	beq.w	80082ce <_printf_i+0x1d2>
 800811e:	2f58      	cmp	r7, #88	; 0x58
 8008120:	f000 80a3 	beq.w	800826a <_printf_i+0x16e>
 8008124:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008128:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800812c:	e03a      	b.n	80081a4 <_printf_i+0xa8>
 800812e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008132:	2b15      	cmp	r3, #21
 8008134:	d8f6      	bhi.n	8008124 <_printf_i+0x28>
 8008136:	a001      	add	r0, pc, #4	; (adr r0, 800813c <_printf_i+0x40>)
 8008138:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800813c:	08008195 	.word	0x08008195
 8008140:	080081a9 	.word	0x080081a9
 8008144:	08008125 	.word	0x08008125
 8008148:	08008125 	.word	0x08008125
 800814c:	08008125 	.word	0x08008125
 8008150:	08008125 	.word	0x08008125
 8008154:	080081a9 	.word	0x080081a9
 8008158:	08008125 	.word	0x08008125
 800815c:	08008125 	.word	0x08008125
 8008160:	08008125 	.word	0x08008125
 8008164:	08008125 	.word	0x08008125
 8008168:	080082b5 	.word	0x080082b5
 800816c:	080081d9 	.word	0x080081d9
 8008170:	08008297 	.word	0x08008297
 8008174:	08008125 	.word	0x08008125
 8008178:	08008125 	.word	0x08008125
 800817c:	080082d7 	.word	0x080082d7
 8008180:	08008125 	.word	0x08008125
 8008184:	080081d9 	.word	0x080081d9
 8008188:	08008125 	.word	0x08008125
 800818c:	08008125 	.word	0x08008125
 8008190:	0800829f 	.word	0x0800829f
 8008194:	680b      	ldr	r3, [r1, #0]
 8008196:	1d1a      	adds	r2, r3, #4
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	600a      	str	r2, [r1, #0]
 800819c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80081a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80081a4:	2301      	movs	r3, #1
 80081a6:	e0a3      	b.n	80082f0 <_printf_i+0x1f4>
 80081a8:	6825      	ldr	r5, [r4, #0]
 80081aa:	6808      	ldr	r0, [r1, #0]
 80081ac:	062e      	lsls	r6, r5, #24
 80081ae:	f100 0304 	add.w	r3, r0, #4
 80081b2:	d50a      	bpl.n	80081ca <_printf_i+0xce>
 80081b4:	6805      	ldr	r5, [r0, #0]
 80081b6:	600b      	str	r3, [r1, #0]
 80081b8:	2d00      	cmp	r5, #0
 80081ba:	da03      	bge.n	80081c4 <_printf_i+0xc8>
 80081bc:	232d      	movs	r3, #45	; 0x2d
 80081be:	426d      	negs	r5, r5
 80081c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081c4:	485e      	ldr	r0, [pc, #376]	; (8008340 <_printf_i+0x244>)
 80081c6:	230a      	movs	r3, #10
 80081c8:	e019      	b.n	80081fe <_printf_i+0x102>
 80081ca:	f015 0f40 	tst.w	r5, #64	; 0x40
 80081ce:	6805      	ldr	r5, [r0, #0]
 80081d0:	600b      	str	r3, [r1, #0]
 80081d2:	bf18      	it	ne
 80081d4:	b22d      	sxthne	r5, r5
 80081d6:	e7ef      	b.n	80081b8 <_printf_i+0xbc>
 80081d8:	680b      	ldr	r3, [r1, #0]
 80081da:	6825      	ldr	r5, [r4, #0]
 80081dc:	1d18      	adds	r0, r3, #4
 80081de:	6008      	str	r0, [r1, #0]
 80081e0:	0628      	lsls	r0, r5, #24
 80081e2:	d501      	bpl.n	80081e8 <_printf_i+0xec>
 80081e4:	681d      	ldr	r5, [r3, #0]
 80081e6:	e002      	b.n	80081ee <_printf_i+0xf2>
 80081e8:	0669      	lsls	r1, r5, #25
 80081ea:	d5fb      	bpl.n	80081e4 <_printf_i+0xe8>
 80081ec:	881d      	ldrh	r5, [r3, #0]
 80081ee:	4854      	ldr	r0, [pc, #336]	; (8008340 <_printf_i+0x244>)
 80081f0:	2f6f      	cmp	r7, #111	; 0x6f
 80081f2:	bf0c      	ite	eq
 80081f4:	2308      	moveq	r3, #8
 80081f6:	230a      	movne	r3, #10
 80081f8:	2100      	movs	r1, #0
 80081fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80081fe:	6866      	ldr	r6, [r4, #4]
 8008200:	60a6      	str	r6, [r4, #8]
 8008202:	2e00      	cmp	r6, #0
 8008204:	bfa2      	ittt	ge
 8008206:	6821      	ldrge	r1, [r4, #0]
 8008208:	f021 0104 	bicge.w	r1, r1, #4
 800820c:	6021      	strge	r1, [r4, #0]
 800820e:	b90d      	cbnz	r5, 8008214 <_printf_i+0x118>
 8008210:	2e00      	cmp	r6, #0
 8008212:	d04d      	beq.n	80082b0 <_printf_i+0x1b4>
 8008214:	4616      	mov	r6, r2
 8008216:	fbb5 f1f3 	udiv	r1, r5, r3
 800821a:	fb03 5711 	mls	r7, r3, r1, r5
 800821e:	5dc7      	ldrb	r7, [r0, r7]
 8008220:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008224:	462f      	mov	r7, r5
 8008226:	42bb      	cmp	r3, r7
 8008228:	460d      	mov	r5, r1
 800822a:	d9f4      	bls.n	8008216 <_printf_i+0x11a>
 800822c:	2b08      	cmp	r3, #8
 800822e:	d10b      	bne.n	8008248 <_printf_i+0x14c>
 8008230:	6823      	ldr	r3, [r4, #0]
 8008232:	07df      	lsls	r7, r3, #31
 8008234:	d508      	bpl.n	8008248 <_printf_i+0x14c>
 8008236:	6923      	ldr	r3, [r4, #16]
 8008238:	6861      	ldr	r1, [r4, #4]
 800823a:	4299      	cmp	r1, r3
 800823c:	bfde      	ittt	le
 800823e:	2330      	movle	r3, #48	; 0x30
 8008240:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008244:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008248:	1b92      	subs	r2, r2, r6
 800824a:	6122      	str	r2, [r4, #16]
 800824c:	f8cd a000 	str.w	sl, [sp]
 8008250:	464b      	mov	r3, r9
 8008252:	aa03      	add	r2, sp, #12
 8008254:	4621      	mov	r1, r4
 8008256:	4640      	mov	r0, r8
 8008258:	f7ff fee2 	bl	8008020 <_printf_common>
 800825c:	3001      	adds	r0, #1
 800825e:	d14c      	bne.n	80082fa <_printf_i+0x1fe>
 8008260:	f04f 30ff 	mov.w	r0, #4294967295
 8008264:	b004      	add	sp, #16
 8008266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800826a:	4835      	ldr	r0, [pc, #212]	; (8008340 <_printf_i+0x244>)
 800826c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008270:	6823      	ldr	r3, [r4, #0]
 8008272:	680e      	ldr	r6, [r1, #0]
 8008274:	061f      	lsls	r7, r3, #24
 8008276:	f856 5b04 	ldr.w	r5, [r6], #4
 800827a:	600e      	str	r6, [r1, #0]
 800827c:	d514      	bpl.n	80082a8 <_printf_i+0x1ac>
 800827e:	07d9      	lsls	r1, r3, #31
 8008280:	bf44      	itt	mi
 8008282:	f043 0320 	orrmi.w	r3, r3, #32
 8008286:	6023      	strmi	r3, [r4, #0]
 8008288:	b91d      	cbnz	r5, 8008292 <_printf_i+0x196>
 800828a:	6823      	ldr	r3, [r4, #0]
 800828c:	f023 0320 	bic.w	r3, r3, #32
 8008290:	6023      	str	r3, [r4, #0]
 8008292:	2310      	movs	r3, #16
 8008294:	e7b0      	b.n	80081f8 <_printf_i+0xfc>
 8008296:	6823      	ldr	r3, [r4, #0]
 8008298:	f043 0320 	orr.w	r3, r3, #32
 800829c:	6023      	str	r3, [r4, #0]
 800829e:	2378      	movs	r3, #120	; 0x78
 80082a0:	4828      	ldr	r0, [pc, #160]	; (8008344 <_printf_i+0x248>)
 80082a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80082a6:	e7e3      	b.n	8008270 <_printf_i+0x174>
 80082a8:	065e      	lsls	r6, r3, #25
 80082aa:	bf48      	it	mi
 80082ac:	b2ad      	uxthmi	r5, r5
 80082ae:	e7e6      	b.n	800827e <_printf_i+0x182>
 80082b0:	4616      	mov	r6, r2
 80082b2:	e7bb      	b.n	800822c <_printf_i+0x130>
 80082b4:	680b      	ldr	r3, [r1, #0]
 80082b6:	6826      	ldr	r6, [r4, #0]
 80082b8:	6960      	ldr	r0, [r4, #20]
 80082ba:	1d1d      	adds	r5, r3, #4
 80082bc:	600d      	str	r5, [r1, #0]
 80082be:	0635      	lsls	r5, r6, #24
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	d501      	bpl.n	80082c8 <_printf_i+0x1cc>
 80082c4:	6018      	str	r0, [r3, #0]
 80082c6:	e002      	b.n	80082ce <_printf_i+0x1d2>
 80082c8:	0671      	lsls	r1, r6, #25
 80082ca:	d5fb      	bpl.n	80082c4 <_printf_i+0x1c8>
 80082cc:	8018      	strh	r0, [r3, #0]
 80082ce:	2300      	movs	r3, #0
 80082d0:	6123      	str	r3, [r4, #16]
 80082d2:	4616      	mov	r6, r2
 80082d4:	e7ba      	b.n	800824c <_printf_i+0x150>
 80082d6:	680b      	ldr	r3, [r1, #0]
 80082d8:	1d1a      	adds	r2, r3, #4
 80082da:	600a      	str	r2, [r1, #0]
 80082dc:	681e      	ldr	r6, [r3, #0]
 80082de:	6862      	ldr	r2, [r4, #4]
 80082e0:	2100      	movs	r1, #0
 80082e2:	4630      	mov	r0, r6
 80082e4:	f7f7 ff9c 	bl	8000220 <memchr>
 80082e8:	b108      	cbz	r0, 80082ee <_printf_i+0x1f2>
 80082ea:	1b80      	subs	r0, r0, r6
 80082ec:	6060      	str	r0, [r4, #4]
 80082ee:	6863      	ldr	r3, [r4, #4]
 80082f0:	6123      	str	r3, [r4, #16]
 80082f2:	2300      	movs	r3, #0
 80082f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082f8:	e7a8      	b.n	800824c <_printf_i+0x150>
 80082fa:	6923      	ldr	r3, [r4, #16]
 80082fc:	4632      	mov	r2, r6
 80082fe:	4649      	mov	r1, r9
 8008300:	4640      	mov	r0, r8
 8008302:	47d0      	blx	sl
 8008304:	3001      	adds	r0, #1
 8008306:	d0ab      	beq.n	8008260 <_printf_i+0x164>
 8008308:	6823      	ldr	r3, [r4, #0]
 800830a:	079b      	lsls	r3, r3, #30
 800830c:	d413      	bmi.n	8008336 <_printf_i+0x23a>
 800830e:	68e0      	ldr	r0, [r4, #12]
 8008310:	9b03      	ldr	r3, [sp, #12]
 8008312:	4298      	cmp	r0, r3
 8008314:	bfb8      	it	lt
 8008316:	4618      	movlt	r0, r3
 8008318:	e7a4      	b.n	8008264 <_printf_i+0x168>
 800831a:	2301      	movs	r3, #1
 800831c:	4632      	mov	r2, r6
 800831e:	4649      	mov	r1, r9
 8008320:	4640      	mov	r0, r8
 8008322:	47d0      	blx	sl
 8008324:	3001      	adds	r0, #1
 8008326:	d09b      	beq.n	8008260 <_printf_i+0x164>
 8008328:	3501      	adds	r5, #1
 800832a:	68e3      	ldr	r3, [r4, #12]
 800832c:	9903      	ldr	r1, [sp, #12]
 800832e:	1a5b      	subs	r3, r3, r1
 8008330:	42ab      	cmp	r3, r5
 8008332:	dcf2      	bgt.n	800831a <_printf_i+0x21e>
 8008334:	e7eb      	b.n	800830e <_printf_i+0x212>
 8008336:	2500      	movs	r5, #0
 8008338:	f104 0619 	add.w	r6, r4, #25
 800833c:	e7f5      	b.n	800832a <_printf_i+0x22e>
 800833e:	bf00      	nop
 8008340:	08008441 	.word	0x08008441
 8008344:	08008452 	.word	0x08008452

08008348 <__retarget_lock_acquire_recursive>:
 8008348:	4770      	bx	lr

0800834a <__retarget_lock_release_recursive>:
 800834a:	4770      	bx	lr

0800834c <memcpy>:
 800834c:	440a      	add	r2, r1
 800834e:	4291      	cmp	r1, r2
 8008350:	f100 33ff 	add.w	r3, r0, #4294967295
 8008354:	d100      	bne.n	8008358 <memcpy+0xc>
 8008356:	4770      	bx	lr
 8008358:	b510      	push	{r4, lr}
 800835a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800835e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008362:	4291      	cmp	r1, r2
 8008364:	d1f9      	bne.n	800835a <memcpy+0xe>
 8008366:	bd10      	pop	{r4, pc}

08008368 <memmove>:
 8008368:	4288      	cmp	r0, r1
 800836a:	b510      	push	{r4, lr}
 800836c:	eb01 0402 	add.w	r4, r1, r2
 8008370:	d902      	bls.n	8008378 <memmove+0x10>
 8008372:	4284      	cmp	r4, r0
 8008374:	4623      	mov	r3, r4
 8008376:	d807      	bhi.n	8008388 <memmove+0x20>
 8008378:	1e43      	subs	r3, r0, #1
 800837a:	42a1      	cmp	r1, r4
 800837c:	d008      	beq.n	8008390 <memmove+0x28>
 800837e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008382:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008386:	e7f8      	b.n	800837a <memmove+0x12>
 8008388:	4402      	add	r2, r0
 800838a:	4601      	mov	r1, r0
 800838c:	428a      	cmp	r2, r1
 800838e:	d100      	bne.n	8008392 <memmove+0x2a>
 8008390:	bd10      	pop	{r4, pc}
 8008392:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008396:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800839a:	e7f7      	b.n	800838c <memmove+0x24>

0800839c <_realloc_r>:
 800839c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800839e:	4607      	mov	r7, r0
 80083a0:	4614      	mov	r4, r2
 80083a2:	460e      	mov	r6, r1
 80083a4:	b921      	cbnz	r1, 80083b0 <_realloc_r+0x14>
 80083a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80083aa:	4611      	mov	r1, r2
 80083ac:	f7ff bc46 	b.w	8007c3c <_malloc_r>
 80083b0:	b922      	cbnz	r2, 80083bc <_realloc_r+0x20>
 80083b2:	f7ff fbf3 	bl	8007b9c <_free_r>
 80083b6:	4625      	mov	r5, r4
 80083b8:	4628      	mov	r0, r5
 80083ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083bc:	f000 f814 	bl	80083e8 <_malloc_usable_size_r>
 80083c0:	42a0      	cmp	r0, r4
 80083c2:	d20f      	bcs.n	80083e4 <_realloc_r+0x48>
 80083c4:	4621      	mov	r1, r4
 80083c6:	4638      	mov	r0, r7
 80083c8:	f7ff fc38 	bl	8007c3c <_malloc_r>
 80083cc:	4605      	mov	r5, r0
 80083ce:	2800      	cmp	r0, #0
 80083d0:	d0f2      	beq.n	80083b8 <_realloc_r+0x1c>
 80083d2:	4631      	mov	r1, r6
 80083d4:	4622      	mov	r2, r4
 80083d6:	f7ff ffb9 	bl	800834c <memcpy>
 80083da:	4631      	mov	r1, r6
 80083dc:	4638      	mov	r0, r7
 80083de:	f7ff fbdd 	bl	8007b9c <_free_r>
 80083e2:	e7e9      	b.n	80083b8 <_realloc_r+0x1c>
 80083e4:	4635      	mov	r5, r6
 80083e6:	e7e7      	b.n	80083b8 <_realloc_r+0x1c>

080083e8 <_malloc_usable_size_r>:
 80083e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083ec:	1f18      	subs	r0, r3, #4
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	bfbc      	itt	lt
 80083f2:	580b      	ldrlt	r3, [r1, r0]
 80083f4:	18c0      	addlt	r0, r0, r3
 80083f6:	4770      	bx	lr

080083f8 <_init>:
 80083f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083fa:	bf00      	nop
 80083fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083fe:	bc08      	pop	{r3}
 8008400:	469e      	mov	lr, r3
 8008402:	4770      	bx	lr

08008404 <_fini>:
 8008404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008406:	bf00      	nop
 8008408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800840a:	bc08      	pop	{r3}
 800840c:	469e      	mov	lr, r3
 800840e:	4770      	bx	lr
