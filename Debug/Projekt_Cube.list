
Projekt_Cube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056b4  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800587c  0800587c  0001587c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005894  08005894  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005894  08005894  00015894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800589c  0800589c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800589c  0800589c  0001589c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058a0  080058a0  000158a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080058a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005dc  2000000c  080058b0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005e8  080058b0  000205e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016ca1  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ccf  00000000  00000000  00036cdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001190  00000000  00000000  000399b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001058  00000000  00000000  0003ab40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027206  00000000  00000000  0003bb98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016889  00000000  00000000  00062d9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f3a3b  00000000  00000000  00079627  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016d062  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000498c  00000000  00000000  0016d0b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08005864 	.word	0x08005864

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08005864 	.word	0x08005864

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b96e 	b.w	80004fc <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468c      	mov	ip, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	f040 8083 	bne.w	800034e <__udivmoddi4+0x116>
 8000248:	428a      	cmp	r2, r1
 800024a:	4617      	mov	r7, r2
 800024c:	d947      	bls.n	80002de <__udivmoddi4+0xa6>
 800024e:	fab2 f282 	clz	r2, r2
 8000252:	b142      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000254:	f1c2 0020 	rsb	r0, r2, #32
 8000258:	fa24 f000 	lsr.w	r0, r4, r0
 800025c:	4091      	lsls	r1, r2
 800025e:	4097      	lsls	r7, r2
 8000260:	ea40 0c01 	orr.w	ip, r0, r1
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbbc f6f8 	udiv	r6, ip, r8
 8000270:	fa1f fe87 	uxth.w	lr, r7
 8000274:	fb08 c116 	mls	r1, r8, r6, ip
 8000278:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027c:	fb06 f10e 	mul.w	r1, r6, lr
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18fb      	adds	r3, r7, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 8119 	bcs.w	80004c0 <__udivmoddi4+0x288>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8116 	bls.w	80004c0 <__udivmoddi4+0x288>
 8000294:	3e02      	subs	r6, #2
 8000296:	443b      	add	r3, r7
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002ac:	45a6      	cmp	lr, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	193c      	adds	r4, r7, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b6:	f080 8105 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 80002ba:	45a6      	cmp	lr, r4
 80002bc:	f240 8102 	bls.w	80004c4 <__udivmoddi4+0x28c>
 80002c0:	3802      	subs	r0, #2
 80002c2:	443c      	add	r4, r7
 80002c4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c8:	eba4 040e 	sub.w	r4, r4, lr
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xaa>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d150      	bne.n	800038c <__udivmoddi4+0x154>
 80002ea:	1bcb      	subs	r3, r1, r7
 80002ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f0:	fa1f f887 	uxth.w	r8, r7
 80002f4:	2601      	movs	r6, #1
 80002f6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002fa:	0c21      	lsrs	r1, r4, #16
 80002fc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000300:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000304:	fb08 f30c 	mul.w	r3, r8, ip
 8000308:	428b      	cmp	r3, r1
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0xe4>
 800030c:	1879      	adds	r1, r7, r1
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0xe2>
 8000314:	428b      	cmp	r3, r1
 8000316:	f200 80e9 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 800031a:	4684      	mov	ip, r0
 800031c:	1ac9      	subs	r1, r1, r3
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1110 	mls	r1, lr, r0, r1
 8000328:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x10c>
 8000334:	193c      	adds	r4, r7, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x10a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80d9 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e7bf      	b.n	80002ce <__udivmoddi4+0x96>
 800034e:	428b      	cmp	r3, r1
 8000350:	d909      	bls.n	8000366 <__udivmoddi4+0x12e>
 8000352:	2d00      	cmp	r5, #0
 8000354:	f000 80b1 	beq.w	80004ba <__udivmoddi4+0x282>
 8000358:	2600      	movs	r6, #0
 800035a:	e9c5 0100 	strd	r0, r1, [r5]
 800035e:	4630      	mov	r0, r6
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	fab3 f683 	clz	r6, r3
 800036a:	2e00      	cmp	r6, #0
 800036c:	d14a      	bne.n	8000404 <__udivmoddi4+0x1cc>
 800036e:	428b      	cmp	r3, r1
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0x140>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 80b8 	bhi.w	80004e8 <__udivmoddi4+0x2b0>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb61 0103 	sbc.w	r1, r1, r3
 800037e:	2001      	movs	r0, #1
 8000380:	468c      	mov	ip, r1
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0a8      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000386:	e9c5 4c00 	strd	r4, ip, [r5]
 800038a:	e7a5      	b.n	80002d8 <__udivmoddi4+0xa0>
 800038c:	f1c2 0320 	rsb	r3, r2, #32
 8000390:	fa20 f603 	lsr.w	r6, r0, r3
 8000394:	4097      	lsls	r7, r2
 8000396:	fa01 f002 	lsl.w	r0, r1, r2
 800039a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039e:	40d9      	lsrs	r1, r3
 80003a0:	4330      	orrs	r0, r6
 80003a2:	0c03      	lsrs	r3, r0, #16
 80003a4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b4:	fb06 f108 	mul.w	r1, r6, r8
 80003b8:	4299      	cmp	r1, r3
 80003ba:	fa04 f402 	lsl.w	r4, r4, r2
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x19c>
 80003c0:	18fb      	adds	r3, r7, r3
 80003c2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003c6:	f080 808d 	bcs.w	80004e4 <__udivmoddi4+0x2ac>
 80003ca:	4299      	cmp	r1, r3
 80003cc:	f240 808a 	bls.w	80004e4 <__udivmoddi4+0x2ac>
 80003d0:	3e02      	subs	r6, #2
 80003d2:	443b      	add	r3, r7
 80003d4:	1a5b      	subs	r3, r3, r1
 80003d6:	b281      	uxth	r1, r0
 80003d8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003dc:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e4:	fb00 f308 	mul.w	r3, r0, r8
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x1c4>
 80003ec:	1879      	adds	r1, r7, r1
 80003ee:	f100 3cff 	add.w	ip, r0, #4294967295
 80003f2:	d273      	bcs.n	80004dc <__udivmoddi4+0x2a4>
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d971      	bls.n	80004dc <__udivmoddi4+0x2a4>
 80003f8:	3802      	subs	r0, #2
 80003fa:	4439      	add	r1, r7
 80003fc:	1acb      	subs	r3, r1, r3
 80003fe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000402:	e778      	b.n	80002f6 <__udivmoddi4+0xbe>
 8000404:	f1c6 0c20 	rsb	ip, r6, #32
 8000408:	fa03 f406 	lsl.w	r4, r3, r6
 800040c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000410:	431c      	orrs	r4, r3
 8000412:	fa20 f70c 	lsr.w	r7, r0, ip
 8000416:	fa01 f306 	lsl.w	r3, r1, r6
 800041a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000422:	431f      	orrs	r7, r3
 8000424:	0c3b      	lsrs	r3, r7, #16
 8000426:	fbb1 f9fe 	udiv	r9, r1, lr
 800042a:	fa1f f884 	uxth.w	r8, r4
 800042e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000432:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000436:	fb09 fa08 	mul.w	sl, r9, r8
 800043a:	458a      	cmp	sl, r1
 800043c:	fa02 f206 	lsl.w	r2, r2, r6
 8000440:	fa00 f306 	lsl.w	r3, r0, r6
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x220>
 8000446:	1861      	adds	r1, r4, r1
 8000448:	f109 30ff 	add.w	r0, r9, #4294967295
 800044c:	d248      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 800044e:	458a      	cmp	sl, r1
 8000450:	d946      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 8000452:	f1a9 0902 	sub.w	r9, r9, #2
 8000456:	4421      	add	r1, r4
 8000458:	eba1 010a 	sub.w	r1, r1, sl
 800045c:	b2bf      	uxth	r7, r7
 800045e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000462:	fb0e 1110 	mls	r1, lr, r0, r1
 8000466:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800046a:	fb00 f808 	mul.w	r8, r0, r8
 800046e:	45b8      	cmp	r8, r7
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x24a>
 8000472:	19e7      	adds	r7, r4, r7
 8000474:	f100 31ff 	add.w	r1, r0, #4294967295
 8000478:	d22e      	bcs.n	80004d8 <__udivmoddi4+0x2a0>
 800047a:	45b8      	cmp	r8, r7
 800047c:	d92c      	bls.n	80004d8 <__udivmoddi4+0x2a0>
 800047e:	3802      	subs	r0, #2
 8000480:	4427      	add	r7, r4
 8000482:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000486:	eba7 0708 	sub.w	r7, r7, r8
 800048a:	fba0 8902 	umull	r8, r9, r0, r2
 800048e:	454f      	cmp	r7, r9
 8000490:	46c6      	mov	lr, r8
 8000492:	4649      	mov	r1, r9
 8000494:	d31a      	bcc.n	80004cc <__udivmoddi4+0x294>
 8000496:	d017      	beq.n	80004c8 <__udivmoddi4+0x290>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x27a>
 800049a:	ebb3 020e 	subs.w	r2, r3, lr
 800049e:	eb67 0701 	sbc.w	r7, r7, r1
 80004a2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a6:	40f2      	lsrs	r2, r6
 80004a8:	ea4c 0202 	orr.w	r2, ip, r2
 80004ac:	40f7      	lsrs	r7, r6
 80004ae:	e9c5 2700 	strd	r2, r7, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	462e      	mov	r6, r5
 80004bc:	4628      	mov	r0, r5
 80004be:	e70b      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c0:	4606      	mov	r6, r0
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fd      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004c8:	4543      	cmp	r3, r8
 80004ca:	d2e5      	bcs.n	8000498 <__udivmoddi4+0x260>
 80004cc:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d0:	eb69 0104 	sbc.w	r1, r9, r4
 80004d4:	3801      	subs	r0, #1
 80004d6:	e7df      	b.n	8000498 <__udivmoddi4+0x260>
 80004d8:	4608      	mov	r0, r1
 80004da:	e7d2      	b.n	8000482 <__udivmoddi4+0x24a>
 80004dc:	4660      	mov	r0, ip
 80004de:	e78d      	b.n	80003fc <__udivmoddi4+0x1c4>
 80004e0:	4681      	mov	r9, r0
 80004e2:	e7b9      	b.n	8000458 <__udivmoddi4+0x220>
 80004e4:	4666      	mov	r6, ip
 80004e6:	e775      	b.n	80003d4 <__udivmoddi4+0x19c>
 80004e8:	4630      	mov	r0, r6
 80004ea:	e74a      	b.n	8000382 <__udivmoddi4+0x14a>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	4439      	add	r1, r7
 80004f2:	e713      	b.n	800031c <__udivmoddi4+0xe4>
 80004f4:	3802      	subs	r0, #2
 80004f6:	443c      	add	r4, r7
 80004f8:	e724      	b.n	8000344 <__udivmoddi4+0x10c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b084      	sub	sp, #16
 8000504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000506:	463b      	mov	r3, r7
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]
 800050c:	605a      	str	r2, [r3, #4]
 800050e:	609a      	str	r2, [r3, #8]
 8000510:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000512:	4b21      	ldr	r3, [pc, #132]	; (8000598 <MX_ADC1_Init+0x98>)
 8000514:	4a21      	ldr	r2, [pc, #132]	; (800059c <MX_ADC1_Init+0x9c>)
 8000516:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000518:	4b1f      	ldr	r3, [pc, #124]	; (8000598 <MX_ADC1_Init+0x98>)
 800051a:	2200      	movs	r2, #0
 800051c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800051e:	4b1e      	ldr	r3, [pc, #120]	; (8000598 <MX_ADC1_Init+0x98>)
 8000520:	2200      	movs	r2, #0
 8000522:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000524:	4b1c      	ldr	r3, [pc, #112]	; (8000598 <MX_ADC1_Init+0x98>)
 8000526:	2200      	movs	r2, #0
 8000528:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800052a:	4b1b      	ldr	r3, [pc, #108]	; (8000598 <MX_ADC1_Init+0x98>)
 800052c:	2200      	movs	r2, #0
 800052e:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000530:	4b19      	ldr	r3, [pc, #100]	; (8000598 <MX_ADC1_Init+0x98>)
 8000532:	2200      	movs	r2, #0
 8000534:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000538:	4b17      	ldr	r3, [pc, #92]	; (8000598 <MX_ADC1_Init+0x98>)
 800053a:	2200      	movs	r2, #0
 800053c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800053e:	4b16      	ldr	r3, [pc, #88]	; (8000598 <MX_ADC1_Init+0x98>)
 8000540:	4a17      	ldr	r2, [pc, #92]	; (80005a0 <MX_ADC1_Init+0xa0>)
 8000542:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000544:	4b14      	ldr	r3, [pc, #80]	; (8000598 <MX_ADC1_Init+0x98>)
 8000546:	2200      	movs	r2, #0
 8000548:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800054a:	4b13      	ldr	r3, [pc, #76]	; (8000598 <MX_ADC1_Init+0x98>)
 800054c:	2201      	movs	r2, #1
 800054e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000550:	4b11      	ldr	r3, [pc, #68]	; (8000598 <MX_ADC1_Init+0x98>)
 8000552:	2200      	movs	r2, #0
 8000554:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000558:	4b0f      	ldr	r3, [pc, #60]	; (8000598 <MX_ADC1_Init+0x98>)
 800055a:	2201      	movs	r2, #1
 800055c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800055e:	480e      	ldr	r0, [pc, #56]	; (8000598 <MX_ADC1_Init+0x98>)
 8000560:	f000 fe7c 	bl	800125c <HAL_ADC_Init>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800056a:	f000 f9fd 	bl	8000968 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800056e:	2303      	movs	r3, #3
 8000570:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000572:	2301      	movs	r3, #1
 8000574:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000576:	2300      	movs	r3, #0
 8000578:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800057a:	463b      	mov	r3, r7
 800057c:	4619      	mov	r1, r3
 800057e:	4806      	ldr	r0, [pc, #24]	; (8000598 <MX_ADC1_Init+0x98>)
 8000580:	f001 f816 	bl	80015b0 <HAL_ADC_ConfigChannel>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800058a:	f000 f9ed 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800058e:	bf00      	nop
 8000590:	3710      	adds	r7, #16
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	20000030 	.word	0x20000030
 800059c:	40012000 	.word	0x40012000
 80005a0:	0f000001 	.word	0x0f000001

080005a4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b08a      	sub	sp, #40	; 0x28
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ac:	f107 0314 	add.w	r3, r7, #20
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
 80005ba:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a15      	ldr	r2, [pc, #84]	; (8000618 <HAL_ADC_MspInit+0x74>)
 80005c2:	4293      	cmp	r3, r2
 80005c4:	d123      	bne.n	800060e <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005c6:	4b15      	ldr	r3, [pc, #84]	; (800061c <HAL_ADC_MspInit+0x78>)
 80005c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005ca:	4a14      	ldr	r2, [pc, #80]	; (800061c <HAL_ADC_MspInit+0x78>)
 80005cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005d0:	6453      	str	r3, [r2, #68]	; 0x44
 80005d2:	4b12      	ldr	r3, [pc, #72]	; (800061c <HAL_ADC_MspInit+0x78>)
 80005d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005da:	613b      	str	r3, [r7, #16]
 80005dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005de:	4b0f      	ldr	r3, [pc, #60]	; (800061c <HAL_ADC_MspInit+0x78>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	4a0e      	ldr	r2, [pc, #56]	; (800061c <HAL_ADC_MspInit+0x78>)
 80005e4:	f043 0301 	orr.w	r3, r3, #1
 80005e8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ea:	4b0c      	ldr	r3, [pc, #48]	; (800061c <HAL_ADC_MspInit+0x78>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	f003 0301 	and.w	r3, r3, #1
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80005f6:	2308      	movs	r3, #8
 80005f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005fa:	2303      	movs	r3, #3
 80005fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fe:	2300      	movs	r3, #0
 8000600:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000602:	f107 0314 	add.w	r3, r7, #20
 8000606:	4619      	mov	r1, r3
 8000608:	4805      	ldr	r0, [pc, #20]	; (8000620 <HAL_ADC_MspInit+0x7c>)
 800060a:	f001 fb33 	bl	8001c74 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800060e:	bf00      	nop
 8000610:	3728      	adds	r7, #40	; 0x28
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	40012000 	.word	0x40012000
 800061c:	40023800 	.word	0x40023800
 8000620:	40020000 	.word	0x40020000

08000624 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b08c      	sub	sp, #48	; 0x30
 8000628:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800062a:	f107 031c 	add.w	r3, r7, #28
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	605a      	str	r2, [r3, #4]
 8000634:	609a      	str	r2, [r3, #8]
 8000636:	60da      	str	r2, [r3, #12]
 8000638:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800063a:	4b6e      	ldr	r3, [pc, #440]	; (80007f4 <MX_GPIO_Init+0x1d0>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	4a6d      	ldr	r2, [pc, #436]	; (80007f4 <MX_GPIO_Init+0x1d0>)
 8000640:	f043 0304 	orr.w	r3, r3, #4
 8000644:	6313      	str	r3, [r2, #48]	; 0x30
 8000646:	4b6b      	ldr	r3, [pc, #428]	; (80007f4 <MX_GPIO_Init+0x1d0>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	f003 0304 	and.w	r3, r3, #4
 800064e:	61bb      	str	r3, [r7, #24]
 8000650:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000652:	4b68      	ldr	r3, [pc, #416]	; (80007f4 <MX_GPIO_Init+0x1d0>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	4a67      	ldr	r2, [pc, #412]	; (80007f4 <MX_GPIO_Init+0x1d0>)
 8000658:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800065c:	6313      	str	r3, [r2, #48]	; 0x30
 800065e:	4b65      	ldr	r3, [pc, #404]	; (80007f4 <MX_GPIO_Init+0x1d0>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000666:	617b      	str	r3, [r7, #20]
 8000668:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800066a:	4b62      	ldr	r3, [pc, #392]	; (80007f4 <MX_GPIO_Init+0x1d0>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	4a61      	ldr	r2, [pc, #388]	; (80007f4 <MX_GPIO_Init+0x1d0>)
 8000670:	f043 0301 	orr.w	r3, r3, #1
 8000674:	6313      	str	r3, [r2, #48]	; 0x30
 8000676:	4b5f      	ldr	r3, [pc, #380]	; (80007f4 <MX_GPIO_Init+0x1d0>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	f003 0301 	and.w	r3, r3, #1
 800067e:	613b      	str	r3, [r7, #16]
 8000680:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000682:	4b5c      	ldr	r3, [pc, #368]	; (80007f4 <MX_GPIO_Init+0x1d0>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	4a5b      	ldr	r2, [pc, #364]	; (80007f4 <MX_GPIO_Init+0x1d0>)
 8000688:	f043 0302 	orr.w	r3, r3, #2
 800068c:	6313      	str	r3, [r2, #48]	; 0x30
 800068e:	4b59      	ldr	r3, [pc, #356]	; (80007f4 <MX_GPIO_Init+0x1d0>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	f003 0302 	and.w	r3, r3, #2
 8000696:	60fb      	str	r3, [r7, #12]
 8000698:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800069a:	4b56      	ldr	r3, [pc, #344]	; (80007f4 <MX_GPIO_Init+0x1d0>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	4a55      	ldr	r2, [pc, #340]	; (80007f4 <MX_GPIO_Init+0x1d0>)
 80006a0:	f043 0310 	orr.w	r3, r3, #16
 80006a4:	6313      	str	r3, [r2, #48]	; 0x30
 80006a6:	4b53      	ldr	r3, [pc, #332]	; (80007f4 <MX_GPIO_Init+0x1d0>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	f003 0310 	and.w	r3, r3, #16
 80006ae:	60bb      	str	r3, [r7, #8]
 80006b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006b2:	4b50      	ldr	r3, [pc, #320]	; (80007f4 <MX_GPIO_Init+0x1d0>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	4a4f      	ldr	r2, [pc, #316]	; (80007f4 <MX_GPIO_Init+0x1d0>)
 80006b8:	f043 0308 	orr.w	r3, r3, #8
 80006bc:	6313      	str	r3, [r2, #48]	; 0x30
 80006be:	4b4d      	ldr	r3, [pc, #308]	; (80007f4 <MX_GPIO_Init+0x1d0>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	f003 0308 	and.w	r3, r3, #8
 80006c6:	607b      	str	r3, [r7, #4]
 80006c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006ca:	4b4a      	ldr	r3, [pc, #296]	; (80007f4 <MX_GPIO_Init+0x1d0>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	4a49      	ldr	r2, [pc, #292]	; (80007f4 <MX_GPIO_Init+0x1d0>)
 80006d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006d4:	6313      	str	r3, [r2, #48]	; 0x30
 80006d6:	4b47      	ldr	r3, [pc, #284]	; (80007f4 <MX_GPIO_Init+0x1d0>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006de:	603b      	str	r3, [r7, #0]
 80006e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80006e2:	2200      	movs	r2, #0
 80006e4:	f244 0181 	movw	r1, #16513	; 0x4081
 80006e8:	4843      	ldr	r0, [pc, #268]	; (80007f8 <MX_GPIO_Init+0x1d4>)
 80006ea:	f001 fc6f 	bl	8001fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	2140      	movs	r1, #64	; 0x40
 80006f2:	4842      	ldr	r0, [pc, #264]	; (80007fc <MX_GPIO_Init+0x1d8>)
 80006f4:	f001 fc6a 	bl	8001fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80006f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006fe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000702:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000704:	2300      	movs	r3, #0
 8000706:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000708:	f107 031c 	add.w	r3, r7, #28
 800070c:	4619      	mov	r1, r3
 800070e:	483c      	ldr	r0, [pc, #240]	; (8000800 <MX_GPIO_Init+0x1dc>)
 8000710:	f001 fab0 	bl	8001c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000714:	2332      	movs	r3, #50	; 0x32
 8000716:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000718:	2302      	movs	r3, #2
 800071a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	2300      	movs	r3, #0
 800071e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000720:	2303      	movs	r3, #3
 8000722:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000724:	230b      	movs	r3, #11
 8000726:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000728:	f107 031c 	add.w	r3, r7, #28
 800072c:	4619      	mov	r1, r3
 800072e:	4834      	ldr	r0, [pc, #208]	; (8000800 <MX_GPIO_Init+0x1dc>)
 8000730:	f001 faa0 	bl	8001c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000734:	2386      	movs	r3, #134	; 0x86
 8000736:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000738:	2302      	movs	r3, #2
 800073a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	2300      	movs	r3, #0
 800073e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000740:	2303      	movs	r3, #3
 8000742:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000744:	230b      	movs	r3, #11
 8000746:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000748:	f107 031c 	add.w	r3, r7, #28
 800074c:	4619      	mov	r1, r3
 800074e:	482d      	ldr	r0, [pc, #180]	; (8000804 <MX_GPIO_Init+0x1e0>)
 8000750:	f001 fa90 	bl	8001c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000754:	f244 0381 	movw	r3, #16513	; 0x4081
 8000758:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075a:	2301      	movs	r3, #1
 800075c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075e:	2300      	movs	r3, #0
 8000760:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000762:	2300      	movs	r3, #0
 8000764:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000766:	f107 031c 	add.w	r3, r7, #28
 800076a:	4619      	mov	r1, r3
 800076c:	4822      	ldr	r0, [pc, #136]	; (80007f8 <MX_GPIO_Init+0x1d4>)
 800076e:	f001 fa81 	bl	8001c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000772:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000776:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000778:	2302      	movs	r3, #2
 800077a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000780:	2303      	movs	r3, #3
 8000782:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000784:	230b      	movs	r3, #11
 8000786:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000788:	f107 031c 	add.w	r3, r7, #28
 800078c:	4619      	mov	r1, r3
 800078e:	481a      	ldr	r0, [pc, #104]	; (80007f8 <MX_GPIO_Init+0x1d4>)
 8000790:	f001 fa70 	bl	8001c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000794:	2340      	movs	r3, #64	; 0x40
 8000796:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000798:	2301      	movs	r3, #1
 800079a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079c:	2300      	movs	r3, #0
 800079e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a0:	2300      	movs	r3, #0
 80007a2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007a4:	f107 031c 	add.w	r3, r7, #28
 80007a8:	4619      	mov	r1, r3
 80007aa:	4814      	ldr	r0, [pc, #80]	; (80007fc <MX_GPIO_Init+0x1d8>)
 80007ac:	f001 fa62 	bl	8001c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80007b0:	2380      	movs	r3, #128	; 0x80
 80007b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007b4:	2300      	movs	r3, #0
 80007b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007bc:	f107 031c 	add.w	r3, r7, #28
 80007c0:	4619      	mov	r1, r3
 80007c2:	480e      	ldr	r0, [pc, #56]	; (80007fc <MX_GPIO_Init+0x1d8>)
 80007c4:	f001 fa56 	bl	8001c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80007c8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80007cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ce:	2302      	movs	r3, #2
 80007d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d2:	2300      	movs	r3, #0
 80007d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d6:	2303      	movs	r3, #3
 80007d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007da:	230b      	movs	r3, #11
 80007dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007de:	f107 031c 	add.w	r3, r7, #28
 80007e2:	4619      	mov	r1, r3
 80007e4:	4805      	ldr	r0, [pc, #20]	; (80007fc <MX_GPIO_Init+0x1d8>)
 80007e6:	f001 fa45 	bl	8001c74 <HAL_GPIO_Init>

}
 80007ea:	bf00      	nop
 80007ec:	3730      	adds	r7, #48	; 0x30
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40023800 	.word	0x40023800
 80007f8:	40020400 	.word	0x40020400
 80007fc:	40021800 	.word	0x40021800
 8000800:	40020800 	.word	0x40020800
 8000804:	40020000 	.word	0x40020000

08000808 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800080c:	f000 fca5 	bl	800115a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000810:	f000 f81a 	bl	8000848 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000814:	f7ff ff06 	bl	8000624 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000818:	f000 fb78 	bl	8000f0c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800081c:	f000 fbea 	bl	8000ff4 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM4_Init();
 8000820:	f000 fa14 	bl	8000c4c <MX_TIM4_Init>
  MX_TIM3_Init();
 8000824:	f000 f9bc 	bl	8000ba0 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000828:	f000 f90e 	bl	8000a48 <MX_TIM1_Init>
  MX_ADC1_Init();
 800082c:	f7ff fe68 	bl	8000500 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000830:	2100      	movs	r1, #0
 8000832:	4803      	ldr	r0, [pc, #12]	; (8000840 <main+0x38>)
 8000834:	f002 ff04 	bl	8003640 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim4);
 8000838:	4802      	ldr	r0, [pc, #8]	; (8000844 <main+0x3c>)
 800083a:	f002 fe27 	bl	800348c <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800083e:	e7fe      	b.n	800083e <main+0x36>
 8000840:	20000110 	.word	0x20000110
 8000844:	20000078 	.word	0x20000078

08000848 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b0b4      	sub	sp, #208	; 0xd0
 800084c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800084e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000852:	2230      	movs	r2, #48	; 0x30
 8000854:	2100      	movs	r1, #0
 8000856:	4618      	mov	r0, r3
 8000858:	f004 fffc 	bl	8005854 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800085c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
 8000868:	60da      	str	r2, [r3, #12]
 800086a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800086c:	f107 0308 	add.w	r3, r7, #8
 8000870:	2284      	movs	r2, #132	; 0x84
 8000872:	2100      	movs	r1, #0
 8000874:	4618      	mov	r0, r3
 8000876:	f004 ffed 	bl	8005854 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800087a:	f001 fd09 	bl	8002290 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800087e:	4b37      	ldr	r3, [pc, #220]	; (800095c <SystemClock_Config+0x114>)
 8000880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000882:	4a36      	ldr	r2, [pc, #216]	; (800095c <SystemClock_Config+0x114>)
 8000884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000888:	6413      	str	r3, [r2, #64]	; 0x40
 800088a:	4b34      	ldr	r3, [pc, #208]	; (800095c <SystemClock_Config+0x114>)
 800088c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000896:	4b32      	ldr	r3, [pc, #200]	; (8000960 <SystemClock_Config+0x118>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800089e:	4a30      	ldr	r2, [pc, #192]	; (8000960 <SystemClock_Config+0x118>)
 80008a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008a4:	6013      	str	r3, [r2, #0]
 80008a6:	4b2e      	ldr	r3, [pc, #184]	; (8000960 <SystemClock_Config+0x118>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008ae:	603b      	str	r3, [r7, #0]
 80008b0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008b2:	2301      	movs	r3, #1
 80008b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008b8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008c0:	2302      	movs	r3, #2
 80008c2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008ce:	2304      	movs	r3, #4
 80008d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 80008d4:	2348      	movs	r3, #72	; 0x48
 80008d6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008da:	2302      	movs	r3, #2
 80008dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80008e0:	2303      	movs	r3, #3
 80008e2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80008ea:	4618      	mov	r0, r3
 80008ec:	f001 fce0 	bl	80022b0 <HAL_RCC_OscConfig>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80008f6:	f000 f837 	bl	8000968 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008fa:	230f      	movs	r3, #15
 80008fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000900:	2302      	movs	r3, #2
 8000902:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000906:	2300      	movs	r3, #0
 8000908:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800090c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000910:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000914:	2300      	movs	r3, #0
 8000916:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800091a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800091e:	2102      	movs	r1, #2
 8000920:	4618      	mov	r0, r3
 8000922:	f001 ff69 	bl	80027f8 <HAL_RCC_ClockConfig>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 800092c:	f000 f81c 	bl	8000968 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8000930:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <SystemClock_Config+0x11c>)
 8000932:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000934:	2300      	movs	r3, #0
 8000936:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000938:	2300      	movs	r3, #0
 800093a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800093e:	f107 0308 	add.w	r3, r7, #8
 8000942:	4618      	mov	r0, r3
 8000944:	f002 f95a 	bl	8002bfc <HAL_RCCEx_PeriphCLKConfig>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <SystemClock_Config+0x10a>
  {
    Error_Handler();
 800094e:	f000 f80b 	bl	8000968 <Error_Handler>
  }
}
 8000952:	bf00      	nop
 8000954:	37d0      	adds	r7, #208	; 0xd0
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40023800 	.word	0x40023800
 8000960:	40007000 	.word	0x40007000
 8000964:	00200100 	.word	0x00200100

08000968 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800096c:	b672      	cpsid	i
}
 800096e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000970:	e7fe      	b.n	8000970 <Error_Handler+0x8>
	...

08000974 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800097a:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <HAL_MspInit+0x44>)
 800097c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097e:	4a0e      	ldr	r2, [pc, #56]	; (80009b8 <HAL_MspInit+0x44>)
 8000980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000984:	6413      	str	r3, [r2, #64]	; 0x40
 8000986:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <HAL_MspInit+0x44>)
 8000988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000992:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <HAL_MspInit+0x44>)
 8000994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000996:	4a08      	ldr	r2, [pc, #32]	; (80009b8 <HAL_MspInit+0x44>)
 8000998:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800099c:	6453      	str	r3, [r2, #68]	; 0x44
 800099e:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <HAL_MspInit+0x44>)
 80009a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009a6:	603b      	str	r3, [r7, #0]
 80009a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009aa:	bf00      	nop
 80009ac:	370c      	adds	r7, #12
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	40023800 	.word	0x40023800

080009bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <NMI_Handler+0x4>

080009c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009c6:	e7fe      	b.n	80009c6 <HardFault_Handler+0x4>

080009c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009cc:	e7fe      	b.n	80009cc <MemManage_Handler+0x4>

080009ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009d2:	e7fe      	b.n	80009d2 <BusFault_Handler+0x4>

080009d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d8:	e7fe      	b.n	80009d8 <UsageFault_Handler+0x4>

080009da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr

080009e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr

080009f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr

08000a04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a08:	f000 fbe4 	bl	80011d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000a14:	4802      	ldr	r0, [pc, #8]	; (8000a20 <TIM4_IRQHandler+0x10>)
 8000a16:	f002 ffb3 	bl	8003980 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20000078 	.word	0x20000078

08000a24 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a28:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <SystemInit+0x20>)
 8000a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a2e:	4a05      	ldr	r2, [pc, #20]	; (8000a44 <SystemInit+0x20>)
 8000a30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	e000ed00 	.word	0xe000ed00

08000a48 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b09a      	sub	sp, #104	; 0x68
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a4e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	605a      	str	r2, [r3, #4]
 8000a58:	609a      	str	r2, [r3, #8]
 8000a5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a5c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a68:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]
 8000a76:	611a      	str	r2, [r3, #16]
 8000a78:	615a      	str	r2, [r3, #20]
 8000a7a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a7c:	1d3b      	adds	r3, r7, #4
 8000a7e:	222c      	movs	r2, #44	; 0x2c
 8000a80:	2100      	movs	r1, #0
 8000a82:	4618      	mov	r0, r3
 8000a84:	f004 fee6 	bl	8005854 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a88:	4b43      	ldr	r3, [pc, #268]	; (8000b98 <MX_TIM1_Init+0x150>)
 8000a8a:	4a44      	ldr	r2, [pc, #272]	; (8000b9c <MX_TIM1_Init+0x154>)
 8000a8c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8000a8e:	4b42      	ldr	r3, [pc, #264]	; (8000b98 <MX_TIM1_Init+0x150>)
 8000a90:	2247      	movs	r2, #71	; 0x47
 8000a92:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a94:	4b40      	ldr	r3, [pc, #256]	; (8000b98 <MX_TIM1_Init+0x150>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000a9a:	4b3f      	ldr	r3, [pc, #252]	; (8000b98 <MX_TIM1_Init+0x150>)
 8000a9c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000aa0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aa2:	4b3d      	ldr	r3, [pc, #244]	; (8000b98 <MX_TIM1_Init+0x150>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000aa8:	4b3b      	ldr	r3, [pc, #236]	; (8000b98 <MX_TIM1_Init+0x150>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aae:	4b3a      	ldr	r3, [pc, #232]	; (8000b98 <MX_TIM1_Init+0x150>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ab4:	4838      	ldr	r0, [pc, #224]	; (8000b98 <MX_TIM1_Init+0x150>)
 8000ab6:	f002 fc91 	bl	80033dc <HAL_TIM_Base_Init>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000ac0:	f7ff ff52 	bl	8000968 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ac4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ac8:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000aca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4831      	ldr	r0, [pc, #196]	; (8000b98 <MX_TIM1_Init+0x150>)
 8000ad2:	f003 f989 	bl	8003de8 <HAL_TIM_ConfigClockSource>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000adc:	f7ff ff44 	bl	8000968 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ae0:	482d      	ldr	r0, [pc, #180]	; (8000b98 <MX_TIM1_Init+0x150>)
 8000ae2:	f002 fd4b 	bl	800357c <HAL_TIM_PWM_Init>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000aec:	f7ff ff3c 	bl	8000968 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000af0:	2300      	movs	r3, #0
 8000af2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000af4:	2300      	movs	r3, #0
 8000af6:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000af8:	2300      	movs	r3, #0
 8000afa:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000afc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b00:	4619      	mov	r1, r3
 8000b02:	4825      	ldr	r0, [pc, #148]	; (8000b98 <MX_TIM1_Init+0x150>)
 8000b04:	f003 fe20 	bl	8004748 <HAL_TIMEx_MasterConfigSynchronization>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000b0e:	f7ff ff2b 	bl	8000968 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b12:	2360      	movs	r3, #96	; 0x60
 8000b14:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000b16:	2300      	movs	r3, #0
 8000b18:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b22:	2300      	movs	r3, #0
 8000b24:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b26:	2300      	movs	r3, #0
 8000b28:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b2e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b32:	2200      	movs	r2, #0
 8000b34:	4619      	mov	r1, r3
 8000b36:	4818      	ldr	r0, [pc, #96]	; (8000b98 <MX_TIM1_Init+0x150>)
 8000b38:	f003 f842 	bl	8003bc0 <HAL_TIM_PWM_ConfigChannel>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000b42:	f7ff ff11 	bl	8000968 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b46:	2300      	movs	r3, #0
 8000b48:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b52:	2300      	movs	r3, #0
 8000b54:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b56:	2300      	movs	r3, #0
 8000b58:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b5e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b64:	2300      	movs	r3, #0
 8000b66:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b68:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000b6c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b72:	2300      	movs	r3, #0
 8000b74:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b76:	1d3b      	adds	r3, r7, #4
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4807      	ldr	r0, [pc, #28]	; (8000b98 <MX_TIM1_Init+0x150>)
 8000b7c:	f003 fe72 	bl	8004864 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000b86:	f7ff feef 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b8a:	4803      	ldr	r0, [pc, #12]	; (8000b98 <MX_TIM1_Init+0x150>)
 8000b8c:	f000 f94a 	bl	8000e24 <HAL_TIM_MspPostInit>

}
 8000b90:	bf00      	nop
 8000b92:	3768      	adds	r7, #104	; 0x68
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	20000110 	.word	0x20000110
 8000b9c:	40010000 	.word	0x40010000

08000ba0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08c      	sub	sp, #48	; 0x30
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000ba6:	f107 030c 	add.w	r3, r7, #12
 8000baa:	2224      	movs	r2, #36	; 0x24
 8000bac:	2100      	movs	r1, #0
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f004 fe50 	bl	8005854 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb4:	463b      	mov	r3, r7
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	605a      	str	r2, [r3, #4]
 8000bbc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000bbe:	4b21      	ldr	r3, [pc, #132]	; (8000c44 <MX_TIM3_Init+0xa4>)
 8000bc0:	4a21      	ldr	r2, [pc, #132]	; (8000c48 <MX_TIM3_Init+0xa8>)
 8000bc2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000bc4:	4b1f      	ldr	r3, [pc, #124]	; (8000c44 <MX_TIM3_Init+0xa4>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bca:	4b1e      	ldr	r3, [pc, #120]	; (8000c44 <MX_TIM3_Init+0xa4>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000bd0:	4b1c      	ldr	r3, [pc, #112]	; (8000c44 <MX_TIM3_Init+0xa4>)
 8000bd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bd6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bd8:	4b1a      	ldr	r3, [pc, #104]	; (8000c44 <MX_TIM3_Init+0xa4>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000bde:	4b19      	ldr	r3, [pc, #100]	; (8000c44 <MX_TIM3_Init+0xa4>)
 8000be0:	2280      	movs	r2, #128	; 0x80
 8000be2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000be4:	2301      	movs	r3, #1
 8000be6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000be8:	2300      	movs	r3, #0
 8000bea:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000bec:	2301      	movs	r3, #1
 8000bee:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000bf4:	230a      	movs	r3, #10
 8000bf6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c00:	2300      	movs	r3, #0
 8000c02:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000c04:	2300      	movs	r3, #0
 8000c06:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000c08:	f107 030c 	add.w	r3, r7, #12
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	480d      	ldr	r0, [pc, #52]	; (8000c44 <MX_TIM3_Init+0xa4>)
 8000c10:	f002 fe10 	bl	8003834 <HAL_TIM_Encoder_Init>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000c1a:	f7ff fea5 	bl	8000968 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c22:	2300      	movs	r3, #0
 8000c24:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c26:	463b      	mov	r3, r7
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4806      	ldr	r0, [pc, #24]	; (8000c44 <MX_TIM3_Init+0xa4>)
 8000c2c:	f003 fd8c 	bl	8004748 <HAL_TIMEx_MasterConfigSynchronization>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000c36:	f7ff fe97 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c3a:	bf00      	nop
 8000c3c:	3730      	adds	r7, #48	; 0x30
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	200000c4 	.word	0x200000c4
 8000c48:	40000400 	.word	0x40000400

08000c4c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b088      	sub	sp, #32
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c52:	f107 0310 	add.w	r3, r7, #16
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	605a      	str	r2, [r3, #4]
 8000c5c:	609a      	str	r2, [r3, #8]
 8000c5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c60:	1d3b      	adds	r3, r7, #4
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	605a      	str	r2, [r3, #4]
 8000c68:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c6a:	4b1e      	ldr	r3, [pc, #120]	; (8000ce4 <MX_TIM4_Init+0x98>)
 8000c6c:	4a1e      	ldr	r2, [pc, #120]	; (8000ce8 <MX_TIM4_Init+0x9c>)
 8000c6e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7199;
 8000c70:	4b1c      	ldr	r3, [pc, #112]	; (8000ce4 <MX_TIM4_Init+0x98>)
 8000c72:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000c76:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c78:	4b1a      	ldr	r3, [pc, #104]	; (8000ce4 <MX_TIM4_Init+0x98>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8000c7e:	4b19      	ldr	r3, [pc, #100]	; (8000ce4 <MX_TIM4_Init+0x98>)
 8000c80:	f242 720f 	movw	r2, #9999	; 0x270f
 8000c84:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c86:	4b17      	ldr	r3, [pc, #92]	; (8000ce4 <MX_TIM4_Init+0x98>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c8c:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <MX_TIM4_Init+0x98>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000c92:	4814      	ldr	r0, [pc, #80]	; (8000ce4 <MX_TIM4_Init+0x98>)
 8000c94:	f002 fba2 	bl	80033dc <HAL_TIM_Base_Init>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8000c9e:	f7ff fe63 	bl	8000968 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ca2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ca6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000ca8:	f107 0310 	add.w	r3, r7, #16
 8000cac:	4619      	mov	r1, r3
 8000cae:	480d      	ldr	r0, [pc, #52]	; (8000ce4 <MX_TIM4_Init+0x98>)
 8000cb0:	f003 f89a 	bl	8003de8 <HAL_TIM_ConfigClockSource>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8000cba:	f7ff fe55 	bl	8000968 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000cc6:	1d3b      	adds	r3, r7, #4
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4806      	ldr	r0, [pc, #24]	; (8000ce4 <MX_TIM4_Init+0x98>)
 8000ccc:	f003 fd3c 	bl	8004748 <HAL_TIMEx_MasterConfigSynchronization>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8000cd6:	f7ff fe47 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000cda:	bf00      	nop
 8000cdc:	3720      	adds	r7, #32
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	20000078 	.word	0x20000078
 8000ce8:	40000800 	.word	0x40000800

08000cec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a16      	ldr	r2, [pc, #88]	; (8000d54 <HAL_TIM_Base_MspInit+0x68>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d10c      	bne.n	8000d18 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cfe:	4b16      	ldr	r3, [pc, #88]	; (8000d58 <HAL_TIM_Base_MspInit+0x6c>)
 8000d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d02:	4a15      	ldr	r2, [pc, #84]	; (8000d58 <HAL_TIM_Base_MspInit+0x6c>)
 8000d04:	f043 0301 	orr.w	r3, r3, #1
 8000d08:	6453      	str	r3, [r2, #68]	; 0x44
 8000d0a:	4b13      	ldr	r3, [pc, #76]	; (8000d58 <HAL_TIM_Base_MspInit+0x6c>)
 8000d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000d16:	e018      	b.n	8000d4a <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM4)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a0f      	ldr	r2, [pc, #60]	; (8000d5c <HAL_TIM_Base_MspInit+0x70>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d113      	bne.n	8000d4a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000d22:	4b0d      	ldr	r3, [pc, #52]	; (8000d58 <HAL_TIM_Base_MspInit+0x6c>)
 8000d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d26:	4a0c      	ldr	r2, [pc, #48]	; (8000d58 <HAL_TIM_Base_MspInit+0x6c>)
 8000d28:	f043 0304 	orr.w	r3, r3, #4
 8000d2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d2e:	4b0a      	ldr	r3, [pc, #40]	; (8000d58 <HAL_TIM_Base_MspInit+0x6c>)
 8000d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d32:	f003 0304 	and.w	r3, r3, #4
 8000d36:	60bb      	str	r3, [r7, #8]
 8000d38:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 3, 0);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2103      	movs	r1, #3
 8000d3e:	201e      	movs	r0, #30
 8000d40:	f000 ff61 	bl	8001c06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000d44:	201e      	movs	r0, #30
 8000d46:	f000 ff7a 	bl	8001c3e <HAL_NVIC_EnableIRQ>
}
 8000d4a:	bf00      	nop
 8000d4c:	3710      	adds	r7, #16
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40010000 	.word	0x40010000
 8000d58:	40023800 	.word	0x40023800
 8000d5c:	40000800 	.word	0x40000800

08000d60 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b08a      	sub	sp, #40	; 0x28
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d68:	f107 0314 	add.w	r3, r7, #20
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
 8000d76:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a25      	ldr	r2, [pc, #148]	; (8000e14 <HAL_TIM_Encoder_MspInit+0xb4>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d143      	bne.n	8000e0a <HAL_TIM_Encoder_MspInit+0xaa>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d82:	4b25      	ldr	r3, [pc, #148]	; (8000e18 <HAL_TIM_Encoder_MspInit+0xb8>)
 8000d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d86:	4a24      	ldr	r2, [pc, #144]	; (8000e18 <HAL_TIM_Encoder_MspInit+0xb8>)
 8000d88:	f043 0302 	orr.w	r3, r3, #2
 8000d8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d8e:	4b22      	ldr	r3, [pc, #136]	; (8000e18 <HAL_TIM_Encoder_MspInit+0xb8>)
 8000d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d92:	f003 0302 	and.w	r3, r3, #2
 8000d96:	613b      	str	r3, [r7, #16]
 8000d98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9a:	4b1f      	ldr	r3, [pc, #124]	; (8000e18 <HAL_TIM_Encoder_MspInit+0xb8>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	4a1e      	ldr	r2, [pc, #120]	; (8000e18 <HAL_TIM_Encoder_MspInit+0xb8>)
 8000da0:	f043 0301 	orr.w	r3, r3, #1
 8000da4:	6313      	str	r3, [r2, #48]	; 0x30
 8000da6:	4b1c      	ldr	r3, [pc, #112]	; (8000e18 <HAL_TIM_Encoder_MspInit+0xb8>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000db2:	4b19      	ldr	r3, [pc, #100]	; (8000e18 <HAL_TIM_Encoder_MspInit+0xb8>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	4a18      	ldr	r2, [pc, #96]	; (8000e18 <HAL_TIM_Encoder_MspInit+0xb8>)
 8000db8:	f043 0304 	orr.w	r3, r3, #4
 8000dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dbe:	4b16      	ldr	r3, [pc, #88]	; (8000e18 <HAL_TIM_Encoder_MspInit+0xb8>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	f003 0304 	and.w	r3, r3, #4
 8000dc6:	60bb      	str	r3, [r7, #8]
 8000dc8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000dca:	2340      	movs	r3, #64	; 0x40
 8000dcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dde:	f107 0314 	add.w	r3, r7, #20
 8000de2:	4619      	mov	r1, r3
 8000de4:	480d      	ldr	r0, [pc, #52]	; (8000e1c <HAL_TIM_Encoder_MspInit+0xbc>)
 8000de6:	f000 ff45 	bl	8001c74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000dea:	2380      	movs	r3, #128	; 0x80
 8000dec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dee:	2302      	movs	r3, #2
 8000df0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df6:	2300      	movs	r3, #0
 8000df8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dfe:	f107 0314 	add.w	r3, r7, #20
 8000e02:	4619      	mov	r1, r3
 8000e04:	4806      	ldr	r0, [pc, #24]	; (8000e20 <HAL_TIM_Encoder_MspInit+0xc0>)
 8000e06:	f000 ff35 	bl	8001c74 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000e0a:	bf00      	nop
 8000e0c:	3728      	adds	r7, #40	; 0x28
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40000400 	.word	0x40000400
 8000e18:	40023800 	.word	0x40023800
 8000e1c:	40020000 	.word	0x40020000
 8000e20:	40020800 	.word	0x40020800

08000e24 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b088      	sub	sp, #32
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2c:	f107 030c 	add.w	r3, r7, #12
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]
 8000e38:	60da      	str	r2, [r3, #12]
 8000e3a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a11      	ldr	r2, [pc, #68]	; (8000e88 <HAL_TIM_MspPostInit+0x64>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d11c      	bne.n	8000e80 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e46:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <HAL_TIM_MspPostInit+0x68>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	4a10      	ldr	r2, [pc, #64]	; (8000e8c <HAL_TIM_MspPostInit+0x68>)
 8000e4c:	f043 0310 	orr.w	r3, r3, #16
 8000e50:	6313      	str	r3, [r2, #48]	; 0x30
 8000e52:	4b0e      	ldr	r3, [pc, #56]	; (8000e8c <HAL_TIM_MspPostInit+0x68>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	f003 0310 	and.w	r3, r3, #16
 8000e5a:	60bb      	str	r3, [r7, #8]
 8000e5c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e62:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e64:	2302      	movs	r3, #2
 8000e66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000e70:	2301      	movs	r3, #1
 8000e72:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e74:	f107 030c 	add.w	r3, r7, #12
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4805      	ldr	r0, [pc, #20]	; (8000e90 <HAL_TIM_MspPostInit+0x6c>)
 8000e7c:	f000 fefa 	bl	8001c74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000e80:	bf00      	nop
 8000e82:	3720      	adds	r7, #32
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40010000 	.word	0x40010000
 8000e8c:	40023800 	.word	0x40023800
 8000e90:	40021000 	.word	0x40021000

08000e94 <SetPwmValue>:
  /* USER CODE END TIM3_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void SetPwmValue(uint32_t value){
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, value);
 8000e9c:	4b04      	ldr	r3, [pc, #16]	; (8000eb0 <SetPwmValue+0x1c>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	687a      	ldr	r2, [r7, #4]
 8000ea2:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000ea4:	bf00      	nop
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	20000110 	.word	0x20000110

08000eb4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM4) {
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a0e      	ldr	r2, [pc, #56]	; (8000efc <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d115      	bne.n	8000ef2 <HAL_TIM_PeriodElapsedCallback+0x3e>
		HAL_ADC_Start(&hadc1);
 8000ec6:	480e      	ldr	r0, [pc, #56]	; (8000f00 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000ec8:	f000 fa0c 	bl	80012e4 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000ecc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ed0:	480b      	ldr	r0, [pc, #44]	; (8000f00 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000ed2:	f000 fad5 	bl	8001480 <HAL_ADC_PollForConversion>
		ADC_Value = HAL_ADC_GetValue(&hadc1);
 8000ed6:	480a      	ldr	r0, [pc, #40]	; (8000f00 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000ed8:	f000 fb5d 	bl	8001596 <HAL_ADC_GetValue>
 8000edc:	4603      	mov	r3, r0
 8000ede:	4a09      	ldr	r2, [pc, #36]	; (8000f04 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000ee0:	6013      	str	r3, [r2, #0]
		HAL_Delay(100);
 8000ee2:	2064      	movs	r0, #100	; 0x64
 8000ee4:	f000 f996 	bl	8001214 <HAL_Delay>
		SetPwmValue(pulseWidth);
 8000ee8:	4b07      	ldr	r3, [pc, #28]	; (8000f08 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff ffd1 	bl	8000e94 <SetPwmValue>
	}
}
 8000ef2:	bf00      	nop
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40000800 	.word	0x40000800
 8000f00:	20000030 	.word	0x20000030
 8000f04:	20000028 	.word	0x20000028
 8000f08:	2000002c 	.word	0x2000002c

08000f0c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f10:	4b14      	ldr	r3, [pc, #80]	; (8000f64 <MX_USART3_UART_Init+0x58>)
 8000f12:	4a15      	ldr	r2, [pc, #84]	; (8000f68 <MX_USART3_UART_Init+0x5c>)
 8000f14:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f16:	4b13      	ldr	r3, [pc, #76]	; (8000f64 <MX_USART3_UART_Init+0x58>)
 8000f18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f1c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f1e:	4b11      	ldr	r3, [pc, #68]	; (8000f64 <MX_USART3_UART_Init+0x58>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f24:	4b0f      	ldr	r3, [pc, #60]	; (8000f64 <MX_USART3_UART_Init+0x58>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f2a:	4b0e      	ldr	r3, [pc, #56]	; (8000f64 <MX_USART3_UART_Init+0x58>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f30:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <MX_USART3_UART_Init+0x58>)
 8000f32:	220c      	movs	r2, #12
 8000f34:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f36:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <MX_USART3_UART_Init+0x58>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f3c:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <MX_USART3_UART_Init+0x58>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f42:	4b08      	ldr	r3, [pc, #32]	; (8000f64 <MX_USART3_UART_Init+0x58>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f48:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <MX_USART3_UART_Init+0x58>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f4e:	4805      	ldr	r0, [pc, #20]	; (8000f64 <MX_USART3_UART_Init+0x58>)
 8000f50:	f003 fd24 	bl	800499c <HAL_UART_Init>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000f5a:	f7ff fd05 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	2000015c 	.word	0x2000015c
 8000f68:	40004800 	.word	0x40004800

08000f6c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08a      	sub	sp, #40	; 0x28
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f74:	f107 0314 	add.w	r3, r7, #20
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]
 8000f82:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a17      	ldr	r2, [pc, #92]	; (8000fe8 <HAL_UART_MspInit+0x7c>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d128      	bne.n	8000fe0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f8e:	4b17      	ldr	r3, [pc, #92]	; (8000fec <HAL_UART_MspInit+0x80>)
 8000f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f92:	4a16      	ldr	r2, [pc, #88]	; (8000fec <HAL_UART_MspInit+0x80>)
 8000f94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f98:	6413      	str	r3, [r2, #64]	; 0x40
 8000f9a:	4b14      	ldr	r3, [pc, #80]	; (8000fec <HAL_UART_MspInit+0x80>)
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fa2:	613b      	str	r3, [r7, #16]
 8000fa4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fa6:	4b11      	ldr	r3, [pc, #68]	; (8000fec <HAL_UART_MspInit+0x80>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	4a10      	ldr	r2, [pc, #64]	; (8000fec <HAL_UART_MspInit+0x80>)
 8000fac:	f043 0308 	orr.w	r3, r3, #8
 8000fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <HAL_UART_MspInit+0x80>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	f003 0308 	and.w	r3, r3, #8
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000fbe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000fc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fd0:	2307      	movs	r3, #7
 8000fd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fd4:	f107 0314 	add.w	r3, r7, #20
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4805      	ldr	r0, [pc, #20]	; (8000ff0 <HAL_UART_MspInit+0x84>)
 8000fdc:	f000 fe4a 	bl	8001c74 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000fe0:	bf00      	nop
 8000fe2:	3728      	adds	r7, #40	; 0x28
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40004800 	.word	0x40004800
 8000fec:	40023800 	.word	0x40023800
 8000ff0:	40020c00 	.word	0x40020c00

08000ff4 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000ff8:	4b14      	ldr	r3, [pc, #80]	; (800104c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ffa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000ffe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001000:	4b12      	ldr	r3, [pc, #72]	; (800104c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001002:	2206      	movs	r2, #6
 8001004:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001006:	4b11      	ldr	r3, [pc, #68]	; (800104c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001008:	2202      	movs	r2, #2
 800100a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800100c:	4b0f      	ldr	r3, [pc, #60]	; (800104c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800100e:	2200      	movs	r2, #0
 8001010:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001012:	4b0e      	ldr	r3, [pc, #56]	; (800104c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001014:	2202      	movs	r2, #2
 8001016:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001018:	4b0c      	ldr	r3, [pc, #48]	; (800104c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800101a:	2201      	movs	r2, #1
 800101c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800101e:	4b0b      	ldr	r3, [pc, #44]	; (800104c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001020:	2200      	movs	r2, #0
 8001022:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001024:	4b09      	ldr	r3, [pc, #36]	; (800104c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001026:	2200      	movs	r2, #0
 8001028:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800102a:	4b08      	ldr	r3, [pc, #32]	; (800104c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800102c:	2201      	movs	r2, #1
 800102e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001032:	2200      	movs	r2, #0
 8001034:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001036:	4805      	ldr	r0, [pc, #20]	; (800104c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001038:	f000 ffe1 	bl	8001ffe <HAL_PCD_Init>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001042:	f7ff fc91 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	200001e0 	.word	0x200001e0

08001050 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b08a      	sub	sp, #40	; 0x28
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001058:	f107 0314 	add.w	r3, r7, #20
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
 8001066:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001070:	d141      	bne.n	80010f6 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001072:	4b23      	ldr	r3, [pc, #140]	; (8001100 <HAL_PCD_MspInit+0xb0>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	4a22      	ldr	r2, [pc, #136]	; (8001100 <HAL_PCD_MspInit+0xb0>)
 8001078:	f043 0301 	orr.w	r3, r3, #1
 800107c:	6313      	str	r3, [r2, #48]	; 0x30
 800107e:	4b20      	ldr	r3, [pc, #128]	; (8001100 <HAL_PCD_MspInit+0xb0>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	f003 0301 	and.w	r3, r3, #1
 8001086:	613b      	str	r3, [r7, #16]
 8001088:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800108a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800108e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001090:	2302      	movs	r3, #2
 8001092:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001094:	2300      	movs	r3, #0
 8001096:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001098:	2303      	movs	r3, #3
 800109a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800109c:	230a      	movs	r3, #10
 800109e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a0:	f107 0314 	add.w	r3, r7, #20
 80010a4:	4619      	mov	r1, r3
 80010a6:	4817      	ldr	r0, [pc, #92]	; (8001104 <HAL_PCD_MspInit+0xb4>)
 80010a8:	f000 fde4 	bl	8001c74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80010ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010b2:	2300      	movs	r3, #0
 80010b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80010ba:	f107 0314 	add.w	r3, r7, #20
 80010be:	4619      	mov	r1, r3
 80010c0:	4810      	ldr	r0, [pc, #64]	; (8001104 <HAL_PCD_MspInit+0xb4>)
 80010c2:	f000 fdd7 	bl	8001c74 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80010c6:	4b0e      	ldr	r3, [pc, #56]	; (8001100 <HAL_PCD_MspInit+0xb0>)
 80010c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010ca:	4a0d      	ldr	r2, [pc, #52]	; (8001100 <HAL_PCD_MspInit+0xb0>)
 80010cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010d0:	6353      	str	r3, [r2, #52]	; 0x34
 80010d2:	4b0b      	ldr	r3, [pc, #44]	; (8001100 <HAL_PCD_MspInit+0xb0>)
 80010d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	4b08      	ldr	r3, [pc, #32]	; (8001100 <HAL_PCD_MspInit+0xb0>)
 80010e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e2:	4a07      	ldr	r2, [pc, #28]	; (8001100 <HAL_PCD_MspInit+0xb0>)
 80010e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010e8:	6453      	str	r3, [r2, #68]	; 0x44
 80010ea:	4b05      	ldr	r3, [pc, #20]	; (8001100 <HAL_PCD_MspInit+0xb0>)
 80010ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010f2:	60bb      	str	r3, [r7, #8]
 80010f4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80010f6:	bf00      	nop
 80010f8:	3728      	adds	r7, #40	; 0x28
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40023800 	.word	0x40023800
 8001104:	40020000 	.word	0x40020000

08001108 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001108:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001140 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800110c:	480d      	ldr	r0, [pc, #52]	; (8001144 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800110e:	490e      	ldr	r1, [pc, #56]	; (8001148 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001110:	4a0e      	ldr	r2, [pc, #56]	; (800114c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001112:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001114:	e002      	b.n	800111c <LoopCopyDataInit>

08001116 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001116:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001118:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800111a:	3304      	adds	r3, #4

0800111c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800111c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800111e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001120:	d3f9      	bcc.n	8001116 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001122:	4a0b      	ldr	r2, [pc, #44]	; (8001150 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001124:	4c0b      	ldr	r4, [pc, #44]	; (8001154 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001126:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001128:	e001      	b.n	800112e <LoopFillZerobss>

0800112a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800112a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800112c:	3204      	adds	r2, #4

0800112e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800112e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001130:	d3fb      	bcc.n	800112a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001132:	f7ff fc77 	bl	8000a24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001136:	f004 fb69 	bl	800580c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800113a:	f7ff fb65 	bl	8000808 <main>
  bx  lr    
 800113e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001140:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001144:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001148:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800114c:	080058a4 	.word	0x080058a4
  ldr r2, =_sbss
 8001150:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001154:	200005e8 	.word	0x200005e8

08001158 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001158:	e7fe      	b.n	8001158 <ADC_IRQHandler>

0800115a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800115e:	2003      	movs	r0, #3
 8001160:	f000 fd46 	bl	8001bf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001164:	2000      	movs	r0, #0
 8001166:	f000 f805 	bl	8001174 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800116a:	f7ff fc03 	bl	8000974 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800116e:	2300      	movs	r3, #0
}
 8001170:	4618      	mov	r0, r3
 8001172:	bd80      	pop	{r7, pc}

08001174 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800117c:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <HAL_InitTick+0x54>)
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	4b12      	ldr	r3, [pc, #72]	; (80011cc <HAL_InitTick+0x58>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	4619      	mov	r1, r3
 8001186:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800118a:	fbb3 f3f1 	udiv	r3, r3, r1
 800118e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001192:	4618      	mov	r0, r3
 8001194:	f000 fd61 	bl	8001c5a <HAL_SYSTICK_Config>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e00e      	b.n	80011c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2b0f      	cmp	r3, #15
 80011a6:	d80a      	bhi.n	80011be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011a8:	2200      	movs	r2, #0
 80011aa:	6879      	ldr	r1, [r7, #4]
 80011ac:	f04f 30ff 	mov.w	r0, #4294967295
 80011b0:	f000 fd29 	bl	8001c06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011b4:	4a06      	ldr	r2, [pc, #24]	; (80011d0 <HAL_InitTick+0x5c>)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ba:	2300      	movs	r3, #0
 80011bc:	e000      	b.n	80011c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20000000 	.word	0x20000000
 80011cc:	20000008 	.word	0x20000008
 80011d0:	20000004 	.word	0x20000004

080011d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011d8:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <HAL_IncTick+0x20>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	461a      	mov	r2, r3
 80011de:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <HAL_IncTick+0x24>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4413      	add	r3, r2
 80011e4:	4a04      	ldr	r2, [pc, #16]	; (80011f8 <HAL_IncTick+0x24>)
 80011e6:	6013      	str	r3, [r2, #0]
}
 80011e8:	bf00      	nop
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	20000008 	.word	0x20000008
 80011f8:	200005e4 	.word	0x200005e4

080011fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001200:	4b03      	ldr	r3, [pc, #12]	; (8001210 <HAL_GetTick+0x14>)
 8001202:	681b      	ldr	r3, [r3, #0]
}
 8001204:	4618      	mov	r0, r3
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	200005e4 	.word	0x200005e4

08001214 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800121c:	f7ff ffee 	bl	80011fc <HAL_GetTick>
 8001220:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800122c:	d005      	beq.n	800123a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800122e:	4b0a      	ldr	r3, [pc, #40]	; (8001258 <HAL_Delay+0x44>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	461a      	mov	r2, r3
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	4413      	add	r3, r2
 8001238:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800123a:	bf00      	nop
 800123c:	f7ff ffde 	bl	80011fc <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	68fa      	ldr	r2, [r7, #12]
 8001248:	429a      	cmp	r2, r3
 800124a:	d8f7      	bhi.n	800123c <HAL_Delay+0x28>
  {
  }
}
 800124c:	bf00      	nop
 800124e:	bf00      	nop
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20000008 	.word	0x20000008

0800125c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001264:	2300      	movs	r3, #0
 8001266:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d101      	bne.n	8001272 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e031      	b.n	80012d6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001276:	2b00      	cmp	r3, #0
 8001278:	d109      	bne.n	800128e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f7ff f992 	bl	80005a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2200      	movs	r2, #0
 8001284:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2200      	movs	r2, #0
 800128a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	f003 0310 	and.w	r3, r3, #16
 8001296:	2b00      	cmp	r3, #0
 8001298:	d116      	bne.n	80012c8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800129e:	4b10      	ldr	r3, [pc, #64]	; (80012e0 <HAL_ADC_Init+0x84>)
 80012a0:	4013      	ands	r3, r2
 80012a2:	f043 0202 	orr.w	r2, r3, #2
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f000 fad6 	bl	800185c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2200      	movs	r2, #0
 80012b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ba:	f023 0303 	bic.w	r3, r3, #3
 80012be:	f043 0201 	orr.w	r2, r3, #1
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	641a      	str	r2, [r3, #64]	; 0x40
 80012c6:	e001      	b.n	80012cc <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80012c8:	2301      	movs	r3, #1
 80012ca:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2200      	movs	r2, #0
 80012d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80012d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	ffffeefd 	.word	0xffffeefd

080012e4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d101      	bne.n	80012fe <HAL_ADC_Start+0x1a>
 80012fa:	2302      	movs	r3, #2
 80012fc:	e0ad      	b.n	800145a <HAL_ADC_Start+0x176>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2201      	movs	r2, #1
 8001302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	f003 0301 	and.w	r3, r3, #1
 8001310:	2b01      	cmp	r3, #1
 8001312:	d018      	beq.n	8001346 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	689a      	ldr	r2, [r3, #8]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f042 0201 	orr.w	r2, r2, #1
 8001322:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001324:	4b50      	ldr	r3, [pc, #320]	; (8001468 <HAL_ADC_Start+0x184>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a50      	ldr	r2, [pc, #320]	; (800146c <HAL_ADC_Start+0x188>)
 800132a:	fba2 2303 	umull	r2, r3, r2, r3
 800132e:	0c9a      	lsrs	r2, r3, #18
 8001330:	4613      	mov	r3, r2
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	4413      	add	r3, r2
 8001336:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001338:	e002      	b.n	8001340 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	3b01      	subs	r3, #1
 800133e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d1f9      	bne.n	800133a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	f003 0301 	and.w	r3, r3, #1
 8001350:	2b01      	cmp	r3, #1
 8001352:	d175      	bne.n	8001440 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001358:	4b45      	ldr	r3, [pc, #276]	; (8001470 <HAL_ADC_Start+0x18c>)
 800135a:	4013      	ands	r3, r2
 800135c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800136e:	2b00      	cmp	r3, #0
 8001370:	d007      	beq.n	8001382 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001376:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800137a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001386:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800138a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800138e:	d106      	bne.n	800139e <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001394:	f023 0206 	bic.w	r2, r3, #6
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	645a      	str	r2, [r3, #68]	; 0x44
 800139c:	e002      	b.n	80013a4 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2200      	movs	r2, #0
 80013a2:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2200      	movs	r2, #0
 80013a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80013b4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80013b6:	4b2f      	ldr	r3, [pc, #188]	; (8001474 <HAL_ADC_Start+0x190>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f003 031f 	and.w	r3, r3, #31
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d10f      	bne.n	80013e2 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d143      	bne.n	8001458 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	689a      	ldr	r2, [r3, #8]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	e03a      	b.n	8001458 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a24      	ldr	r2, [pc, #144]	; (8001478 <HAL_ADC_Start+0x194>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d10e      	bne.n	800140a <HAL_ADC_Start+0x126>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d107      	bne.n	800140a <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	689a      	ldr	r2, [r3, #8]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001408:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800140a:	4b1a      	ldr	r3, [pc, #104]	; (8001474 <HAL_ADC_Start+0x190>)
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f003 0310 	and.w	r3, r3, #16
 8001412:	2b00      	cmp	r3, #0
 8001414:	d120      	bne.n	8001458 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a18      	ldr	r2, [pc, #96]	; (800147c <HAL_ADC_Start+0x198>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d11b      	bne.n	8001458 <HAL_ADC_Start+0x174>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d114      	bne.n	8001458 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	689a      	ldr	r2, [r3, #8]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800143c:	609a      	str	r2, [r3, #8]
 800143e:	e00b      	b.n	8001458 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001444:	f043 0210 	orr.w	r2, r3, #16
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001450:	f043 0201 	orr.w	r2, r3, #1
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001458:	2300      	movs	r3, #0
}
 800145a:	4618      	mov	r0, r3
 800145c:	3714      	adds	r7, #20
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	20000000 	.word	0x20000000
 800146c:	431bde83 	.word	0x431bde83
 8001470:	fffff8fe 	.word	0xfffff8fe
 8001474:	40012300 	.word	0x40012300
 8001478:	40012000 	.word	0x40012000
 800147c:	40012200 	.word	0x40012200

08001480 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800148a:	2300      	movs	r3, #0
 800148c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001498:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800149c:	d113      	bne.n	80014c6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80014a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014ac:	d10b      	bne.n	80014c6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	f043 0220 	orr.w	r2, r3, #32
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2200      	movs	r2, #0
 80014be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e063      	b.n	800158e <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80014c6:	f7ff fe99 	bl	80011fc <HAL_GetTick>
 80014ca:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80014cc:	e021      	b.n	8001512 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014d4:	d01d      	beq.n	8001512 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d007      	beq.n	80014ec <HAL_ADC_PollForConversion+0x6c>
 80014dc:	f7ff fe8e 	bl	80011fc <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	683a      	ldr	r2, [r7, #0]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d212      	bcs.n	8001512 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0302 	and.w	r3, r3, #2
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d00b      	beq.n	8001512 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fe:	f043 0204 	orr.w	r2, r3, #4
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2200      	movs	r2, #0
 800150a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e03d      	b.n	800158e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 0302 	and.w	r3, r3, #2
 800151c:	2b02      	cmp	r3, #2
 800151e:	d1d6      	bne.n	80014ce <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f06f 0212 	mvn.w	r2, #18
 8001528:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001540:	2b00      	cmp	r3, #0
 8001542:	d123      	bne.n	800158c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001548:	2b00      	cmp	r3, #0
 800154a:	d11f      	bne.n	800158c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001552:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001556:	2b00      	cmp	r3, #0
 8001558:	d006      	beq.n	8001568 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001564:	2b00      	cmp	r3, #0
 8001566:	d111      	bne.n	800158c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001578:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800157c:	2b00      	cmp	r3, #0
 800157e:	d105      	bne.n	800158c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001584:	f043 0201 	orr.w	r2, r3, #1
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	3710      	adds	r7, #16
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001596:	b480      	push	{r7}
 8001598:	b083      	sub	sp, #12
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80015ba:	2300      	movs	r3, #0
 80015bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d101      	bne.n	80015cc <HAL_ADC_ConfigChannel+0x1c>
 80015c8:	2302      	movs	r3, #2
 80015ca:	e136      	b.n	800183a <HAL_ADC_ConfigChannel+0x28a>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2201      	movs	r2, #1
 80015d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2b09      	cmp	r3, #9
 80015da:	d93a      	bls.n	8001652 <HAL_ADC_ConfigChannel+0xa2>
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80015e4:	d035      	beq.n	8001652 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	68d9      	ldr	r1, [r3, #12]
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	461a      	mov	r2, r3
 80015f4:	4613      	mov	r3, r2
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	4413      	add	r3, r2
 80015fa:	3b1e      	subs	r3, #30
 80015fc:	2207      	movs	r2, #7
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	43da      	mvns	r2, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	400a      	ands	r2, r1
 800160a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a8d      	ldr	r2, [pc, #564]	; (8001848 <HAL_ADC_ConfigChannel+0x298>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d10a      	bne.n	800162c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	68d9      	ldr	r1, [r3, #12]
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	061a      	lsls	r2, r3, #24
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	430a      	orrs	r2, r1
 8001628:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800162a:	e035      	b.n	8001698 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	68d9      	ldr	r1, [r3, #12]
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	689a      	ldr	r2, [r3, #8]
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	b29b      	uxth	r3, r3
 800163c:	4618      	mov	r0, r3
 800163e:	4603      	mov	r3, r0
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	4403      	add	r3, r0
 8001644:	3b1e      	subs	r3, #30
 8001646:	409a      	lsls	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	430a      	orrs	r2, r1
 800164e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001650:	e022      	b.n	8001698 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	6919      	ldr	r1, [r3, #16]
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	b29b      	uxth	r3, r3
 800165e:	461a      	mov	r2, r3
 8001660:	4613      	mov	r3, r2
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	4413      	add	r3, r2
 8001666:	2207      	movs	r2, #7
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	43da      	mvns	r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	400a      	ands	r2, r1
 8001674:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	6919      	ldr	r1, [r3, #16]
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	689a      	ldr	r2, [r3, #8]
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	b29b      	uxth	r3, r3
 8001686:	4618      	mov	r0, r3
 8001688:	4603      	mov	r3, r0
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	4403      	add	r3, r0
 800168e:	409a      	lsls	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	430a      	orrs	r2, r1
 8001696:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	2b06      	cmp	r3, #6
 800169e:	d824      	bhi.n	80016ea <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685a      	ldr	r2, [r3, #4]
 80016aa:	4613      	mov	r3, r2
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	4413      	add	r3, r2
 80016b0:	3b05      	subs	r3, #5
 80016b2:	221f      	movs	r2, #31
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	43da      	mvns	r2, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	400a      	ands	r2, r1
 80016c0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	4618      	mov	r0, r3
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685a      	ldr	r2, [r3, #4]
 80016d4:	4613      	mov	r3, r2
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	4413      	add	r3, r2
 80016da:	3b05      	subs	r3, #5
 80016dc:	fa00 f203 	lsl.w	r2, r0, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	430a      	orrs	r2, r1
 80016e6:	635a      	str	r2, [r3, #52]	; 0x34
 80016e8:	e04c      	b.n	8001784 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	2b0c      	cmp	r3, #12
 80016f0:	d824      	bhi.n	800173c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685a      	ldr	r2, [r3, #4]
 80016fc:	4613      	mov	r3, r2
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	4413      	add	r3, r2
 8001702:	3b23      	subs	r3, #35	; 0x23
 8001704:	221f      	movs	r2, #31
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	43da      	mvns	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	400a      	ands	r2, r1
 8001712:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	b29b      	uxth	r3, r3
 8001720:	4618      	mov	r0, r3
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	685a      	ldr	r2, [r3, #4]
 8001726:	4613      	mov	r3, r2
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	4413      	add	r3, r2
 800172c:	3b23      	subs	r3, #35	; 0x23
 800172e:	fa00 f203 	lsl.w	r2, r0, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	430a      	orrs	r2, r1
 8001738:	631a      	str	r2, [r3, #48]	; 0x30
 800173a:	e023      	b.n	8001784 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685a      	ldr	r2, [r3, #4]
 8001746:	4613      	mov	r3, r2
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	4413      	add	r3, r2
 800174c:	3b41      	subs	r3, #65	; 0x41
 800174e:	221f      	movs	r2, #31
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	43da      	mvns	r2, r3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	400a      	ands	r2, r1
 800175c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	b29b      	uxth	r3, r3
 800176a:	4618      	mov	r0, r3
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685a      	ldr	r2, [r3, #4]
 8001770:	4613      	mov	r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	4413      	add	r3, r2
 8001776:	3b41      	subs	r3, #65	; 0x41
 8001778:	fa00 f203 	lsl.w	r2, r0, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	430a      	orrs	r2, r1
 8001782:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a30      	ldr	r2, [pc, #192]	; (800184c <HAL_ADC_ConfigChannel+0x29c>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d10a      	bne.n	80017a4 <HAL_ADC_ConfigChannel+0x1f4>
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001796:	d105      	bne.n	80017a4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001798:	4b2d      	ldr	r3, [pc, #180]	; (8001850 <HAL_ADC_ConfigChannel+0x2a0>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	4a2c      	ldr	r2, [pc, #176]	; (8001850 <HAL_ADC_ConfigChannel+0x2a0>)
 800179e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80017a2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a28      	ldr	r2, [pc, #160]	; (800184c <HAL_ADC_ConfigChannel+0x29c>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d10f      	bne.n	80017ce <HAL_ADC_ConfigChannel+0x21e>
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	2b12      	cmp	r3, #18
 80017b4:	d10b      	bne.n	80017ce <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80017b6:	4b26      	ldr	r3, [pc, #152]	; (8001850 <HAL_ADC_ConfigChannel+0x2a0>)
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	4a25      	ldr	r2, [pc, #148]	; (8001850 <HAL_ADC_ConfigChannel+0x2a0>)
 80017bc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80017c0:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80017c2:	4b23      	ldr	r3, [pc, #140]	; (8001850 <HAL_ADC_ConfigChannel+0x2a0>)
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	4a22      	ldr	r2, [pc, #136]	; (8001850 <HAL_ADC_ConfigChannel+0x2a0>)
 80017c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017cc:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a1e      	ldr	r2, [pc, #120]	; (800184c <HAL_ADC_ConfigChannel+0x29c>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d12b      	bne.n	8001830 <HAL_ADC_ConfigChannel+0x280>
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a1a      	ldr	r2, [pc, #104]	; (8001848 <HAL_ADC_ConfigChannel+0x298>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d003      	beq.n	80017ea <HAL_ADC_ConfigChannel+0x23a>
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2b11      	cmp	r3, #17
 80017e8:	d122      	bne.n	8001830 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80017ea:	4b19      	ldr	r3, [pc, #100]	; (8001850 <HAL_ADC_ConfigChannel+0x2a0>)
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	4a18      	ldr	r2, [pc, #96]	; (8001850 <HAL_ADC_ConfigChannel+0x2a0>)
 80017f0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80017f4:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80017f6:	4b16      	ldr	r3, [pc, #88]	; (8001850 <HAL_ADC_ConfigChannel+0x2a0>)
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	4a15      	ldr	r2, [pc, #84]	; (8001850 <HAL_ADC_ConfigChannel+0x2a0>)
 80017fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001800:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a10      	ldr	r2, [pc, #64]	; (8001848 <HAL_ADC_ConfigChannel+0x298>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d111      	bne.n	8001830 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800180c:	4b11      	ldr	r3, [pc, #68]	; (8001854 <HAL_ADC_ConfigChannel+0x2a4>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a11      	ldr	r2, [pc, #68]	; (8001858 <HAL_ADC_ConfigChannel+0x2a8>)
 8001812:	fba2 2303 	umull	r2, r3, r2, r3
 8001816:	0c9a      	lsrs	r2, r3, #18
 8001818:	4613      	mov	r3, r2
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	4413      	add	r3, r2
 800181e:	005b      	lsls	r3, r3, #1
 8001820:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001822:	e002      	b.n	800182a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	3b01      	subs	r3, #1
 8001828:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d1f9      	bne.n	8001824 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3714      	adds	r7, #20
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	10000012 	.word	0x10000012
 800184c:	40012000 	.word	0x40012000
 8001850:	40012300 	.word	0x40012300
 8001854:	20000000 	.word	0x20000000
 8001858:	431bde83 	.word	0x431bde83

0800185c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001864:	4b78      	ldr	r3, [pc, #480]	; (8001a48 <ADC_Init+0x1ec>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	4a77      	ldr	r2, [pc, #476]	; (8001a48 <ADC_Init+0x1ec>)
 800186a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800186e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001870:	4b75      	ldr	r3, [pc, #468]	; (8001a48 <ADC_Init+0x1ec>)
 8001872:	685a      	ldr	r2, [r3, #4]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	4973      	ldr	r1, [pc, #460]	; (8001a48 <ADC_Init+0x1ec>)
 800187a:	4313      	orrs	r3, r2
 800187c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	685a      	ldr	r2, [r3, #4]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800188c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	6859      	ldr	r1, [r3, #4]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	691b      	ldr	r3, [r3, #16]
 8001898:	021a      	lsls	r2, r3, #8
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	430a      	orrs	r2, r1
 80018a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	685a      	ldr	r2, [r3, #4]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80018b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	6859      	ldr	r1, [r3, #4]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	689a      	ldr	r2, [r3, #8]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	430a      	orrs	r2, r1
 80018c2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	689a      	ldr	r2, [r3, #8]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	6899      	ldr	r1, [r3, #8]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	68da      	ldr	r2, [r3, #12]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	430a      	orrs	r2, r1
 80018e4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ea:	4a58      	ldr	r2, [pc, #352]	; (8001a4c <ADC_Init+0x1f0>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d022      	beq.n	8001936 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	689a      	ldr	r2, [r3, #8]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018fe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	6899      	ldr	r1, [r3, #8]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	430a      	orrs	r2, r1
 8001910:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	689a      	ldr	r2, [r3, #8]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001920:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	6899      	ldr	r1, [r3, #8]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	430a      	orrs	r2, r1
 8001932:	609a      	str	r2, [r3, #8]
 8001934:	e00f      	b.n	8001956 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	689a      	ldr	r2, [r3, #8]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001944:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	689a      	ldr	r2, [r3, #8]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001954:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	689a      	ldr	r2, [r3, #8]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f022 0202 	bic.w	r2, r2, #2
 8001964:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	6899      	ldr	r1, [r3, #8]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	699b      	ldr	r3, [r3, #24]
 8001970:	005a      	lsls	r2, r3, #1
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	430a      	orrs	r2, r1
 8001978:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d01b      	beq.n	80019bc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	685a      	ldr	r2, [r3, #4]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001992:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	685a      	ldr	r2, [r3, #4]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80019a2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	6859      	ldr	r1, [r3, #4]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ae:	3b01      	subs	r3, #1
 80019b0:	035a      	lsls	r2, r3, #13
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	430a      	orrs	r2, r1
 80019b8:	605a      	str	r2, [r3, #4]
 80019ba:	e007      	b.n	80019cc <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	685a      	ldr	r2, [r3, #4]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019ca:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80019da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	69db      	ldr	r3, [r3, #28]
 80019e6:	3b01      	subs	r3, #1
 80019e8:	051a      	lsls	r2, r3, #20
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	430a      	orrs	r2, r1
 80019f0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	689a      	ldr	r2, [r3, #8]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001a00:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	6899      	ldr	r1, [r3, #8]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a0e:	025a      	lsls	r2, r3, #9
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	430a      	orrs	r2, r1
 8001a16:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	689a      	ldr	r2, [r3, #8]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a26:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	6899      	ldr	r1, [r3, #8]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	695b      	ldr	r3, [r3, #20]
 8001a32:	029a      	lsls	r2, r3, #10
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	609a      	str	r2, [r3, #8]
}
 8001a3c:	bf00      	nop
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	40012300 	.word	0x40012300
 8001a4c:	0f000001 	.word	0x0f000001

08001a50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f003 0307 	and.w	r3, r3, #7
 8001a5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a60:	4b0b      	ldr	r3, [pc, #44]	; (8001a90 <__NVIC_SetPriorityGrouping+0x40>)
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a66:	68ba      	ldr	r2, [r7, #8]
 8001a68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a78:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <__NVIC_SetPriorityGrouping+0x44>)
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a7e:	4a04      	ldr	r2, [pc, #16]	; (8001a90 <__NVIC_SetPriorityGrouping+0x40>)
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	60d3      	str	r3, [r2, #12]
}
 8001a84:	bf00      	nop
 8001a86:	3714      	adds	r7, #20
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	e000ed00 	.word	0xe000ed00
 8001a94:	05fa0000 	.word	0x05fa0000

08001a98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a9c:	4b04      	ldr	r3, [pc, #16]	; (8001ab0 <__NVIC_GetPriorityGrouping+0x18>)
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	0a1b      	lsrs	r3, r3, #8
 8001aa2:	f003 0307 	and.w	r3, r3, #7
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	e000ed00 	.word	0xe000ed00

08001ab4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	db0b      	blt.n	8001ade <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ac6:	79fb      	ldrb	r3, [r7, #7]
 8001ac8:	f003 021f 	and.w	r2, r3, #31
 8001acc:	4907      	ldr	r1, [pc, #28]	; (8001aec <__NVIC_EnableIRQ+0x38>)
 8001ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad2:	095b      	lsrs	r3, r3, #5
 8001ad4:	2001      	movs	r0, #1
 8001ad6:	fa00 f202 	lsl.w	r2, r0, r2
 8001ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	e000e100 	.word	0xe000e100

08001af0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	4603      	mov	r3, r0
 8001af8:	6039      	str	r1, [r7, #0]
 8001afa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	db0a      	blt.n	8001b1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	b2da      	uxtb	r2, r3
 8001b08:	490c      	ldr	r1, [pc, #48]	; (8001b3c <__NVIC_SetPriority+0x4c>)
 8001b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0e:	0112      	lsls	r2, r2, #4
 8001b10:	b2d2      	uxtb	r2, r2
 8001b12:	440b      	add	r3, r1
 8001b14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b18:	e00a      	b.n	8001b30 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	b2da      	uxtb	r2, r3
 8001b1e:	4908      	ldr	r1, [pc, #32]	; (8001b40 <__NVIC_SetPriority+0x50>)
 8001b20:	79fb      	ldrb	r3, [r7, #7]
 8001b22:	f003 030f 	and.w	r3, r3, #15
 8001b26:	3b04      	subs	r3, #4
 8001b28:	0112      	lsls	r2, r2, #4
 8001b2a:	b2d2      	uxtb	r2, r2
 8001b2c:	440b      	add	r3, r1
 8001b2e:	761a      	strb	r2, [r3, #24]
}
 8001b30:	bf00      	nop
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr
 8001b3c:	e000e100 	.word	0xe000e100
 8001b40:	e000ed00 	.word	0xe000ed00

08001b44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b089      	sub	sp, #36	; 0x24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f003 0307 	and.w	r3, r3, #7
 8001b56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	f1c3 0307 	rsb	r3, r3, #7
 8001b5e:	2b04      	cmp	r3, #4
 8001b60:	bf28      	it	cs
 8001b62:	2304      	movcs	r3, #4
 8001b64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	3304      	adds	r3, #4
 8001b6a:	2b06      	cmp	r3, #6
 8001b6c:	d902      	bls.n	8001b74 <NVIC_EncodePriority+0x30>
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	3b03      	subs	r3, #3
 8001b72:	e000      	b.n	8001b76 <NVIC_EncodePriority+0x32>
 8001b74:	2300      	movs	r3, #0
 8001b76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b78:	f04f 32ff 	mov.w	r2, #4294967295
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b82:	43da      	mvns	r2, r3
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	401a      	ands	r2, r3
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	fa01 f303 	lsl.w	r3, r1, r3
 8001b96:	43d9      	mvns	r1, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b9c:	4313      	orrs	r3, r2
         );
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3724      	adds	r7, #36	; 0x24
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
	...

08001bac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bbc:	d301      	bcc.n	8001bc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e00f      	b.n	8001be2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bc2:	4a0a      	ldr	r2, [pc, #40]	; (8001bec <SysTick_Config+0x40>)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bca:	210f      	movs	r1, #15
 8001bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd0:	f7ff ff8e 	bl	8001af0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bd4:	4b05      	ldr	r3, [pc, #20]	; (8001bec <SysTick_Config+0x40>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bda:	4b04      	ldr	r3, [pc, #16]	; (8001bec <SysTick_Config+0x40>)
 8001bdc:	2207      	movs	r2, #7
 8001bde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	e000e010 	.word	0xe000e010

08001bf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f7ff ff29 	bl	8001a50 <__NVIC_SetPriorityGrouping>
}
 8001bfe:	bf00      	nop
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b086      	sub	sp, #24
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	60b9      	str	r1, [r7, #8]
 8001c10:	607a      	str	r2, [r7, #4]
 8001c12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c14:	2300      	movs	r3, #0
 8001c16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c18:	f7ff ff3e 	bl	8001a98 <__NVIC_GetPriorityGrouping>
 8001c1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	68b9      	ldr	r1, [r7, #8]
 8001c22:	6978      	ldr	r0, [r7, #20]
 8001c24:	f7ff ff8e 	bl	8001b44 <NVIC_EncodePriority>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c2e:	4611      	mov	r1, r2
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff ff5d 	bl	8001af0 <__NVIC_SetPriority>
}
 8001c36:	bf00      	nop
 8001c38:	3718      	adds	r7, #24
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b082      	sub	sp, #8
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	4603      	mov	r3, r0
 8001c46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff ff31 	bl	8001ab4 <__NVIC_EnableIRQ>
}
 8001c52:	bf00      	nop
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b082      	sub	sp, #8
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f7ff ffa2 	bl	8001bac <SysTick_Config>
 8001c68:	4603      	mov	r3, r0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
	...

08001c74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b089      	sub	sp, #36	; 0x24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001c82:	2300      	movs	r3, #0
 8001c84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001c86:	2300      	movs	r3, #0
 8001c88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001c8e:	2300      	movs	r3, #0
 8001c90:	61fb      	str	r3, [r7, #28]
 8001c92:	e175      	b.n	8001f80 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001c94:	2201      	movs	r2, #1
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	697a      	ldr	r2, [r7, #20]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ca8:	693a      	ldr	r2, [r7, #16]
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	f040 8164 	bne.w	8001f7a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f003 0303 	and.w	r3, r3, #3
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d005      	beq.n	8001cca <HAL_GPIO_Init+0x56>
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f003 0303 	and.w	r3, r3, #3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d130      	bne.n	8001d2c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	2203      	movs	r2, #3
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	68da      	ldr	r2, [r3, #12]
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	fa02 f303 	lsl.w	r3, r2, r3
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d00:	2201      	movs	r2, #1
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	091b      	lsrs	r3, r3, #4
 8001d16:	f003 0201 	and.w	r2, r3, #1
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f003 0303 	and.w	r3, r3, #3
 8001d34:	2b03      	cmp	r3, #3
 8001d36:	d017      	beq.n	8001d68 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	2203      	movs	r2, #3
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	689a      	ldr	r2, [r3, #8]
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f003 0303 	and.w	r3, r3, #3
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d123      	bne.n	8001dbc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	08da      	lsrs	r2, r3, #3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	3208      	adds	r2, #8
 8001d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	f003 0307 	and.w	r3, r3, #7
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	220f      	movs	r2, #15
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	43db      	mvns	r3, r3
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	4013      	ands	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	691a      	ldr	r2, [r3, #16]
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	f003 0307 	and.w	r3, r3, #7
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	08da      	lsrs	r2, r3, #3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	3208      	adds	r2, #8
 8001db6:	69b9      	ldr	r1, [r7, #24]
 8001db8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	2203      	movs	r2, #3
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f003 0203 	and.w	r2, r3, #3
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	f000 80be 	beq.w	8001f7a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dfe:	4b66      	ldr	r3, [pc, #408]	; (8001f98 <HAL_GPIO_Init+0x324>)
 8001e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e02:	4a65      	ldr	r2, [pc, #404]	; (8001f98 <HAL_GPIO_Init+0x324>)
 8001e04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e08:	6453      	str	r3, [r2, #68]	; 0x44
 8001e0a:	4b63      	ldr	r3, [pc, #396]	; (8001f98 <HAL_GPIO_Init+0x324>)
 8001e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e12:	60fb      	str	r3, [r7, #12]
 8001e14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001e16:	4a61      	ldr	r2, [pc, #388]	; (8001f9c <HAL_GPIO_Init+0x328>)
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	089b      	lsrs	r3, r3, #2
 8001e1c:	3302      	adds	r3, #2
 8001e1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	f003 0303 	and.w	r3, r3, #3
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	220f      	movs	r2, #15
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	43db      	mvns	r3, r3
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	4013      	ands	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a58      	ldr	r2, [pc, #352]	; (8001fa0 <HAL_GPIO_Init+0x32c>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d037      	beq.n	8001eb2 <HAL_GPIO_Init+0x23e>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a57      	ldr	r2, [pc, #348]	; (8001fa4 <HAL_GPIO_Init+0x330>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d031      	beq.n	8001eae <HAL_GPIO_Init+0x23a>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a56      	ldr	r2, [pc, #344]	; (8001fa8 <HAL_GPIO_Init+0x334>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d02b      	beq.n	8001eaa <HAL_GPIO_Init+0x236>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a55      	ldr	r2, [pc, #340]	; (8001fac <HAL_GPIO_Init+0x338>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d025      	beq.n	8001ea6 <HAL_GPIO_Init+0x232>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a54      	ldr	r2, [pc, #336]	; (8001fb0 <HAL_GPIO_Init+0x33c>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d01f      	beq.n	8001ea2 <HAL_GPIO_Init+0x22e>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a53      	ldr	r2, [pc, #332]	; (8001fb4 <HAL_GPIO_Init+0x340>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d019      	beq.n	8001e9e <HAL_GPIO_Init+0x22a>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a52      	ldr	r2, [pc, #328]	; (8001fb8 <HAL_GPIO_Init+0x344>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d013      	beq.n	8001e9a <HAL_GPIO_Init+0x226>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a51      	ldr	r2, [pc, #324]	; (8001fbc <HAL_GPIO_Init+0x348>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d00d      	beq.n	8001e96 <HAL_GPIO_Init+0x222>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a50      	ldr	r2, [pc, #320]	; (8001fc0 <HAL_GPIO_Init+0x34c>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d007      	beq.n	8001e92 <HAL_GPIO_Init+0x21e>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a4f      	ldr	r2, [pc, #316]	; (8001fc4 <HAL_GPIO_Init+0x350>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d101      	bne.n	8001e8e <HAL_GPIO_Init+0x21a>
 8001e8a:	2309      	movs	r3, #9
 8001e8c:	e012      	b.n	8001eb4 <HAL_GPIO_Init+0x240>
 8001e8e:	230a      	movs	r3, #10
 8001e90:	e010      	b.n	8001eb4 <HAL_GPIO_Init+0x240>
 8001e92:	2308      	movs	r3, #8
 8001e94:	e00e      	b.n	8001eb4 <HAL_GPIO_Init+0x240>
 8001e96:	2307      	movs	r3, #7
 8001e98:	e00c      	b.n	8001eb4 <HAL_GPIO_Init+0x240>
 8001e9a:	2306      	movs	r3, #6
 8001e9c:	e00a      	b.n	8001eb4 <HAL_GPIO_Init+0x240>
 8001e9e:	2305      	movs	r3, #5
 8001ea0:	e008      	b.n	8001eb4 <HAL_GPIO_Init+0x240>
 8001ea2:	2304      	movs	r3, #4
 8001ea4:	e006      	b.n	8001eb4 <HAL_GPIO_Init+0x240>
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e004      	b.n	8001eb4 <HAL_GPIO_Init+0x240>
 8001eaa:	2302      	movs	r3, #2
 8001eac:	e002      	b.n	8001eb4 <HAL_GPIO_Init+0x240>
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e000      	b.n	8001eb4 <HAL_GPIO_Init+0x240>
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	69fa      	ldr	r2, [r7, #28]
 8001eb6:	f002 0203 	and.w	r2, r2, #3
 8001eba:	0092      	lsls	r2, r2, #2
 8001ebc:	4093      	lsls	r3, r2
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001ec4:	4935      	ldr	r1, [pc, #212]	; (8001f9c <HAL_GPIO_Init+0x328>)
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	089b      	lsrs	r3, r3, #2
 8001eca:	3302      	adds	r3, #2
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ed2:	4b3d      	ldr	r3, [pc, #244]	; (8001fc8 <HAL_GPIO_Init+0x354>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	43db      	mvns	r3, r3
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d003      	beq.n	8001ef6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ef6:	4a34      	ldr	r2, [pc, #208]	; (8001fc8 <HAL_GPIO_Init+0x354>)
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001efc:	4b32      	ldr	r3, [pc, #200]	; (8001fc8 <HAL_GPIO_Init+0x354>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	43db      	mvns	r3, r3
 8001f06:	69ba      	ldr	r2, [r7, #24]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d003      	beq.n	8001f20 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f20:	4a29      	ldr	r2, [pc, #164]	; (8001fc8 <HAL_GPIO_Init+0x354>)
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f26:	4b28      	ldr	r3, [pc, #160]	; (8001fc8 <HAL_GPIO_Init+0x354>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	43db      	mvns	r3, r3
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	4013      	ands	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d003      	beq.n	8001f4a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f4a:	4a1f      	ldr	r2, [pc, #124]	; (8001fc8 <HAL_GPIO_Init+0x354>)
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f50:	4b1d      	ldr	r3, [pc, #116]	; (8001fc8 <HAL_GPIO_Init+0x354>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d003      	beq.n	8001f74 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f74:	4a14      	ldr	r2, [pc, #80]	; (8001fc8 <HAL_GPIO_Init+0x354>)
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	61fb      	str	r3, [r7, #28]
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	2b0f      	cmp	r3, #15
 8001f84:	f67f ae86 	bls.w	8001c94 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001f88:	bf00      	nop
 8001f8a:	bf00      	nop
 8001f8c:	3724      	adds	r7, #36	; 0x24
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	40013800 	.word	0x40013800
 8001fa0:	40020000 	.word	0x40020000
 8001fa4:	40020400 	.word	0x40020400
 8001fa8:	40020800 	.word	0x40020800
 8001fac:	40020c00 	.word	0x40020c00
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	40021400 	.word	0x40021400
 8001fb8:	40021800 	.word	0x40021800
 8001fbc:	40021c00 	.word	0x40021c00
 8001fc0:	40022000 	.word	0x40022000
 8001fc4:	40022400 	.word	0x40022400
 8001fc8:	40013c00 	.word	0x40013c00

08001fcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	807b      	strh	r3, [r7, #2]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fdc:	787b      	ldrb	r3, [r7, #1]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d003      	beq.n	8001fea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fe2:	887a      	ldrh	r2, [r7, #2]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001fe8:	e003      	b.n	8001ff2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001fea:	887b      	ldrh	r3, [r7, #2]
 8001fec:	041a      	lsls	r2, r3, #16
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	619a      	str	r2, [r3, #24]
}
 8001ff2:	bf00      	nop
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr

08001ffe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ffe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002000:	b08f      	sub	sp, #60	; 0x3c
 8002002:	af0a      	add	r7, sp, #40	; 0x28
 8002004:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d101      	bne.n	8002010 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e116      	b.n	800223e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800201c:	b2db      	uxtb	r3, r3
 800201e:	2b00      	cmp	r3, #0
 8002020:	d106      	bne.n	8002030 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f7ff f810 	bl	8001050 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2203      	movs	r2, #3
 8002034:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800203c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002040:	2b00      	cmp	r3, #0
 8002042:	d102      	bne.n	800204a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4618      	mov	r0, r3
 8002050:	f003 f946 	bl	80052e0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	603b      	str	r3, [r7, #0]
 800205a:	687e      	ldr	r6, [r7, #4]
 800205c:	466d      	mov	r5, sp
 800205e:	f106 0410 	add.w	r4, r6, #16
 8002062:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002064:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002066:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002068:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800206a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800206e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002072:	1d33      	adds	r3, r6, #4
 8002074:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002076:	6838      	ldr	r0, [r7, #0]
 8002078:	f003 f8da 	bl	8005230 <USB_CoreInit>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d005      	beq.n	800208e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2202      	movs	r2, #2
 8002086:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e0d7      	b.n	800223e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2100      	movs	r1, #0
 8002094:	4618      	mov	r0, r3
 8002096:	f003 f934 	bl	8005302 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800209a:	2300      	movs	r3, #0
 800209c:	73fb      	strb	r3, [r7, #15]
 800209e:	e04a      	b.n	8002136 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80020a0:	7bfa      	ldrb	r2, [r7, #15]
 80020a2:	6879      	ldr	r1, [r7, #4]
 80020a4:	4613      	mov	r3, r2
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	1a9b      	subs	r3, r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	440b      	add	r3, r1
 80020ae:	333d      	adds	r3, #61	; 0x3d
 80020b0:	2201      	movs	r2, #1
 80020b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80020b4:	7bfa      	ldrb	r2, [r7, #15]
 80020b6:	6879      	ldr	r1, [r7, #4]
 80020b8:	4613      	mov	r3, r2
 80020ba:	00db      	lsls	r3, r3, #3
 80020bc:	1a9b      	subs	r3, r3, r2
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	440b      	add	r3, r1
 80020c2:	333c      	adds	r3, #60	; 0x3c
 80020c4:	7bfa      	ldrb	r2, [r7, #15]
 80020c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80020c8:	7bfa      	ldrb	r2, [r7, #15]
 80020ca:	7bfb      	ldrb	r3, [r7, #15]
 80020cc:	b298      	uxth	r0, r3
 80020ce:	6879      	ldr	r1, [r7, #4]
 80020d0:	4613      	mov	r3, r2
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	1a9b      	subs	r3, r3, r2
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	440b      	add	r3, r1
 80020da:	3342      	adds	r3, #66	; 0x42
 80020dc:	4602      	mov	r2, r0
 80020de:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80020e0:	7bfa      	ldrb	r2, [r7, #15]
 80020e2:	6879      	ldr	r1, [r7, #4]
 80020e4:	4613      	mov	r3, r2
 80020e6:	00db      	lsls	r3, r3, #3
 80020e8:	1a9b      	subs	r3, r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	440b      	add	r3, r1
 80020ee:	333f      	adds	r3, #63	; 0x3f
 80020f0:	2200      	movs	r2, #0
 80020f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80020f4:	7bfa      	ldrb	r2, [r7, #15]
 80020f6:	6879      	ldr	r1, [r7, #4]
 80020f8:	4613      	mov	r3, r2
 80020fa:	00db      	lsls	r3, r3, #3
 80020fc:	1a9b      	subs	r3, r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	440b      	add	r3, r1
 8002102:	3344      	adds	r3, #68	; 0x44
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002108:	7bfa      	ldrb	r2, [r7, #15]
 800210a:	6879      	ldr	r1, [r7, #4]
 800210c:	4613      	mov	r3, r2
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	1a9b      	subs	r3, r3, r2
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	440b      	add	r3, r1
 8002116:	3348      	adds	r3, #72	; 0x48
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800211c:	7bfa      	ldrb	r2, [r7, #15]
 800211e:	6879      	ldr	r1, [r7, #4]
 8002120:	4613      	mov	r3, r2
 8002122:	00db      	lsls	r3, r3, #3
 8002124:	1a9b      	subs	r3, r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	440b      	add	r3, r1
 800212a:	3350      	adds	r3, #80	; 0x50
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002130:	7bfb      	ldrb	r3, [r7, #15]
 8002132:	3301      	adds	r3, #1
 8002134:	73fb      	strb	r3, [r7, #15]
 8002136:	7bfa      	ldrb	r2, [r7, #15]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	429a      	cmp	r2, r3
 800213e:	d3af      	bcc.n	80020a0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002140:	2300      	movs	r3, #0
 8002142:	73fb      	strb	r3, [r7, #15]
 8002144:	e044      	b.n	80021d0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002146:	7bfa      	ldrb	r2, [r7, #15]
 8002148:	6879      	ldr	r1, [r7, #4]
 800214a:	4613      	mov	r3, r2
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	1a9b      	subs	r3, r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	440b      	add	r3, r1
 8002154:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002158:	2200      	movs	r2, #0
 800215a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800215c:	7bfa      	ldrb	r2, [r7, #15]
 800215e:	6879      	ldr	r1, [r7, #4]
 8002160:	4613      	mov	r3, r2
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	1a9b      	subs	r3, r3, r2
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	440b      	add	r3, r1
 800216a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800216e:	7bfa      	ldrb	r2, [r7, #15]
 8002170:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002172:	7bfa      	ldrb	r2, [r7, #15]
 8002174:	6879      	ldr	r1, [r7, #4]
 8002176:	4613      	mov	r3, r2
 8002178:	00db      	lsls	r3, r3, #3
 800217a:	1a9b      	subs	r3, r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	440b      	add	r3, r1
 8002180:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002184:	2200      	movs	r2, #0
 8002186:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002188:	7bfa      	ldrb	r2, [r7, #15]
 800218a:	6879      	ldr	r1, [r7, #4]
 800218c:	4613      	mov	r3, r2
 800218e:	00db      	lsls	r3, r3, #3
 8002190:	1a9b      	subs	r3, r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	440b      	add	r3, r1
 8002196:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800219a:	2200      	movs	r2, #0
 800219c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800219e:	7bfa      	ldrb	r2, [r7, #15]
 80021a0:	6879      	ldr	r1, [r7, #4]
 80021a2:	4613      	mov	r3, r2
 80021a4:	00db      	lsls	r3, r3, #3
 80021a6:	1a9b      	subs	r3, r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	440b      	add	r3, r1
 80021ac:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80021b4:	7bfa      	ldrb	r2, [r7, #15]
 80021b6:	6879      	ldr	r1, [r7, #4]
 80021b8:	4613      	mov	r3, r2
 80021ba:	00db      	lsls	r3, r3, #3
 80021bc:	1a9b      	subs	r3, r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	440b      	add	r3, r1
 80021c2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80021c6:	2200      	movs	r2, #0
 80021c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021ca:	7bfb      	ldrb	r3, [r7, #15]
 80021cc:	3301      	adds	r3, #1
 80021ce:	73fb      	strb	r3, [r7, #15]
 80021d0:	7bfa      	ldrb	r2, [r7, #15]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d3b5      	bcc.n	8002146 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	603b      	str	r3, [r7, #0]
 80021e0:	687e      	ldr	r6, [r7, #4]
 80021e2:	466d      	mov	r5, sp
 80021e4:	f106 0410 	add.w	r4, r6, #16
 80021e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021f0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021f4:	e885 0003 	stmia.w	r5, {r0, r1}
 80021f8:	1d33      	adds	r3, r6, #4
 80021fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021fc:	6838      	ldr	r0, [r7, #0]
 80021fe:	f003 f8cd 	bl	800539c <USB_DevInit>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d005      	beq.n	8002214 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2202      	movs	r2, #2
 800220c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e014      	b.n	800223e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002228:	2b01      	cmp	r3, #1
 800222a:	d102      	bne.n	8002232 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f000 f80b 	bl	8002248 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4618      	mov	r0, r3
 8002238:	f003 fa87 	bl	800574a <USB_DevDisconnect>

  return HAL_OK;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3714      	adds	r7, #20
 8002242:	46bd      	mov	sp, r7
 8002244:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002248 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2201      	movs	r2, #1
 800225a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	699b      	ldr	r3, [r3, #24]
 800226a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002276:	4b05      	ldr	r3, [pc, #20]	; (800228c <HAL_PCDEx_ActivateLPM+0x44>)
 8002278:	4313      	orrs	r3, r2
 800227a:	68fa      	ldr	r2, [r7, #12]
 800227c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800227e:	2300      	movs	r3, #0
}
 8002280:	4618      	mov	r0, r3
 8002282:	3714      	adds	r7, #20
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr
 800228c:	10000003 	.word	0x10000003

08002290 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002294:	4b05      	ldr	r3, [pc, #20]	; (80022ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a04      	ldr	r2, [pc, #16]	; (80022ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 800229a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800229e:	6013      	str	r3, [r2, #0]
}
 80022a0:	bf00      	nop
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	40007000 	.word	0x40007000

080022b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b086      	sub	sp, #24
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80022b8:	2300      	movs	r3, #0
 80022ba:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d101      	bne.n	80022c6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e291      	b.n	80027ea <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	f000 8087 	beq.w	80023e2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022d4:	4b96      	ldr	r3, [pc, #600]	; (8002530 <HAL_RCC_OscConfig+0x280>)
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f003 030c 	and.w	r3, r3, #12
 80022dc:	2b04      	cmp	r3, #4
 80022de:	d00c      	beq.n	80022fa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022e0:	4b93      	ldr	r3, [pc, #588]	; (8002530 <HAL_RCC_OscConfig+0x280>)
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	f003 030c 	and.w	r3, r3, #12
 80022e8:	2b08      	cmp	r3, #8
 80022ea:	d112      	bne.n	8002312 <HAL_RCC_OscConfig+0x62>
 80022ec:	4b90      	ldr	r3, [pc, #576]	; (8002530 <HAL_RCC_OscConfig+0x280>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022f8:	d10b      	bne.n	8002312 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022fa:	4b8d      	ldr	r3, [pc, #564]	; (8002530 <HAL_RCC_OscConfig+0x280>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d06c      	beq.n	80023e0 <HAL_RCC_OscConfig+0x130>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d168      	bne.n	80023e0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e26b      	b.n	80027ea <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800231a:	d106      	bne.n	800232a <HAL_RCC_OscConfig+0x7a>
 800231c:	4b84      	ldr	r3, [pc, #528]	; (8002530 <HAL_RCC_OscConfig+0x280>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a83      	ldr	r2, [pc, #524]	; (8002530 <HAL_RCC_OscConfig+0x280>)
 8002322:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002326:	6013      	str	r3, [r2, #0]
 8002328:	e02e      	b.n	8002388 <HAL_RCC_OscConfig+0xd8>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d10c      	bne.n	800234c <HAL_RCC_OscConfig+0x9c>
 8002332:	4b7f      	ldr	r3, [pc, #508]	; (8002530 <HAL_RCC_OscConfig+0x280>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a7e      	ldr	r2, [pc, #504]	; (8002530 <HAL_RCC_OscConfig+0x280>)
 8002338:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800233c:	6013      	str	r3, [r2, #0]
 800233e:	4b7c      	ldr	r3, [pc, #496]	; (8002530 <HAL_RCC_OscConfig+0x280>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a7b      	ldr	r2, [pc, #492]	; (8002530 <HAL_RCC_OscConfig+0x280>)
 8002344:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002348:	6013      	str	r3, [r2, #0]
 800234a:	e01d      	b.n	8002388 <HAL_RCC_OscConfig+0xd8>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002354:	d10c      	bne.n	8002370 <HAL_RCC_OscConfig+0xc0>
 8002356:	4b76      	ldr	r3, [pc, #472]	; (8002530 <HAL_RCC_OscConfig+0x280>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a75      	ldr	r2, [pc, #468]	; (8002530 <HAL_RCC_OscConfig+0x280>)
 800235c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002360:	6013      	str	r3, [r2, #0]
 8002362:	4b73      	ldr	r3, [pc, #460]	; (8002530 <HAL_RCC_OscConfig+0x280>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a72      	ldr	r2, [pc, #456]	; (8002530 <HAL_RCC_OscConfig+0x280>)
 8002368:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800236c:	6013      	str	r3, [r2, #0]
 800236e:	e00b      	b.n	8002388 <HAL_RCC_OscConfig+0xd8>
 8002370:	4b6f      	ldr	r3, [pc, #444]	; (8002530 <HAL_RCC_OscConfig+0x280>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a6e      	ldr	r2, [pc, #440]	; (8002530 <HAL_RCC_OscConfig+0x280>)
 8002376:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800237a:	6013      	str	r3, [r2, #0]
 800237c:	4b6c      	ldr	r3, [pc, #432]	; (8002530 <HAL_RCC_OscConfig+0x280>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a6b      	ldr	r2, [pc, #428]	; (8002530 <HAL_RCC_OscConfig+0x280>)
 8002382:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002386:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d013      	beq.n	80023b8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002390:	f7fe ff34 	bl	80011fc <HAL_GetTick>
 8002394:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002396:	e008      	b.n	80023aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002398:	f7fe ff30 	bl	80011fc <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b64      	cmp	r3, #100	; 0x64
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e21f      	b.n	80027ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023aa:	4b61      	ldr	r3, [pc, #388]	; (8002530 <HAL_RCC_OscConfig+0x280>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d0f0      	beq.n	8002398 <HAL_RCC_OscConfig+0xe8>
 80023b6:	e014      	b.n	80023e2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b8:	f7fe ff20 	bl	80011fc <HAL_GetTick>
 80023bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023be:	e008      	b.n	80023d2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023c0:	f7fe ff1c 	bl	80011fc <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b64      	cmp	r3, #100	; 0x64
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e20b      	b.n	80027ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023d2:	4b57      	ldr	r3, [pc, #348]	; (8002530 <HAL_RCC_OscConfig+0x280>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1f0      	bne.n	80023c0 <HAL_RCC_OscConfig+0x110>
 80023de:	e000      	b.n	80023e2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d069      	beq.n	80024c2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023ee:	4b50      	ldr	r3, [pc, #320]	; (8002530 <HAL_RCC_OscConfig+0x280>)
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f003 030c 	and.w	r3, r3, #12
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d00b      	beq.n	8002412 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023fa:	4b4d      	ldr	r3, [pc, #308]	; (8002530 <HAL_RCC_OscConfig+0x280>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f003 030c 	and.w	r3, r3, #12
 8002402:	2b08      	cmp	r3, #8
 8002404:	d11c      	bne.n	8002440 <HAL_RCC_OscConfig+0x190>
 8002406:	4b4a      	ldr	r3, [pc, #296]	; (8002530 <HAL_RCC_OscConfig+0x280>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d116      	bne.n	8002440 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002412:	4b47      	ldr	r3, [pc, #284]	; (8002530 <HAL_RCC_OscConfig+0x280>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	2b00      	cmp	r3, #0
 800241c:	d005      	beq.n	800242a <HAL_RCC_OscConfig+0x17a>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	2b01      	cmp	r3, #1
 8002424:	d001      	beq.n	800242a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e1df      	b.n	80027ea <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800242a:	4b41      	ldr	r3, [pc, #260]	; (8002530 <HAL_RCC_OscConfig+0x280>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	00db      	lsls	r3, r3, #3
 8002438:	493d      	ldr	r1, [pc, #244]	; (8002530 <HAL_RCC_OscConfig+0x280>)
 800243a:	4313      	orrs	r3, r2
 800243c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800243e:	e040      	b.n	80024c2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d023      	beq.n	8002490 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002448:	4b39      	ldr	r3, [pc, #228]	; (8002530 <HAL_RCC_OscConfig+0x280>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a38      	ldr	r2, [pc, #224]	; (8002530 <HAL_RCC_OscConfig+0x280>)
 800244e:	f043 0301 	orr.w	r3, r3, #1
 8002452:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002454:	f7fe fed2 	bl	80011fc <HAL_GetTick>
 8002458:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800245a:	e008      	b.n	800246e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800245c:	f7fe fece 	bl	80011fc <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b02      	cmp	r3, #2
 8002468:	d901      	bls.n	800246e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e1bd      	b.n	80027ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800246e:	4b30      	ldr	r3, [pc, #192]	; (8002530 <HAL_RCC_OscConfig+0x280>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	2b00      	cmp	r3, #0
 8002478:	d0f0      	beq.n	800245c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800247a:	4b2d      	ldr	r3, [pc, #180]	; (8002530 <HAL_RCC_OscConfig+0x280>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	00db      	lsls	r3, r3, #3
 8002488:	4929      	ldr	r1, [pc, #164]	; (8002530 <HAL_RCC_OscConfig+0x280>)
 800248a:	4313      	orrs	r3, r2
 800248c:	600b      	str	r3, [r1, #0]
 800248e:	e018      	b.n	80024c2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002490:	4b27      	ldr	r3, [pc, #156]	; (8002530 <HAL_RCC_OscConfig+0x280>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a26      	ldr	r2, [pc, #152]	; (8002530 <HAL_RCC_OscConfig+0x280>)
 8002496:	f023 0301 	bic.w	r3, r3, #1
 800249a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800249c:	f7fe feae 	bl	80011fc <HAL_GetTick>
 80024a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024a2:	e008      	b.n	80024b6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024a4:	f7fe feaa 	bl	80011fc <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e199      	b.n	80027ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024b6:	4b1e      	ldr	r3, [pc, #120]	; (8002530 <HAL_RCC_OscConfig+0x280>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1f0      	bne.n	80024a4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0308 	and.w	r3, r3, #8
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d038      	beq.n	8002540 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	695b      	ldr	r3, [r3, #20]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d019      	beq.n	800250a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024d6:	4b16      	ldr	r3, [pc, #88]	; (8002530 <HAL_RCC_OscConfig+0x280>)
 80024d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024da:	4a15      	ldr	r2, [pc, #84]	; (8002530 <HAL_RCC_OscConfig+0x280>)
 80024dc:	f043 0301 	orr.w	r3, r3, #1
 80024e0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024e2:	f7fe fe8b 	bl	80011fc <HAL_GetTick>
 80024e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024e8:	e008      	b.n	80024fc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024ea:	f7fe fe87 	bl	80011fc <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d901      	bls.n	80024fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e176      	b.n	80027ea <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024fc:	4b0c      	ldr	r3, [pc, #48]	; (8002530 <HAL_RCC_OscConfig+0x280>)
 80024fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002500:	f003 0302 	and.w	r3, r3, #2
 8002504:	2b00      	cmp	r3, #0
 8002506:	d0f0      	beq.n	80024ea <HAL_RCC_OscConfig+0x23a>
 8002508:	e01a      	b.n	8002540 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800250a:	4b09      	ldr	r3, [pc, #36]	; (8002530 <HAL_RCC_OscConfig+0x280>)
 800250c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800250e:	4a08      	ldr	r2, [pc, #32]	; (8002530 <HAL_RCC_OscConfig+0x280>)
 8002510:	f023 0301 	bic.w	r3, r3, #1
 8002514:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002516:	f7fe fe71 	bl	80011fc <HAL_GetTick>
 800251a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800251c:	e00a      	b.n	8002534 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800251e:	f7fe fe6d 	bl	80011fc <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	2b02      	cmp	r3, #2
 800252a:	d903      	bls.n	8002534 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e15c      	b.n	80027ea <HAL_RCC_OscConfig+0x53a>
 8002530:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002534:	4b91      	ldr	r3, [pc, #580]	; (800277c <HAL_RCC_OscConfig+0x4cc>)
 8002536:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002538:	f003 0302 	and.w	r3, r3, #2
 800253c:	2b00      	cmp	r3, #0
 800253e:	d1ee      	bne.n	800251e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0304 	and.w	r3, r3, #4
 8002548:	2b00      	cmp	r3, #0
 800254a:	f000 80a4 	beq.w	8002696 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800254e:	4b8b      	ldr	r3, [pc, #556]	; (800277c <HAL_RCC_OscConfig+0x4cc>)
 8002550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d10d      	bne.n	8002576 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800255a:	4b88      	ldr	r3, [pc, #544]	; (800277c <HAL_RCC_OscConfig+0x4cc>)
 800255c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255e:	4a87      	ldr	r2, [pc, #540]	; (800277c <HAL_RCC_OscConfig+0x4cc>)
 8002560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002564:	6413      	str	r3, [r2, #64]	; 0x40
 8002566:	4b85      	ldr	r3, [pc, #532]	; (800277c <HAL_RCC_OscConfig+0x4cc>)
 8002568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800256e:	60bb      	str	r3, [r7, #8]
 8002570:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002572:	2301      	movs	r3, #1
 8002574:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002576:	4b82      	ldr	r3, [pc, #520]	; (8002780 <HAL_RCC_OscConfig+0x4d0>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800257e:	2b00      	cmp	r3, #0
 8002580:	d118      	bne.n	80025b4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002582:	4b7f      	ldr	r3, [pc, #508]	; (8002780 <HAL_RCC_OscConfig+0x4d0>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a7e      	ldr	r2, [pc, #504]	; (8002780 <HAL_RCC_OscConfig+0x4d0>)
 8002588:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800258c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800258e:	f7fe fe35 	bl	80011fc <HAL_GetTick>
 8002592:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002594:	e008      	b.n	80025a8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002596:	f7fe fe31 	bl	80011fc <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	2b64      	cmp	r3, #100	; 0x64
 80025a2:	d901      	bls.n	80025a8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e120      	b.n	80027ea <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025a8:	4b75      	ldr	r3, [pc, #468]	; (8002780 <HAL_RCC_OscConfig+0x4d0>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d0f0      	beq.n	8002596 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d106      	bne.n	80025ca <HAL_RCC_OscConfig+0x31a>
 80025bc:	4b6f      	ldr	r3, [pc, #444]	; (800277c <HAL_RCC_OscConfig+0x4cc>)
 80025be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c0:	4a6e      	ldr	r2, [pc, #440]	; (800277c <HAL_RCC_OscConfig+0x4cc>)
 80025c2:	f043 0301 	orr.w	r3, r3, #1
 80025c6:	6713      	str	r3, [r2, #112]	; 0x70
 80025c8:	e02d      	b.n	8002626 <HAL_RCC_OscConfig+0x376>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d10c      	bne.n	80025ec <HAL_RCC_OscConfig+0x33c>
 80025d2:	4b6a      	ldr	r3, [pc, #424]	; (800277c <HAL_RCC_OscConfig+0x4cc>)
 80025d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d6:	4a69      	ldr	r2, [pc, #420]	; (800277c <HAL_RCC_OscConfig+0x4cc>)
 80025d8:	f023 0301 	bic.w	r3, r3, #1
 80025dc:	6713      	str	r3, [r2, #112]	; 0x70
 80025de:	4b67      	ldr	r3, [pc, #412]	; (800277c <HAL_RCC_OscConfig+0x4cc>)
 80025e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e2:	4a66      	ldr	r2, [pc, #408]	; (800277c <HAL_RCC_OscConfig+0x4cc>)
 80025e4:	f023 0304 	bic.w	r3, r3, #4
 80025e8:	6713      	str	r3, [r2, #112]	; 0x70
 80025ea:	e01c      	b.n	8002626 <HAL_RCC_OscConfig+0x376>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	2b05      	cmp	r3, #5
 80025f2:	d10c      	bne.n	800260e <HAL_RCC_OscConfig+0x35e>
 80025f4:	4b61      	ldr	r3, [pc, #388]	; (800277c <HAL_RCC_OscConfig+0x4cc>)
 80025f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f8:	4a60      	ldr	r2, [pc, #384]	; (800277c <HAL_RCC_OscConfig+0x4cc>)
 80025fa:	f043 0304 	orr.w	r3, r3, #4
 80025fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002600:	4b5e      	ldr	r3, [pc, #376]	; (800277c <HAL_RCC_OscConfig+0x4cc>)
 8002602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002604:	4a5d      	ldr	r2, [pc, #372]	; (800277c <HAL_RCC_OscConfig+0x4cc>)
 8002606:	f043 0301 	orr.w	r3, r3, #1
 800260a:	6713      	str	r3, [r2, #112]	; 0x70
 800260c:	e00b      	b.n	8002626 <HAL_RCC_OscConfig+0x376>
 800260e:	4b5b      	ldr	r3, [pc, #364]	; (800277c <HAL_RCC_OscConfig+0x4cc>)
 8002610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002612:	4a5a      	ldr	r2, [pc, #360]	; (800277c <HAL_RCC_OscConfig+0x4cc>)
 8002614:	f023 0301 	bic.w	r3, r3, #1
 8002618:	6713      	str	r3, [r2, #112]	; 0x70
 800261a:	4b58      	ldr	r3, [pc, #352]	; (800277c <HAL_RCC_OscConfig+0x4cc>)
 800261c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800261e:	4a57      	ldr	r2, [pc, #348]	; (800277c <HAL_RCC_OscConfig+0x4cc>)
 8002620:	f023 0304 	bic.w	r3, r3, #4
 8002624:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d015      	beq.n	800265a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800262e:	f7fe fde5 	bl	80011fc <HAL_GetTick>
 8002632:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002634:	e00a      	b.n	800264c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002636:	f7fe fde1 	bl	80011fc <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	f241 3288 	movw	r2, #5000	; 0x1388
 8002644:	4293      	cmp	r3, r2
 8002646:	d901      	bls.n	800264c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e0ce      	b.n	80027ea <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800264c:	4b4b      	ldr	r3, [pc, #300]	; (800277c <HAL_RCC_OscConfig+0x4cc>)
 800264e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002650:	f003 0302 	and.w	r3, r3, #2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d0ee      	beq.n	8002636 <HAL_RCC_OscConfig+0x386>
 8002658:	e014      	b.n	8002684 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800265a:	f7fe fdcf 	bl	80011fc <HAL_GetTick>
 800265e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002660:	e00a      	b.n	8002678 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002662:	f7fe fdcb 	bl	80011fc <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002670:	4293      	cmp	r3, r2
 8002672:	d901      	bls.n	8002678 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e0b8      	b.n	80027ea <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002678:	4b40      	ldr	r3, [pc, #256]	; (800277c <HAL_RCC_OscConfig+0x4cc>)
 800267a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800267c:	f003 0302 	and.w	r3, r3, #2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d1ee      	bne.n	8002662 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002684:	7dfb      	ldrb	r3, [r7, #23]
 8002686:	2b01      	cmp	r3, #1
 8002688:	d105      	bne.n	8002696 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800268a:	4b3c      	ldr	r3, [pc, #240]	; (800277c <HAL_RCC_OscConfig+0x4cc>)
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	4a3b      	ldr	r2, [pc, #236]	; (800277c <HAL_RCC_OscConfig+0x4cc>)
 8002690:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002694:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	2b00      	cmp	r3, #0
 800269c:	f000 80a4 	beq.w	80027e8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026a0:	4b36      	ldr	r3, [pc, #216]	; (800277c <HAL_RCC_OscConfig+0x4cc>)
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f003 030c 	and.w	r3, r3, #12
 80026a8:	2b08      	cmp	r3, #8
 80026aa:	d06b      	beq.n	8002784 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	699b      	ldr	r3, [r3, #24]
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d149      	bne.n	8002748 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026b4:	4b31      	ldr	r3, [pc, #196]	; (800277c <HAL_RCC_OscConfig+0x4cc>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a30      	ldr	r2, [pc, #192]	; (800277c <HAL_RCC_OscConfig+0x4cc>)
 80026ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c0:	f7fe fd9c 	bl	80011fc <HAL_GetTick>
 80026c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026c6:	e008      	b.n	80026da <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026c8:	f7fe fd98 	bl	80011fc <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e087      	b.n	80027ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026da:	4b28      	ldr	r3, [pc, #160]	; (800277c <HAL_RCC_OscConfig+0x4cc>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d1f0      	bne.n	80026c8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	69da      	ldr	r2, [r3, #28]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a1b      	ldr	r3, [r3, #32]
 80026ee:	431a      	orrs	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f4:	019b      	lsls	r3, r3, #6
 80026f6:	431a      	orrs	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026fc:	085b      	lsrs	r3, r3, #1
 80026fe:	3b01      	subs	r3, #1
 8002700:	041b      	lsls	r3, r3, #16
 8002702:	431a      	orrs	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002708:	061b      	lsls	r3, r3, #24
 800270a:	4313      	orrs	r3, r2
 800270c:	4a1b      	ldr	r2, [pc, #108]	; (800277c <HAL_RCC_OscConfig+0x4cc>)
 800270e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002712:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002714:	4b19      	ldr	r3, [pc, #100]	; (800277c <HAL_RCC_OscConfig+0x4cc>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a18      	ldr	r2, [pc, #96]	; (800277c <HAL_RCC_OscConfig+0x4cc>)
 800271a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800271e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002720:	f7fe fd6c 	bl	80011fc <HAL_GetTick>
 8002724:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002726:	e008      	b.n	800273a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002728:	f7fe fd68 	bl	80011fc <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b02      	cmp	r3, #2
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e057      	b.n	80027ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800273a:	4b10      	ldr	r3, [pc, #64]	; (800277c <HAL_RCC_OscConfig+0x4cc>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d0f0      	beq.n	8002728 <HAL_RCC_OscConfig+0x478>
 8002746:	e04f      	b.n	80027e8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002748:	4b0c      	ldr	r3, [pc, #48]	; (800277c <HAL_RCC_OscConfig+0x4cc>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a0b      	ldr	r2, [pc, #44]	; (800277c <HAL_RCC_OscConfig+0x4cc>)
 800274e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002752:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002754:	f7fe fd52 	bl	80011fc <HAL_GetTick>
 8002758:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800275a:	e008      	b.n	800276e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800275c:	f7fe fd4e 	bl	80011fc <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b02      	cmp	r3, #2
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e03d      	b.n	80027ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800276e:	4b03      	ldr	r3, [pc, #12]	; (800277c <HAL_RCC_OscConfig+0x4cc>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1f0      	bne.n	800275c <HAL_RCC_OscConfig+0x4ac>
 800277a:	e035      	b.n	80027e8 <HAL_RCC_OscConfig+0x538>
 800277c:	40023800 	.word	0x40023800
 8002780:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002784:	4b1b      	ldr	r3, [pc, #108]	; (80027f4 <HAL_RCC_OscConfig+0x544>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	2b01      	cmp	r3, #1
 8002790:	d028      	beq.n	80027e4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800279c:	429a      	cmp	r2, r3
 800279e:	d121      	bne.n	80027e4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d11a      	bne.n	80027e4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027ae:	68fa      	ldr	r2, [r7, #12]
 80027b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80027b4:	4013      	ands	r3, r2
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027ba:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027bc:	4293      	cmp	r3, r2
 80027be:	d111      	bne.n	80027e4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ca:	085b      	lsrs	r3, r3, #1
 80027cc:	3b01      	subs	r3, #1
 80027ce:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d107      	bne.n	80027e4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027de:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d001      	beq.n	80027e8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e000      	b.n	80027ea <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3718      	adds	r7, #24
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	40023800 	.word	0x40023800

080027f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002802:	2300      	movs	r3, #0
 8002804:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d101      	bne.n	8002810 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e0d0      	b.n	80029b2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002810:	4b6a      	ldr	r3, [pc, #424]	; (80029bc <HAL_RCC_ClockConfig+0x1c4>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 030f 	and.w	r3, r3, #15
 8002818:	683a      	ldr	r2, [r7, #0]
 800281a:	429a      	cmp	r2, r3
 800281c:	d910      	bls.n	8002840 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800281e:	4b67      	ldr	r3, [pc, #412]	; (80029bc <HAL_RCC_ClockConfig+0x1c4>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f023 020f 	bic.w	r2, r3, #15
 8002826:	4965      	ldr	r1, [pc, #404]	; (80029bc <HAL_RCC_ClockConfig+0x1c4>)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	4313      	orrs	r3, r2
 800282c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800282e:	4b63      	ldr	r3, [pc, #396]	; (80029bc <HAL_RCC_ClockConfig+0x1c4>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 030f 	and.w	r3, r3, #15
 8002836:	683a      	ldr	r2, [r7, #0]
 8002838:	429a      	cmp	r2, r3
 800283a:	d001      	beq.n	8002840 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e0b8      	b.n	80029b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0302 	and.w	r3, r3, #2
 8002848:	2b00      	cmp	r3, #0
 800284a:	d020      	beq.n	800288e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0304 	and.w	r3, r3, #4
 8002854:	2b00      	cmp	r3, #0
 8002856:	d005      	beq.n	8002864 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002858:	4b59      	ldr	r3, [pc, #356]	; (80029c0 <HAL_RCC_ClockConfig+0x1c8>)
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	4a58      	ldr	r2, [pc, #352]	; (80029c0 <HAL_RCC_ClockConfig+0x1c8>)
 800285e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002862:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0308 	and.w	r3, r3, #8
 800286c:	2b00      	cmp	r3, #0
 800286e:	d005      	beq.n	800287c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002870:	4b53      	ldr	r3, [pc, #332]	; (80029c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	4a52      	ldr	r2, [pc, #328]	; (80029c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002876:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800287a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800287c:	4b50      	ldr	r3, [pc, #320]	; (80029c0 <HAL_RCC_ClockConfig+0x1c8>)
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	494d      	ldr	r1, [pc, #308]	; (80029c0 <HAL_RCC_ClockConfig+0x1c8>)
 800288a:	4313      	orrs	r3, r2
 800288c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	2b00      	cmp	r3, #0
 8002898:	d040      	beq.n	800291c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d107      	bne.n	80028b2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028a2:	4b47      	ldr	r3, [pc, #284]	; (80029c0 <HAL_RCC_ClockConfig+0x1c8>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d115      	bne.n	80028da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e07f      	b.n	80029b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d107      	bne.n	80028ca <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ba:	4b41      	ldr	r3, [pc, #260]	; (80029c0 <HAL_RCC_ClockConfig+0x1c8>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d109      	bne.n	80028da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e073      	b.n	80029b2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ca:	4b3d      	ldr	r3, [pc, #244]	; (80029c0 <HAL_RCC_ClockConfig+0x1c8>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d101      	bne.n	80028da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e06b      	b.n	80029b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028da:	4b39      	ldr	r3, [pc, #228]	; (80029c0 <HAL_RCC_ClockConfig+0x1c8>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f023 0203 	bic.w	r2, r3, #3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	4936      	ldr	r1, [pc, #216]	; (80029c0 <HAL_RCC_ClockConfig+0x1c8>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028ec:	f7fe fc86 	bl	80011fc <HAL_GetTick>
 80028f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028f2:	e00a      	b.n	800290a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028f4:	f7fe fc82 	bl	80011fc <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002902:	4293      	cmp	r3, r2
 8002904:	d901      	bls.n	800290a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e053      	b.n	80029b2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800290a:	4b2d      	ldr	r3, [pc, #180]	; (80029c0 <HAL_RCC_ClockConfig+0x1c8>)
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f003 020c 	and.w	r2, r3, #12
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	429a      	cmp	r2, r3
 800291a:	d1eb      	bne.n	80028f4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800291c:	4b27      	ldr	r3, [pc, #156]	; (80029bc <HAL_RCC_ClockConfig+0x1c4>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 030f 	and.w	r3, r3, #15
 8002924:	683a      	ldr	r2, [r7, #0]
 8002926:	429a      	cmp	r2, r3
 8002928:	d210      	bcs.n	800294c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800292a:	4b24      	ldr	r3, [pc, #144]	; (80029bc <HAL_RCC_ClockConfig+0x1c4>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f023 020f 	bic.w	r2, r3, #15
 8002932:	4922      	ldr	r1, [pc, #136]	; (80029bc <HAL_RCC_ClockConfig+0x1c4>)
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	4313      	orrs	r3, r2
 8002938:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800293a:	4b20      	ldr	r3, [pc, #128]	; (80029bc <HAL_RCC_ClockConfig+0x1c4>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 030f 	and.w	r3, r3, #15
 8002942:	683a      	ldr	r2, [r7, #0]
 8002944:	429a      	cmp	r2, r3
 8002946:	d001      	beq.n	800294c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e032      	b.n	80029b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0304 	and.w	r3, r3, #4
 8002954:	2b00      	cmp	r3, #0
 8002956:	d008      	beq.n	800296a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002958:	4b19      	ldr	r3, [pc, #100]	; (80029c0 <HAL_RCC_ClockConfig+0x1c8>)
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	4916      	ldr	r1, [pc, #88]	; (80029c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002966:	4313      	orrs	r3, r2
 8002968:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0308 	and.w	r3, r3, #8
 8002972:	2b00      	cmp	r3, #0
 8002974:	d009      	beq.n	800298a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002976:	4b12      	ldr	r3, [pc, #72]	; (80029c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	00db      	lsls	r3, r3, #3
 8002984:	490e      	ldr	r1, [pc, #56]	; (80029c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002986:	4313      	orrs	r3, r2
 8002988:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800298a:	f000 f821 	bl	80029d0 <HAL_RCC_GetSysClockFreq>
 800298e:	4602      	mov	r2, r0
 8002990:	4b0b      	ldr	r3, [pc, #44]	; (80029c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	091b      	lsrs	r3, r3, #4
 8002996:	f003 030f 	and.w	r3, r3, #15
 800299a:	490a      	ldr	r1, [pc, #40]	; (80029c4 <HAL_RCC_ClockConfig+0x1cc>)
 800299c:	5ccb      	ldrb	r3, [r1, r3]
 800299e:	fa22 f303 	lsr.w	r3, r2, r3
 80029a2:	4a09      	ldr	r2, [pc, #36]	; (80029c8 <HAL_RCC_ClockConfig+0x1d0>)
 80029a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80029a6:	4b09      	ldr	r3, [pc, #36]	; (80029cc <HAL_RCC_ClockConfig+0x1d4>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7fe fbe2 	bl	8001174 <HAL_InitTick>

  return HAL_OK;
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3710      	adds	r7, #16
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	40023c00 	.word	0x40023c00
 80029c0:	40023800 	.word	0x40023800
 80029c4:	0800587c 	.word	0x0800587c
 80029c8:	20000000 	.word	0x20000000
 80029cc:	20000004 	.word	0x20000004

080029d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80029d4:	b084      	sub	sp, #16
 80029d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80029d8:	2300      	movs	r3, #0
 80029da:	607b      	str	r3, [r7, #4]
 80029dc:	2300      	movs	r3, #0
 80029de:	60fb      	str	r3, [r7, #12]
 80029e0:	2300      	movs	r3, #0
 80029e2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80029e4:	2300      	movs	r3, #0
 80029e6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029e8:	4b67      	ldr	r3, [pc, #412]	; (8002b88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f003 030c 	and.w	r3, r3, #12
 80029f0:	2b08      	cmp	r3, #8
 80029f2:	d00d      	beq.n	8002a10 <HAL_RCC_GetSysClockFreq+0x40>
 80029f4:	2b08      	cmp	r3, #8
 80029f6:	f200 80bd 	bhi.w	8002b74 <HAL_RCC_GetSysClockFreq+0x1a4>
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d002      	beq.n	8002a04 <HAL_RCC_GetSysClockFreq+0x34>
 80029fe:	2b04      	cmp	r3, #4
 8002a00:	d003      	beq.n	8002a0a <HAL_RCC_GetSysClockFreq+0x3a>
 8002a02:	e0b7      	b.n	8002b74 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a04:	4b61      	ldr	r3, [pc, #388]	; (8002b8c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002a06:	60bb      	str	r3, [r7, #8]
      break;
 8002a08:	e0b7      	b.n	8002b7a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a0a:	4b61      	ldr	r3, [pc, #388]	; (8002b90 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002a0c:	60bb      	str	r3, [r7, #8]
      break;
 8002a0e:	e0b4      	b.n	8002b7a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a10:	4b5d      	ldr	r3, [pc, #372]	; (8002b88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a18:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002a1a:	4b5b      	ldr	r3, [pc, #364]	; (8002b88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d04d      	beq.n	8002ac2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a26:	4b58      	ldr	r3, [pc, #352]	; (8002b88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	099b      	lsrs	r3, r3, #6
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	f04f 0300 	mov.w	r3, #0
 8002a32:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002a36:	f04f 0100 	mov.w	r1, #0
 8002a3a:	ea02 0800 	and.w	r8, r2, r0
 8002a3e:	ea03 0901 	and.w	r9, r3, r1
 8002a42:	4640      	mov	r0, r8
 8002a44:	4649      	mov	r1, r9
 8002a46:	f04f 0200 	mov.w	r2, #0
 8002a4a:	f04f 0300 	mov.w	r3, #0
 8002a4e:	014b      	lsls	r3, r1, #5
 8002a50:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002a54:	0142      	lsls	r2, r0, #5
 8002a56:	4610      	mov	r0, r2
 8002a58:	4619      	mov	r1, r3
 8002a5a:	ebb0 0008 	subs.w	r0, r0, r8
 8002a5e:	eb61 0109 	sbc.w	r1, r1, r9
 8002a62:	f04f 0200 	mov.w	r2, #0
 8002a66:	f04f 0300 	mov.w	r3, #0
 8002a6a:	018b      	lsls	r3, r1, #6
 8002a6c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002a70:	0182      	lsls	r2, r0, #6
 8002a72:	1a12      	subs	r2, r2, r0
 8002a74:	eb63 0301 	sbc.w	r3, r3, r1
 8002a78:	f04f 0000 	mov.w	r0, #0
 8002a7c:	f04f 0100 	mov.w	r1, #0
 8002a80:	00d9      	lsls	r1, r3, #3
 8002a82:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a86:	00d0      	lsls	r0, r2, #3
 8002a88:	4602      	mov	r2, r0
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	eb12 0208 	adds.w	r2, r2, r8
 8002a90:	eb43 0309 	adc.w	r3, r3, r9
 8002a94:	f04f 0000 	mov.w	r0, #0
 8002a98:	f04f 0100 	mov.w	r1, #0
 8002a9c:	0259      	lsls	r1, r3, #9
 8002a9e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002aa2:	0250      	lsls	r0, r2, #9
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	4610      	mov	r0, r2
 8002aaa:	4619      	mov	r1, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	461a      	mov	r2, r3
 8002ab0:	f04f 0300 	mov.w	r3, #0
 8002ab4:	f7fd fba8 	bl	8000208 <__aeabi_uldivmod>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	460b      	mov	r3, r1
 8002abc:	4613      	mov	r3, r2
 8002abe:	60fb      	str	r3, [r7, #12]
 8002ac0:	e04a      	b.n	8002b58 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ac2:	4b31      	ldr	r3, [pc, #196]	; (8002b88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	099b      	lsrs	r3, r3, #6
 8002ac8:	461a      	mov	r2, r3
 8002aca:	f04f 0300 	mov.w	r3, #0
 8002ace:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002ad2:	f04f 0100 	mov.w	r1, #0
 8002ad6:	ea02 0400 	and.w	r4, r2, r0
 8002ada:	ea03 0501 	and.w	r5, r3, r1
 8002ade:	4620      	mov	r0, r4
 8002ae0:	4629      	mov	r1, r5
 8002ae2:	f04f 0200 	mov.w	r2, #0
 8002ae6:	f04f 0300 	mov.w	r3, #0
 8002aea:	014b      	lsls	r3, r1, #5
 8002aec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002af0:	0142      	lsls	r2, r0, #5
 8002af2:	4610      	mov	r0, r2
 8002af4:	4619      	mov	r1, r3
 8002af6:	1b00      	subs	r0, r0, r4
 8002af8:	eb61 0105 	sbc.w	r1, r1, r5
 8002afc:	f04f 0200 	mov.w	r2, #0
 8002b00:	f04f 0300 	mov.w	r3, #0
 8002b04:	018b      	lsls	r3, r1, #6
 8002b06:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002b0a:	0182      	lsls	r2, r0, #6
 8002b0c:	1a12      	subs	r2, r2, r0
 8002b0e:	eb63 0301 	sbc.w	r3, r3, r1
 8002b12:	f04f 0000 	mov.w	r0, #0
 8002b16:	f04f 0100 	mov.w	r1, #0
 8002b1a:	00d9      	lsls	r1, r3, #3
 8002b1c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002b20:	00d0      	lsls	r0, r2, #3
 8002b22:	4602      	mov	r2, r0
 8002b24:	460b      	mov	r3, r1
 8002b26:	1912      	adds	r2, r2, r4
 8002b28:	eb45 0303 	adc.w	r3, r5, r3
 8002b2c:	f04f 0000 	mov.w	r0, #0
 8002b30:	f04f 0100 	mov.w	r1, #0
 8002b34:	0299      	lsls	r1, r3, #10
 8002b36:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002b3a:	0290      	lsls	r0, r2, #10
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	460b      	mov	r3, r1
 8002b40:	4610      	mov	r0, r2
 8002b42:	4619      	mov	r1, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	461a      	mov	r2, r3
 8002b48:	f04f 0300 	mov.w	r3, #0
 8002b4c:	f7fd fb5c 	bl	8000208 <__aeabi_uldivmod>
 8002b50:	4602      	mov	r2, r0
 8002b52:	460b      	mov	r3, r1
 8002b54:	4613      	mov	r3, r2
 8002b56:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002b58:	4b0b      	ldr	r3, [pc, #44]	; (8002b88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	0c1b      	lsrs	r3, r3, #16
 8002b5e:	f003 0303 	and.w	r3, r3, #3
 8002b62:	3301      	adds	r3, #1
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002b68:	68fa      	ldr	r2, [r7, #12]
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b70:	60bb      	str	r3, [r7, #8]
      break;
 8002b72:	e002      	b.n	8002b7a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b74:	4b05      	ldr	r3, [pc, #20]	; (8002b8c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002b76:	60bb      	str	r3, [r7, #8]
      break;
 8002b78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b7a:	68bb      	ldr	r3, [r7, #8]
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3710      	adds	r7, #16
 8002b80:	46bd      	mov	sp, r7
 8002b82:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002b86:	bf00      	nop
 8002b88:	40023800 	.word	0x40023800
 8002b8c:	00f42400 	.word	0x00f42400
 8002b90:	007a1200 	.word	0x007a1200

08002b94 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b98:	4b03      	ldr	r3, [pc, #12]	; (8002ba8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	20000000 	.word	0x20000000

08002bac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002bb0:	f7ff fff0 	bl	8002b94 <HAL_RCC_GetHCLKFreq>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	4b05      	ldr	r3, [pc, #20]	; (8002bcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	0a9b      	lsrs	r3, r3, #10
 8002bbc:	f003 0307 	and.w	r3, r3, #7
 8002bc0:	4903      	ldr	r1, [pc, #12]	; (8002bd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bc2:	5ccb      	ldrb	r3, [r1, r3]
 8002bc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	40023800 	.word	0x40023800
 8002bd0:	0800588c 	.word	0x0800588c

08002bd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002bd8:	f7ff ffdc 	bl	8002b94 <HAL_RCC_GetHCLKFreq>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	4b05      	ldr	r3, [pc, #20]	; (8002bf4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	0b5b      	lsrs	r3, r3, #13
 8002be4:	f003 0307 	and.w	r3, r3, #7
 8002be8:	4903      	ldr	r1, [pc, #12]	; (8002bf8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bea:	5ccb      	ldrb	r3, [r1, r3]
 8002bec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	40023800 	.word	0x40023800
 8002bf8:	0800588c 	.word	0x0800588c

08002bfc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b088      	sub	sp, #32
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002c04:	2300      	movs	r3, #0
 8002c06:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002c10:	2300      	movs	r3, #0
 8002c12:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002c14:	2300      	movs	r3, #0
 8002c16:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0301 	and.w	r3, r3, #1
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d012      	beq.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002c24:	4b69      	ldr	r3, [pc, #420]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	4a68      	ldr	r2, [pc, #416]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c2a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002c2e:	6093      	str	r3, [r2, #8]
 8002c30:	4b66      	ldr	r3, [pc, #408]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c32:	689a      	ldr	r2, [r3, #8]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c38:	4964      	ldr	r1, [pc, #400]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d101      	bne.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002c46:	2301      	movs	r3, #1
 8002c48:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d017      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c56:	4b5d      	ldr	r3, [pc, #372]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c5c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c64:	4959      	ldr	r1, [pc, #356]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c74:	d101      	bne.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002c76:	2301      	movs	r3, #1
 8002c78:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d101      	bne.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002c82:	2301      	movs	r3, #1
 8002c84:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d017      	beq.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002c92:	4b4e      	ldr	r3, [pc, #312]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c98:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca0:	494a      	ldr	r1, [pc, #296]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cb0:	d101      	bne.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d001      	beq.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0320 	and.w	r3, r3, #32
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	f000 808b 	beq.w	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ce0:	4b3a      	ldr	r3, [pc, #232]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce4:	4a39      	ldr	r2, [pc, #228]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ce6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cea:	6413      	str	r3, [r2, #64]	; 0x40
 8002cec:	4b37      	ldr	r3, [pc, #220]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf4:	60bb      	str	r3, [r7, #8]
 8002cf6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002cf8:	4b35      	ldr	r3, [pc, #212]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a34      	ldr	r2, [pc, #208]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002cfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d04:	f7fe fa7a 	bl	80011fc <HAL_GetTick>
 8002d08:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002d0a:	e008      	b.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d0c:	f7fe fa76 	bl	80011fc <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b64      	cmp	r3, #100	; 0x64
 8002d18:	d901      	bls.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e357      	b.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002d1e:	4b2c      	ldr	r3, [pc, #176]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d0f0      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d2a:	4b28      	ldr	r3, [pc, #160]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d32:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d035      	beq.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d42:	693a      	ldr	r2, [r7, #16]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d02e      	beq.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d48:	4b20      	ldr	r3, [pc, #128]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d50:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d52:	4b1e      	ldr	r3, [pc, #120]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d56:	4a1d      	ldr	r2, [pc, #116]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d5c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d5e:	4b1b      	ldr	r3, [pc, #108]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d62:	4a1a      	ldr	r2, [pc, #104]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d68:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002d6a:	4a18      	ldr	r2, [pc, #96]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002d70:	4b16      	ldr	r3, [pc, #88]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d74:	f003 0301 	and.w	r3, r3, #1
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d114      	bne.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d7c:	f7fe fa3e 	bl	80011fc <HAL_GetTick>
 8002d80:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d82:	e00a      	b.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d84:	f7fe fa3a 	bl	80011fc <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d901      	bls.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e319      	b.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d9a:	4b0c      	ldr	r3, [pc, #48]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d0ee      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002daa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002db2:	d111      	bne.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002db4:	4b05      	ldr	r3, [pc, #20]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002dc0:	4b04      	ldr	r3, [pc, #16]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002dc2:	400b      	ands	r3, r1
 8002dc4:	4901      	ldr	r1, [pc, #4]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	608b      	str	r3, [r1, #8]
 8002dca:	e00b      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002dcc:	40023800 	.word	0x40023800
 8002dd0:	40007000 	.word	0x40007000
 8002dd4:	0ffffcff 	.word	0x0ffffcff
 8002dd8:	4bb1      	ldr	r3, [pc, #708]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	4ab0      	ldr	r2, [pc, #704]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002dde:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002de2:	6093      	str	r3, [r2, #8]
 8002de4:	4bae      	ldr	r3, [pc, #696]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002de6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002df0:	49ab      	ldr	r1, [pc, #684]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0310 	and.w	r3, r3, #16
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d010      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002e02:	4ba7      	ldr	r3, [pc, #668]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e08:	4aa5      	ldr	r2, [pc, #660]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e0e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002e12:	4ba3      	ldr	r3, [pc, #652]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e14:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e1c:	49a0      	ldr	r1, [pc, #640]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d00a      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e30:	4b9b      	ldr	r3, [pc, #620]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e36:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e3e:	4998      	ldr	r1, [pc, #608]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00a      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e52:	4b93      	ldr	r3, [pc, #588]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e58:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e60:	498f      	ldr	r1, [pc, #572]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d00a      	beq.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e74:	4b8a      	ldr	r3, [pc, #552]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e7a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e82:	4987      	ldr	r1, [pc, #540]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00a      	beq.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002e96:	4b82      	ldr	r3, [pc, #520]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e9c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea4:	497e      	ldr	r1, [pc, #504]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d00a      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002eb8:	4b79      	ldr	r3, [pc, #484]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ebe:	f023 0203 	bic.w	r2, r3, #3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec6:	4976      	ldr	r1, [pc, #472]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d00a      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002eda:	4b71      	ldr	r3, [pc, #452]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee0:	f023 020c 	bic.w	r2, r3, #12
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ee8:	496d      	ldr	r1, [pc, #436]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d00a      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002efc:	4b68      	ldr	r3, [pc, #416]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f02:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f0a:	4965      	ldr	r1, [pc, #404]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00a      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f1e:	4b60      	ldr	r3, [pc, #384]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f24:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f2c:	495c      	ldr	r1, [pc, #368]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d00a      	beq.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002f40:	4b57      	ldr	r3, [pc, #348]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f46:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f4e:	4954      	ldr	r1, [pc, #336]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00a      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002f62:	4b4f      	ldr	r3, [pc, #316]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f68:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f70:	494b      	ldr	r1, [pc, #300]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d00a      	beq.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002f84:	4b46      	ldr	r3, [pc, #280]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f8a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f92:	4943      	ldr	r1, [pc, #268]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00a      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002fa6:	4b3e      	ldr	r3, [pc, #248]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fb4:	493a      	ldr	r1, [pc, #232]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d00a      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002fc8:	4b35      	ldr	r3, [pc, #212]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fce:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fd6:	4932      	ldr	r1, [pc, #200]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d011      	beq.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002fea:	4b2d      	ldr	r3, [pc, #180]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ff0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ff8:	4929      	ldr	r1, [pc, #164]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003004:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003008:	d101      	bne.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800300a:	2301      	movs	r3, #1
 800300c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0308 	and.w	r3, r3, #8
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800301a:	2301      	movs	r3, #1
 800301c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d00a      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800302a:	4b1d      	ldr	r3, [pc, #116]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800302c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003030:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003038:	4919      	ldr	r1, [pc, #100]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800303a:	4313      	orrs	r3, r2
 800303c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00b      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800304c:	4b14      	ldr	r3, [pc, #80]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800304e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003052:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800305c:	4910      	ldr	r1, [pc, #64]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800305e:	4313      	orrs	r3, r2
 8003060:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	2b01      	cmp	r3, #1
 8003068:	d006      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003072:	2b00      	cmp	r3, #0
 8003074:	f000 80d9 	beq.w	800322a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003078:	4b09      	ldr	r3, [pc, #36]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a08      	ldr	r2, [pc, #32]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800307e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003082:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003084:	f7fe f8ba 	bl	80011fc <HAL_GetTick>
 8003088:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800308a:	e00b      	b.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800308c:	f7fe f8b6 	bl	80011fc <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	2b64      	cmp	r3, #100	; 0x64
 8003098:	d904      	bls.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e197      	b.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800309e:	bf00      	nop
 80030a0:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80030a4:	4b6c      	ldr	r3, [pc, #432]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d1ed      	bne.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0301 	and.w	r3, r3, #1
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d021      	beq.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d11d      	bne.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80030c4:	4b64      	ldr	r3, [pc, #400]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030ca:	0c1b      	lsrs	r3, r3, #16
 80030cc:	f003 0303 	and.w	r3, r3, #3
 80030d0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80030d2:	4b61      	ldr	r3, [pc, #388]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030d8:	0e1b      	lsrs	r3, r3, #24
 80030da:	f003 030f 	and.w	r3, r3, #15
 80030de:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	019a      	lsls	r2, r3, #6
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	041b      	lsls	r3, r3, #16
 80030ea:	431a      	orrs	r2, r3
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	061b      	lsls	r3, r3, #24
 80030f0:	431a      	orrs	r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	071b      	lsls	r3, r3, #28
 80030f8:	4957      	ldr	r1, [pc, #348]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d004      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003110:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003114:	d00a      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800311e:	2b00      	cmp	r3, #0
 8003120:	d02e      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003126:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800312a:	d129      	bne.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800312c:	4b4a      	ldr	r3, [pc, #296]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800312e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003132:	0c1b      	lsrs	r3, r3, #16
 8003134:	f003 0303 	and.w	r3, r3, #3
 8003138:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800313a:	4b47      	ldr	r3, [pc, #284]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800313c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003140:	0f1b      	lsrs	r3, r3, #28
 8003142:	f003 0307 	and.w	r3, r3, #7
 8003146:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	019a      	lsls	r2, r3, #6
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	041b      	lsls	r3, r3, #16
 8003152:	431a      	orrs	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	061b      	lsls	r3, r3, #24
 800315a:	431a      	orrs	r2, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	071b      	lsls	r3, r3, #28
 8003160:	493d      	ldr	r1, [pc, #244]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003162:	4313      	orrs	r3, r2
 8003164:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003168:	4b3b      	ldr	r3, [pc, #236]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800316a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800316e:	f023 021f 	bic.w	r2, r3, #31
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003176:	3b01      	subs	r3, #1
 8003178:	4937      	ldr	r1, [pc, #220]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800317a:	4313      	orrs	r3, r2
 800317c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d01d      	beq.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800318c:	4b32      	ldr	r3, [pc, #200]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800318e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003192:	0e1b      	lsrs	r3, r3, #24
 8003194:	f003 030f 	and.w	r3, r3, #15
 8003198:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800319a:	4b2f      	ldr	r3, [pc, #188]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800319c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031a0:	0f1b      	lsrs	r3, r3, #28
 80031a2:	f003 0307 	and.w	r3, r3, #7
 80031a6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	019a      	lsls	r2, r3, #6
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	041b      	lsls	r3, r3, #16
 80031b4:	431a      	orrs	r2, r3
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	061b      	lsls	r3, r3, #24
 80031ba:	431a      	orrs	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	071b      	lsls	r3, r3, #28
 80031c0:	4925      	ldr	r1, [pc, #148]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d011      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	019a      	lsls	r2, r3, #6
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	041b      	lsls	r3, r3, #16
 80031e0:	431a      	orrs	r2, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	061b      	lsls	r3, r3, #24
 80031e8:	431a      	orrs	r2, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	071b      	lsls	r3, r3, #28
 80031f0:	4919      	ldr	r1, [pc, #100]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80031f8:	4b17      	ldr	r3, [pc, #92]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a16      	ldr	r2, [pc, #88]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003202:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003204:	f7fd fffa 	bl	80011fc <HAL_GetTick>
 8003208:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800320a:	e008      	b.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800320c:	f7fd fff6 	bl	80011fc <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b64      	cmp	r3, #100	; 0x64
 8003218:	d901      	bls.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e0d7      	b.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800321e:	4b0e      	ldr	r3, [pc, #56]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d0f0      	beq.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	2b01      	cmp	r3, #1
 800322e:	f040 80cd 	bne.w	80033cc <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003232:	4b09      	ldr	r3, [pc, #36]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a08      	ldr	r2, [pc, #32]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003238:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800323c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800323e:	f7fd ffdd 	bl	80011fc <HAL_GetTick>
 8003242:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003244:	e00a      	b.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003246:	f7fd ffd9 	bl	80011fc <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	2b64      	cmp	r3, #100	; 0x64
 8003252:	d903      	bls.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e0ba      	b.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003258:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800325c:	4b5e      	ldr	r3, [pc, #376]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003264:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003268:	d0ed      	beq.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d003      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800327a:	2b00      	cmp	r3, #0
 800327c:	d009      	beq.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003286:	2b00      	cmp	r3, #0
 8003288:	d02e      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328e:	2b00      	cmp	r3, #0
 8003290:	d12a      	bne.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003292:	4b51      	ldr	r3, [pc, #324]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003298:	0c1b      	lsrs	r3, r3, #16
 800329a:	f003 0303 	and.w	r3, r3, #3
 800329e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80032a0:	4b4d      	ldr	r3, [pc, #308]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032a6:	0f1b      	lsrs	r3, r3, #28
 80032a8:	f003 0307 	and.w	r3, r3, #7
 80032ac:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	019a      	lsls	r2, r3, #6
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	041b      	lsls	r3, r3, #16
 80032b8:	431a      	orrs	r2, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	061b      	lsls	r3, r3, #24
 80032c0:	431a      	orrs	r2, r3
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	071b      	lsls	r3, r3, #28
 80032c6:	4944      	ldr	r1, [pc, #272]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80032ce:	4b42      	ldr	r3, [pc, #264]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032d4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032dc:	3b01      	subs	r3, #1
 80032de:	021b      	lsls	r3, r3, #8
 80032e0:	493d      	ldr	r1, [pc, #244]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d022      	beq.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032fc:	d11d      	bne.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80032fe:	4b36      	ldr	r3, [pc, #216]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003304:	0e1b      	lsrs	r3, r3, #24
 8003306:	f003 030f 	and.w	r3, r3, #15
 800330a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800330c:	4b32      	ldr	r3, [pc, #200]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800330e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003312:	0f1b      	lsrs	r3, r3, #28
 8003314:	f003 0307 	and.w	r3, r3, #7
 8003318:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	019a      	lsls	r2, r3, #6
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6a1b      	ldr	r3, [r3, #32]
 8003324:	041b      	lsls	r3, r3, #16
 8003326:	431a      	orrs	r2, r3
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	061b      	lsls	r3, r3, #24
 800332c:	431a      	orrs	r2, r3
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	071b      	lsls	r3, r3, #28
 8003332:	4929      	ldr	r1, [pc, #164]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003334:	4313      	orrs	r3, r2
 8003336:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0308 	and.w	r3, r3, #8
 8003342:	2b00      	cmp	r3, #0
 8003344:	d028      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003346:	4b24      	ldr	r3, [pc, #144]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800334c:	0e1b      	lsrs	r3, r3, #24
 800334e:	f003 030f 	and.w	r3, r3, #15
 8003352:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003354:	4b20      	ldr	r3, [pc, #128]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800335a:	0c1b      	lsrs	r3, r3, #16
 800335c:	f003 0303 	and.w	r3, r3, #3
 8003360:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	019a      	lsls	r2, r3, #6
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	041b      	lsls	r3, r3, #16
 800336c:	431a      	orrs	r2, r3
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	061b      	lsls	r3, r3, #24
 8003372:	431a      	orrs	r2, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	69db      	ldr	r3, [r3, #28]
 8003378:	071b      	lsls	r3, r3, #28
 800337a:	4917      	ldr	r1, [pc, #92]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800337c:	4313      	orrs	r3, r2
 800337e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003382:	4b15      	ldr	r3, [pc, #84]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003384:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003388:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003390:	4911      	ldr	r1, [pc, #68]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003392:	4313      	orrs	r3, r2
 8003394:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003398:	4b0f      	ldr	r3, [pc, #60]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a0e      	ldr	r2, [pc, #56]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800339e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033a4:	f7fd ff2a 	bl	80011fc <HAL_GetTick>
 80033a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80033aa:	e008      	b.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80033ac:	f7fd ff26 	bl	80011fc <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b64      	cmp	r3, #100	; 0x64
 80033b8:	d901      	bls.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e007      	b.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80033be:	4b06      	ldr	r3, [pc, #24]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033ca:	d1ef      	bne.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3720      	adds	r7, #32
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	40023800 	.word	0x40023800

080033dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d101      	bne.n	80033ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e049      	b.n	8003482 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d106      	bne.n	8003408 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f7fd fc72 	bl	8000cec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2202      	movs	r2, #2
 800340c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	3304      	adds	r3, #4
 8003418:	4619      	mov	r1, r3
 800341a:	4610      	mov	r0, r2
 800341c:	f000 fdd6 	bl	8003fcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3708      	adds	r7, #8
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
	...

0800348c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800348c:	b480      	push	{r7}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800349a:	b2db      	uxtb	r3, r3
 800349c:	2b01      	cmp	r3, #1
 800349e:	d001      	beq.n	80034a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e054      	b.n	800354e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2202      	movs	r2, #2
 80034a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68da      	ldr	r2, [r3, #12]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f042 0201 	orr.w	r2, r2, #1
 80034ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a26      	ldr	r2, [pc, #152]	; (800355c <HAL_TIM_Base_Start_IT+0xd0>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d022      	beq.n	800350c <HAL_TIM_Base_Start_IT+0x80>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ce:	d01d      	beq.n	800350c <HAL_TIM_Base_Start_IT+0x80>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a22      	ldr	r2, [pc, #136]	; (8003560 <HAL_TIM_Base_Start_IT+0xd4>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d018      	beq.n	800350c <HAL_TIM_Base_Start_IT+0x80>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a21      	ldr	r2, [pc, #132]	; (8003564 <HAL_TIM_Base_Start_IT+0xd8>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d013      	beq.n	800350c <HAL_TIM_Base_Start_IT+0x80>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a1f      	ldr	r2, [pc, #124]	; (8003568 <HAL_TIM_Base_Start_IT+0xdc>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d00e      	beq.n	800350c <HAL_TIM_Base_Start_IT+0x80>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a1e      	ldr	r2, [pc, #120]	; (800356c <HAL_TIM_Base_Start_IT+0xe0>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d009      	beq.n	800350c <HAL_TIM_Base_Start_IT+0x80>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a1c      	ldr	r2, [pc, #112]	; (8003570 <HAL_TIM_Base_Start_IT+0xe4>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d004      	beq.n	800350c <HAL_TIM_Base_Start_IT+0x80>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a1b      	ldr	r2, [pc, #108]	; (8003574 <HAL_TIM_Base_Start_IT+0xe8>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d115      	bne.n	8003538 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	689a      	ldr	r2, [r3, #8]
 8003512:	4b19      	ldr	r3, [pc, #100]	; (8003578 <HAL_TIM_Base_Start_IT+0xec>)
 8003514:	4013      	ands	r3, r2
 8003516:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2b06      	cmp	r3, #6
 800351c:	d015      	beq.n	800354a <HAL_TIM_Base_Start_IT+0xbe>
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003524:	d011      	beq.n	800354a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f042 0201 	orr.w	r2, r2, #1
 8003534:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003536:	e008      	b.n	800354a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f042 0201 	orr.w	r2, r2, #1
 8003546:	601a      	str	r2, [r3, #0]
 8003548:	e000      	b.n	800354c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800354a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3714      	adds	r7, #20
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	40010000 	.word	0x40010000
 8003560:	40000400 	.word	0x40000400
 8003564:	40000800 	.word	0x40000800
 8003568:	40000c00 	.word	0x40000c00
 800356c:	40010400 	.word	0x40010400
 8003570:	40014000 	.word	0x40014000
 8003574:	40001800 	.word	0x40001800
 8003578:	00010007 	.word	0x00010007

0800357c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d101      	bne.n	800358e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e049      	b.n	8003622 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003594:	b2db      	uxtb	r3, r3
 8003596:	2b00      	cmp	r3, #0
 8003598:	d106      	bne.n	80035a8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 f841 	bl	800362a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2202      	movs	r2, #2
 80035ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	3304      	adds	r3, #4
 80035b8:	4619      	mov	r1, r3
 80035ba:	4610      	mov	r0, r2
 80035bc:	f000 fd06 	bl	8003fcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800362a:	b480      	push	{r7}
 800362c:	b083      	sub	sp, #12
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003632:	bf00      	nop
 8003634:	370c      	adds	r7, #12
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
	...

08003640 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d109      	bne.n	8003664 <HAL_TIM_PWM_Start+0x24>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003656:	b2db      	uxtb	r3, r3
 8003658:	2b01      	cmp	r3, #1
 800365a:	bf14      	ite	ne
 800365c:	2301      	movne	r3, #1
 800365e:	2300      	moveq	r3, #0
 8003660:	b2db      	uxtb	r3, r3
 8003662:	e03c      	b.n	80036de <HAL_TIM_PWM_Start+0x9e>
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	2b04      	cmp	r3, #4
 8003668:	d109      	bne.n	800367e <HAL_TIM_PWM_Start+0x3e>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003670:	b2db      	uxtb	r3, r3
 8003672:	2b01      	cmp	r3, #1
 8003674:	bf14      	ite	ne
 8003676:	2301      	movne	r3, #1
 8003678:	2300      	moveq	r3, #0
 800367a:	b2db      	uxtb	r3, r3
 800367c:	e02f      	b.n	80036de <HAL_TIM_PWM_Start+0x9e>
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	2b08      	cmp	r3, #8
 8003682:	d109      	bne.n	8003698 <HAL_TIM_PWM_Start+0x58>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800368a:	b2db      	uxtb	r3, r3
 800368c:	2b01      	cmp	r3, #1
 800368e:	bf14      	ite	ne
 8003690:	2301      	movne	r3, #1
 8003692:	2300      	moveq	r3, #0
 8003694:	b2db      	uxtb	r3, r3
 8003696:	e022      	b.n	80036de <HAL_TIM_PWM_Start+0x9e>
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	2b0c      	cmp	r3, #12
 800369c:	d109      	bne.n	80036b2 <HAL_TIM_PWM_Start+0x72>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	bf14      	ite	ne
 80036aa:	2301      	movne	r3, #1
 80036ac:	2300      	moveq	r3, #0
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	e015      	b.n	80036de <HAL_TIM_PWM_Start+0x9e>
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	2b10      	cmp	r3, #16
 80036b6:	d109      	bne.n	80036cc <HAL_TIM_PWM_Start+0x8c>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	bf14      	ite	ne
 80036c4:	2301      	movne	r3, #1
 80036c6:	2300      	moveq	r3, #0
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	e008      	b.n	80036de <HAL_TIM_PWM_Start+0x9e>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	bf14      	ite	ne
 80036d8:	2301      	movne	r3, #1
 80036da:	2300      	moveq	r3, #0
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d001      	beq.n	80036e6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e092      	b.n	800380c <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d104      	bne.n	80036f6 <HAL_TIM_PWM_Start+0xb6>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2202      	movs	r2, #2
 80036f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036f4:	e023      	b.n	800373e <HAL_TIM_PWM_Start+0xfe>
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	2b04      	cmp	r3, #4
 80036fa:	d104      	bne.n	8003706 <HAL_TIM_PWM_Start+0xc6>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2202      	movs	r2, #2
 8003700:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003704:	e01b      	b.n	800373e <HAL_TIM_PWM_Start+0xfe>
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	2b08      	cmp	r3, #8
 800370a:	d104      	bne.n	8003716 <HAL_TIM_PWM_Start+0xd6>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2202      	movs	r2, #2
 8003710:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003714:	e013      	b.n	800373e <HAL_TIM_PWM_Start+0xfe>
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	2b0c      	cmp	r3, #12
 800371a:	d104      	bne.n	8003726 <HAL_TIM_PWM_Start+0xe6>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2202      	movs	r2, #2
 8003720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003724:	e00b      	b.n	800373e <HAL_TIM_PWM_Start+0xfe>
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	2b10      	cmp	r3, #16
 800372a:	d104      	bne.n	8003736 <HAL_TIM_PWM_Start+0xf6>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2202      	movs	r2, #2
 8003730:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003734:	e003      	b.n	800373e <HAL_TIM_PWM_Start+0xfe>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2202      	movs	r2, #2
 800373a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	2201      	movs	r2, #1
 8003744:	6839      	ldr	r1, [r7, #0]
 8003746:	4618      	mov	r0, r3
 8003748:	f000 ffd8 	bl	80046fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a30      	ldr	r2, [pc, #192]	; (8003814 <HAL_TIM_PWM_Start+0x1d4>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d004      	beq.n	8003760 <HAL_TIM_PWM_Start+0x120>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a2f      	ldr	r2, [pc, #188]	; (8003818 <HAL_TIM_PWM_Start+0x1d8>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d101      	bne.n	8003764 <HAL_TIM_PWM_Start+0x124>
 8003760:	2301      	movs	r3, #1
 8003762:	e000      	b.n	8003766 <HAL_TIM_PWM_Start+0x126>
 8003764:	2300      	movs	r3, #0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d007      	beq.n	800377a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003778:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a25      	ldr	r2, [pc, #148]	; (8003814 <HAL_TIM_PWM_Start+0x1d4>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d022      	beq.n	80037ca <HAL_TIM_PWM_Start+0x18a>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800378c:	d01d      	beq.n	80037ca <HAL_TIM_PWM_Start+0x18a>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a22      	ldr	r2, [pc, #136]	; (800381c <HAL_TIM_PWM_Start+0x1dc>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d018      	beq.n	80037ca <HAL_TIM_PWM_Start+0x18a>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a20      	ldr	r2, [pc, #128]	; (8003820 <HAL_TIM_PWM_Start+0x1e0>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d013      	beq.n	80037ca <HAL_TIM_PWM_Start+0x18a>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a1f      	ldr	r2, [pc, #124]	; (8003824 <HAL_TIM_PWM_Start+0x1e4>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d00e      	beq.n	80037ca <HAL_TIM_PWM_Start+0x18a>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a19      	ldr	r2, [pc, #100]	; (8003818 <HAL_TIM_PWM_Start+0x1d8>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d009      	beq.n	80037ca <HAL_TIM_PWM_Start+0x18a>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a1b      	ldr	r2, [pc, #108]	; (8003828 <HAL_TIM_PWM_Start+0x1e8>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d004      	beq.n	80037ca <HAL_TIM_PWM_Start+0x18a>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a19      	ldr	r2, [pc, #100]	; (800382c <HAL_TIM_PWM_Start+0x1ec>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d115      	bne.n	80037f6 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	689a      	ldr	r2, [r3, #8]
 80037d0:	4b17      	ldr	r3, [pc, #92]	; (8003830 <HAL_TIM_PWM_Start+0x1f0>)
 80037d2:	4013      	ands	r3, r2
 80037d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2b06      	cmp	r3, #6
 80037da:	d015      	beq.n	8003808 <HAL_TIM_PWM_Start+0x1c8>
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037e2:	d011      	beq.n	8003808 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f042 0201 	orr.w	r2, r2, #1
 80037f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037f4:	e008      	b.n	8003808 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f042 0201 	orr.w	r2, r2, #1
 8003804:	601a      	str	r2, [r3, #0]
 8003806:	e000      	b.n	800380a <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003808:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800380a:	2300      	movs	r3, #0
}
 800380c:	4618      	mov	r0, r3
 800380e:	3710      	adds	r7, #16
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}
 8003814:	40010000 	.word	0x40010000
 8003818:	40010400 	.word	0x40010400
 800381c:	40000400 	.word	0x40000400
 8003820:	40000800 	.word	0x40000800
 8003824:	40000c00 	.word	0x40000c00
 8003828:	40014000 	.word	0x40014000
 800382c:	40001800 	.word	0x40001800
 8003830:	00010007 	.word	0x00010007

08003834 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b086      	sub	sp, #24
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d101      	bne.n	8003848 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e08f      	b.n	8003968 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800384e:	b2db      	uxtb	r3, r3
 8003850:	2b00      	cmp	r3, #0
 8003852:	d106      	bne.n	8003862 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f7fd fa7f 	bl	8000d60 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2202      	movs	r2, #2
 8003866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	6899      	ldr	r1, [r3, #8]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	4b3e      	ldr	r3, [pc, #248]	; (8003970 <HAL_TIM_Encoder_Init+0x13c>)
 8003876:	400b      	ands	r3, r1
 8003878:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	3304      	adds	r3, #4
 8003882:	4619      	mov	r1, r3
 8003884:	4610      	mov	r0, r2
 8003886:	f000 fba1 	bl	8003fcc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	699b      	ldr	r3, [r3, #24]
 8003898:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	6a1b      	ldr	r3, [r3, #32]
 80038a0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	697a      	ldr	r2, [r7, #20]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80038ac:	693a      	ldr	r2, [r7, #16]
 80038ae:	4b31      	ldr	r3, [pc, #196]	; (8003974 <HAL_TIM_Encoder_Init+0x140>)
 80038b0:	4013      	ands	r3, r2
 80038b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	689a      	ldr	r2, [r3, #8]
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	699b      	ldr	r3, [r3, #24]
 80038bc:	021b      	lsls	r3, r3, #8
 80038be:	4313      	orrs	r3, r2
 80038c0:	693a      	ldr	r2, [r7, #16]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80038c6:	693a      	ldr	r2, [r7, #16]
 80038c8:	4b2b      	ldr	r3, [pc, #172]	; (8003978 <HAL_TIM_Encoder_Init+0x144>)
 80038ca:	4013      	ands	r3, r2
 80038cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	4b2a      	ldr	r3, [pc, #168]	; (800397c <HAL_TIM_Encoder_Init+0x148>)
 80038d2:	4013      	ands	r3, r2
 80038d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	68da      	ldr	r2, [r3, #12]
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	69db      	ldr	r3, [r3, #28]
 80038de:	021b      	lsls	r3, r3, #8
 80038e0:	4313      	orrs	r3, r2
 80038e2:	693a      	ldr	r2, [r7, #16]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	011a      	lsls	r2, r3, #4
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	6a1b      	ldr	r3, [r3, #32]
 80038f2:	031b      	lsls	r3, r3, #12
 80038f4:	4313      	orrs	r3, r2
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003902:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800390a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	685a      	ldr	r2, [r3, #4]
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	695b      	ldr	r3, [r3, #20]
 8003914:	011b      	lsls	r3, r3, #4
 8003916:	4313      	orrs	r3, r2
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	4313      	orrs	r3, r2
 800391c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	697a      	ldr	r2, [r7, #20]
 8003924:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	693a      	ldr	r2, [r7, #16]
 800392c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2201      	movs	r2, #1
 800393a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2201      	movs	r2, #1
 8003942:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2201      	movs	r2, #1
 800394a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2201      	movs	r2, #1
 8003952:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2201      	movs	r2, #1
 800395a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2201      	movs	r2, #1
 8003962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003966:	2300      	movs	r3, #0
}
 8003968:	4618      	mov	r0, r3
 800396a:	3718      	adds	r7, #24
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}
 8003970:	fffebff8 	.word	0xfffebff8
 8003974:	fffffcfc 	.word	0xfffffcfc
 8003978:	fffff3f3 	.word	0xfffff3f3
 800397c:	ffff0f0f 	.word	0xffff0f0f

08003980 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	f003 0302 	and.w	r3, r3, #2
 8003992:	2b02      	cmp	r3, #2
 8003994:	d122      	bne.n	80039dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	f003 0302 	and.w	r3, r3, #2
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d11b      	bne.n	80039dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f06f 0202 	mvn.w	r2, #2
 80039ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2201      	movs	r2, #1
 80039b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	f003 0303 	and.w	r3, r3, #3
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d003      	beq.n	80039ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 fae4 	bl	8003f90 <HAL_TIM_IC_CaptureCallback>
 80039c8:	e005      	b.n	80039d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 fad6 	bl	8003f7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f000 fae7 	bl	8003fa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	f003 0304 	and.w	r3, r3, #4
 80039e6:	2b04      	cmp	r3, #4
 80039e8:	d122      	bne.n	8003a30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	f003 0304 	and.w	r3, r3, #4
 80039f4:	2b04      	cmp	r3, #4
 80039f6:	d11b      	bne.n	8003a30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f06f 0204 	mvn.w	r2, #4
 8003a00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2202      	movs	r2, #2
 8003a06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	699b      	ldr	r3, [r3, #24]
 8003a0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d003      	beq.n	8003a1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 faba 	bl	8003f90 <HAL_TIM_IC_CaptureCallback>
 8003a1c:	e005      	b.n	8003a2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 faac 	bl	8003f7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f000 fabd 	bl	8003fa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	f003 0308 	and.w	r3, r3, #8
 8003a3a:	2b08      	cmp	r3, #8
 8003a3c:	d122      	bne.n	8003a84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	f003 0308 	and.w	r3, r3, #8
 8003a48:	2b08      	cmp	r3, #8
 8003a4a:	d11b      	bne.n	8003a84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f06f 0208 	mvn.w	r2, #8
 8003a54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2204      	movs	r2, #4
 8003a5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	69db      	ldr	r3, [r3, #28]
 8003a62:	f003 0303 	and.w	r3, r3, #3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d003      	beq.n	8003a72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f000 fa90 	bl	8003f90 <HAL_TIM_IC_CaptureCallback>
 8003a70:	e005      	b.n	8003a7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 fa82 	bl	8003f7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f000 fa93 	bl	8003fa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	f003 0310 	and.w	r3, r3, #16
 8003a8e:	2b10      	cmp	r3, #16
 8003a90:	d122      	bne.n	8003ad8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	f003 0310 	and.w	r3, r3, #16
 8003a9c:	2b10      	cmp	r3, #16
 8003a9e:	d11b      	bne.n	8003ad8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f06f 0210 	mvn.w	r2, #16
 8003aa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2208      	movs	r2, #8
 8003aae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	69db      	ldr	r3, [r3, #28]
 8003ab6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d003      	beq.n	8003ac6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 fa66 	bl	8003f90 <HAL_TIM_IC_CaptureCallback>
 8003ac4:	e005      	b.n	8003ad2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 fa58 	bl	8003f7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f000 fa69 	bl	8003fa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	f003 0301 	and.w	r3, r3, #1
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d10e      	bne.n	8003b04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	f003 0301 	and.w	r3, r3, #1
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d107      	bne.n	8003b04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f06f 0201 	mvn.w	r2, #1
 8003afc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f7fd f9d8 	bl	8000eb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b0e:	2b80      	cmp	r3, #128	; 0x80
 8003b10:	d10e      	bne.n	8003b30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b1c:	2b80      	cmp	r3, #128	; 0x80
 8003b1e:	d107      	bne.n	8003b30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 ff22 	bl	8004974 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b3e:	d10e      	bne.n	8003b5e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b4a:	2b80      	cmp	r3, #128	; 0x80
 8003b4c:	d107      	bne.n	8003b5e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003b56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f000 ff15 	bl	8004988 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	691b      	ldr	r3, [r3, #16]
 8003b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b68:	2b40      	cmp	r3, #64	; 0x40
 8003b6a:	d10e      	bne.n	8003b8a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b76:	2b40      	cmp	r3, #64	; 0x40
 8003b78:	d107      	bne.n	8003b8a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f000 fa17 	bl	8003fb8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	691b      	ldr	r3, [r3, #16]
 8003b90:	f003 0320 	and.w	r3, r3, #32
 8003b94:	2b20      	cmp	r3, #32
 8003b96:	d10e      	bne.n	8003bb6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	f003 0320 	and.w	r3, r3, #32
 8003ba2:	2b20      	cmp	r3, #32
 8003ba4:	d107      	bne.n	8003bb6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f06f 0220 	mvn.w	r2, #32
 8003bae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f000 fed5 	bl	8004960 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003bb6:	bf00      	nop
 8003bb8:	3708      	adds	r7, #8
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
	...

08003bc0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b086      	sub	sp, #24
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d101      	bne.n	8003bde <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003bda:	2302      	movs	r3, #2
 8003bdc:	e0ff      	b.n	8003dde <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2201      	movs	r2, #1
 8003be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2b14      	cmp	r3, #20
 8003bea:	f200 80f0 	bhi.w	8003dce <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003bee:	a201      	add	r2, pc, #4	; (adr r2, 8003bf4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf4:	08003c49 	.word	0x08003c49
 8003bf8:	08003dcf 	.word	0x08003dcf
 8003bfc:	08003dcf 	.word	0x08003dcf
 8003c00:	08003dcf 	.word	0x08003dcf
 8003c04:	08003c89 	.word	0x08003c89
 8003c08:	08003dcf 	.word	0x08003dcf
 8003c0c:	08003dcf 	.word	0x08003dcf
 8003c10:	08003dcf 	.word	0x08003dcf
 8003c14:	08003ccb 	.word	0x08003ccb
 8003c18:	08003dcf 	.word	0x08003dcf
 8003c1c:	08003dcf 	.word	0x08003dcf
 8003c20:	08003dcf 	.word	0x08003dcf
 8003c24:	08003d0b 	.word	0x08003d0b
 8003c28:	08003dcf 	.word	0x08003dcf
 8003c2c:	08003dcf 	.word	0x08003dcf
 8003c30:	08003dcf 	.word	0x08003dcf
 8003c34:	08003d4d 	.word	0x08003d4d
 8003c38:	08003dcf 	.word	0x08003dcf
 8003c3c:	08003dcf 	.word	0x08003dcf
 8003c40:	08003dcf 	.word	0x08003dcf
 8003c44:	08003d8d 	.word	0x08003d8d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68b9      	ldr	r1, [r7, #8]
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f000 fa5c 	bl	800410c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	699a      	ldr	r2, [r3, #24]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f042 0208 	orr.w	r2, r2, #8
 8003c62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	699a      	ldr	r2, [r3, #24]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f022 0204 	bic.w	r2, r2, #4
 8003c72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	6999      	ldr	r1, [r3, #24]
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	691a      	ldr	r2, [r3, #16]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	430a      	orrs	r2, r1
 8003c84:	619a      	str	r2, [r3, #24]
      break;
 8003c86:	e0a5      	b.n	8003dd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	68b9      	ldr	r1, [r7, #8]
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f000 faae 	bl	80041f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	699a      	ldr	r2, [r3, #24]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ca2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	699a      	ldr	r2, [r3, #24]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	6999      	ldr	r1, [r3, #24]
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	021a      	lsls	r2, r3, #8
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	430a      	orrs	r2, r1
 8003cc6:	619a      	str	r2, [r3, #24]
      break;
 8003cc8:	e084      	b.n	8003dd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68b9      	ldr	r1, [r7, #8]
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f000 fb05 	bl	80042e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	69da      	ldr	r2, [r3, #28]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f042 0208 	orr.w	r2, r2, #8
 8003ce4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	69da      	ldr	r2, [r3, #28]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f022 0204 	bic.w	r2, r2, #4
 8003cf4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	69d9      	ldr	r1, [r3, #28]
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	691a      	ldr	r2, [r3, #16]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	430a      	orrs	r2, r1
 8003d06:	61da      	str	r2, [r3, #28]
      break;
 8003d08:	e064      	b.n	8003dd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	68b9      	ldr	r1, [r7, #8]
 8003d10:	4618      	mov	r0, r3
 8003d12:	f000 fb5b 	bl	80043cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	69da      	ldr	r2, [r3, #28]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	69da      	ldr	r2, [r3, #28]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	69d9      	ldr	r1, [r3, #28]
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	021a      	lsls	r2, r3, #8
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	430a      	orrs	r2, r1
 8003d48:	61da      	str	r2, [r3, #28]
      break;
 8003d4a:	e043      	b.n	8003dd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68b9      	ldr	r1, [r7, #8]
 8003d52:	4618      	mov	r0, r3
 8003d54:	f000 fb92 	bl	800447c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f042 0208 	orr.w	r2, r2, #8
 8003d66:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f022 0204 	bic.w	r2, r2, #4
 8003d76:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	691a      	ldr	r2, [r3, #16]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	430a      	orrs	r2, r1
 8003d88:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003d8a:	e023      	b.n	8003dd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68b9      	ldr	r1, [r7, #8]
 8003d92:	4618      	mov	r0, r3
 8003d94:	f000 fbc4 	bl	8004520 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003da6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003db6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	021a      	lsls	r2, r3, #8
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003dcc:	e002      	b.n	8003dd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	75fb      	strb	r3, [r7, #23]
      break;
 8003dd2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ddc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3718      	adds	r7, #24
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop

08003de8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003df2:	2300      	movs	r3, #0
 8003df4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d101      	bne.n	8003e04 <HAL_TIM_ConfigClockSource+0x1c>
 8003e00:	2302      	movs	r3, #2
 8003e02:	e0b4      	b.n	8003f6e <HAL_TIM_ConfigClockSource+0x186>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2202      	movs	r2, #2
 8003e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e1c:	68ba      	ldr	r2, [r7, #8]
 8003e1e:	4b56      	ldr	r3, [pc, #344]	; (8003f78 <HAL_TIM_ConfigClockSource+0x190>)
 8003e20:	4013      	ands	r3, r2
 8003e22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e2a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68ba      	ldr	r2, [r7, #8]
 8003e32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e3c:	d03e      	beq.n	8003ebc <HAL_TIM_ConfigClockSource+0xd4>
 8003e3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e42:	f200 8087 	bhi.w	8003f54 <HAL_TIM_ConfigClockSource+0x16c>
 8003e46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e4a:	f000 8086 	beq.w	8003f5a <HAL_TIM_ConfigClockSource+0x172>
 8003e4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e52:	d87f      	bhi.n	8003f54 <HAL_TIM_ConfigClockSource+0x16c>
 8003e54:	2b70      	cmp	r3, #112	; 0x70
 8003e56:	d01a      	beq.n	8003e8e <HAL_TIM_ConfigClockSource+0xa6>
 8003e58:	2b70      	cmp	r3, #112	; 0x70
 8003e5a:	d87b      	bhi.n	8003f54 <HAL_TIM_ConfigClockSource+0x16c>
 8003e5c:	2b60      	cmp	r3, #96	; 0x60
 8003e5e:	d050      	beq.n	8003f02 <HAL_TIM_ConfigClockSource+0x11a>
 8003e60:	2b60      	cmp	r3, #96	; 0x60
 8003e62:	d877      	bhi.n	8003f54 <HAL_TIM_ConfigClockSource+0x16c>
 8003e64:	2b50      	cmp	r3, #80	; 0x50
 8003e66:	d03c      	beq.n	8003ee2 <HAL_TIM_ConfigClockSource+0xfa>
 8003e68:	2b50      	cmp	r3, #80	; 0x50
 8003e6a:	d873      	bhi.n	8003f54 <HAL_TIM_ConfigClockSource+0x16c>
 8003e6c:	2b40      	cmp	r3, #64	; 0x40
 8003e6e:	d058      	beq.n	8003f22 <HAL_TIM_ConfigClockSource+0x13a>
 8003e70:	2b40      	cmp	r3, #64	; 0x40
 8003e72:	d86f      	bhi.n	8003f54 <HAL_TIM_ConfigClockSource+0x16c>
 8003e74:	2b30      	cmp	r3, #48	; 0x30
 8003e76:	d064      	beq.n	8003f42 <HAL_TIM_ConfigClockSource+0x15a>
 8003e78:	2b30      	cmp	r3, #48	; 0x30
 8003e7a:	d86b      	bhi.n	8003f54 <HAL_TIM_ConfigClockSource+0x16c>
 8003e7c:	2b20      	cmp	r3, #32
 8003e7e:	d060      	beq.n	8003f42 <HAL_TIM_ConfigClockSource+0x15a>
 8003e80:	2b20      	cmp	r3, #32
 8003e82:	d867      	bhi.n	8003f54 <HAL_TIM_ConfigClockSource+0x16c>
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d05c      	beq.n	8003f42 <HAL_TIM_ConfigClockSource+0x15a>
 8003e88:	2b10      	cmp	r3, #16
 8003e8a:	d05a      	beq.n	8003f42 <HAL_TIM_ConfigClockSource+0x15a>
 8003e8c:	e062      	b.n	8003f54 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6818      	ldr	r0, [r3, #0]
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	6899      	ldr	r1, [r3, #8]
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	685a      	ldr	r2, [r3, #4]
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	f000 fc0d 	bl	80046bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003eb0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68ba      	ldr	r2, [r7, #8]
 8003eb8:	609a      	str	r2, [r3, #8]
      break;
 8003eba:	e04f      	b.n	8003f5c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6818      	ldr	r0, [r3, #0]
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	6899      	ldr	r1, [r3, #8]
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	685a      	ldr	r2, [r3, #4]
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	f000 fbf6 	bl	80046bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	689a      	ldr	r2, [r3, #8]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ede:	609a      	str	r2, [r3, #8]
      break;
 8003ee0:	e03c      	b.n	8003f5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6818      	ldr	r0, [r3, #0]
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	6859      	ldr	r1, [r3, #4]
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	461a      	mov	r2, r3
 8003ef0:	f000 fb6a 	bl	80045c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2150      	movs	r1, #80	; 0x50
 8003efa:	4618      	mov	r0, r3
 8003efc:	f000 fbc3 	bl	8004686 <TIM_ITRx_SetConfig>
      break;
 8003f00:	e02c      	b.n	8003f5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6818      	ldr	r0, [r3, #0]
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	6859      	ldr	r1, [r3, #4]
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	461a      	mov	r2, r3
 8003f10:	f000 fb89 	bl	8004626 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2160      	movs	r1, #96	; 0x60
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f000 fbb3 	bl	8004686 <TIM_ITRx_SetConfig>
      break;
 8003f20:	e01c      	b.n	8003f5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6818      	ldr	r0, [r3, #0]
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	6859      	ldr	r1, [r3, #4]
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	461a      	mov	r2, r3
 8003f30:	f000 fb4a 	bl	80045c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2140      	movs	r1, #64	; 0x40
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f000 fba3 	bl	8004686 <TIM_ITRx_SetConfig>
      break;
 8003f40:	e00c      	b.n	8003f5c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	4610      	mov	r0, r2
 8003f4e:	f000 fb9a 	bl	8004686 <TIM_ITRx_SetConfig>
      break;
 8003f52:	e003      	b.n	8003f5c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	73fb      	strb	r3, [r7, #15]
      break;
 8003f58:	e000      	b.n	8003f5c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003f5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3710      	adds	r7, #16
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	fffeff88 	.word	0xfffeff88

08003f7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f84:	bf00      	nop
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f98:	bf00      	nop
 8003f9a:	370c      	adds	r7, #12
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003fac:	bf00      	nop
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fc0:	bf00      	nop
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr

08003fcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b085      	sub	sp, #20
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4a40      	ldr	r2, [pc, #256]	; (80040e0 <TIM_Base_SetConfig+0x114>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d013      	beq.n	800400c <TIM_Base_SetConfig+0x40>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fea:	d00f      	beq.n	800400c <TIM_Base_SetConfig+0x40>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4a3d      	ldr	r2, [pc, #244]	; (80040e4 <TIM_Base_SetConfig+0x118>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d00b      	beq.n	800400c <TIM_Base_SetConfig+0x40>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a3c      	ldr	r2, [pc, #240]	; (80040e8 <TIM_Base_SetConfig+0x11c>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d007      	beq.n	800400c <TIM_Base_SetConfig+0x40>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	4a3b      	ldr	r2, [pc, #236]	; (80040ec <TIM_Base_SetConfig+0x120>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d003      	beq.n	800400c <TIM_Base_SetConfig+0x40>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4a3a      	ldr	r2, [pc, #232]	; (80040f0 <TIM_Base_SetConfig+0x124>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d108      	bne.n	800401e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004012:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	68fa      	ldr	r2, [r7, #12]
 800401a:	4313      	orrs	r3, r2
 800401c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a2f      	ldr	r2, [pc, #188]	; (80040e0 <TIM_Base_SetConfig+0x114>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d02b      	beq.n	800407e <TIM_Base_SetConfig+0xb2>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800402c:	d027      	beq.n	800407e <TIM_Base_SetConfig+0xb2>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a2c      	ldr	r2, [pc, #176]	; (80040e4 <TIM_Base_SetConfig+0x118>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d023      	beq.n	800407e <TIM_Base_SetConfig+0xb2>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a2b      	ldr	r2, [pc, #172]	; (80040e8 <TIM_Base_SetConfig+0x11c>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d01f      	beq.n	800407e <TIM_Base_SetConfig+0xb2>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a2a      	ldr	r2, [pc, #168]	; (80040ec <TIM_Base_SetConfig+0x120>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d01b      	beq.n	800407e <TIM_Base_SetConfig+0xb2>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a29      	ldr	r2, [pc, #164]	; (80040f0 <TIM_Base_SetConfig+0x124>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d017      	beq.n	800407e <TIM_Base_SetConfig+0xb2>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a28      	ldr	r2, [pc, #160]	; (80040f4 <TIM_Base_SetConfig+0x128>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d013      	beq.n	800407e <TIM_Base_SetConfig+0xb2>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a27      	ldr	r2, [pc, #156]	; (80040f8 <TIM_Base_SetConfig+0x12c>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d00f      	beq.n	800407e <TIM_Base_SetConfig+0xb2>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a26      	ldr	r2, [pc, #152]	; (80040fc <TIM_Base_SetConfig+0x130>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d00b      	beq.n	800407e <TIM_Base_SetConfig+0xb2>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a25      	ldr	r2, [pc, #148]	; (8004100 <TIM_Base_SetConfig+0x134>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d007      	beq.n	800407e <TIM_Base_SetConfig+0xb2>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a24      	ldr	r2, [pc, #144]	; (8004104 <TIM_Base_SetConfig+0x138>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d003      	beq.n	800407e <TIM_Base_SetConfig+0xb2>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a23      	ldr	r2, [pc, #140]	; (8004108 <TIM_Base_SetConfig+0x13c>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d108      	bne.n	8004090 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004084:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	68fa      	ldr	r2, [r7, #12]
 800408c:	4313      	orrs	r3, r2
 800408e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	695b      	ldr	r3, [r3, #20]
 800409a:	4313      	orrs	r3, r2
 800409c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	68fa      	ldr	r2, [r7, #12]
 80040a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	689a      	ldr	r2, [r3, #8]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a0a      	ldr	r2, [pc, #40]	; (80040e0 <TIM_Base_SetConfig+0x114>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d003      	beq.n	80040c4 <TIM_Base_SetConfig+0xf8>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4a0c      	ldr	r2, [pc, #48]	; (80040f0 <TIM_Base_SetConfig+0x124>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d103      	bne.n	80040cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	691a      	ldr	r2, [r3, #16]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	615a      	str	r2, [r3, #20]
}
 80040d2:	bf00      	nop
 80040d4:	3714      	adds	r7, #20
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	40010000 	.word	0x40010000
 80040e4:	40000400 	.word	0x40000400
 80040e8:	40000800 	.word	0x40000800
 80040ec:	40000c00 	.word	0x40000c00
 80040f0:	40010400 	.word	0x40010400
 80040f4:	40014000 	.word	0x40014000
 80040f8:	40014400 	.word	0x40014400
 80040fc:	40014800 	.word	0x40014800
 8004100:	40001800 	.word	0x40001800
 8004104:	40001c00 	.word	0x40001c00
 8004108:	40002000 	.word	0x40002000

0800410c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800410c:	b480      	push	{r7}
 800410e:	b087      	sub	sp, #28
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a1b      	ldr	r3, [r3, #32]
 800411a:	f023 0201 	bic.w	r2, r3, #1
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a1b      	ldr	r3, [r3, #32]
 8004126:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	699b      	ldr	r3, [r3, #24]
 8004132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004134:	68fa      	ldr	r2, [r7, #12]
 8004136:	4b2b      	ldr	r3, [pc, #172]	; (80041e4 <TIM_OC1_SetConfig+0xd8>)
 8004138:	4013      	ands	r3, r2
 800413a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f023 0303 	bic.w	r3, r3, #3
 8004142:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68fa      	ldr	r2, [r7, #12]
 800414a:	4313      	orrs	r3, r2
 800414c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	f023 0302 	bic.w	r3, r3, #2
 8004154:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	697a      	ldr	r2, [r7, #20]
 800415c:	4313      	orrs	r3, r2
 800415e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4a21      	ldr	r2, [pc, #132]	; (80041e8 <TIM_OC1_SetConfig+0xdc>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d003      	beq.n	8004170 <TIM_OC1_SetConfig+0x64>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	4a20      	ldr	r2, [pc, #128]	; (80041ec <TIM_OC1_SetConfig+0xe0>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d10c      	bne.n	800418a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	f023 0308 	bic.w	r3, r3, #8
 8004176:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	697a      	ldr	r2, [r7, #20]
 800417e:	4313      	orrs	r3, r2
 8004180:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	f023 0304 	bic.w	r3, r3, #4
 8004188:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a16      	ldr	r2, [pc, #88]	; (80041e8 <TIM_OC1_SetConfig+0xdc>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d003      	beq.n	800419a <TIM_OC1_SetConfig+0x8e>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a15      	ldr	r2, [pc, #84]	; (80041ec <TIM_OC1_SetConfig+0xe0>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d111      	bne.n	80041be <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	693a      	ldr	r2, [r7, #16]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	693a      	ldr	r2, [r7, #16]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	693a      	ldr	r2, [r7, #16]
 80041c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	68fa      	ldr	r2, [r7, #12]
 80041c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	685a      	ldr	r2, [r3, #4]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	697a      	ldr	r2, [r7, #20]
 80041d6:	621a      	str	r2, [r3, #32]
}
 80041d8:	bf00      	nop
 80041da:	371c      	adds	r7, #28
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr
 80041e4:	fffeff8f 	.word	0xfffeff8f
 80041e8:	40010000 	.word	0x40010000
 80041ec:	40010400 	.word	0x40010400

080041f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b087      	sub	sp, #28
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a1b      	ldr	r3, [r3, #32]
 80041fe:	f023 0210 	bic.w	r2, r3, #16
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a1b      	ldr	r3, [r3, #32]
 800420a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004218:	68fa      	ldr	r2, [r7, #12]
 800421a:	4b2e      	ldr	r3, [pc, #184]	; (80042d4 <TIM_OC2_SetConfig+0xe4>)
 800421c:	4013      	ands	r3, r2
 800421e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004226:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	021b      	lsls	r3, r3, #8
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	4313      	orrs	r3, r2
 8004232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	f023 0320 	bic.w	r3, r3, #32
 800423a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	011b      	lsls	r3, r3, #4
 8004242:	697a      	ldr	r2, [r7, #20]
 8004244:	4313      	orrs	r3, r2
 8004246:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	4a23      	ldr	r2, [pc, #140]	; (80042d8 <TIM_OC2_SetConfig+0xe8>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d003      	beq.n	8004258 <TIM_OC2_SetConfig+0x68>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	4a22      	ldr	r2, [pc, #136]	; (80042dc <TIM_OC2_SetConfig+0xec>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d10d      	bne.n	8004274 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800425e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	011b      	lsls	r3, r3, #4
 8004266:	697a      	ldr	r2, [r7, #20]
 8004268:	4313      	orrs	r3, r2
 800426a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004272:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	4a18      	ldr	r2, [pc, #96]	; (80042d8 <TIM_OC2_SetConfig+0xe8>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d003      	beq.n	8004284 <TIM_OC2_SetConfig+0x94>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4a17      	ldr	r2, [pc, #92]	; (80042dc <TIM_OC2_SetConfig+0xec>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d113      	bne.n	80042ac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800428a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004292:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	695b      	ldr	r3, [r3, #20]
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	693a      	ldr	r2, [r7, #16]
 800429c:	4313      	orrs	r3, r2
 800429e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	699b      	ldr	r3, [r3, #24]
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	693a      	ldr	r2, [r7, #16]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	693a      	ldr	r2, [r7, #16]
 80042b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	68fa      	ldr	r2, [r7, #12]
 80042b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	685a      	ldr	r2, [r3, #4]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	697a      	ldr	r2, [r7, #20]
 80042c4:	621a      	str	r2, [r3, #32]
}
 80042c6:	bf00      	nop
 80042c8:	371c      	adds	r7, #28
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	feff8fff 	.word	0xfeff8fff
 80042d8:	40010000 	.word	0x40010000
 80042dc:	40010400 	.word	0x40010400

080042e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b087      	sub	sp, #28
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a1b      	ldr	r3, [r3, #32]
 80042ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a1b      	ldr	r3, [r3, #32]
 80042fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	69db      	ldr	r3, [r3, #28]
 8004306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004308:	68fa      	ldr	r2, [r7, #12]
 800430a:	4b2d      	ldr	r3, [pc, #180]	; (80043c0 <TIM_OC3_SetConfig+0xe0>)
 800430c:	4013      	ands	r3, r2
 800430e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f023 0303 	bic.w	r3, r3, #3
 8004316:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	68fa      	ldr	r2, [r7, #12]
 800431e:	4313      	orrs	r3, r2
 8004320:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004328:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	021b      	lsls	r3, r3, #8
 8004330:	697a      	ldr	r2, [r7, #20]
 8004332:	4313      	orrs	r3, r2
 8004334:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a22      	ldr	r2, [pc, #136]	; (80043c4 <TIM_OC3_SetConfig+0xe4>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d003      	beq.n	8004346 <TIM_OC3_SetConfig+0x66>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a21      	ldr	r2, [pc, #132]	; (80043c8 <TIM_OC3_SetConfig+0xe8>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d10d      	bne.n	8004362 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800434c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	021b      	lsls	r3, r3, #8
 8004354:	697a      	ldr	r2, [r7, #20]
 8004356:	4313      	orrs	r3, r2
 8004358:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004360:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a17      	ldr	r2, [pc, #92]	; (80043c4 <TIM_OC3_SetConfig+0xe4>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d003      	beq.n	8004372 <TIM_OC3_SetConfig+0x92>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a16      	ldr	r2, [pc, #88]	; (80043c8 <TIM_OC3_SetConfig+0xe8>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d113      	bne.n	800439a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004378:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004380:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	011b      	lsls	r3, r3, #4
 8004388:	693a      	ldr	r2, [r7, #16]
 800438a:	4313      	orrs	r3, r2
 800438c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	699b      	ldr	r3, [r3, #24]
 8004392:	011b      	lsls	r3, r3, #4
 8004394:	693a      	ldr	r2, [r7, #16]
 8004396:	4313      	orrs	r3, r2
 8004398:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	693a      	ldr	r2, [r7, #16]
 800439e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	685a      	ldr	r2, [r3, #4]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	697a      	ldr	r2, [r7, #20]
 80043b2:	621a      	str	r2, [r3, #32]
}
 80043b4:	bf00      	nop
 80043b6:	371c      	adds	r7, #28
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr
 80043c0:	fffeff8f 	.word	0xfffeff8f
 80043c4:	40010000 	.word	0x40010000
 80043c8:	40010400 	.word	0x40010400

080043cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b087      	sub	sp, #28
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a1b      	ldr	r3, [r3, #32]
 80043da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a1b      	ldr	r3, [r3, #32]
 80043e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	69db      	ldr	r3, [r3, #28]
 80043f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80043f4:	68fa      	ldr	r2, [r7, #12]
 80043f6:	4b1e      	ldr	r3, [pc, #120]	; (8004470 <TIM_OC4_SetConfig+0xa4>)
 80043f8:	4013      	ands	r3, r2
 80043fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004402:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	021b      	lsls	r3, r3, #8
 800440a:	68fa      	ldr	r2, [r7, #12]
 800440c:	4313      	orrs	r3, r2
 800440e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004416:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	031b      	lsls	r3, r3, #12
 800441e:	693a      	ldr	r2, [r7, #16]
 8004420:	4313      	orrs	r3, r2
 8004422:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	4a13      	ldr	r2, [pc, #76]	; (8004474 <TIM_OC4_SetConfig+0xa8>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d003      	beq.n	8004434 <TIM_OC4_SetConfig+0x68>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	4a12      	ldr	r2, [pc, #72]	; (8004478 <TIM_OC4_SetConfig+0xac>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d109      	bne.n	8004448 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800443a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	695b      	ldr	r3, [r3, #20]
 8004440:	019b      	lsls	r3, r3, #6
 8004442:	697a      	ldr	r2, [r7, #20]
 8004444:	4313      	orrs	r3, r2
 8004446:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	697a      	ldr	r2, [r7, #20]
 800444c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	68fa      	ldr	r2, [r7, #12]
 8004452:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	685a      	ldr	r2, [r3, #4]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	693a      	ldr	r2, [r7, #16]
 8004460:	621a      	str	r2, [r3, #32]
}
 8004462:	bf00      	nop
 8004464:	371c      	adds	r7, #28
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr
 800446e:	bf00      	nop
 8004470:	feff8fff 	.word	0xfeff8fff
 8004474:	40010000 	.word	0x40010000
 8004478:	40010400 	.word	0x40010400

0800447c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800447c:	b480      	push	{r7}
 800447e:	b087      	sub	sp, #28
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a1b      	ldr	r3, [r3, #32]
 800448a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a1b      	ldr	r3, [r3, #32]
 8004496:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80044a4:	68fa      	ldr	r2, [r7, #12]
 80044a6:	4b1b      	ldr	r3, [pc, #108]	; (8004514 <TIM_OC5_SetConfig+0x98>)
 80044a8:	4013      	ands	r3, r2
 80044aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	68fa      	ldr	r2, [r7, #12]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80044bc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	041b      	lsls	r3, r3, #16
 80044c4:	693a      	ldr	r2, [r7, #16]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a12      	ldr	r2, [pc, #72]	; (8004518 <TIM_OC5_SetConfig+0x9c>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d003      	beq.n	80044da <TIM_OC5_SetConfig+0x5e>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a11      	ldr	r2, [pc, #68]	; (800451c <TIM_OC5_SetConfig+0xa0>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d109      	bne.n	80044ee <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044e0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	695b      	ldr	r3, [r3, #20]
 80044e6:	021b      	lsls	r3, r3, #8
 80044e8:	697a      	ldr	r2, [r7, #20]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	697a      	ldr	r2, [r7, #20]
 80044f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	68fa      	ldr	r2, [r7, #12]
 80044f8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	685a      	ldr	r2, [r3, #4]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	693a      	ldr	r2, [r7, #16]
 8004506:	621a      	str	r2, [r3, #32]
}
 8004508:	bf00      	nop
 800450a:	371c      	adds	r7, #28
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr
 8004514:	fffeff8f 	.word	0xfffeff8f
 8004518:	40010000 	.word	0x40010000
 800451c:	40010400 	.word	0x40010400

08004520 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004520:	b480      	push	{r7}
 8004522:	b087      	sub	sp, #28
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a1b      	ldr	r3, [r3, #32]
 800452e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a1b      	ldr	r3, [r3, #32]
 800453a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004548:	68fa      	ldr	r2, [r7, #12]
 800454a:	4b1c      	ldr	r3, [pc, #112]	; (80045bc <TIM_OC6_SetConfig+0x9c>)
 800454c:	4013      	ands	r3, r2
 800454e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	021b      	lsls	r3, r3, #8
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	4313      	orrs	r3, r2
 800455a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004562:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	051b      	lsls	r3, r3, #20
 800456a:	693a      	ldr	r2, [r7, #16]
 800456c:	4313      	orrs	r3, r2
 800456e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	4a13      	ldr	r2, [pc, #76]	; (80045c0 <TIM_OC6_SetConfig+0xa0>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d003      	beq.n	8004580 <TIM_OC6_SetConfig+0x60>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	4a12      	ldr	r2, [pc, #72]	; (80045c4 <TIM_OC6_SetConfig+0xa4>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d109      	bne.n	8004594 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004586:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	695b      	ldr	r3, [r3, #20]
 800458c:	029b      	lsls	r3, r3, #10
 800458e:	697a      	ldr	r2, [r7, #20]
 8004590:	4313      	orrs	r3, r2
 8004592:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	697a      	ldr	r2, [r7, #20]
 8004598:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	68fa      	ldr	r2, [r7, #12]
 800459e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	685a      	ldr	r2, [r3, #4]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	693a      	ldr	r2, [r7, #16]
 80045ac:	621a      	str	r2, [r3, #32]
}
 80045ae:	bf00      	nop
 80045b0:	371c      	adds	r7, #28
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	feff8fff 	.word	0xfeff8fff
 80045c0:	40010000 	.word	0x40010000
 80045c4:	40010400 	.word	0x40010400

080045c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b087      	sub	sp, #28
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6a1b      	ldr	r3, [r3, #32]
 80045d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6a1b      	ldr	r3, [r3, #32]
 80045de:	f023 0201 	bic.w	r2, r3, #1
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	699b      	ldr	r3, [r3, #24]
 80045ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	011b      	lsls	r3, r3, #4
 80045f8:	693a      	ldr	r2, [r7, #16]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	f023 030a 	bic.w	r3, r3, #10
 8004604:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004606:	697a      	ldr	r2, [r7, #20]
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	4313      	orrs	r3, r2
 800460c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	693a      	ldr	r2, [r7, #16]
 8004612:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	697a      	ldr	r2, [r7, #20]
 8004618:	621a      	str	r2, [r3, #32]
}
 800461a:	bf00      	nop
 800461c:	371c      	adds	r7, #28
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr

08004626 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004626:	b480      	push	{r7}
 8004628:	b087      	sub	sp, #28
 800462a:	af00      	add	r7, sp, #0
 800462c:	60f8      	str	r0, [r7, #12]
 800462e:	60b9      	str	r1, [r7, #8]
 8004630:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6a1b      	ldr	r3, [r3, #32]
 8004636:	f023 0210 	bic.w	r2, r3, #16
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	699b      	ldr	r3, [r3, #24]
 8004642:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6a1b      	ldr	r3, [r3, #32]
 8004648:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004650:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	031b      	lsls	r3, r3, #12
 8004656:	697a      	ldr	r2, [r7, #20]
 8004658:	4313      	orrs	r3, r2
 800465a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004662:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	011b      	lsls	r3, r3, #4
 8004668:	693a      	ldr	r2, [r7, #16]
 800466a:	4313      	orrs	r3, r2
 800466c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	697a      	ldr	r2, [r7, #20]
 8004672:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	693a      	ldr	r2, [r7, #16]
 8004678:	621a      	str	r2, [r3, #32]
}
 800467a:	bf00      	nop
 800467c:	371c      	adds	r7, #28
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr

08004686 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004686:	b480      	push	{r7}
 8004688:	b085      	sub	sp, #20
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
 800468e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800469c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800469e:	683a      	ldr	r2, [r7, #0]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	f043 0307 	orr.w	r3, r3, #7
 80046a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	609a      	str	r2, [r3, #8]
}
 80046b0:	bf00      	nop
 80046b2:	3714      	adds	r7, #20
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80046bc:	b480      	push	{r7}
 80046be:	b087      	sub	sp, #28
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	60b9      	str	r1, [r7, #8]
 80046c6:	607a      	str	r2, [r7, #4]
 80046c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	021a      	lsls	r2, r3, #8
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	431a      	orrs	r2, r3
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	697a      	ldr	r2, [r7, #20]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	697a      	ldr	r2, [r7, #20]
 80046ee:	609a      	str	r2, [r3, #8]
}
 80046f0:	bf00      	nop
 80046f2:	371c      	adds	r7, #28
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr

080046fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b087      	sub	sp, #28
 8004700:	af00      	add	r7, sp, #0
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	f003 031f 	and.w	r3, r3, #31
 800470e:	2201      	movs	r2, #1
 8004710:	fa02 f303 	lsl.w	r3, r2, r3
 8004714:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6a1a      	ldr	r2, [r3, #32]
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	43db      	mvns	r3, r3
 800471e:	401a      	ands	r2, r3
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6a1a      	ldr	r2, [r3, #32]
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	f003 031f 	and.w	r3, r3, #31
 800472e:	6879      	ldr	r1, [r7, #4]
 8004730:	fa01 f303 	lsl.w	r3, r1, r3
 8004734:	431a      	orrs	r2, r3
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	621a      	str	r2, [r3, #32]
}
 800473a:	bf00      	nop
 800473c:	371c      	adds	r7, #28
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
	...

08004748 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004748:	b480      	push	{r7}
 800474a:	b085      	sub	sp, #20
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004758:	2b01      	cmp	r3, #1
 800475a:	d101      	bne.n	8004760 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800475c:	2302      	movs	r3, #2
 800475e:	e06d      	b.n	800483c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2202      	movs	r2, #2
 800476c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a30      	ldr	r2, [pc, #192]	; (8004848 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d004      	beq.n	8004794 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a2f      	ldr	r2, [pc, #188]	; (800484c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d108      	bne.n	80047a6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800479a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	68fa      	ldr	r2, [r7, #12]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	68fa      	ldr	r2, [r7, #12]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68fa      	ldr	r2, [r7, #12]
 80047be:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a20      	ldr	r2, [pc, #128]	; (8004848 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d022      	beq.n	8004810 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047d2:	d01d      	beq.n	8004810 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a1d      	ldr	r2, [pc, #116]	; (8004850 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d018      	beq.n	8004810 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a1c      	ldr	r2, [pc, #112]	; (8004854 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d013      	beq.n	8004810 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a1a      	ldr	r2, [pc, #104]	; (8004858 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d00e      	beq.n	8004810 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a15      	ldr	r2, [pc, #84]	; (800484c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d009      	beq.n	8004810 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a16      	ldr	r2, [pc, #88]	; (800485c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d004      	beq.n	8004810 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a15      	ldr	r2, [pc, #84]	; (8004860 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d10c      	bne.n	800482a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004816:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	68ba      	ldr	r2, [r7, #8]
 800481e:	4313      	orrs	r3, r2
 8004820:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	68ba      	ldr	r2, [r7, #8]
 8004828:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2201      	movs	r2, #1
 800482e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800483a:	2300      	movs	r3, #0
}
 800483c:	4618      	mov	r0, r3
 800483e:	3714      	adds	r7, #20
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr
 8004848:	40010000 	.word	0x40010000
 800484c:	40010400 	.word	0x40010400
 8004850:	40000400 	.word	0x40000400
 8004854:	40000800 	.word	0x40000800
 8004858:	40000c00 	.word	0x40000c00
 800485c:	40014000 	.word	0x40014000
 8004860:	40001800 	.word	0x40001800

08004864 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004864:	b480      	push	{r7}
 8004866:	b085      	sub	sp, #20
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800486e:	2300      	movs	r3, #0
 8004870:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004878:	2b01      	cmp	r3, #1
 800487a:	d101      	bne.n	8004880 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800487c:	2302      	movs	r3, #2
 800487e:	e065      	b.n	800494c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	4313      	orrs	r3, r2
 8004894:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4313      	orrs	r3, r2
 80048be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	695b      	ldr	r3, [r3, #20]
 80048d8:	4313      	orrs	r3, r2
 80048da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e6:	4313      	orrs	r3, r2
 80048e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	699b      	ldr	r3, [r3, #24]
 80048f4:	041b      	lsls	r3, r3, #16
 80048f6:	4313      	orrs	r3, r2
 80048f8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a16      	ldr	r2, [pc, #88]	; (8004958 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d004      	beq.n	800490e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a14      	ldr	r2, [pc, #80]	; (800495c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d115      	bne.n	800493a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004918:	051b      	lsls	r3, r3, #20
 800491a:	4313      	orrs	r3, r2
 800491c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	69db      	ldr	r3, [r3, #28]
 8004928:	4313      	orrs	r3, r2
 800492a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	6a1b      	ldr	r3, [r3, #32]
 8004936:	4313      	orrs	r3, r2
 8004938:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	68fa      	ldr	r2, [r7, #12]
 8004940:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800494a:	2300      	movs	r3, #0
}
 800494c:	4618      	mov	r0, r3
 800494e:	3714      	adds	r7, #20
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr
 8004958:	40010000 	.word	0x40010000
 800495c:	40010400 	.word	0x40010400

08004960 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004968:	bf00      	nop
 800496a:	370c      	adds	r7, #12
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004974:	b480      	push	{r7}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800497c:	bf00      	nop
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004990:	bf00      	nop
 8004992:	370c      	adds	r7, #12
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr

0800499c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b082      	sub	sp, #8
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d101      	bne.n	80049ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e040      	b.n	8004a30 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d106      	bne.n	80049c4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f7fc fad4 	bl	8000f6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2224      	movs	r2, #36	; 0x24
 80049c8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f022 0201 	bic.w	r2, r2, #1
 80049d8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f000 f82c 	bl	8004a38 <UART_SetConfig>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d101      	bne.n	80049ea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e022      	b.n	8004a30 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d002      	beq.n	80049f8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 fa82 	bl	8004efc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	685a      	ldr	r2, [r3, #4]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	689a      	ldr	r2, [r3, #8]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f042 0201 	orr.w	r2, r2, #1
 8004a26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f000 fb09 	bl	8005040 <UART_CheckIdleState>
 8004a2e:	4603      	mov	r3, r0
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3708      	adds	r7, #8
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b088      	sub	sp, #32
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a40:	2300      	movs	r3, #0
 8004a42:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	689a      	ldr	r2, [r3, #8]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	691b      	ldr	r3, [r3, #16]
 8004a4c:	431a      	orrs	r2, r3
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	695b      	ldr	r3, [r3, #20]
 8004a52:	431a      	orrs	r2, r3
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	69db      	ldr	r3, [r3, #28]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	4ba7      	ldr	r3, [pc, #668]	; (8004d00 <UART_SetConfig+0x2c8>)
 8004a64:	4013      	ands	r3, r2
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	6812      	ldr	r2, [r2, #0]
 8004a6a:	6979      	ldr	r1, [r7, #20]
 8004a6c:	430b      	orrs	r3, r1
 8004a6e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	68da      	ldr	r2, [r3, #12]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	430a      	orrs	r2, r1
 8004a84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	699b      	ldr	r3, [r3, #24]
 8004a8a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6a1b      	ldr	r3, [r3, #32]
 8004a90:	697a      	ldr	r2, [r7, #20]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	697a      	ldr	r2, [r7, #20]
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a95      	ldr	r2, [pc, #596]	; (8004d04 <UART_SetConfig+0x2cc>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d120      	bne.n	8004af6 <UART_SetConfig+0xbe>
 8004ab4:	4b94      	ldr	r3, [pc, #592]	; (8004d08 <UART_SetConfig+0x2d0>)
 8004ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aba:	f003 0303 	and.w	r3, r3, #3
 8004abe:	2b03      	cmp	r3, #3
 8004ac0:	d816      	bhi.n	8004af0 <UART_SetConfig+0xb8>
 8004ac2:	a201      	add	r2, pc, #4	; (adr r2, 8004ac8 <UART_SetConfig+0x90>)
 8004ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ac8:	08004ad9 	.word	0x08004ad9
 8004acc:	08004ae5 	.word	0x08004ae5
 8004ad0:	08004adf 	.word	0x08004adf
 8004ad4:	08004aeb 	.word	0x08004aeb
 8004ad8:	2301      	movs	r3, #1
 8004ada:	77fb      	strb	r3, [r7, #31]
 8004adc:	e14f      	b.n	8004d7e <UART_SetConfig+0x346>
 8004ade:	2302      	movs	r3, #2
 8004ae0:	77fb      	strb	r3, [r7, #31]
 8004ae2:	e14c      	b.n	8004d7e <UART_SetConfig+0x346>
 8004ae4:	2304      	movs	r3, #4
 8004ae6:	77fb      	strb	r3, [r7, #31]
 8004ae8:	e149      	b.n	8004d7e <UART_SetConfig+0x346>
 8004aea:	2308      	movs	r3, #8
 8004aec:	77fb      	strb	r3, [r7, #31]
 8004aee:	e146      	b.n	8004d7e <UART_SetConfig+0x346>
 8004af0:	2310      	movs	r3, #16
 8004af2:	77fb      	strb	r3, [r7, #31]
 8004af4:	e143      	b.n	8004d7e <UART_SetConfig+0x346>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a84      	ldr	r2, [pc, #528]	; (8004d0c <UART_SetConfig+0x2d4>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d132      	bne.n	8004b66 <UART_SetConfig+0x12e>
 8004b00:	4b81      	ldr	r3, [pc, #516]	; (8004d08 <UART_SetConfig+0x2d0>)
 8004b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b06:	f003 030c 	and.w	r3, r3, #12
 8004b0a:	2b0c      	cmp	r3, #12
 8004b0c:	d828      	bhi.n	8004b60 <UART_SetConfig+0x128>
 8004b0e:	a201      	add	r2, pc, #4	; (adr r2, 8004b14 <UART_SetConfig+0xdc>)
 8004b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b14:	08004b49 	.word	0x08004b49
 8004b18:	08004b61 	.word	0x08004b61
 8004b1c:	08004b61 	.word	0x08004b61
 8004b20:	08004b61 	.word	0x08004b61
 8004b24:	08004b55 	.word	0x08004b55
 8004b28:	08004b61 	.word	0x08004b61
 8004b2c:	08004b61 	.word	0x08004b61
 8004b30:	08004b61 	.word	0x08004b61
 8004b34:	08004b4f 	.word	0x08004b4f
 8004b38:	08004b61 	.word	0x08004b61
 8004b3c:	08004b61 	.word	0x08004b61
 8004b40:	08004b61 	.word	0x08004b61
 8004b44:	08004b5b 	.word	0x08004b5b
 8004b48:	2300      	movs	r3, #0
 8004b4a:	77fb      	strb	r3, [r7, #31]
 8004b4c:	e117      	b.n	8004d7e <UART_SetConfig+0x346>
 8004b4e:	2302      	movs	r3, #2
 8004b50:	77fb      	strb	r3, [r7, #31]
 8004b52:	e114      	b.n	8004d7e <UART_SetConfig+0x346>
 8004b54:	2304      	movs	r3, #4
 8004b56:	77fb      	strb	r3, [r7, #31]
 8004b58:	e111      	b.n	8004d7e <UART_SetConfig+0x346>
 8004b5a:	2308      	movs	r3, #8
 8004b5c:	77fb      	strb	r3, [r7, #31]
 8004b5e:	e10e      	b.n	8004d7e <UART_SetConfig+0x346>
 8004b60:	2310      	movs	r3, #16
 8004b62:	77fb      	strb	r3, [r7, #31]
 8004b64:	e10b      	b.n	8004d7e <UART_SetConfig+0x346>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a69      	ldr	r2, [pc, #420]	; (8004d10 <UART_SetConfig+0x2d8>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d120      	bne.n	8004bb2 <UART_SetConfig+0x17a>
 8004b70:	4b65      	ldr	r3, [pc, #404]	; (8004d08 <UART_SetConfig+0x2d0>)
 8004b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b76:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004b7a:	2b30      	cmp	r3, #48	; 0x30
 8004b7c:	d013      	beq.n	8004ba6 <UART_SetConfig+0x16e>
 8004b7e:	2b30      	cmp	r3, #48	; 0x30
 8004b80:	d814      	bhi.n	8004bac <UART_SetConfig+0x174>
 8004b82:	2b20      	cmp	r3, #32
 8004b84:	d009      	beq.n	8004b9a <UART_SetConfig+0x162>
 8004b86:	2b20      	cmp	r3, #32
 8004b88:	d810      	bhi.n	8004bac <UART_SetConfig+0x174>
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d002      	beq.n	8004b94 <UART_SetConfig+0x15c>
 8004b8e:	2b10      	cmp	r3, #16
 8004b90:	d006      	beq.n	8004ba0 <UART_SetConfig+0x168>
 8004b92:	e00b      	b.n	8004bac <UART_SetConfig+0x174>
 8004b94:	2300      	movs	r3, #0
 8004b96:	77fb      	strb	r3, [r7, #31]
 8004b98:	e0f1      	b.n	8004d7e <UART_SetConfig+0x346>
 8004b9a:	2302      	movs	r3, #2
 8004b9c:	77fb      	strb	r3, [r7, #31]
 8004b9e:	e0ee      	b.n	8004d7e <UART_SetConfig+0x346>
 8004ba0:	2304      	movs	r3, #4
 8004ba2:	77fb      	strb	r3, [r7, #31]
 8004ba4:	e0eb      	b.n	8004d7e <UART_SetConfig+0x346>
 8004ba6:	2308      	movs	r3, #8
 8004ba8:	77fb      	strb	r3, [r7, #31]
 8004baa:	e0e8      	b.n	8004d7e <UART_SetConfig+0x346>
 8004bac:	2310      	movs	r3, #16
 8004bae:	77fb      	strb	r3, [r7, #31]
 8004bb0:	e0e5      	b.n	8004d7e <UART_SetConfig+0x346>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a57      	ldr	r2, [pc, #348]	; (8004d14 <UART_SetConfig+0x2dc>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d120      	bne.n	8004bfe <UART_SetConfig+0x1c6>
 8004bbc:	4b52      	ldr	r3, [pc, #328]	; (8004d08 <UART_SetConfig+0x2d0>)
 8004bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bc2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004bc6:	2bc0      	cmp	r3, #192	; 0xc0
 8004bc8:	d013      	beq.n	8004bf2 <UART_SetConfig+0x1ba>
 8004bca:	2bc0      	cmp	r3, #192	; 0xc0
 8004bcc:	d814      	bhi.n	8004bf8 <UART_SetConfig+0x1c0>
 8004bce:	2b80      	cmp	r3, #128	; 0x80
 8004bd0:	d009      	beq.n	8004be6 <UART_SetConfig+0x1ae>
 8004bd2:	2b80      	cmp	r3, #128	; 0x80
 8004bd4:	d810      	bhi.n	8004bf8 <UART_SetConfig+0x1c0>
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d002      	beq.n	8004be0 <UART_SetConfig+0x1a8>
 8004bda:	2b40      	cmp	r3, #64	; 0x40
 8004bdc:	d006      	beq.n	8004bec <UART_SetConfig+0x1b4>
 8004bde:	e00b      	b.n	8004bf8 <UART_SetConfig+0x1c0>
 8004be0:	2300      	movs	r3, #0
 8004be2:	77fb      	strb	r3, [r7, #31]
 8004be4:	e0cb      	b.n	8004d7e <UART_SetConfig+0x346>
 8004be6:	2302      	movs	r3, #2
 8004be8:	77fb      	strb	r3, [r7, #31]
 8004bea:	e0c8      	b.n	8004d7e <UART_SetConfig+0x346>
 8004bec:	2304      	movs	r3, #4
 8004bee:	77fb      	strb	r3, [r7, #31]
 8004bf0:	e0c5      	b.n	8004d7e <UART_SetConfig+0x346>
 8004bf2:	2308      	movs	r3, #8
 8004bf4:	77fb      	strb	r3, [r7, #31]
 8004bf6:	e0c2      	b.n	8004d7e <UART_SetConfig+0x346>
 8004bf8:	2310      	movs	r3, #16
 8004bfa:	77fb      	strb	r3, [r7, #31]
 8004bfc:	e0bf      	b.n	8004d7e <UART_SetConfig+0x346>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a45      	ldr	r2, [pc, #276]	; (8004d18 <UART_SetConfig+0x2e0>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d125      	bne.n	8004c54 <UART_SetConfig+0x21c>
 8004c08:	4b3f      	ldr	r3, [pc, #252]	; (8004d08 <UART_SetConfig+0x2d0>)
 8004c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c16:	d017      	beq.n	8004c48 <UART_SetConfig+0x210>
 8004c18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c1c:	d817      	bhi.n	8004c4e <UART_SetConfig+0x216>
 8004c1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c22:	d00b      	beq.n	8004c3c <UART_SetConfig+0x204>
 8004c24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c28:	d811      	bhi.n	8004c4e <UART_SetConfig+0x216>
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d003      	beq.n	8004c36 <UART_SetConfig+0x1fe>
 8004c2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c32:	d006      	beq.n	8004c42 <UART_SetConfig+0x20a>
 8004c34:	e00b      	b.n	8004c4e <UART_SetConfig+0x216>
 8004c36:	2300      	movs	r3, #0
 8004c38:	77fb      	strb	r3, [r7, #31]
 8004c3a:	e0a0      	b.n	8004d7e <UART_SetConfig+0x346>
 8004c3c:	2302      	movs	r3, #2
 8004c3e:	77fb      	strb	r3, [r7, #31]
 8004c40:	e09d      	b.n	8004d7e <UART_SetConfig+0x346>
 8004c42:	2304      	movs	r3, #4
 8004c44:	77fb      	strb	r3, [r7, #31]
 8004c46:	e09a      	b.n	8004d7e <UART_SetConfig+0x346>
 8004c48:	2308      	movs	r3, #8
 8004c4a:	77fb      	strb	r3, [r7, #31]
 8004c4c:	e097      	b.n	8004d7e <UART_SetConfig+0x346>
 8004c4e:	2310      	movs	r3, #16
 8004c50:	77fb      	strb	r3, [r7, #31]
 8004c52:	e094      	b.n	8004d7e <UART_SetConfig+0x346>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a30      	ldr	r2, [pc, #192]	; (8004d1c <UART_SetConfig+0x2e4>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d125      	bne.n	8004caa <UART_SetConfig+0x272>
 8004c5e:	4b2a      	ldr	r3, [pc, #168]	; (8004d08 <UART_SetConfig+0x2d0>)
 8004c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c64:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004c68:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c6c:	d017      	beq.n	8004c9e <UART_SetConfig+0x266>
 8004c6e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c72:	d817      	bhi.n	8004ca4 <UART_SetConfig+0x26c>
 8004c74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c78:	d00b      	beq.n	8004c92 <UART_SetConfig+0x25a>
 8004c7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c7e:	d811      	bhi.n	8004ca4 <UART_SetConfig+0x26c>
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d003      	beq.n	8004c8c <UART_SetConfig+0x254>
 8004c84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c88:	d006      	beq.n	8004c98 <UART_SetConfig+0x260>
 8004c8a:	e00b      	b.n	8004ca4 <UART_SetConfig+0x26c>
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	77fb      	strb	r3, [r7, #31]
 8004c90:	e075      	b.n	8004d7e <UART_SetConfig+0x346>
 8004c92:	2302      	movs	r3, #2
 8004c94:	77fb      	strb	r3, [r7, #31]
 8004c96:	e072      	b.n	8004d7e <UART_SetConfig+0x346>
 8004c98:	2304      	movs	r3, #4
 8004c9a:	77fb      	strb	r3, [r7, #31]
 8004c9c:	e06f      	b.n	8004d7e <UART_SetConfig+0x346>
 8004c9e:	2308      	movs	r3, #8
 8004ca0:	77fb      	strb	r3, [r7, #31]
 8004ca2:	e06c      	b.n	8004d7e <UART_SetConfig+0x346>
 8004ca4:	2310      	movs	r3, #16
 8004ca6:	77fb      	strb	r3, [r7, #31]
 8004ca8:	e069      	b.n	8004d7e <UART_SetConfig+0x346>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a1c      	ldr	r2, [pc, #112]	; (8004d20 <UART_SetConfig+0x2e8>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d137      	bne.n	8004d24 <UART_SetConfig+0x2ec>
 8004cb4:	4b14      	ldr	r3, [pc, #80]	; (8004d08 <UART_SetConfig+0x2d0>)
 8004cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cba:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004cbe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004cc2:	d017      	beq.n	8004cf4 <UART_SetConfig+0x2bc>
 8004cc4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004cc8:	d817      	bhi.n	8004cfa <UART_SetConfig+0x2c2>
 8004cca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cce:	d00b      	beq.n	8004ce8 <UART_SetConfig+0x2b0>
 8004cd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cd4:	d811      	bhi.n	8004cfa <UART_SetConfig+0x2c2>
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d003      	beq.n	8004ce2 <UART_SetConfig+0x2aa>
 8004cda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cde:	d006      	beq.n	8004cee <UART_SetConfig+0x2b6>
 8004ce0:	e00b      	b.n	8004cfa <UART_SetConfig+0x2c2>
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	77fb      	strb	r3, [r7, #31]
 8004ce6:	e04a      	b.n	8004d7e <UART_SetConfig+0x346>
 8004ce8:	2302      	movs	r3, #2
 8004cea:	77fb      	strb	r3, [r7, #31]
 8004cec:	e047      	b.n	8004d7e <UART_SetConfig+0x346>
 8004cee:	2304      	movs	r3, #4
 8004cf0:	77fb      	strb	r3, [r7, #31]
 8004cf2:	e044      	b.n	8004d7e <UART_SetConfig+0x346>
 8004cf4:	2308      	movs	r3, #8
 8004cf6:	77fb      	strb	r3, [r7, #31]
 8004cf8:	e041      	b.n	8004d7e <UART_SetConfig+0x346>
 8004cfa:	2310      	movs	r3, #16
 8004cfc:	77fb      	strb	r3, [r7, #31]
 8004cfe:	e03e      	b.n	8004d7e <UART_SetConfig+0x346>
 8004d00:	efff69f3 	.word	0xefff69f3
 8004d04:	40011000 	.word	0x40011000
 8004d08:	40023800 	.word	0x40023800
 8004d0c:	40004400 	.word	0x40004400
 8004d10:	40004800 	.word	0x40004800
 8004d14:	40004c00 	.word	0x40004c00
 8004d18:	40005000 	.word	0x40005000
 8004d1c:	40011400 	.word	0x40011400
 8004d20:	40007800 	.word	0x40007800
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a71      	ldr	r2, [pc, #452]	; (8004ef0 <UART_SetConfig+0x4b8>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d125      	bne.n	8004d7a <UART_SetConfig+0x342>
 8004d2e:	4b71      	ldr	r3, [pc, #452]	; (8004ef4 <UART_SetConfig+0x4bc>)
 8004d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d34:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004d38:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004d3c:	d017      	beq.n	8004d6e <UART_SetConfig+0x336>
 8004d3e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004d42:	d817      	bhi.n	8004d74 <UART_SetConfig+0x33c>
 8004d44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d48:	d00b      	beq.n	8004d62 <UART_SetConfig+0x32a>
 8004d4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d4e:	d811      	bhi.n	8004d74 <UART_SetConfig+0x33c>
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d003      	beq.n	8004d5c <UART_SetConfig+0x324>
 8004d54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d58:	d006      	beq.n	8004d68 <UART_SetConfig+0x330>
 8004d5a:	e00b      	b.n	8004d74 <UART_SetConfig+0x33c>
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	77fb      	strb	r3, [r7, #31]
 8004d60:	e00d      	b.n	8004d7e <UART_SetConfig+0x346>
 8004d62:	2302      	movs	r3, #2
 8004d64:	77fb      	strb	r3, [r7, #31]
 8004d66:	e00a      	b.n	8004d7e <UART_SetConfig+0x346>
 8004d68:	2304      	movs	r3, #4
 8004d6a:	77fb      	strb	r3, [r7, #31]
 8004d6c:	e007      	b.n	8004d7e <UART_SetConfig+0x346>
 8004d6e:	2308      	movs	r3, #8
 8004d70:	77fb      	strb	r3, [r7, #31]
 8004d72:	e004      	b.n	8004d7e <UART_SetConfig+0x346>
 8004d74:	2310      	movs	r3, #16
 8004d76:	77fb      	strb	r3, [r7, #31]
 8004d78:	e001      	b.n	8004d7e <UART_SetConfig+0x346>
 8004d7a:	2310      	movs	r3, #16
 8004d7c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	69db      	ldr	r3, [r3, #28]
 8004d82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d86:	d15a      	bne.n	8004e3e <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8004d88:	7ffb      	ldrb	r3, [r7, #31]
 8004d8a:	2b08      	cmp	r3, #8
 8004d8c:	d827      	bhi.n	8004dde <UART_SetConfig+0x3a6>
 8004d8e:	a201      	add	r2, pc, #4	; (adr r2, 8004d94 <UART_SetConfig+0x35c>)
 8004d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d94:	08004db9 	.word	0x08004db9
 8004d98:	08004dc1 	.word	0x08004dc1
 8004d9c:	08004dc9 	.word	0x08004dc9
 8004da0:	08004ddf 	.word	0x08004ddf
 8004da4:	08004dcf 	.word	0x08004dcf
 8004da8:	08004ddf 	.word	0x08004ddf
 8004dac:	08004ddf 	.word	0x08004ddf
 8004db0:	08004ddf 	.word	0x08004ddf
 8004db4:	08004dd7 	.word	0x08004dd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004db8:	f7fd fef8 	bl	8002bac <HAL_RCC_GetPCLK1Freq>
 8004dbc:	61b8      	str	r0, [r7, #24]
        break;
 8004dbe:	e013      	b.n	8004de8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004dc0:	f7fd ff08 	bl	8002bd4 <HAL_RCC_GetPCLK2Freq>
 8004dc4:	61b8      	str	r0, [r7, #24]
        break;
 8004dc6:	e00f      	b.n	8004de8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004dc8:	4b4b      	ldr	r3, [pc, #300]	; (8004ef8 <UART_SetConfig+0x4c0>)
 8004dca:	61bb      	str	r3, [r7, #24]
        break;
 8004dcc:	e00c      	b.n	8004de8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dce:	f7fd fdff 	bl	80029d0 <HAL_RCC_GetSysClockFreq>
 8004dd2:	61b8      	str	r0, [r7, #24]
        break;
 8004dd4:	e008      	b.n	8004de8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dda:	61bb      	str	r3, [r7, #24]
        break;
 8004ddc:	e004      	b.n	8004de8 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8004dde:	2300      	movs	r3, #0
 8004de0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	77bb      	strb	r3, [r7, #30]
        break;
 8004de6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004de8:	69bb      	ldr	r3, [r7, #24]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d074      	beq.n	8004ed8 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	005a      	lsls	r2, r3, #1
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	085b      	lsrs	r3, r3, #1
 8004df8:	441a      	add	r2, r3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e02:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	2b0f      	cmp	r3, #15
 8004e08:	d916      	bls.n	8004e38 <UART_SetConfig+0x400>
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e10:	d212      	bcs.n	8004e38 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	f023 030f 	bic.w	r3, r3, #15
 8004e1a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	085b      	lsrs	r3, r3, #1
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	f003 0307 	and.w	r3, r3, #7
 8004e26:	b29a      	uxth	r2, r3
 8004e28:	89fb      	ldrh	r3, [r7, #14]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	89fa      	ldrh	r2, [r7, #14]
 8004e34:	60da      	str	r2, [r3, #12]
 8004e36:	e04f      	b.n	8004ed8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	77bb      	strb	r3, [r7, #30]
 8004e3c:	e04c      	b.n	8004ed8 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e3e:	7ffb      	ldrb	r3, [r7, #31]
 8004e40:	2b08      	cmp	r3, #8
 8004e42:	d828      	bhi.n	8004e96 <UART_SetConfig+0x45e>
 8004e44:	a201      	add	r2, pc, #4	; (adr r2, 8004e4c <UART_SetConfig+0x414>)
 8004e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e4a:	bf00      	nop
 8004e4c:	08004e71 	.word	0x08004e71
 8004e50:	08004e79 	.word	0x08004e79
 8004e54:	08004e81 	.word	0x08004e81
 8004e58:	08004e97 	.word	0x08004e97
 8004e5c:	08004e87 	.word	0x08004e87
 8004e60:	08004e97 	.word	0x08004e97
 8004e64:	08004e97 	.word	0x08004e97
 8004e68:	08004e97 	.word	0x08004e97
 8004e6c:	08004e8f 	.word	0x08004e8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e70:	f7fd fe9c 	bl	8002bac <HAL_RCC_GetPCLK1Freq>
 8004e74:	61b8      	str	r0, [r7, #24]
        break;
 8004e76:	e013      	b.n	8004ea0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e78:	f7fd feac 	bl	8002bd4 <HAL_RCC_GetPCLK2Freq>
 8004e7c:	61b8      	str	r0, [r7, #24]
        break;
 8004e7e:	e00f      	b.n	8004ea0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e80:	4b1d      	ldr	r3, [pc, #116]	; (8004ef8 <UART_SetConfig+0x4c0>)
 8004e82:	61bb      	str	r3, [r7, #24]
        break;
 8004e84:	e00c      	b.n	8004ea0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e86:	f7fd fda3 	bl	80029d0 <HAL_RCC_GetSysClockFreq>
 8004e8a:	61b8      	str	r0, [r7, #24]
        break;
 8004e8c:	e008      	b.n	8004ea0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e92:	61bb      	str	r3, [r7, #24]
        break;
 8004e94:	e004      	b.n	8004ea0 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8004e96:	2300      	movs	r3, #0
 8004e98:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	77bb      	strb	r3, [r7, #30]
        break;
 8004e9e:	bf00      	nop
    }

    if (pclk != 0U)
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d018      	beq.n	8004ed8 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	085a      	lsrs	r2, r3, #1
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	441a      	add	r2, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eb8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	2b0f      	cmp	r3, #15
 8004ebe:	d909      	bls.n	8004ed4 <UART_SetConfig+0x49c>
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ec6:	d205      	bcs.n	8004ed4 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	b29a      	uxth	r2, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	60da      	str	r2, [r3, #12]
 8004ed2:	e001      	b.n	8004ed8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004ee4:	7fbb      	ldrb	r3, [r7, #30]
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3720      	adds	r7, #32
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	40007c00 	.word	0x40007c00
 8004ef4:	40023800 	.word	0x40023800
 8004ef8:	00f42400 	.word	0x00f42400

08004efc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b083      	sub	sp, #12
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f08:	f003 0301 	and.w	r3, r3, #1
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d00a      	beq.n	8004f26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	430a      	orrs	r2, r1
 8004f24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2a:	f003 0302 	and.w	r3, r3, #2
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d00a      	beq.n	8004f48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	430a      	orrs	r2, r1
 8004f46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4c:	f003 0304 	and.w	r3, r3, #4
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d00a      	beq.n	8004f6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	430a      	orrs	r2, r1
 8004f68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6e:	f003 0308 	and.w	r3, r3, #8
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d00a      	beq.n	8004f8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	430a      	orrs	r2, r1
 8004f8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f90:	f003 0310 	and.w	r3, r3, #16
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d00a      	beq.n	8004fae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	430a      	orrs	r2, r1
 8004fac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb2:	f003 0320 	and.w	r3, r3, #32
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00a      	beq.n	8004fd0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	430a      	orrs	r2, r1
 8004fce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d01a      	beq.n	8005012 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	430a      	orrs	r2, r1
 8004ff0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ffa:	d10a      	bne.n	8005012 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	430a      	orrs	r2, r1
 8005010:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800501a:	2b00      	cmp	r3, #0
 800501c:	d00a      	beq.n	8005034 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	430a      	orrs	r2, r1
 8005032:	605a      	str	r2, [r3, #4]
  }
}
 8005034:	bf00      	nop
 8005036:	370c      	adds	r7, #12
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b086      	sub	sp, #24
 8005044:	af02      	add	r7, sp, #8
 8005046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005050:	f7fc f8d4 	bl	80011fc <HAL_GetTick>
 8005054:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0308 	and.w	r3, r3, #8
 8005060:	2b08      	cmp	r3, #8
 8005062:	d10e      	bne.n	8005082 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005064:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005068:	9300      	str	r3, [sp, #0]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2200      	movs	r2, #0
 800506e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f000 f817 	bl	80050a6 <UART_WaitOnFlagUntilTimeout>
 8005078:	4603      	mov	r3, r0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d001      	beq.n	8005082 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e00d      	b.n	800509e <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2220      	movs	r2, #32
 8005086:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2220      	movs	r2, #32
 800508c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3710      	adds	r7, #16
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}

080050a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80050a6:	b580      	push	{r7, lr}
 80050a8:	b09c      	sub	sp, #112	; 0x70
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	60f8      	str	r0, [r7, #12]
 80050ae:	60b9      	str	r1, [r7, #8]
 80050b0:	603b      	str	r3, [r7, #0]
 80050b2:	4613      	mov	r3, r2
 80050b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050b6:	e0a5      	b.n	8005204 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80050ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050be:	f000 80a1 	beq.w	8005204 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050c2:	f7fc f89b 	bl	80011fc <HAL_GetTick>
 80050c6:	4602      	mov	r2, r0
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d302      	bcc.n	80050d8 <UART_WaitOnFlagUntilTimeout+0x32>
 80050d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d13e      	bne.n	8005156 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050e0:	e853 3f00 	ldrex	r3, [r3]
 80050e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80050e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80050ec:	667b      	str	r3, [r7, #100]	; 0x64
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	461a      	mov	r2, r3
 80050f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050f8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80050fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80050fe:	e841 2300 	strex	r3, r2, [r1]
 8005102:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005104:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1e6      	bne.n	80050d8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	3308      	adds	r3, #8
 8005110:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005112:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005114:	e853 3f00 	ldrex	r3, [r3]
 8005118:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800511a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800511c:	f023 0301 	bic.w	r3, r3, #1
 8005120:	663b      	str	r3, [r7, #96]	; 0x60
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	3308      	adds	r3, #8
 8005128:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800512a:	64ba      	str	r2, [r7, #72]	; 0x48
 800512c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800512e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005130:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005132:	e841 2300 	strex	r3, r2, [r1]
 8005136:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005138:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1e5      	bne.n	800510a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2220      	movs	r2, #32
 8005142:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2220      	movs	r2, #32
 8005148:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2200      	movs	r2, #0
 800514e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	e067      	b.n	8005226 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 0304 	and.w	r3, r3, #4
 8005160:	2b00      	cmp	r3, #0
 8005162:	d04f      	beq.n	8005204 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	69db      	ldr	r3, [r3, #28]
 800516a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800516e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005172:	d147      	bne.n	8005204 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800517c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005186:	e853 3f00 	ldrex	r3, [r3]
 800518a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800518c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005192:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	461a      	mov	r2, r3
 800519a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800519c:	637b      	str	r3, [r7, #52]	; 0x34
 800519e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80051a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051a4:	e841 2300 	strex	r3, r2, [r1]
 80051a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80051aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d1e6      	bne.n	800517e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	3308      	adds	r3, #8
 80051b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	e853 3f00 	ldrex	r3, [r3]
 80051be:	613b      	str	r3, [r7, #16]
   return(result);
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	f023 0301 	bic.w	r3, r3, #1
 80051c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	3308      	adds	r3, #8
 80051ce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80051d0:	623a      	str	r2, [r7, #32]
 80051d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d4:	69f9      	ldr	r1, [r7, #28]
 80051d6:	6a3a      	ldr	r2, [r7, #32]
 80051d8:	e841 2300 	strex	r3, r2, [r1]
 80051dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d1e5      	bne.n	80051b0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2220      	movs	r2, #32
 80051e8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2220      	movs	r2, #32
 80051ee:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2220      	movs	r2, #32
 80051f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	e010      	b.n	8005226 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	69da      	ldr	r2, [r3, #28]
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	4013      	ands	r3, r2
 800520e:	68ba      	ldr	r2, [r7, #8]
 8005210:	429a      	cmp	r2, r3
 8005212:	bf0c      	ite	eq
 8005214:	2301      	moveq	r3, #1
 8005216:	2300      	movne	r3, #0
 8005218:	b2db      	uxtb	r3, r3
 800521a:	461a      	mov	r2, r3
 800521c:	79fb      	ldrb	r3, [r7, #7]
 800521e:	429a      	cmp	r2, r3
 8005220:	f43f af4a 	beq.w	80050b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3770      	adds	r7, #112	; 0x70
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
	...

08005230 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005230:	b084      	sub	sp, #16
 8005232:	b580      	push	{r7, lr}
 8005234:	b084      	sub	sp, #16
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
 800523a:	f107 001c 	add.w	r0, r7, #28
 800523e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005244:	2b01      	cmp	r3, #1
 8005246:	d120      	bne.n	800528a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800524c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	68da      	ldr	r2, [r3, #12]
 8005258:	4b20      	ldr	r3, [pc, #128]	; (80052dc <USB_CoreInit+0xac>)
 800525a:	4013      	ands	r3, r2
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800526c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800526e:	2b01      	cmp	r3, #1
 8005270:	d105      	bne.n	800527e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 fa92 	bl	80057a8 <USB_CoreReset>
 8005284:	4603      	mov	r3, r0
 8005286:	73fb      	strb	r3, [r7, #15]
 8005288:	e010      	b.n	80052ac <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f000 fa86 	bl	80057a8 <USB_CoreReset>
 800529c:	4603      	mov	r3, r0
 800529e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80052ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d10b      	bne.n	80052ca <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	f043 0206 	orr.w	r2, r3, #6
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	f043 0220 	orr.w	r2, r3, #32
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80052ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3710      	adds	r7, #16
 80052d0:	46bd      	mov	sp, r7
 80052d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80052d6:	b004      	add	sp, #16
 80052d8:	4770      	bx	lr
 80052da:	bf00      	nop
 80052dc:	ffbdffbf 	.word	0xffbdffbf

080052e0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b083      	sub	sp, #12
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	f023 0201 	bic.w	r2, r3, #1
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80052f4:	2300      	movs	r3, #0
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	370c      	adds	r7, #12
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr

08005302 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005302:	b580      	push	{r7, lr}
 8005304:	b084      	sub	sp, #16
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
 800530a:	460b      	mov	r3, r1
 800530c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800530e:	2300      	movs	r3, #0
 8005310:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	68db      	ldr	r3, [r3, #12]
 8005316:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800531e:	78fb      	ldrb	r3, [r7, #3]
 8005320:	2b01      	cmp	r3, #1
 8005322:	d115      	bne.n	8005350 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005330:	2001      	movs	r0, #1
 8005332:	f7fb ff6f 	bl	8001214 <HAL_Delay>
      ms++;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	3301      	adds	r3, #1
 800533a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f000 fa25 	bl	800578c <USB_GetMode>
 8005342:	4603      	mov	r3, r0
 8005344:	2b01      	cmp	r3, #1
 8005346:	d01e      	beq.n	8005386 <USB_SetCurrentMode+0x84>
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2b31      	cmp	r3, #49	; 0x31
 800534c:	d9f0      	bls.n	8005330 <USB_SetCurrentMode+0x2e>
 800534e:	e01a      	b.n	8005386 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005350:	78fb      	ldrb	r3, [r7, #3]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d115      	bne.n	8005382 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005362:	2001      	movs	r0, #1
 8005364:	f7fb ff56 	bl	8001214 <HAL_Delay>
      ms++;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	3301      	adds	r3, #1
 800536c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 fa0c 	bl	800578c <USB_GetMode>
 8005374:	4603      	mov	r3, r0
 8005376:	2b00      	cmp	r3, #0
 8005378:	d005      	beq.n	8005386 <USB_SetCurrentMode+0x84>
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2b31      	cmp	r3, #49	; 0x31
 800537e:	d9f0      	bls.n	8005362 <USB_SetCurrentMode+0x60>
 8005380:	e001      	b.n	8005386 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e005      	b.n	8005392 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2b32      	cmp	r3, #50	; 0x32
 800538a:	d101      	bne.n	8005390 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	e000      	b.n	8005392 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005390:	2300      	movs	r3, #0
}
 8005392:	4618      	mov	r0, r3
 8005394:	3710      	adds	r7, #16
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
	...

0800539c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800539c:	b084      	sub	sp, #16
 800539e:	b580      	push	{r7, lr}
 80053a0:	b086      	sub	sp, #24
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
 80053a6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80053aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80053ae:	2300      	movs	r3, #0
 80053b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80053b6:	2300      	movs	r3, #0
 80053b8:	613b      	str	r3, [r7, #16]
 80053ba:	e009      	b.n	80053d0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	3340      	adds	r3, #64	; 0x40
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	4413      	add	r3, r2
 80053c6:	2200      	movs	r2, #0
 80053c8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	3301      	adds	r3, #1
 80053ce:	613b      	str	r3, [r7, #16]
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	2b0e      	cmp	r3, #14
 80053d4:	d9f2      	bls.n	80053bc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80053d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d11c      	bne.n	8005416 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	68fa      	ldr	r2, [r7, #12]
 80053e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053ea:	f043 0302 	orr.w	r3, r3, #2
 80053ee:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	601a      	str	r2, [r3, #0]
 8005414:	e005      	b.n	8005422 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800541a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005428:	461a      	mov	r2, r3
 800542a:	2300      	movs	r3, #0
 800542c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005434:	4619      	mov	r1, r3
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800543c:	461a      	mov	r2, r3
 800543e:	680b      	ldr	r3, [r1, #0]
 8005440:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005444:	2b01      	cmp	r3, #1
 8005446:	d10c      	bne.n	8005462 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800544a:	2b00      	cmp	r3, #0
 800544c:	d104      	bne.n	8005458 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800544e:	2100      	movs	r1, #0
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f000 f961 	bl	8005718 <USB_SetDevSpeed>
 8005456:	e008      	b.n	800546a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005458:	2101      	movs	r1, #1
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 f95c 	bl	8005718 <USB_SetDevSpeed>
 8005460:	e003      	b.n	800546a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005462:	2103      	movs	r1, #3
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f000 f957 	bl	8005718 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800546a:	2110      	movs	r1, #16
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f000 f8f3 	bl	8005658 <USB_FlushTxFifo>
 8005472:	4603      	mov	r3, r0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d001      	beq.n	800547c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f000 f91d 	bl	80056bc <USB_FlushRxFifo>
 8005482:	4603      	mov	r3, r0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d001      	beq.n	800548c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005492:	461a      	mov	r2, r3
 8005494:	2300      	movs	r3, #0
 8005496:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800549e:	461a      	mov	r2, r3
 80054a0:	2300      	movs	r3, #0
 80054a2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054aa:	461a      	mov	r2, r3
 80054ac:	2300      	movs	r3, #0
 80054ae:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054b0:	2300      	movs	r3, #0
 80054b2:	613b      	str	r3, [r7, #16]
 80054b4:	e043      	b.n	800553e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	015a      	lsls	r2, r3, #5
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	4413      	add	r3, r2
 80054be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054cc:	d118      	bne.n	8005500 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d10a      	bne.n	80054ea <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	015a      	lsls	r2, r3, #5
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	4413      	add	r3, r2
 80054dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054e0:	461a      	mov	r2, r3
 80054e2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80054e6:	6013      	str	r3, [r2, #0]
 80054e8:	e013      	b.n	8005512 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	015a      	lsls	r2, r3, #5
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	4413      	add	r3, r2
 80054f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054f6:	461a      	mov	r2, r3
 80054f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80054fc:	6013      	str	r3, [r2, #0]
 80054fe:	e008      	b.n	8005512 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	015a      	lsls	r2, r3, #5
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	4413      	add	r3, r2
 8005508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800550c:	461a      	mov	r2, r3
 800550e:	2300      	movs	r3, #0
 8005510:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	015a      	lsls	r2, r3, #5
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	4413      	add	r3, r2
 800551a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800551e:	461a      	mov	r2, r3
 8005520:	2300      	movs	r3, #0
 8005522:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	015a      	lsls	r2, r3, #5
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	4413      	add	r3, r2
 800552c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005530:	461a      	mov	r2, r3
 8005532:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005536:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	3301      	adds	r3, #1
 800553c:	613b      	str	r3, [r7, #16]
 800553e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005540:	693a      	ldr	r2, [r7, #16]
 8005542:	429a      	cmp	r2, r3
 8005544:	d3b7      	bcc.n	80054b6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005546:	2300      	movs	r3, #0
 8005548:	613b      	str	r3, [r7, #16]
 800554a:	e043      	b.n	80055d4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	015a      	lsls	r2, r3, #5
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	4413      	add	r3, r2
 8005554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800555e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005562:	d118      	bne.n	8005596 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d10a      	bne.n	8005580 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	015a      	lsls	r2, r3, #5
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	4413      	add	r3, r2
 8005572:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005576:	461a      	mov	r2, r3
 8005578:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800557c:	6013      	str	r3, [r2, #0]
 800557e:	e013      	b.n	80055a8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	015a      	lsls	r2, r3, #5
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	4413      	add	r3, r2
 8005588:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800558c:	461a      	mov	r2, r3
 800558e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005592:	6013      	str	r3, [r2, #0]
 8005594:	e008      	b.n	80055a8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	015a      	lsls	r2, r3, #5
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	4413      	add	r3, r2
 800559e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055a2:	461a      	mov	r2, r3
 80055a4:	2300      	movs	r3, #0
 80055a6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	015a      	lsls	r2, r3, #5
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	4413      	add	r3, r2
 80055b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055b4:	461a      	mov	r2, r3
 80055b6:	2300      	movs	r3, #0
 80055b8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	015a      	lsls	r2, r3, #5
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	4413      	add	r3, r2
 80055c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055c6:	461a      	mov	r2, r3
 80055c8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80055cc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	3301      	adds	r3, #1
 80055d2:	613b      	str	r3, [r7, #16]
 80055d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d6:	693a      	ldr	r2, [r7, #16]
 80055d8:	429a      	cmp	r2, r3
 80055da:	d3b7      	bcc.n	800554c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055e2:	691b      	ldr	r3, [r3, #16]
 80055e4:	68fa      	ldr	r2, [r7, #12]
 80055e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055ee:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80055fc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80055fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005600:	2b00      	cmp	r3, #0
 8005602:	d105      	bne.n	8005610 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	699b      	ldr	r3, [r3, #24]
 8005608:	f043 0210 	orr.w	r2, r3, #16
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	699a      	ldr	r2, [r3, #24]
 8005614:	4b0e      	ldr	r3, [pc, #56]	; (8005650 <USB_DevInit+0x2b4>)
 8005616:	4313      	orrs	r3, r2
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800561c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800561e:	2b00      	cmp	r3, #0
 8005620:	d005      	beq.n	800562e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	699b      	ldr	r3, [r3, #24]
 8005626:	f043 0208 	orr.w	r2, r3, #8
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800562e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005630:	2b01      	cmp	r3, #1
 8005632:	d105      	bne.n	8005640 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	699a      	ldr	r2, [r3, #24]
 8005638:	4b06      	ldr	r3, [pc, #24]	; (8005654 <USB_DevInit+0x2b8>)
 800563a:	4313      	orrs	r3, r2
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005640:	7dfb      	ldrb	r3, [r7, #23]
}
 8005642:	4618      	mov	r0, r3
 8005644:	3718      	adds	r7, #24
 8005646:	46bd      	mov	sp, r7
 8005648:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800564c:	b004      	add	sp, #16
 800564e:	4770      	bx	lr
 8005650:	803c3800 	.word	0x803c3800
 8005654:	40000004 	.word	0x40000004

08005658 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005658:	b480      	push	{r7}
 800565a:	b085      	sub	sp, #20
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005662:	2300      	movs	r3, #0
 8005664:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	3301      	adds	r3, #1
 800566a:	60fb      	str	r3, [r7, #12]
 800566c:	4a12      	ldr	r2, [pc, #72]	; (80056b8 <USB_FlushTxFifo+0x60>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d901      	bls.n	8005676 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005672:	2303      	movs	r3, #3
 8005674:	e01a      	b.n	80056ac <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	691b      	ldr	r3, [r3, #16]
 800567a:	2b00      	cmp	r3, #0
 800567c:	daf3      	bge.n	8005666 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800567e:	2300      	movs	r3, #0
 8005680:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	019b      	lsls	r3, r3, #6
 8005686:	f043 0220 	orr.w	r2, r3, #32
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	3301      	adds	r3, #1
 8005692:	60fb      	str	r3, [r7, #12]
 8005694:	4a08      	ldr	r2, [pc, #32]	; (80056b8 <USB_FlushTxFifo+0x60>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d901      	bls.n	800569e <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 800569a:	2303      	movs	r3, #3
 800569c:	e006      	b.n	80056ac <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	f003 0320 	and.w	r3, r3, #32
 80056a6:	2b20      	cmp	r3, #32
 80056a8:	d0f1      	beq.n	800568e <USB_FlushTxFifo+0x36>

  return HAL_OK;
 80056aa:	2300      	movs	r3, #0
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3714      	adds	r7, #20
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr
 80056b8:	00030d40 	.word	0x00030d40

080056bc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80056bc:	b480      	push	{r7}
 80056be:	b085      	sub	sp, #20
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80056c4:	2300      	movs	r3, #0
 80056c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	3301      	adds	r3, #1
 80056cc:	60fb      	str	r3, [r7, #12]
 80056ce:	4a11      	ldr	r2, [pc, #68]	; (8005714 <USB_FlushRxFifo+0x58>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d901      	bls.n	80056d8 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 80056d4:	2303      	movs	r3, #3
 80056d6:	e017      	b.n	8005708 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	691b      	ldr	r3, [r3, #16]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	daf3      	bge.n	80056c8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80056e0:	2300      	movs	r3, #0
 80056e2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2210      	movs	r2, #16
 80056e8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	3301      	adds	r3, #1
 80056ee:	60fb      	str	r3, [r7, #12]
 80056f0:	4a08      	ldr	r2, [pc, #32]	; (8005714 <USB_FlushRxFifo+0x58>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d901      	bls.n	80056fa <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 80056f6:	2303      	movs	r3, #3
 80056f8:	e006      	b.n	8005708 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	f003 0310 	and.w	r3, r3, #16
 8005702:	2b10      	cmp	r3, #16
 8005704:	d0f1      	beq.n	80056ea <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8005706:	2300      	movs	r3, #0
}
 8005708:	4618      	mov	r0, r3
 800570a:	3714      	adds	r7, #20
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr
 8005714:	00030d40 	.word	0x00030d40

08005718 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005718:	b480      	push	{r7}
 800571a:	b085      	sub	sp, #20
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	460b      	mov	r3, r1
 8005722:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	78fb      	ldrb	r3, [r7, #3]
 8005732:	68f9      	ldr	r1, [r7, #12]
 8005734:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005738:	4313      	orrs	r3, r2
 800573a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800573c:	2300      	movs	r3, #0
}
 800573e:	4618      	mov	r0, r3
 8005740:	3714      	adds	r7, #20
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr

0800574a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800574a:	b480      	push	{r7}
 800574c:	b085      	sub	sp, #20
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68fa      	ldr	r2, [r7, #12]
 8005760:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005764:	f023 0303 	bic.w	r3, r3, #3
 8005768:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	68fa      	ldr	r2, [r7, #12]
 8005774:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005778:	f043 0302 	orr.w	r3, r3, #2
 800577c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800577e:	2300      	movs	r3, #0
}
 8005780:	4618      	mov	r0, r3
 8005782:	3714      	adds	r7, #20
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800578c:	b480      	push	{r7}
 800578e:	b083      	sub	sp, #12
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	695b      	ldr	r3, [r3, #20]
 8005798:	f003 0301 	and.w	r3, r3, #1
}
 800579c:	4618      	mov	r0, r3
 800579e:	370c      	adds	r7, #12
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b085      	sub	sp, #20
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80057b0:	2300      	movs	r3, #0
 80057b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	3301      	adds	r3, #1
 80057b8:	60fb      	str	r3, [r7, #12]
 80057ba:	4a13      	ldr	r2, [pc, #76]	; (8005808 <USB_CoreReset+0x60>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d901      	bls.n	80057c4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80057c0:	2303      	movs	r3, #3
 80057c2:	e01a      	b.n	80057fa <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	691b      	ldr	r3, [r3, #16]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	daf3      	bge.n	80057b4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80057cc:	2300      	movs	r3, #0
 80057ce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	691b      	ldr	r3, [r3, #16]
 80057d4:	f043 0201 	orr.w	r2, r3, #1
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	3301      	adds	r3, #1
 80057e0:	60fb      	str	r3, [r7, #12]
 80057e2:	4a09      	ldr	r2, [pc, #36]	; (8005808 <USB_CoreReset+0x60>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d901      	bls.n	80057ec <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80057e8:	2303      	movs	r3, #3
 80057ea:	e006      	b.n	80057fa <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	691b      	ldr	r3, [r3, #16]
 80057f0:	f003 0301 	and.w	r3, r3, #1
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d0f1      	beq.n	80057dc <USB_CoreReset+0x34>

  return HAL_OK;
 80057f8:	2300      	movs	r3, #0
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3714      	adds	r7, #20
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr
 8005806:	bf00      	nop
 8005808:	00030d40 	.word	0x00030d40

0800580c <__libc_init_array>:
 800580c:	b570      	push	{r4, r5, r6, lr}
 800580e:	4d0d      	ldr	r5, [pc, #52]	; (8005844 <__libc_init_array+0x38>)
 8005810:	4c0d      	ldr	r4, [pc, #52]	; (8005848 <__libc_init_array+0x3c>)
 8005812:	1b64      	subs	r4, r4, r5
 8005814:	10a4      	asrs	r4, r4, #2
 8005816:	2600      	movs	r6, #0
 8005818:	42a6      	cmp	r6, r4
 800581a:	d109      	bne.n	8005830 <__libc_init_array+0x24>
 800581c:	4d0b      	ldr	r5, [pc, #44]	; (800584c <__libc_init_array+0x40>)
 800581e:	4c0c      	ldr	r4, [pc, #48]	; (8005850 <__libc_init_array+0x44>)
 8005820:	f000 f820 	bl	8005864 <_init>
 8005824:	1b64      	subs	r4, r4, r5
 8005826:	10a4      	asrs	r4, r4, #2
 8005828:	2600      	movs	r6, #0
 800582a:	42a6      	cmp	r6, r4
 800582c:	d105      	bne.n	800583a <__libc_init_array+0x2e>
 800582e:	bd70      	pop	{r4, r5, r6, pc}
 8005830:	f855 3b04 	ldr.w	r3, [r5], #4
 8005834:	4798      	blx	r3
 8005836:	3601      	adds	r6, #1
 8005838:	e7ee      	b.n	8005818 <__libc_init_array+0xc>
 800583a:	f855 3b04 	ldr.w	r3, [r5], #4
 800583e:	4798      	blx	r3
 8005840:	3601      	adds	r6, #1
 8005842:	e7f2      	b.n	800582a <__libc_init_array+0x1e>
 8005844:	0800589c 	.word	0x0800589c
 8005848:	0800589c 	.word	0x0800589c
 800584c:	0800589c 	.word	0x0800589c
 8005850:	080058a0 	.word	0x080058a0

08005854 <memset>:
 8005854:	4402      	add	r2, r0
 8005856:	4603      	mov	r3, r0
 8005858:	4293      	cmp	r3, r2
 800585a:	d100      	bne.n	800585e <memset+0xa>
 800585c:	4770      	bx	lr
 800585e:	f803 1b01 	strb.w	r1, [r3], #1
 8005862:	e7f9      	b.n	8005858 <memset+0x4>

08005864 <_init>:
 8005864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005866:	bf00      	nop
 8005868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800586a:	bc08      	pop	{r3}
 800586c:	469e      	mov	lr, r3
 800586e:	4770      	bx	lr

08005870 <_fini>:
 8005870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005872:	bf00      	nop
 8005874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005876:	bc08      	pop	{r3}
 8005878:	469e      	mov	lr, r3
 800587a:	4770      	bx	lr
