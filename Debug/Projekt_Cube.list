
Projekt_Cube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063f4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080065c4  080065c4  000165c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006624  08006624  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08006624  08006624  00016624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800662c  0800662c  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800662c  0800662c  0001662c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006630  08006630  00016630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08006634  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000678  20000088  080066bc  00020088  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000700  080066bc  00020700  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   000192f3  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032c9  00000000  00000000  000393ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001248  00000000  00000000  0003c678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010e0  00000000  00000000  0003d8c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028865  00000000  00000000  0003e9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017fbc  00000000  00000000  00067205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f844d  00000000  00000000  0007f1c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017760e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fd0  00000000  00000000  00177664  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000088 	.word	0x20000088
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080065ac 	.word	0x080065ac

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000008c 	.word	0x2000008c
 800020c:	080065ac 	.word	0x080065ac

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005be:	463b      	mov	r3, r7
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
 80005c6:	609a      	str	r2, [r3, #8]
 80005c8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005ca:	4b21      	ldr	r3, [pc, #132]	; (8000650 <MX_ADC1_Init+0x98>)
 80005cc:	4a21      	ldr	r2, [pc, #132]	; (8000654 <MX_ADC1_Init+0x9c>)
 80005ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80005d0:	4b1f      	ldr	r3, [pc, #124]	; (8000650 <MX_ADC1_Init+0x98>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005d6:	4b1e      	ldr	r3, [pc, #120]	; (8000650 <MX_ADC1_Init+0x98>)
 80005d8:	2200      	movs	r2, #0
 80005da:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005dc:	4b1c      	ldr	r3, [pc, #112]	; (8000650 <MX_ADC1_Init+0x98>)
 80005de:	2200      	movs	r2, #0
 80005e0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005e2:	4b1b      	ldr	r3, [pc, #108]	; (8000650 <MX_ADC1_Init+0x98>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005e8:	4b19      	ldr	r3, [pc, #100]	; (8000650 <MX_ADC1_Init+0x98>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005f0:	4b17      	ldr	r3, [pc, #92]	; (8000650 <MX_ADC1_Init+0x98>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005f6:	4b16      	ldr	r3, [pc, #88]	; (8000650 <MX_ADC1_Init+0x98>)
 80005f8:	4a17      	ldr	r2, [pc, #92]	; (8000658 <MX_ADC1_Init+0xa0>)
 80005fa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005fc:	4b14      	ldr	r3, [pc, #80]	; (8000650 <MX_ADC1_Init+0x98>)
 80005fe:	2200      	movs	r2, #0
 8000600:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000602:	4b13      	ldr	r3, [pc, #76]	; (8000650 <MX_ADC1_Init+0x98>)
 8000604:	2201      	movs	r2, #1
 8000606:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000608:	4b11      	ldr	r3, [pc, #68]	; (8000650 <MX_ADC1_Init+0x98>)
 800060a:	2200      	movs	r2, #0
 800060c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000610:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <MX_ADC1_Init+0x98>)
 8000612:	2201      	movs	r2, #1
 8000614:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000616:	480e      	ldr	r0, [pc, #56]	; (8000650 <MX_ADC1_Init+0x98>)
 8000618:	f001 f890 	bl	800173c <HAL_ADC_Init>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000622:	f000 fbbd 	bl	8000da0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000626:	2303      	movs	r3, #3
 8000628:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800062a:	2301      	movs	r3, #1
 800062c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800062e:	2300      	movs	r3, #0
 8000630:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000632:	463b      	mov	r3, r7
 8000634:	4619      	mov	r1, r3
 8000636:	4806      	ldr	r0, [pc, #24]	; (8000650 <MX_ADC1_Init+0x98>)
 8000638:	f001 fa2a 	bl	8001a90 <HAL_ADC_ConfigChannel>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000642:	f000 fbad 	bl	8000da0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000646:	bf00      	nop
 8000648:	3710      	adds	r7, #16
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	200000bc 	.word	0x200000bc
 8000654:	40012000 	.word	0x40012000
 8000658:	0f000001 	.word	0x0f000001

0800065c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b08a      	sub	sp, #40	; 0x28
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000664:	f107 0314 	add.w	r3, r7, #20
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a15      	ldr	r2, [pc, #84]	; (80006d0 <HAL_ADC_MspInit+0x74>)
 800067a:	4293      	cmp	r3, r2
 800067c:	d123      	bne.n	80006c6 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800067e:	4b15      	ldr	r3, [pc, #84]	; (80006d4 <HAL_ADC_MspInit+0x78>)
 8000680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000682:	4a14      	ldr	r2, [pc, #80]	; (80006d4 <HAL_ADC_MspInit+0x78>)
 8000684:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000688:	6453      	str	r3, [r2, #68]	; 0x44
 800068a:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <HAL_ADC_MspInit+0x78>)
 800068c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800068e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000692:	613b      	str	r3, [r7, #16]
 8000694:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000696:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <HAL_ADC_MspInit+0x78>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	4a0e      	ldr	r2, [pc, #56]	; (80006d4 <HAL_ADC_MspInit+0x78>)
 800069c:	f043 0301 	orr.w	r3, r3, #1
 80006a0:	6313      	str	r3, [r2, #48]	; 0x30
 80006a2:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <HAL_ADC_MspInit+0x78>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	f003 0301 	and.w	r3, r3, #1
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006ae:	2308      	movs	r3, #8
 80006b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006b2:	2303      	movs	r3, #3
 80006b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ba:	f107 0314 	add.w	r3, r7, #20
 80006be:	4619      	mov	r1, r3
 80006c0:	4805      	ldr	r0, [pc, #20]	; (80006d8 <HAL_ADC_MspInit+0x7c>)
 80006c2:	f001 fd47 	bl	8002154 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006c6:	bf00      	nop
 80006c8:	3728      	adds	r7, #40	; 0x28
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40012000 	.word	0x40012000
 80006d4:	40023800 	.word	0x40023800
 80006d8:	40020000 	.word	0x40020000

080006dc <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b08e      	sub	sp, #56	; 0x38
 80006e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]
 80006f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f2:	4b91      	ldr	r3, [pc, #580]	; (8000938 <MX_GPIO_Init+0x25c>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	4a90      	ldr	r2, [pc, #576]	; (8000938 <MX_GPIO_Init+0x25c>)
 80006f8:	f043 0304 	orr.w	r3, r3, #4
 80006fc:	6313      	str	r3, [r2, #48]	; 0x30
 80006fe:	4b8e      	ldr	r3, [pc, #568]	; (8000938 <MX_GPIO_Init+0x25c>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	f003 0304 	and.w	r3, r3, #4
 8000706:	623b      	str	r3, [r7, #32]
 8000708:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800070a:	4b8b      	ldr	r3, [pc, #556]	; (8000938 <MX_GPIO_Init+0x25c>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	4a8a      	ldr	r2, [pc, #552]	; (8000938 <MX_GPIO_Init+0x25c>)
 8000710:	f043 0320 	orr.w	r3, r3, #32
 8000714:	6313      	str	r3, [r2, #48]	; 0x30
 8000716:	4b88      	ldr	r3, [pc, #544]	; (8000938 <MX_GPIO_Init+0x25c>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	f003 0320 	and.w	r3, r3, #32
 800071e:	61fb      	str	r3, [r7, #28]
 8000720:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000722:	4b85      	ldr	r3, [pc, #532]	; (8000938 <MX_GPIO_Init+0x25c>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a84      	ldr	r2, [pc, #528]	; (8000938 <MX_GPIO_Init+0x25c>)
 8000728:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b82      	ldr	r3, [pc, #520]	; (8000938 <MX_GPIO_Init+0x25c>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000736:	61bb      	str	r3, [r7, #24]
 8000738:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073a:	4b7f      	ldr	r3, [pc, #508]	; (8000938 <MX_GPIO_Init+0x25c>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	4a7e      	ldr	r2, [pc, #504]	; (8000938 <MX_GPIO_Init+0x25c>)
 8000740:	f043 0301 	orr.w	r3, r3, #1
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
 8000746:	4b7c      	ldr	r3, [pc, #496]	; (8000938 <MX_GPIO_Init+0x25c>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	617b      	str	r3, [r7, #20]
 8000750:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000752:	4b79      	ldr	r3, [pc, #484]	; (8000938 <MX_GPIO_Init+0x25c>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4a78      	ldr	r2, [pc, #480]	; (8000938 <MX_GPIO_Init+0x25c>)
 8000758:	f043 0302 	orr.w	r3, r3, #2
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4b76      	ldr	r3, [pc, #472]	; (8000938 <MX_GPIO_Init+0x25c>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f003 0302 	and.w	r3, r3, #2
 8000766:	613b      	str	r3, [r7, #16]
 8000768:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800076a:	4b73      	ldr	r3, [pc, #460]	; (8000938 <MX_GPIO_Init+0x25c>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a72      	ldr	r2, [pc, #456]	; (8000938 <MX_GPIO_Init+0x25c>)
 8000770:	f043 0310 	orr.w	r3, r3, #16
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b70      	ldr	r3, [pc, #448]	; (8000938 <MX_GPIO_Init+0x25c>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0310 	and.w	r3, r3, #16
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000782:	4b6d      	ldr	r3, [pc, #436]	; (8000938 <MX_GPIO_Init+0x25c>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a6c      	ldr	r2, [pc, #432]	; (8000938 <MX_GPIO_Init+0x25c>)
 8000788:	f043 0308 	orr.w	r3, r3, #8
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b6a      	ldr	r3, [pc, #424]	; (8000938 <MX_GPIO_Init+0x25c>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0308 	and.w	r3, r3, #8
 8000796:	60bb      	str	r3, [r7, #8]
 8000798:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800079a:	4b67      	ldr	r3, [pc, #412]	; (8000938 <MX_GPIO_Init+0x25c>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a66      	ldr	r2, [pc, #408]	; (8000938 <MX_GPIO_Init+0x25c>)
 80007a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b64      	ldr	r3, [pc, #400]	; (8000938 <MX_GPIO_Init+0x25c>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, D6_Pin|D7_Pin|RS_Pin, GPIO_PIN_RESET);
 80007b2:	2200      	movs	r2, #0
 80007b4:	f44f 6185 	mov.w	r1, #1064	; 0x428
 80007b8:	4860      	ldr	r0, [pc, #384]	; (800093c <MX_GPIO_Init+0x260>)
 80007ba:	f001 fe77 	bl	80024ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, D4_Pin|D5_Pin, GPIO_PIN_RESET);
 80007be:	2200      	movs	r2, #0
 80007c0:	2109      	movs	r1, #9
 80007c2:	485f      	ldr	r0, [pc, #380]	; (8000940 <MX_GPIO_Init+0x264>)
 80007c4:	f001 fe72 	bl	80024ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007c8:	2200      	movs	r2, #0
 80007ca:	f244 0181 	movw	r1, #16513	; 0x4081
 80007ce:	485d      	ldr	r0, [pc, #372]	; (8000944 <MX_GPIO_Init+0x268>)
 80007d0:	f001 fe6c 	bl	80024ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007d4:	2200      	movs	r2, #0
 80007d6:	2140      	movs	r1, #64	; 0x40
 80007d8:	485b      	ldr	r0, [pc, #364]	; (8000948 <MX_GPIO_Init+0x26c>)
 80007da:	f001 fe67 	bl	80024ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 80007de:	2200      	movs	r2, #0
 80007e0:	2180      	movs	r1, #128	; 0x80
 80007e2:	485a      	ldr	r0, [pc, #360]	; (800094c <MX_GPIO_Init+0x270>)
 80007e4:	f001 fe62 	bl	80024ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80007e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007ee:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f4:	2300      	movs	r3, #0
 80007f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80007f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007fc:	4619      	mov	r1, r3
 80007fe:	4850      	ldr	r0, [pc, #320]	; (8000940 <MX_GPIO_Init+0x264>)
 8000800:	f001 fca8 	bl	8002154 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = D6_Pin|D7_Pin|RS_Pin;
 8000804:	f44f 6385 	mov.w	r3, #1064	; 0x428
 8000808:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080a:	2301      	movs	r3, #1
 800080c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000812:	2300      	movs	r3, #0
 8000814:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000816:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800081a:	4619      	mov	r1, r3
 800081c:	4847      	ldr	r0, [pc, #284]	; (800093c <MX_GPIO_Init+0x260>)
 800081e:	f001 fc99 	bl	8002154 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin;
 8000822:	2309      	movs	r3, #9
 8000824:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000826:	2301      	movs	r3, #1
 8000828:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082e:	2300      	movs	r3, #0
 8000830:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000832:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000836:	4619      	mov	r1, r3
 8000838:	4841      	ldr	r0, [pc, #260]	; (8000940 <MX_GPIO_Init+0x264>)
 800083a:	f001 fc8b 	bl	8002154 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800083e:	2332      	movs	r3, #50	; 0x32
 8000840:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000842:	2302      	movs	r3, #2
 8000844:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800084a:	2303      	movs	r3, #3
 800084c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800084e:	230b      	movs	r3, #11
 8000850:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000852:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000856:	4619      	mov	r1, r3
 8000858:	4839      	ldr	r0, [pc, #228]	; (8000940 <MX_GPIO_Init+0x264>)
 800085a:	f001 fc7b 	bl	8002154 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800085e:	2386      	movs	r3, #134	; 0x86
 8000860:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000862:	2302      	movs	r3, #2
 8000864:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800086a:	2303      	movs	r3, #3
 800086c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800086e:	230b      	movs	r3, #11
 8000870:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000872:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000876:	4619      	mov	r1, r3
 8000878:	4835      	ldr	r0, [pc, #212]	; (8000950 <MX_GPIO_Init+0x274>)
 800087a:	f001 fc6b 	bl	8002154 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800087e:	f244 0381 	movw	r3, #16513	; 0x4081
 8000882:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000884:	2301      	movs	r3, #1
 8000886:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088c:	2300      	movs	r3, #0
 800088e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000890:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000894:	4619      	mov	r1, r3
 8000896:	482b      	ldr	r0, [pc, #172]	; (8000944 <MX_GPIO_Init+0x268>)
 8000898:	f001 fc5c 	bl	8002154 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800089c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a2:	2302      	movs	r3, #2
 80008a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008aa:	2303      	movs	r3, #3
 80008ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008ae:	230b      	movs	r3, #11
 80008b0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80008b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008b6:	4619      	mov	r1, r3
 80008b8:	4822      	ldr	r0, [pc, #136]	; (8000944 <MX_GPIO_Init+0x268>)
 80008ba:	f001 fc4b 	bl	8002154 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008be:	2340      	movs	r3, #64	; 0x40
 80008c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c2:	2301      	movs	r3, #1
 80008c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ca:	2300      	movs	r3, #0
 80008cc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008d2:	4619      	mov	r1, r3
 80008d4:	481c      	ldr	r0, [pc, #112]	; (8000948 <MX_GPIO_Init+0x26c>)
 80008d6:	f001 fc3d 	bl	8002154 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008da:	2380      	movs	r3, #128	; 0x80
 80008dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008de:	2300      	movs	r3, #0
 80008e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ea:	4619      	mov	r1, r3
 80008ec:	4816      	ldr	r0, [pc, #88]	; (8000948 <MX_GPIO_Init+0x26c>)
 80008ee:	f001 fc31 	bl	8002154 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EN_Pin;
 80008f2:	2380      	movs	r3, #128	; 0x80
 80008f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f6:	2301      	movs	r3, #1
 80008f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fe:	2300      	movs	r3, #0
 8000900:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(EN_GPIO_Port, &GPIO_InitStruct);
 8000902:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000906:	4619      	mov	r1, r3
 8000908:	4810      	ldr	r0, [pc, #64]	; (800094c <MX_GPIO_Init+0x270>)
 800090a:	f001 fc23 	bl	8002154 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800090e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000912:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000914:	2302      	movs	r3, #2
 8000916:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800091c:	2303      	movs	r3, #3
 800091e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000920:	230b      	movs	r3, #11
 8000922:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000924:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000928:	4619      	mov	r1, r3
 800092a:	4807      	ldr	r0, [pc, #28]	; (8000948 <MX_GPIO_Init+0x26c>)
 800092c:	f001 fc12 	bl	8002154 <HAL_GPIO_Init>

}
 8000930:	bf00      	nop
 8000932:	3738      	adds	r7, #56	; 0x38
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	40023800 	.word	0x40023800
 800093c:	40021400 	.word	0x40021400
 8000940:	40020800 	.word	0x40020800
 8000944:	40020400 	.word	0x40020400
 8000948:	40021800 	.word	0x40021800
 800094c:	40020c00 	.word	0x40020c00
 8000950:	40020000 	.word	0x40020000

08000954 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8000954:	b5b0      	push	{r4, r5, r7, lr}
 8000956:	b08a      	sub	sp, #40	; 0x28
 8000958:	af00      	add	r7, sp, #0
 800095a:	60f8      	str	r0, [r7, #12]
 800095c:	60b9      	str	r1, [r7, #8]
 800095e:	607a      	str	r2, [r7, #4]
 8000960:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 8000962:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000966:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 800096a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800096e:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 8000970:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000972:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 8000974:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000976:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 8000984:	f107 0310 	add.w	r3, r7, #16
 8000988:	4618      	mov	r0, r3
 800098a:	f000 f80e 	bl	80009aa <Lcd_init>

	return lcd;
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	461d      	mov	r5, r3
 8000992:	f107 0410 	add.w	r4, r7, #16
 8000996:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000998:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800099a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800099e:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80009a2:	68f8      	ldr	r0, [r7, #12]
 80009a4:	3728      	adds	r7, #40	; 0x28
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bdb0      	pop	{r4, r5, r7, pc}

080009aa <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 80009aa:	b580      	push	{r7, lr}
 80009ac:	b082      	sub	sp, #8
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	7d9b      	ldrb	r3, [r3, #22]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d10c      	bne.n	80009d4 <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 80009ba:	2133      	movs	r1, #51	; 0x33
 80009bc:	6878      	ldr	r0, [r7, #4]
 80009be:	f000 f86f 	bl	8000aa0 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 80009c2:	2132      	movs	r1, #50	; 0x32
 80009c4:	6878      	ldr	r0, [r7, #4]
 80009c6:	f000 f86b 	bl	8000aa0 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 80009ca:	2128      	movs	r1, #40	; 0x28
 80009cc:	6878      	ldr	r0, [r7, #4]
 80009ce:	f000 f867 	bl	8000aa0 <lcd_write_command>
 80009d2:	e003      	b.n	80009dc <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 80009d4:	2138      	movs	r1, #56	; 0x38
 80009d6:	6878      	ldr	r0, [r7, #4]
 80009d8:	f000 f862 	bl	8000aa0 <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 80009dc:	2101      	movs	r1, #1
 80009de:	6878      	ldr	r0, [r7, #4]
 80009e0:	f000 f85e 	bl	8000aa0 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 80009e4:	210c      	movs	r1, #12
 80009e6:	6878      	ldr	r0, [r7, #4]
 80009e8:	f000 f85a 	bl	8000aa0 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 80009ec:	2106      	movs	r1, #6
 80009ee:	6878      	ldr	r0, [r7, #4]
 80009f0:	f000 f856 	bl	8000aa0 <lcd_write_command>
}
 80009f4:	bf00      	nop
 80009f6:	3708      	adds	r7, #8
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}

080009fc <Lcd_int>:

/**
 * Write a number on the current position
 */
void Lcd_int(Lcd_HandleTypeDef * lcd, int number)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b086      	sub	sp, #24
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
 8000a04:	6039      	str	r1, [r7, #0]
	char buffer[11];
	sprintf(buffer, "%d", number);
 8000a06:	f107 030c 	add.w	r3, r7, #12
 8000a0a:	683a      	ldr	r2, [r7, #0]
 8000a0c:	4906      	ldr	r1, [pc, #24]	; (8000a28 <Lcd_int+0x2c>)
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f005 f99e 	bl	8005d50 <siprintf>

	Lcd_string(lcd, buffer);
 8000a14:	f107 030c 	add.w	r3, r7, #12
 8000a18:	4619      	mov	r1, r3
 8000a1a:	6878      	ldr	r0, [r7, #4]
 8000a1c:	f000 f806 	bl	8000a2c <Lcd_string>
}
 8000a20:	bf00      	nop
 8000a22:	3718      	adds	r7, #24
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	080065c4 	.word	0x080065c4

08000a2c <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8000a2c:	b590      	push	{r4, r7, lr}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 8000a36:	2300      	movs	r3, #0
 8000a38:	73fb      	strb	r3, [r7, #15]
 8000a3a:	e00a      	b.n	8000a52 <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8000a3c:	7bfb      	ldrb	r3, [r7, #15]
 8000a3e:	683a      	ldr	r2, [r7, #0]
 8000a40:	4413      	add	r3, r2
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	4619      	mov	r1, r3
 8000a46:	6878      	ldr	r0, [r7, #4]
 8000a48:	f000 f858 	bl	8000afc <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8000a4c:	7bfb      	ldrb	r3, [r7, #15]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	73fb      	strb	r3, [r7, #15]
 8000a52:	7bfc      	ldrb	r4, [r7, #15]
 8000a54:	6838      	ldr	r0, [r7, #0]
 8000a56:	f7ff fbdb 	bl	8000210 <strlen>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	429c      	cmp	r4, r3
 8000a5e:	d3ed      	bcc.n	8000a3c <Lcd_string+0x10>
	}
}
 8000a60:	bf00      	nop
 8000a62:	bf00      	nop
 8000a64:	3714      	adds	r7, #20
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd90      	pop	{r4, r7, pc}
	...

08000a6c <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	460b      	mov	r3, r1
 8000a76:	70fb      	strb	r3, [r7, #3]
 8000a78:	4613      	mov	r3, r2
 8000a7a:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8000a7c:	78fb      	ldrb	r3, [r7, #3]
 8000a7e:	4a07      	ldr	r2, [pc, #28]	; (8000a9c <Lcd_cursor+0x30>)
 8000a80:	5cd2      	ldrb	r2, [r2, r3]
 8000a82:	78bb      	ldrb	r3, [r7, #2]
 8000a84:	4413      	add	r3, r2
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	3b80      	subs	r3, #128	; 0x80
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	6878      	ldr	r0, [r7, #4]
 8000a90:	f000 f806 	bl	8000aa0 <lcd_write_command>
	#endif
}
 8000a94:	bf00      	nop
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	080065d4 	.word	0x080065d4

08000aa0 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
 8000aa8:	460b      	mov	r3, r1
 8000aaa:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	6898      	ldr	r0, [r3, #8]
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	899b      	ldrh	r3, [r3, #12]
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	f001 fcf8 	bl	80024ac <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	7d9b      	ldrb	r3, [r3, #22]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d111      	bne.n	8000ae8 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 8000ac4:	78fb      	ldrb	r3, [r7, #3]
 8000ac6:	091b      	lsrs	r3, r3, #4
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	2204      	movs	r2, #4
 8000acc:	4619      	mov	r1, r3
 8000ace:	6878      	ldr	r0, [r7, #4]
 8000ad0:	f000 f842 	bl	8000b58 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8000ad4:	78fb      	ldrb	r3, [r7, #3]
 8000ad6:	f003 030f 	and.w	r3, r3, #15
 8000ada:	b2db      	uxtb	r3, r3
 8000adc:	2204      	movs	r2, #4
 8000ade:	4619      	mov	r1, r3
 8000ae0:	6878      	ldr	r0, [r7, #4]
 8000ae2:	f000 f839 	bl	8000b58 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 8000ae6:	e005      	b.n	8000af4 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 8000ae8:	78fb      	ldrb	r3, [r7, #3]
 8000aea:	2208      	movs	r2, #8
 8000aec:	4619      	mov	r1, r3
 8000aee:	6878      	ldr	r0, [r7, #4]
 8000af0:	f000 f832 	bl	8000b58 <lcd_write>
}
 8000af4:	bf00      	nop
 8000af6:	3708      	adds	r7, #8
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}

08000afc <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
 8000b04:	460b      	mov	r3, r1
 8000b06:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	6898      	ldr	r0, [r3, #8]
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	899b      	ldrh	r3, [r3, #12]
 8000b10:	2201      	movs	r2, #1
 8000b12:	4619      	mov	r1, r3
 8000b14:	f001 fcca 	bl	80024ac <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	7d9b      	ldrb	r3, [r3, #22]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d111      	bne.n	8000b44 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8000b20:	78fb      	ldrb	r3, [r7, #3]
 8000b22:	091b      	lsrs	r3, r3, #4
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	2204      	movs	r2, #4
 8000b28:	4619      	mov	r1, r3
 8000b2a:	6878      	ldr	r0, [r7, #4]
 8000b2c:	f000 f814 	bl	8000b58 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 8000b30:	78fb      	ldrb	r3, [r7, #3]
 8000b32:	f003 030f 	and.w	r3, r3, #15
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	2204      	movs	r2, #4
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	6878      	ldr	r0, [r7, #4]
 8000b3e:	f000 f80b 	bl	8000b58 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 8000b42:	e005      	b.n	8000b50 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8000b44:	78fb      	ldrb	r3, [r7, #3]
 8000b46:	2208      	movs	r2, #8
 8000b48:	4619      	mov	r1, r3
 8000b4a:	6878      	ldr	r0, [r7, #4]
 8000b4c:	f000 f804 	bl	8000b58 <lcd_write>
}
 8000b50:	bf00      	nop
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	460b      	mov	r3, r1
 8000b62:	70fb      	strb	r3, [r7, #3]
 8000b64:	4613      	mov	r3, r2
 8000b66:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8000b68:	2300      	movs	r3, #0
 8000b6a:	73fb      	strb	r3, [r7, #15]
 8000b6c:	e019      	b.n	8000ba2 <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	7bfb      	ldrb	r3, [r7, #15]
 8000b74:	009b      	lsls	r3, r3, #2
 8000b76:	4413      	add	r3, r2
 8000b78:	6818      	ldr	r0, [r3, #0]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	685a      	ldr	r2, [r3, #4]
 8000b7e:	7bfb      	ldrb	r3, [r7, #15]
 8000b80:	005b      	lsls	r3, r3, #1
 8000b82:	4413      	add	r3, r2
 8000b84:	8819      	ldrh	r1, [r3, #0]
 8000b86:	78fa      	ldrb	r2, [r7, #3]
 8000b88:	7bfb      	ldrb	r3, [r7, #15]
 8000b8a:	fa42 f303 	asr.w	r3, r2, r3
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	f003 0301 	and.w	r3, r3, #1
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	461a      	mov	r2, r3
 8000b98:	f001 fc88 	bl	80024ac <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8000b9c:	7bfb      	ldrb	r3, [r7, #15]
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	73fb      	strb	r3, [r7, #15]
 8000ba2:	7bfa      	ldrb	r2, [r7, #15]
 8000ba4:	78bb      	ldrb	r3, [r7, #2]
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	d3e1      	bcc.n	8000b6e <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6918      	ldr	r0, [r3, #16]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	8a9b      	ldrh	r3, [r3, #20]
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	f001 fc79 	bl	80024ac <HAL_GPIO_WritePin>
	DELAY(1);
 8000bba:	2001      	movs	r0, #1
 8000bbc:	f000 fd9a 	bl	80016f4 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	6918      	ldr	r0, [r3, #16]
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	8a9b      	ldrh	r3, [r3, #20]
 8000bc8:	2200      	movs	r2, #0
 8000bca:	4619      	mov	r1, r3
 8000bcc:	f001 fc6e 	bl	80024ac <HAL_GPIO_WritePin>
 8000bd0:	bf00      	nop
 8000bd2:	3710      	adds	r7, #16
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bd8:	b5b0      	push	{r4, r5, r7, lr}
 8000bda:	b08a      	sub	sp, #40	; 0x28
 8000bdc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bde:	f000 fd2c 	bl	800163a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000be2:	f000 f84d 	bl	8000c80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000be6:	f7ff fd79 	bl	80006dc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000bea:	f000 fbff 	bl	80013ec <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000bee:	f000 fc71 	bl	80014d4 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM4_Init();
 8000bf2:	f000 fa7d 	bl	80010f0 <MX_TIM4_Init>
  MX_TIM3_Init();
 8000bf6:	f000 fa25 	bl	8001044 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000bfa:	f000 f977 	bl	8000eec <MX_TIM1_Init>
  MX_ADC1_Init();
 8000bfe:	f7ff fcdb 	bl	80005b8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000c02:	2100      	movs	r1, #0
 8000c04:	4815      	ldr	r0, [pc, #84]	; (8000c5c <main+0x84>)
 8000c06:	f002 ff8b 	bl	8003b20 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim4);
 8000c0a:	4815      	ldr	r0, [pc, #84]	; (8000c60 <main+0x88>)
 8000c0c:	f002 feae 	bl	800396c <HAL_TIM_Base_Start_IT>

  lcd = Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);
 8000c10:	4c14      	ldr	r4, [pc, #80]	; (8000c64 <main+0x8c>)
 8000c12:	4638      	mov	r0, r7
 8000c14:	2300      	movs	r3, #0
 8000c16:	9303      	str	r3, [sp, #12]
 8000c18:	2380      	movs	r3, #128	; 0x80
 8000c1a:	9302      	str	r3, [sp, #8]
 8000c1c:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <main+0x90>)
 8000c1e:	9301      	str	r3, [sp, #4]
 8000c20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c24:	9300      	str	r3, [sp, #0]
 8000c26:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <main+0x94>)
 8000c28:	4a11      	ldr	r2, [pc, #68]	; (8000c70 <main+0x98>)
 8000c2a:	4912      	ldr	r1, [pc, #72]	; (8000c74 <main+0x9c>)
 8000c2c:	f7ff fe92 	bl	8000954 <Lcd_create>
 8000c30:	4625      	mov	r5, r4
 8000c32:	463c      	mov	r4, r7
 8000c34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c38:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000c3c:	e885 0003 	stmia.w	r5, {r0, r1}

  Lcd_string(&lcd, "4ilo - 4bit");
 8000c40:	490d      	ldr	r1, [pc, #52]	; (8000c78 <main+0xa0>)
 8000c42:	4808      	ldr	r0, [pc, #32]	; (8000c64 <main+0x8c>)
 8000c44:	f7ff fef2 	bl	8000a2c <Lcd_string>

  Lcd_cursor(&lcd, 1,6);
 8000c48:	2206      	movs	r2, #6
 8000c4a:	2101      	movs	r1, #1
 8000c4c:	4805      	ldr	r0, [pc, #20]	; (8000c64 <main+0x8c>)
 8000c4e:	f7ff ff0d 	bl	8000a6c <Lcd_cursor>
  Lcd_int(&lcd, -500);
 8000c52:	490a      	ldr	r1, [pc, #40]	; (8000c7c <main+0xa4>)
 8000c54:	4803      	ldr	r0, [pc, #12]	; (8000c64 <main+0x8c>)
 8000c56:	f7ff fed1 	bl	80009fc <Lcd_int>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c5a:	e7fe      	b.n	8000c5a <main+0x82>
 8000c5c:	20000218 	.word	0x20000218
 8000c60:	20000180 	.word	0x20000180
 8000c64:	20000104 	.word	0x20000104
 8000c68:	40020c00 	.word	0x40020c00
 8000c6c:	40021400 	.word	0x40021400
 8000c70:	20000010 	.word	0x20000010
 8000c74:	20000000 	.word	0x20000000
 8000c78:	080065c8 	.word	0x080065c8
 8000c7c:	fffffe0c 	.word	0xfffffe0c

08000c80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b0b4      	sub	sp, #208	; 0xd0
 8000c84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c86:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000c8a:	2230      	movs	r2, #48	; 0x30
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f005 f856 	bl	8005d40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c94:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ca4:	f107 0308 	add.w	r3, r7, #8
 8000ca8:	2284      	movs	r2, #132	; 0x84
 8000caa:	2100      	movs	r1, #0
 8000cac:	4618      	mov	r0, r3
 8000cae:	f005 f847 	bl	8005d40 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000cb2:	f001 fd5d 	bl	8002770 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb6:	4b37      	ldr	r3, [pc, #220]	; (8000d94 <SystemClock_Config+0x114>)
 8000cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cba:	4a36      	ldr	r2, [pc, #216]	; (8000d94 <SystemClock_Config+0x114>)
 8000cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc2:	4b34      	ldr	r3, [pc, #208]	; (8000d94 <SystemClock_Config+0x114>)
 8000cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cca:	607b      	str	r3, [r7, #4]
 8000ccc:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000cce:	4b32      	ldr	r3, [pc, #200]	; (8000d98 <SystemClock_Config+0x118>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000cd6:	4a30      	ldr	r2, [pc, #192]	; (8000d98 <SystemClock_Config+0x118>)
 8000cd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cdc:	6013      	str	r3, [r2, #0]
 8000cde:	4b2e      	ldr	r3, [pc, #184]	; (8000d98 <SystemClock_Config+0x118>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ce6:	603b      	str	r3, [r7, #0]
 8000ce8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cea:	2301      	movs	r3, #1
 8000cec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000cf0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000cf4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cfe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d02:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d06:	2304      	movs	r3, #4
 8000d08:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000d0c:	2348      	movs	r3, #72	; 0x48
 8000d0e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d12:	2302      	movs	r3, #2
 8000d14:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000d18:	2303      	movs	r3, #3
 8000d1a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d1e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000d22:	4618      	mov	r0, r3
 8000d24:	f001 fd34 	bl	8002790 <HAL_RCC_OscConfig>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000d2e:	f000 f837 	bl	8000da0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d32:	230f      	movs	r3, #15
 8000d34:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d52:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000d56:	2102      	movs	r1, #2
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f001 ffbd 	bl	8002cd8 <HAL_RCC_ClockConfig>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000d64:	f000 f81c 	bl	8000da0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8000d68:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <SystemClock_Config+0x11c>)
 8000d6a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d76:	f107 0308 	add.w	r3, r7, #8
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f002 f9ae 	bl	80030dc <HAL_RCCEx_PeriphCLKConfig>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <SystemClock_Config+0x10a>
  {
    Error_Handler();
 8000d86:	f000 f80b 	bl	8000da0 <Error_Handler>
  }
}
 8000d8a:	bf00      	nop
 8000d8c:	37d0      	adds	r7, #208	; 0xd0
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40023800 	.word	0x40023800
 8000d98:	40007000 	.word	0x40007000
 8000d9c:	00200100 	.word	0x00200100

08000da0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000da4:	b672      	cpsid	i
}
 8000da6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000da8:	e7fe      	b.n	8000da8 <Error_Handler+0x8>
	...

08000dac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000db2:	4b0f      	ldr	r3, [pc, #60]	; (8000df0 <HAL_MspInit+0x44>)
 8000db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db6:	4a0e      	ldr	r2, [pc, #56]	; (8000df0 <HAL_MspInit+0x44>)
 8000db8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dbe:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <HAL_MspInit+0x44>)
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc6:	607b      	str	r3, [r7, #4]
 8000dc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dca:	4b09      	ldr	r3, [pc, #36]	; (8000df0 <HAL_MspInit+0x44>)
 8000dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dce:	4a08      	ldr	r2, [pc, #32]	; (8000df0 <HAL_MspInit+0x44>)
 8000dd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dd4:	6453      	str	r3, [r2, #68]	; 0x44
 8000dd6:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <HAL_MspInit+0x44>)
 8000dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dde:	603b      	str	r3, [r7, #0]
 8000de0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000de2:	bf00      	nop
 8000de4:	370c      	adds	r7, #12
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	40023800 	.word	0x40023800

08000df4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000df8:	e7fe      	b.n	8000df8 <NMI_Handler+0x4>

08000dfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dfe:	e7fe      	b.n	8000dfe <HardFault_Handler+0x4>

08000e00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e04:	e7fe      	b.n	8000e04 <MemManage_Handler+0x4>

08000e06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e06:	b480      	push	{r7}
 8000e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e0a:	e7fe      	b.n	8000e0a <BusFault_Handler+0x4>

08000e0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e10:	e7fe      	b.n	8000e10 <UsageFault_Handler+0x4>

08000e12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e12:	b480      	push	{r7}
 8000e14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e24:	bf00      	nop
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr

08000e2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e40:	f000 fc38 	bl	80016b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e44:	bf00      	nop
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000e4c:	4802      	ldr	r0, [pc, #8]	; (8000e58 <TIM4_IRQHandler+0x10>)
 8000e4e:	f003 f807 	bl	8003e60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	20000180 	.word	0x20000180

08000e5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e64:	4a14      	ldr	r2, [pc, #80]	; (8000eb8 <_sbrk+0x5c>)
 8000e66:	4b15      	ldr	r3, [pc, #84]	; (8000ebc <_sbrk+0x60>)
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e70:	4b13      	ldr	r3, [pc, #76]	; (8000ec0 <_sbrk+0x64>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d102      	bne.n	8000e7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e78:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <_sbrk+0x64>)
 8000e7a:	4a12      	ldr	r2, [pc, #72]	; (8000ec4 <_sbrk+0x68>)
 8000e7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e7e:	4b10      	ldr	r3, [pc, #64]	; (8000ec0 <_sbrk+0x64>)
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4413      	add	r3, r2
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d207      	bcs.n	8000e9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e8c:	f004 ff2e 	bl	8005cec <__errno>
 8000e90:	4603      	mov	r3, r0
 8000e92:	220c      	movs	r2, #12
 8000e94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e96:	f04f 33ff 	mov.w	r3, #4294967295
 8000e9a:	e009      	b.n	8000eb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e9c:	4b08      	ldr	r3, [pc, #32]	; (8000ec0 <_sbrk+0x64>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ea2:	4b07      	ldr	r3, [pc, #28]	; (8000ec0 <_sbrk+0x64>)
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	4a05      	ldr	r2, [pc, #20]	; (8000ec0 <_sbrk+0x64>)
 8000eac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eae:	68fb      	ldr	r3, [r7, #12]
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3718      	adds	r7, #24
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20050000 	.word	0x20050000
 8000ebc:	00000400 	.word	0x00000400
 8000ec0:	200000a8 	.word	0x200000a8
 8000ec4:	20000700 	.word	0x20000700

08000ec8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ecc:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <SystemInit+0x20>)
 8000ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ed2:	4a05      	ldr	r2, [pc, #20]	; (8000ee8 <SystemInit+0x20>)
 8000ed4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ed8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	e000ed00 	.word	0xe000ed00

08000eec <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b09a      	sub	sp, #104	; 0x68
 8000ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ef2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	605a      	str	r2, [r3, #4]
 8000efc:	609a      	str	r2, [r3, #8]
 8000efe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f00:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f0c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]
 8000f1a:	611a      	str	r2, [r3, #16]
 8000f1c:	615a      	str	r2, [r3, #20]
 8000f1e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f20:	1d3b      	adds	r3, r7, #4
 8000f22:	222c      	movs	r2, #44	; 0x2c
 8000f24:	2100      	movs	r1, #0
 8000f26:	4618      	mov	r0, r3
 8000f28:	f004 ff0a 	bl	8005d40 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f2c:	4b43      	ldr	r3, [pc, #268]	; (800103c <MX_TIM1_Init+0x150>)
 8000f2e:	4a44      	ldr	r2, [pc, #272]	; (8001040 <MX_TIM1_Init+0x154>)
 8000f30:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8000f32:	4b42      	ldr	r3, [pc, #264]	; (800103c <MX_TIM1_Init+0x150>)
 8000f34:	2247      	movs	r2, #71	; 0x47
 8000f36:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f38:	4b40      	ldr	r3, [pc, #256]	; (800103c <MX_TIM1_Init+0x150>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000f3e:	4b3f      	ldr	r3, [pc, #252]	; (800103c <MX_TIM1_Init+0x150>)
 8000f40:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f44:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f46:	4b3d      	ldr	r3, [pc, #244]	; (800103c <MX_TIM1_Init+0x150>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f4c:	4b3b      	ldr	r3, [pc, #236]	; (800103c <MX_TIM1_Init+0x150>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f52:	4b3a      	ldr	r3, [pc, #232]	; (800103c <MX_TIM1_Init+0x150>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f58:	4838      	ldr	r0, [pc, #224]	; (800103c <MX_TIM1_Init+0x150>)
 8000f5a:	f002 fcaf 	bl	80038bc <HAL_TIM_Base_Init>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000f64:	f7ff ff1c 	bl	8000da0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f6c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f6e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000f72:	4619      	mov	r1, r3
 8000f74:	4831      	ldr	r0, [pc, #196]	; (800103c <MX_TIM1_Init+0x150>)
 8000f76:	f003 f9a7 	bl	80042c8 <HAL_TIM_ConfigClockSource>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000f80:	f7ff ff0e 	bl	8000da0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f84:	482d      	ldr	r0, [pc, #180]	; (800103c <MX_TIM1_Init+0x150>)
 8000f86:	f002 fd69 	bl	8003a5c <HAL_TIM_PWM_Init>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000f90:	f7ff ff06 	bl	8000da0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f94:	2300      	movs	r3, #0
 8000f96:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fa0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4825      	ldr	r0, [pc, #148]	; (800103c <MX_TIM1_Init+0x150>)
 8000fa8:	f003 fe3e 	bl	8004c28 <HAL_TIMEx_MasterConfigSynchronization>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000fb2:	f7ff fef5 	bl	8000da0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fb6:	2360      	movs	r3, #96	; 0x60
 8000fb8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fd2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4818      	ldr	r0, [pc, #96]	; (800103c <MX_TIM1_Init+0x150>)
 8000fdc:	f003 f860 	bl	80040a0 <HAL_TIM_PWM_ConfigChannel>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000fe6:	f7ff fedb 	bl	8000da0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000fea:	2300      	movs	r3, #0
 8000fec:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ffe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001002:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001004:	2300      	movs	r3, #0
 8001006:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001008:	2300      	movs	r3, #0
 800100a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800100c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001010:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001012:	2300      	movs	r3, #0
 8001014:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001016:	2300      	movs	r3, #0
 8001018:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800101a:	1d3b      	adds	r3, r7, #4
 800101c:	4619      	mov	r1, r3
 800101e:	4807      	ldr	r0, [pc, #28]	; (800103c <MX_TIM1_Init+0x150>)
 8001020:	f003 fe90 	bl	8004d44 <HAL_TIMEx_ConfigBreakDeadTime>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800102a:	f7ff feb9 	bl	8000da0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800102e:	4803      	ldr	r0, [pc, #12]	; (800103c <MX_TIM1_Init+0x150>)
 8001030:	f000 f94a 	bl	80012c8 <HAL_TIM_MspPostInit>

}
 8001034:	bf00      	nop
 8001036:	3768      	adds	r7, #104	; 0x68
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20000218 	.word	0x20000218
 8001040:	40010000 	.word	0x40010000

08001044 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08c      	sub	sp, #48	; 0x30
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800104a:	f107 030c 	add.w	r3, r7, #12
 800104e:	2224      	movs	r2, #36	; 0x24
 8001050:	2100      	movs	r1, #0
 8001052:	4618      	mov	r0, r3
 8001054:	f004 fe74 	bl	8005d40 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001058:	463b      	mov	r3, r7
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	605a      	str	r2, [r3, #4]
 8001060:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001062:	4b21      	ldr	r3, [pc, #132]	; (80010e8 <MX_TIM3_Init+0xa4>)
 8001064:	4a21      	ldr	r2, [pc, #132]	; (80010ec <MX_TIM3_Init+0xa8>)
 8001066:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001068:	4b1f      	ldr	r3, [pc, #124]	; (80010e8 <MX_TIM3_Init+0xa4>)
 800106a:	2200      	movs	r2, #0
 800106c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800106e:	4b1e      	ldr	r3, [pc, #120]	; (80010e8 <MX_TIM3_Init+0xa4>)
 8001070:	2200      	movs	r2, #0
 8001072:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001074:	4b1c      	ldr	r3, [pc, #112]	; (80010e8 <MX_TIM3_Init+0xa4>)
 8001076:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800107a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800107c:	4b1a      	ldr	r3, [pc, #104]	; (80010e8 <MX_TIM3_Init+0xa4>)
 800107e:	2200      	movs	r2, #0
 8001080:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001082:	4b19      	ldr	r3, [pc, #100]	; (80010e8 <MX_TIM3_Init+0xa4>)
 8001084:	2280      	movs	r2, #128	; 0x80
 8001086:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001088:	2301      	movs	r3, #1
 800108a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800108c:	2300      	movs	r3, #0
 800108e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001090:	2301      	movs	r3, #1
 8001092:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001094:	2300      	movs	r3, #0
 8001096:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001098:	230a      	movs	r3, #10
 800109a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800109c:	2300      	movs	r3, #0
 800109e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80010a0:	2301      	movs	r3, #1
 80010a2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80010a4:	2300      	movs	r3, #0
 80010a6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80010ac:	f107 030c 	add.w	r3, r7, #12
 80010b0:	4619      	mov	r1, r3
 80010b2:	480d      	ldr	r0, [pc, #52]	; (80010e8 <MX_TIM3_Init+0xa4>)
 80010b4:	f002 fe2e 	bl	8003d14 <HAL_TIM_Encoder_Init>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80010be:	f7ff fe6f 	bl	8000da0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010c2:	2300      	movs	r3, #0
 80010c4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010c6:	2300      	movs	r3, #0
 80010c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010ca:	463b      	mov	r3, r7
 80010cc:	4619      	mov	r1, r3
 80010ce:	4806      	ldr	r0, [pc, #24]	; (80010e8 <MX_TIM3_Init+0xa4>)
 80010d0:	f003 fdaa 	bl	8004c28 <HAL_TIMEx_MasterConfigSynchronization>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80010da:	f7ff fe61 	bl	8000da0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80010de:	bf00      	nop
 80010e0:	3730      	adds	r7, #48	; 0x30
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	200001cc 	.word	0x200001cc
 80010ec:	40000400 	.word	0x40000400

080010f0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b088      	sub	sp, #32
 80010f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010f6:	f107 0310 	add.w	r3, r7, #16
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	605a      	str	r2, [r3, #4]
 8001100:	609a      	str	r2, [r3, #8]
 8001102:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001104:	1d3b      	adds	r3, r7, #4
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	605a      	str	r2, [r3, #4]
 800110c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800110e:	4b1e      	ldr	r3, [pc, #120]	; (8001188 <MX_TIM4_Init+0x98>)
 8001110:	4a1e      	ldr	r2, [pc, #120]	; (800118c <MX_TIM4_Init+0x9c>)
 8001112:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7199;
 8001114:	4b1c      	ldr	r3, [pc, #112]	; (8001188 <MX_TIM4_Init+0x98>)
 8001116:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800111a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800111c:	4b1a      	ldr	r3, [pc, #104]	; (8001188 <MX_TIM4_Init+0x98>)
 800111e:	2200      	movs	r2, #0
 8001120:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8001122:	4b19      	ldr	r3, [pc, #100]	; (8001188 <MX_TIM4_Init+0x98>)
 8001124:	f242 720f 	movw	r2, #9999	; 0x270f
 8001128:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800112a:	4b17      	ldr	r3, [pc, #92]	; (8001188 <MX_TIM4_Init+0x98>)
 800112c:	2200      	movs	r2, #0
 800112e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001130:	4b15      	ldr	r3, [pc, #84]	; (8001188 <MX_TIM4_Init+0x98>)
 8001132:	2200      	movs	r2, #0
 8001134:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001136:	4814      	ldr	r0, [pc, #80]	; (8001188 <MX_TIM4_Init+0x98>)
 8001138:	f002 fbc0 	bl	80038bc <HAL_TIM_Base_Init>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8001142:	f7ff fe2d 	bl	8000da0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001146:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800114a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800114c:	f107 0310 	add.w	r3, r7, #16
 8001150:	4619      	mov	r1, r3
 8001152:	480d      	ldr	r0, [pc, #52]	; (8001188 <MX_TIM4_Init+0x98>)
 8001154:	f003 f8b8 	bl	80042c8 <HAL_TIM_ConfigClockSource>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 800115e:	f7ff fe1f 	bl	8000da0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001162:	2300      	movs	r3, #0
 8001164:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001166:	2300      	movs	r3, #0
 8001168:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800116a:	1d3b      	adds	r3, r7, #4
 800116c:	4619      	mov	r1, r3
 800116e:	4806      	ldr	r0, [pc, #24]	; (8001188 <MX_TIM4_Init+0x98>)
 8001170:	f003 fd5a 	bl	8004c28 <HAL_TIMEx_MasterConfigSynchronization>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 800117a:	f7ff fe11 	bl	8000da0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800117e:	bf00      	nop
 8001180:	3720      	adds	r7, #32
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	20000180 	.word	0x20000180
 800118c:	40000800 	.word	0x40000800

08001190 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a16      	ldr	r2, [pc, #88]	; (80011f8 <HAL_TIM_Base_MspInit+0x68>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d10c      	bne.n	80011bc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011a2:	4b16      	ldr	r3, [pc, #88]	; (80011fc <HAL_TIM_Base_MspInit+0x6c>)
 80011a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a6:	4a15      	ldr	r2, [pc, #84]	; (80011fc <HAL_TIM_Base_MspInit+0x6c>)
 80011a8:	f043 0301 	orr.w	r3, r3, #1
 80011ac:	6453      	str	r3, [r2, #68]	; 0x44
 80011ae:	4b13      	ldr	r3, [pc, #76]	; (80011fc <HAL_TIM_Base_MspInit+0x6c>)
 80011b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b2:	f003 0301 	and.w	r3, r3, #1
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80011ba:	e018      	b.n	80011ee <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM4)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a0f      	ldr	r2, [pc, #60]	; (8001200 <HAL_TIM_Base_MspInit+0x70>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d113      	bne.n	80011ee <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80011c6:	4b0d      	ldr	r3, [pc, #52]	; (80011fc <HAL_TIM_Base_MspInit+0x6c>)
 80011c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ca:	4a0c      	ldr	r2, [pc, #48]	; (80011fc <HAL_TIM_Base_MspInit+0x6c>)
 80011cc:	f043 0304 	orr.w	r3, r3, #4
 80011d0:	6413      	str	r3, [r2, #64]	; 0x40
 80011d2:	4b0a      	ldr	r3, [pc, #40]	; (80011fc <HAL_TIM_Base_MspInit+0x6c>)
 80011d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d6:	f003 0304 	and.w	r3, r3, #4
 80011da:	60bb      	str	r3, [r7, #8]
 80011dc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 3, 0);
 80011de:	2200      	movs	r2, #0
 80011e0:	2103      	movs	r1, #3
 80011e2:	201e      	movs	r0, #30
 80011e4:	f000 ff7f 	bl	80020e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80011e8:	201e      	movs	r0, #30
 80011ea:	f000 ff98 	bl	800211e <HAL_NVIC_EnableIRQ>
}
 80011ee:	bf00      	nop
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40010000 	.word	0x40010000
 80011fc:	40023800 	.word	0x40023800
 8001200:	40000800 	.word	0x40000800

08001204 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b08a      	sub	sp, #40	; 0x28
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120c:	f107 0314 	add.w	r3, r7, #20
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
 800121a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a25      	ldr	r2, [pc, #148]	; (80012b8 <HAL_TIM_Encoder_MspInit+0xb4>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d143      	bne.n	80012ae <HAL_TIM_Encoder_MspInit+0xaa>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001226:	4b25      	ldr	r3, [pc, #148]	; (80012bc <HAL_TIM_Encoder_MspInit+0xb8>)
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	4a24      	ldr	r2, [pc, #144]	; (80012bc <HAL_TIM_Encoder_MspInit+0xb8>)
 800122c:	f043 0302 	orr.w	r3, r3, #2
 8001230:	6413      	str	r3, [r2, #64]	; 0x40
 8001232:	4b22      	ldr	r3, [pc, #136]	; (80012bc <HAL_TIM_Encoder_MspInit+0xb8>)
 8001234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001236:	f003 0302 	and.w	r3, r3, #2
 800123a:	613b      	str	r3, [r7, #16]
 800123c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800123e:	4b1f      	ldr	r3, [pc, #124]	; (80012bc <HAL_TIM_Encoder_MspInit+0xb8>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	4a1e      	ldr	r2, [pc, #120]	; (80012bc <HAL_TIM_Encoder_MspInit+0xb8>)
 8001244:	f043 0301 	orr.w	r3, r3, #1
 8001248:	6313      	str	r3, [r2, #48]	; 0x30
 800124a:	4b1c      	ldr	r3, [pc, #112]	; (80012bc <HAL_TIM_Encoder_MspInit+0xb8>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001256:	4b19      	ldr	r3, [pc, #100]	; (80012bc <HAL_TIM_Encoder_MspInit+0xb8>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	4a18      	ldr	r2, [pc, #96]	; (80012bc <HAL_TIM_Encoder_MspInit+0xb8>)
 800125c:	f043 0304 	orr.w	r3, r3, #4
 8001260:	6313      	str	r3, [r2, #48]	; 0x30
 8001262:	4b16      	ldr	r3, [pc, #88]	; (80012bc <HAL_TIM_Encoder_MspInit+0xb8>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	f003 0304 	and.w	r3, r3, #4
 800126a:	60bb      	str	r3, [r7, #8]
 800126c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800126e:	2340      	movs	r3, #64	; 0x40
 8001270:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001272:	2302      	movs	r3, #2
 8001274:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	2300      	movs	r3, #0
 8001278:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127a:	2300      	movs	r3, #0
 800127c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800127e:	2302      	movs	r3, #2
 8001280:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001282:	f107 0314 	add.w	r3, r7, #20
 8001286:	4619      	mov	r1, r3
 8001288:	480d      	ldr	r0, [pc, #52]	; (80012c0 <HAL_TIM_Encoder_MspInit+0xbc>)
 800128a:	f000 ff63 	bl	8002154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800128e:	2380      	movs	r3, #128	; 0x80
 8001290:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001292:	2302      	movs	r3, #2
 8001294:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129a:	2300      	movs	r3, #0
 800129c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800129e:	2302      	movs	r3, #2
 80012a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012a2:	f107 0314 	add.w	r3, r7, #20
 80012a6:	4619      	mov	r1, r3
 80012a8:	4806      	ldr	r0, [pc, #24]	; (80012c4 <HAL_TIM_Encoder_MspInit+0xc0>)
 80012aa:	f000 ff53 	bl	8002154 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80012ae:	bf00      	nop
 80012b0:	3728      	adds	r7, #40	; 0x28
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40000400 	.word	0x40000400
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40020000 	.word	0x40020000
 80012c4:	40020800 	.word	0x40020800

080012c8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b088      	sub	sp, #32
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d0:	f107 030c 	add.w	r3, r7, #12
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	60da      	str	r2, [r3, #12]
 80012de:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a11      	ldr	r2, [pc, #68]	; (800132c <HAL_TIM_MspPostInit+0x64>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d11c      	bne.n	8001324 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80012ea:	4b11      	ldr	r3, [pc, #68]	; (8001330 <HAL_TIM_MspPostInit+0x68>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	4a10      	ldr	r2, [pc, #64]	; (8001330 <HAL_TIM_MspPostInit+0x68>)
 80012f0:	f043 0310 	orr.w	r3, r3, #16
 80012f4:	6313      	str	r3, [r2, #48]	; 0x30
 80012f6:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <HAL_TIM_MspPostInit+0x68>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	f003 0310 	and.w	r3, r3, #16
 80012fe:	60bb      	str	r3, [r7, #8]
 8001300:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001302:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001306:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001308:	2302      	movs	r3, #2
 800130a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001310:	2300      	movs	r3, #0
 8001312:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001314:	2301      	movs	r3, #1
 8001316:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001318:	f107 030c 	add.w	r3, r7, #12
 800131c:	4619      	mov	r1, r3
 800131e:	4805      	ldr	r0, [pc, #20]	; (8001334 <HAL_TIM_MspPostInit+0x6c>)
 8001320:	f000 ff18 	bl	8002154 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001324:	bf00      	nop
 8001326:	3720      	adds	r7, #32
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40010000 	.word	0x40010000
 8001330:	40023800 	.word	0x40023800
 8001334:	40021000 	.word	0x40021000

08001338 <SetPwmValue>:
  /* USER CODE END TIM3_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void SetPwmValue(uint32_t value){
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, value);
 8001340:	4b04      	ldr	r3, [pc, #16]	; (8001354 <SetPwmValue+0x1c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001348:	bf00      	nop
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	20000218 	.word	0x20000218

08001358 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM4) {
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a0f      	ldr	r2, [pc, #60]	; (80013a4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d117      	bne.n	800139a <HAL_TIM_PeriodElapsedCallback+0x42>
		HAL_ADC_Start(&hadc1);
 800136a:	480f      	ldr	r0, [pc, #60]	; (80013a8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800136c:	f000 fa2a 	bl	80017c4 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001370:	f04f 31ff 	mov.w	r1, #4294967295
 8001374:	480c      	ldr	r0, [pc, #48]	; (80013a8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001376:	f000 faf3 	bl	8001960 <HAL_ADC_PollForConversion>
		ADC_Value = HAL_ADC_GetValue(&hadc1);
 800137a:	480b      	ldr	r0, [pc, #44]	; (80013a8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800137c:	f000 fb7b 	bl	8001a76 <HAL_ADC_GetValue>
 8001380:	4603      	mov	r3, r0
 8001382:	4a0a      	ldr	r2, [pc, #40]	; (80013ac <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001384:	6013      	str	r3, [r2, #0]
		HAL_Delay(100);
 8001386:	2064      	movs	r0, #100	; 0x64
 8001388:	f000 f9b4 	bl	80016f4 <HAL_Delay>
		GetEncoderValue();
 800138c:	f000 f812 	bl	80013b4 <GetEncoderValue>
		SetPwmValue(pulseWidth);
 8001390:	4b07      	ldr	r3, [pc, #28]	; (80013b0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff ffcf 	bl	8001338 <SetPwmValue>
	}
}
 800139a:	bf00      	nop
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40000800 	.word	0x40000800
 80013a8:	200000bc 	.word	0x200000bc
 80013ac:	200000a4 	.word	0x200000a4
 80013b0:	200000ac 	.word	0x200000ac

080013b4 <GetEncoderValue>:

void GetEncoderValue(){
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
	encoderValue = __HAL_TIM_GET_COUNTER(&htim3);
 80013ba:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <GetEncoderValue+0x2c>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c0:	b29a      	uxth	r2, r3
 80013c2:	4b08      	ldr	r3, [pc, #32]	; (80013e4 <GetEncoderValue+0x30>)
 80013c4:	801a      	strh	r2, [r3, #0]

	// Calculate RPM
	uint32_t calculation = encoderValue;
 80013c6:	4b07      	ldr	r3, [pc, #28]	; (80013e4 <GetEncoderValue+0x30>)
 80013c8:	881b      	ldrh	r3, [r3, #0]
 80013ca:	607b      	str	r3, [r7, #4]
	pidController.measuredSpeed = calculation;
 80013cc:	4a06      	ldr	r2, [pc, #24]	; (80013e8 <GetEncoderValue+0x34>)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6293      	str	r3, [r2, #40]	; 0x28
	HAL_Delay(100);
 80013d2:	2064      	movs	r0, #100	; 0x64
 80013d4:	f000 f98e 	bl	80016f4 <HAL_Delay>
}
 80013d8:	bf00      	nop
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	200001cc 	.word	0x200001cc
 80013e4:	200000b0 	.word	0x200000b0
 80013e8:	20000120 	.word	0x20000120

080013ec <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80013f0:	4b14      	ldr	r3, [pc, #80]	; (8001444 <MX_USART3_UART_Init+0x58>)
 80013f2:	4a15      	ldr	r2, [pc, #84]	; (8001448 <MX_USART3_UART_Init+0x5c>)
 80013f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80013f6:	4b13      	ldr	r3, [pc, #76]	; (8001444 <MX_USART3_UART_Init+0x58>)
 80013f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80013fe:	4b11      	ldr	r3, [pc, #68]	; (8001444 <MX_USART3_UART_Init+0x58>)
 8001400:	2200      	movs	r2, #0
 8001402:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001404:	4b0f      	ldr	r3, [pc, #60]	; (8001444 <MX_USART3_UART_Init+0x58>)
 8001406:	2200      	movs	r2, #0
 8001408:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800140a:	4b0e      	ldr	r3, [pc, #56]	; (8001444 <MX_USART3_UART_Init+0x58>)
 800140c:	2200      	movs	r2, #0
 800140e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001410:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <MX_USART3_UART_Init+0x58>)
 8001412:	220c      	movs	r2, #12
 8001414:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001416:	4b0b      	ldr	r3, [pc, #44]	; (8001444 <MX_USART3_UART_Init+0x58>)
 8001418:	2200      	movs	r2, #0
 800141a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800141c:	4b09      	ldr	r3, [pc, #36]	; (8001444 <MX_USART3_UART_Init+0x58>)
 800141e:	2200      	movs	r2, #0
 8001420:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001422:	4b08      	ldr	r3, [pc, #32]	; (8001444 <MX_USART3_UART_Init+0x58>)
 8001424:	2200      	movs	r2, #0
 8001426:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001428:	4b06      	ldr	r3, [pc, #24]	; (8001444 <MX_USART3_UART_Init+0x58>)
 800142a:	2200      	movs	r2, #0
 800142c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800142e:	4805      	ldr	r0, [pc, #20]	; (8001444 <MX_USART3_UART_Init+0x58>)
 8001430:	f003 fd24 	bl	8004e7c <HAL_UART_Init>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800143a:	f7ff fcb1 	bl	8000da0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	20000264 	.word	0x20000264
 8001448:	40004800 	.word	0x40004800

0800144c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08a      	sub	sp, #40	; 0x28
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001454:	f107 0314 	add.w	r3, r7, #20
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a17      	ldr	r2, [pc, #92]	; (80014c8 <HAL_UART_MspInit+0x7c>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d128      	bne.n	80014c0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800146e:	4b17      	ldr	r3, [pc, #92]	; (80014cc <HAL_UART_MspInit+0x80>)
 8001470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001472:	4a16      	ldr	r2, [pc, #88]	; (80014cc <HAL_UART_MspInit+0x80>)
 8001474:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001478:	6413      	str	r3, [r2, #64]	; 0x40
 800147a:	4b14      	ldr	r3, [pc, #80]	; (80014cc <HAL_UART_MspInit+0x80>)
 800147c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001482:	613b      	str	r3, [r7, #16]
 8001484:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001486:	4b11      	ldr	r3, [pc, #68]	; (80014cc <HAL_UART_MspInit+0x80>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	4a10      	ldr	r2, [pc, #64]	; (80014cc <HAL_UART_MspInit+0x80>)
 800148c:	f043 0308 	orr.w	r3, r3, #8
 8001490:	6313      	str	r3, [r2, #48]	; 0x30
 8001492:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <HAL_UART_MspInit+0x80>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	f003 0308 	and.w	r3, r3, #8
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800149e:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a4:	2302      	movs	r3, #2
 80014a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ac:	2303      	movs	r3, #3
 80014ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014b0:	2307      	movs	r3, #7
 80014b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014b4:	f107 0314 	add.w	r3, r7, #20
 80014b8:	4619      	mov	r1, r3
 80014ba:	4805      	ldr	r0, [pc, #20]	; (80014d0 <HAL_UART_MspInit+0x84>)
 80014bc:	f000 fe4a 	bl	8002154 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80014c0:	bf00      	nop
 80014c2:	3728      	adds	r7, #40	; 0x28
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40004800 	.word	0x40004800
 80014cc:	40023800 	.word	0x40023800
 80014d0:	40020c00 	.word	0x40020c00

080014d4 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80014d8:	4b14      	ldr	r3, [pc, #80]	; (800152c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014da:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80014de:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80014e0:	4b12      	ldr	r3, [pc, #72]	; (800152c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014e2:	2206      	movs	r2, #6
 80014e4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80014e6:	4b11      	ldr	r3, [pc, #68]	; (800152c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014e8:	2202      	movs	r2, #2
 80014ea:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80014ec:	4b0f      	ldr	r3, [pc, #60]	; (800152c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80014f2:	4b0e      	ldr	r3, [pc, #56]	; (800152c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014f4:	2202      	movs	r2, #2
 80014f6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80014f8:	4b0c      	ldr	r3, [pc, #48]	; (800152c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014fa:	2201      	movs	r2, #1
 80014fc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80014fe:	4b0b      	ldr	r3, [pc, #44]	; (800152c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001500:	2200      	movs	r2, #0
 8001502:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001504:	4b09      	ldr	r3, [pc, #36]	; (800152c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001506:	2200      	movs	r2, #0
 8001508:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800150a:	4b08      	ldr	r3, [pc, #32]	; (800152c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800150c:	2201      	movs	r2, #1
 800150e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001510:	4b06      	ldr	r3, [pc, #24]	; (800152c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001512:	2200      	movs	r2, #0
 8001514:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001516:	4805      	ldr	r0, [pc, #20]	; (800152c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001518:	f000 ffe1 	bl	80024de <HAL_PCD_Init>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001522:	f7ff fc3d 	bl	8000da0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	200002e8 	.word	0x200002e8

08001530 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b08a      	sub	sp, #40	; 0x28
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001538:	f107 0314 	add.w	r3, r7, #20
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	60da      	str	r2, [r3, #12]
 8001546:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001550:	d141      	bne.n	80015d6 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001552:	4b23      	ldr	r3, [pc, #140]	; (80015e0 <HAL_PCD_MspInit+0xb0>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	4a22      	ldr	r2, [pc, #136]	; (80015e0 <HAL_PCD_MspInit+0xb0>)
 8001558:	f043 0301 	orr.w	r3, r3, #1
 800155c:	6313      	str	r3, [r2, #48]	; 0x30
 800155e:	4b20      	ldr	r3, [pc, #128]	; (80015e0 <HAL_PCD_MspInit+0xb0>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	613b      	str	r3, [r7, #16]
 8001568:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800156a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800156e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001570:	2302      	movs	r3, #2
 8001572:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001578:	2303      	movs	r3, #3
 800157a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800157c:	230a      	movs	r3, #10
 800157e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001580:	f107 0314 	add.w	r3, r7, #20
 8001584:	4619      	mov	r1, r3
 8001586:	4817      	ldr	r0, [pc, #92]	; (80015e4 <HAL_PCD_MspInit+0xb4>)
 8001588:	f000 fde4 	bl	8002154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800158c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001590:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001592:	2300      	movs	r3, #0
 8001594:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001596:	2300      	movs	r3, #0
 8001598:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800159a:	f107 0314 	add.w	r3, r7, #20
 800159e:	4619      	mov	r1, r3
 80015a0:	4810      	ldr	r0, [pc, #64]	; (80015e4 <HAL_PCD_MspInit+0xb4>)
 80015a2:	f000 fdd7 	bl	8002154 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80015a6:	4b0e      	ldr	r3, [pc, #56]	; (80015e0 <HAL_PCD_MspInit+0xb0>)
 80015a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015aa:	4a0d      	ldr	r2, [pc, #52]	; (80015e0 <HAL_PCD_MspInit+0xb0>)
 80015ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015b0:	6353      	str	r3, [r2, #52]	; 0x34
 80015b2:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <HAL_PCD_MspInit+0xb0>)
 80015b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <HAL_PCD_MspInit+0xb0>)
 80015c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c2:	4a07      	ldr	r2, [pc, #28]	; (80015e0 <HAL_PCD_MspInit+0xb0>)
 80015c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015c8:	6453      	str	r3, [r2, #68]	; 0x44
 80015ca:	4b05      	ldr	r3, [pc, #20]	; (80015e0 <HAL_PCD_MspInit+0xb0>)
 80015cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015d2:	60bb      	str	r3, [r7, #8]
 80015d4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80015d6:	bf00      	nop
 80015d8:	3728      	adds	r7, #40	; 0x28
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40023800 	.word	0x40023800
 80015e4:	40020000 	.word	0x40020000

080015e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80015e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001620 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015ec:	480d      	ldr	r0, [pc, #52]	; (8001624 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015ee:	490e      	ldr	r1, [pc, #56]	; (8001628 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015f0:	4a0e      	ldr	r2, [pc, #56]	; (800162c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015f4:	e002      	b.n	80015fc <LoopCopyDataInit>

080015f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015fa:	3304      	adds	r3, #4

080015fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001600:	d3f9      	bcc.n	80015f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001602:	4a0b      	ldr	r2, [pc, #44]	; (8001630 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001604:	4c0b      	ldr	r4, [pc, #44]	; (8001634 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001606:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001608:	e001      	b.n	800160e <LoopFillZerobss>

0800160a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800160a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800160c:	3204      	adds	r2, #4

0800160e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800160e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001610:	d3fb      	bcc.n	800160a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001612:	f7ff fc59 	bl	8000ec8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001616:	f004 fb6f 	bl	8005cf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800161a:	f7ff fadd 	bl	8000bd8 <main>
  bx  lr    
 800161e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001620:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001624:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001628:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 800162c:	08006634 	.word	0x08006634
  ldr r2, =_sbss
 8001630:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001634:	20000700 	.word	0x20000700

08001638 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001638:	e7fe      	b.n	8001638 <ADC_IRQHandler>

0800163a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800163e:	2003      	movs	r0, #3
 8001640:	f000 fd46 	bl	80020d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001644:	2000      	movs	r0, #0
 8001646:	f000 f805 	bl	8001654 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800164a:	f7ff fbaf 	bl	8000dac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800164e:	2300      	movs	r3, #0
}
 8001650:	4618      	mov	r0, r3
 8001652:	bd80      	pop	{r7, pc}

08001654 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800165c:	4b12      	ldr	r3, [pc, #72]	; (80016a8 <HAL_InitTick+0x54>)
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	4b12      	ldr	r3, [pc, #72]	; (80016ac <HAL_InitTick+0x58>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	4619      	mov	r1, r3
 8001666:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800166a:	fbb3 f3f1 	udiv	r3, r3, r1
 800166e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001672:	4618      	mov	r0, r3
 8001674:	f000 fd61 	bl	800213a <HAL_SYSTICK_Config>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e00e      	b.n	80016a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2b0f      	cmp	r3, #15
 8001686:	d80a      	bhi.n	800169e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001688:	2200      	movs	r2, #0
 800168a:	6879      	ldr	r1, [r7, #4]
 800168c:	f04f 30ff 	mov.w	r0, #4294967295
 8001690:	f000 fd29 	bl	80020e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001694:	4a06      	ldr	r2, [pc, #24]	; (80016b0 <HAL_InitTick+0x5c>)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800169a:	2300      	movs	r3, #0
 800169c:	e000      	b.n	80016a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	20000018 	.word	0x20000018
 80016ac:	20000020 	.word	0x20000020
 80016b0:	2000001c 	.word	0x2000001c

080016b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016b8:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <HAL_IncTick+0x20>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	461a      	mov	r2, r3
 80016be:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <HAL_IncTick+0x24>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4413      	add	r3, r2
 80016c4:	4a04      	ldr	r2, [pc, #16]	; (80016d8 <HAL_IncTick+0x24>)
 80016c6:	6013      	str	r3, [r2, #0]
}
 80016c8:	bf00      	nop
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	20000020 	.word	0x20000020
 80016d8:	200006ec 	.word	0x200006ec

080016dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  return uwTick;
 80016e0:	4b03      	ldr	r3, [pc, #12]	; (80016f0 <HAL_GetTick+0x14>)
 80016e2:	681b      	ldr	r3, [r3, #0]
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	200006ec 	.word	0x200006ec

080016f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016fc:	f7ff ffee 	bl	80016dc <HAL_GetTick>
 8001700:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800170c:	d005      	beq.n	800171a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800170e:	4b0a      	ldr	r3, [pc, #40]	; (8001738 <HAL_Delay+0x44>)
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	461a      	mov	r2, r3
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	4413      	add	r3, r2
 8001718:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800171a:	bf00      	nop
 800171c:	f7ff ffde 	bl	80016dc <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	68fa      	ldr	r2, [r7, #12]
 8001728:	429a      	cmp	r2, r3
 800172a:	d8f7      	bhi.n	800171c <HAL_Delay+0x28>
  {
  }
}
 800172c:	bf00      	nop
 800172e:	bf00      	nop
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20000020 	.word	0x20000020

0800173c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001744:	2300      	movs	r3, #0
 8001746:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d101      	bne.n	8001752 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e031      	b.n	80017b6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001756:	2b00      	cmp	r3, #0
 8001758:	d109      	bne.n	800176e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f7fe ff7e 	bl	800065c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2200      	movs	r2, #0
 8001764:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2200      	movs	r2, #0
 800176a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001772:	f003 0310 	and.w	r3, r3, #16
 8001776:	2b00      	cmp	r3, #0
 8001778:	d116      	bne.n	80017a8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800177e:	4b10      	ldr	r3, [pc, #64]	; (80017c0 <HAL_ADC_Init+0x84>)
 8001780:	4013      	ands	r3, r2
 8001782:	f043 0202 	orr.w	r2, r3, #2
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f000 fad6 	bl	8001d3c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2200      	movs	r2, #0
 8001794:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	f023 0303 	bic.w	r3, r3, #3
 800179e:	f043 0201 	orr.w	r2, r3, #1
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	641a      	str	r2, [r3, #64]	; 0x40
 80017a6:	e001      	b.n	80017ac <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2200      	movs	r2, #0
 80017b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80017b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	ffffeefd 	.word	0xffffeefd

080017c4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80017cc:	2300      	movs	r3, #0
 80017ce:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d101      	bne.n	80017de <HAL_ADC_Start+0x1a>
 80017da:	2302      	movs	r3, #2
 80017dc:	e0ad      	b.n	800193a <HAL_ADC_Start+0x176>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2201      	movs	r2, #1
 80017e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	f003 0301 	and.w	r3, r3, #1
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d018      	beq.n	8001826 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	689a      	ldr	r2, [r3, #8]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f042 0201 	orr.w	r2, r2, #1
 8001802:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001804:	4b50      	ldr	r3, [pc, #320]	; (8001948 <HAL_ADC_Start+0x184>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a50      	ldr	r2, [pc, #320]	; (800194c <HAL_ADC_Start+0x188>)
 800180a:	fba2 2303 	umull	r2, r3, r2, r3
 800180e:	0c9a      	lsrs	r2, r3, #18
 8001810:	4613      	mov	r3, r2
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	4413      	add	r3, r2
 8001816:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001818:	e002      	b.n	8001820 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	3b01      	subs	r3, #1
 800181e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d1f9      	bne.n	800181a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	f003 0301 	and.w	r3, r3, #1
 8001830:	2b01      	cmp	r3, #1
 8001832:	d175      	bne.n	8001920 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001838:	4b45      	ldr	r3, [pc, #276]	; (8001950 <HAL_ADC_Start+0x18c>)
 800183a:	4013      	ands	r3, r2
 800183c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800184e:	2b00      	cmp	r3, #0
 8001850:	d007      	beq.n	8001862 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001856:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800185a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001866:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800186a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800186e:	d106      	bne.n	800187e <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001874:	f023 0206 	bic.w	r2, r3, #6
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	645a      	str	r2, [r3, #68]	; 0x44
 800187c:	e002      	b.n	8001884 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2200      	movs	r2, #0
 8001882:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2200      	movs	r2, #0
 8001888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001894:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001896:	4b2f      	ldr	r3, [pc, #188]	; (8001954 <HAL_ADC_Start+0x190>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f003 031f 	and.w	r3, r3, #31
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d10f      	bne.n	80018c2 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d143      	bne.n	8001938 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	689a      	ldr	r2, [r3, #8]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80018be:	609a      	str	r2, [r3, #8]
 80018c0:	e03a      	b.n	8001938 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a24      	ldr	r2, [pc, #144]	; (8001958 <HAL_ADC_Start+0x194>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d10e      	bne.n	80018ea <HAL_ADC_Start+0x126>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d107      	bne.n	80018ea <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	689a      	ldr	r2, [r3, #8]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80018e8:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80018ea:	4b1a      	ldr	r3, [pc, #104]	; (8001954 <HAL_ADC_Start+0x190>)
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f003 0310 	and.w	r3, r3, #16
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d120      	bne.n	8001938 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a18      	ldr	r2, [pc, #96]	; (800195c <HAL_ADC_Start+0x198>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d11b      	bne.n	8001938 <HAL_ADC_Start+0x174>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d114      	bne.n	8001938 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	689a      	ldr	r2, [r3, #8]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800191c:	609a      	str	r2, [r3, #8]
 800191e:	e00b      	b.n	8001938 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001924:	f043 0210 	orr.w	r2, r3, #16
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001930:	f043 0201 	orr.w	r2, r3, #1
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	3714      	adds	r7, #20
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	20000018 	.word	0x20000018
 800194c:	431bde83 	.word	0x431bde83
 8001950:	fffff8fe 	.word	0xfffff8fe
 8001954:	40012300 	.word	0x40012300
 8001958:	40012000 	.word	0x40012000
 800195c:	40012200 	.word	0x40012200

08001960 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800196a:	2300      	movs	r3, #0
 800196c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001978:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800197c:	d113      	bne.n	80019a6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001988:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800198c:	d10b      	bne.n	80019a6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001992:	f043 0220 	orr.w	r2, r3, #32
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2200      	movs	r2, #0
 800199e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e063      	b.n	8001a6e <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80019a6:	f7ff fe99 	bl	80016dc <HAL_GetTick>
 80019aa:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80019ac:	e021      	b.n	80019f2 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019b4:	d01d      	beq.n	80019f2 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d007      	beq.n	80019cc <HAL_ADC_PollForConversion+0x6c>
 80019bc:	f7ff fe8e 	bl	80016dc <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	683a      	ldr	r2, [r7, #0]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d212      	bcs.n	80019f2 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d00b      	beq.n	80019f2 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019de:	f043 0204 	orr.w	r2, r3, #4
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e03d      	b.n	8001a6e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0302 	and.w	r3, r3, #2
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d1d6      	bne.n	80019ae <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f06f 0212 	mvn.w	r2, #18
 8001a08:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d123      	bne.n	8001a6c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d11f      	bne.n	8001a6c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a32:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d006      	beq.n	8001a48 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d111      	bne.n	8001a6c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d105      	bne.n	8001a6c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a64:	f043 0201 	orr.w	r2, r3, #1
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001a76:	b480      	push	{r7}
 8001a78:	b083      	sub	sp, #12
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d101      	bne.n	8001aac <HAL_ADC_ConfigChannel+0x1c>
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	e136      	b.n	8001d1a <HAL_ADC_ConfigChannel+0x28a>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2201      	movs	r2, #1
 8001ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2b09      	cmp	r3, #9
 8001aba:	d93a      	bls.n	8001b32 <HAL_ADC_ConfigChannel+0xa2>
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001ac4:	d035      	beq.n	8001b32 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	68d9      	ldr	r1, [r3, #12]
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	4413      	add	r3, r2
 8001ada:	3b1e      	subs	r3, #30
 8001adc:	2207      	movs	r2, #7
 8001ade:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae2:	43da      	mvns	r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	400a      	ands	r2, r1
 8001aea:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a8d      	ldr	r2, [pc, #564]	; (8001d28 <HAL_ADC_ConfigChannel+0x298>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d10a      	bne.n	8001b0c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	68d9      	ldr	r1, [r3, #12]
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	061a      	lsls	r2, r3, #24
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	430a      	orrs	r2, r1
 8001b08:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b0a:	e035      	b.n	8001b78 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	68d9      	ldr	r1, [r3, #12]
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	689a      	ldr	r2, [r3, #8]
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	4603      	mov	r3, r0
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	4403      	add	r3, r0
 8001b24:	3b1e      	subs	r3, #30
 8001b26:	409a      	lsls	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b30:	e022      	b.n	8001b78 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	6919      	ldr	r1, [r3, #16]
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	461a      	mov	r2, r3
 8001b40:	4613      	mov	r3, r2
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	4413      	add	r3, r2
 8001b46:	2207      	movs	r2, #7
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	43da      	mvns	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	400a      	ands	r2, r1
 8001b54:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	6919      	ldr	r1, [r3, #16]
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	689a      	ldr	r2, [r3, #8]
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	4618      	mov	r0, r3
 8001b68:	4603      	mov	r3, r0
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	4403      	add	r3, r0
 8001b6e:	409a      	lsls	r2, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	430a      	orrs	r2, r1
 8001b76:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	2b06      	cmp	r3, #6
 8001b7e:	d824      	bhi.n	8001bca <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685a      	ldr	r2, [r3, #4]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	4413      	add	r3, r2
 8001b90:	3b05      	subs	r3, #5
 8001b92:	221f      	movs	r2, #31
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	43da      	mvns	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	400a      	ands	r2, r1
 8001ba0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	4618      	mov	r0, r3
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685a      	ldr	r2, [r3, #4]
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	4413      	add	r3, r2
 8001bba:	3b05      	subs	r3, #5
 8001bbc:	fa00 f203 	lsl.w	r2, r0, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	635a      	str	r2, [r3, #52]	; 0x34
 8001bc8:	e04c      	b.n	8001c64 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	2b0c      	cmp	r3, #12
 8001bd0:	d824      	bhi.n	8001c1c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685a      	ldr	r2, [r3, #4]
 8001bdc:	4613      	mov	r3, r2
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	4413      	add	r3, r2
 8001be2:	3b23      	subs	r3, #35	; 0x23
 8001be4:	221f      	movs	r2, #31
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	43da      	mvns	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	400a      	ands	r2, r1
 8001bf2:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	4618      	mov	r0, r3
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685a      	ldr	r2, [r3, #4]
 8001c06:	4613      	mov	r3, r2
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	4413      	add	r3, r2
 8001c0c:	3b23      	subs	r3, #35	; 0x23
 8001c0e:	fa00 f203 	lsl.w	r2, r0, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	430a      	orrs	r2, r1
 8001c18:	631a      	str	r2, [r3, #48]	; 0x30
 8001c1a:	e023      	b.n	8001c64 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685a      	ldr	r2, [r3, #4]
 8001c26:	4613      	mov	r3, r2
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	4413      	add	r3, r2
 8001c2c:	3b41      	subs	r3, #65	; 0x41
 8001c2e:	221f      	movs	r2, #31
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	43da      	mvns	r2, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	400a      	ands	r2, r1
 8001c3c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685a      	ldr	r2, [r3, #4]
 8001c50:	4613      	mov	r3, r2
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	4413      	add	r3, r2
 8001c56:	3b41      	subs	r3, #65	; 0x41
 8001c58:	fa00 f203 	lsl.w	r2, r0, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	430a      	orrs	r2, r1
 8001c62:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a30      	ldr	r2, [pc, #192]	; (8001d2c <HAL_ADC_ConfigChannel+0x29c>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d10a      	bne.n	8001c84 <HAL_ADC_ConfigChannel+0x1f4>
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001c76:	d105      	bne.n	8001c84 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001c78:	4b2d      	ldr	r3, [pc, #180]	; (8001d30 <HAL_ADC_ConfigChannel+0x2a0>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	4a2c      	ldr	r2, [pc, #176]	; (8001d30 <HAL_ADC_ConfigChannel+0x2a0>)
 8001c7e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001c82:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a28      	ldr	r2, [pc, #160]	; (8001d2c <HAL_ADC_ConfigChannel+0x29c>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d10f      	bne.n	8001cae <HAL_ADC_ConfigChannel+0x21e>
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2b12      	cmp	r3, #18
 8001c94:	d10b      	bne.n	8001cae <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001c96:	4b26      	ldr	r3, [pc, #152]	; (8001d30 <HAL_ADC_ConfigChannel+0x2a0>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	4a25      	ldr	r2, [pc, #148]	; (8001d30 <HAL_ADC_ConfigChannel+0x2a0>)
 8001c9c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001ca0:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001ca2:	4b23      	ldr	r3, [pc, #140]	; (8001d30 <HAL_ADC_ConfigChannel+0x2a0>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	4a22      	ldr	r2, [pc, #136]	; (8001d30 <HAL_ADC_ConfigChannel+0x2a0>)
 8001ca8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001cac:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a1e      	ldr	r2, [pc, #120]	; (8001d2c <HAL_ADC_ConfigChannel+0x29c>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d12b      	bne.n	8001d10 <HAL_ADC_ConfigChannel+0x280>
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a1a      	ldr	r2, [pc, #104]	; (8001d28 <HAL_ADC_ConfigChannel+0x298>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d003      	beq.n	8001cca <HAL_ADC_ConfigChannel+0x23a>
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2b11      	cmp	r3, #17
 8001cc8:	d122      	bne.n	8001d10 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001cca:	4b19      	ldr	r3, [pc, #100]	; (8001d30 <HAL_ADC_ConfigChannel+0x2a0>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	4a18      	ldr	r2, [pc, #96]	; (8001d30 <HAL_ADC_ConfigChannel+0x2a0>)
 8001cd0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001cd4:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001cd6:	4b16      	ldr	r3, [pc, #88]	; (8001d30 <HAL_ADC_ConfigChannel+0x2a0>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	4a15      	ldr	r2, [pc, #84]	; (8001d30 <HAL_ADC_ConfigChannel+0x2a0>)
 8001cdc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ce0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a10      	ldr	r2, [pc, #64]	; (8001d28 <HAL_ADC_ConfigChannel+0x298>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d111      	bne.n	8001d10 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001cec:	4b11      	ldr	r3, [pc, #68]	; (8001d34 <HAL_ADC_ConfigChannel+0x2a4>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a11      	ldr	r2, [pc, #68]	; (8001d38 <HAL_ADC_ConfigChannel+0x2a8>)
 8001cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf6:	0c9a      	lsrs	r2, r3, #18
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	4413      	add	r3, r2
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001d02:	e002      	b.n	8001d0a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	3b01      	subs	r3, #1
 8001d08:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d1f9      	bne.n	8001d04 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2200      	movs	r2, #0
 8001d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3714      	adds	r7, #20
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	10000012 	.word	0x10000012
 8001d2c:	40012000 	.word	0x40012000
 8001d30:	40012300 	.word	0x40012300
 8001d34:	20000018 	.word	0x20000018
 8001d38:	431bde83 	.word	0x431bde83

08001d3c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001d44:	4b78      	ldr	r3, [pc, #480]	; (8001f28 <ADC_Init+0x1ec>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	4a77      	ldr	r2, [pc, #476]	; (8001f28 <ADC_Init+0x1ec>)
 8001d4a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001d4e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001d50:	4b75      	ldr	r3, [pc, #468]	; (8001f28 <ADC_Init+0x1ec>)
 8001d52:	685a      	ldr	r2, [r3, #4]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	4973      	ldr	r1, [pc, #460]	; (8001f28 <ADC_Init+0x1ec>)
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	685a      	ldr	r2, [r3, #4]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d6c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	6859      	ldr	r1, [r3, #4]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	691b      	ldr	r3, [r3, #16]
 8001d78:	021a      	lsls	r2, r3, #8
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	685a      	ldr	r2, [r3, #4]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001d90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	6859      	ldr	r1, [r3, #4]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689a      	ldr	r2, [r3, #8]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	430a      	orrs	r2, r1
 8001da2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	689a      	ldr	r2, [r3, #8]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001db2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	6899      	ldr	r1, [r3, #8]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	68da      	ldr	r2, [r3, #12]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dca:	4a58      	ldr	r2, [pc, #352]	; (8001f2c <ADC_Init+0x1f0>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d022      	beq.n	8001e16 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	689a      	ldr	r2, [r3, #8]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001dde:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	6899      	ldr	r1, [r3, #8]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	430a      	orrs	r2, r1
 8001df0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	689a      	ldr	r2, [r3, #8]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e00:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	6899      	ldr	r1, [r3, #8]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	430a      	orrs	r2, r1
 8001e12:	609a      	str	r2, [r3, #8]
 8001e14:	e00f      	b.n	8001e36 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	689a      	ldr	r2, [r3, #8]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e24:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	689a      	ldr	r2, [r3, #8]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e34:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	689a      	ldr	r2, [r3, #8]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f022 0202 	bic.w	r2, r2, #2
 8001e44:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	6899      	ldr	r1, [r3, #8]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	699b      	ldr	r3, [r3, #24]
 8001e50:	005a      	lsls	r2, r3, #1
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	430a      	orrs	r2, r1
 8001e58:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d01b      	beq.n	8001e9c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	685a      	ldr	r2, [r3, #4]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e72:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	685a      	ldr	r2, [r3, #4]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001e82:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	6859      	ldr	r1, [r3, #4]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	035a      	lsls	r2, r3, #13
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	430a      	orrs	r2, r1
 8001e98:	605a      	str	r2, [r3, #4]
 8001e9a:	e007      	b.n	8001eac <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	685a      	ldr	r2, [r3, #4]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001eaa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001eba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	69db      	ldr	r3, [r3, #28]
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	051a      	lsls	r2, r3, #20
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	689a      	ldr	r2, [r3, #8]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ee0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	6899      	ldr	r1, [r3, #8]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001eee:	025a      	lsls	r2, r3, #9
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	430a      	orrs	r2, r1
 8001ef6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	689a      	ldr	r2, [r3, #8]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f06:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	6899      	ldr	r1, [r3, #8]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	695b      	ldr	r3, [r3, #20]
 8001f12:	029a      	lsls	r2, r3, #10
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	430a      	orrs	r2, r1
 8001f1a:	609a      	str	r2, [r3, #8]
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	40012300 	.word	0x40012300
 8001f2c:	0f000001 	.word	0x0f000001

08001f30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f003 0307 	and.w	r3, r3, #7
 8001f3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f40:	4b0b      	ldr	r3, [pc, #44]	; (8001f70 <__NVIC_SetPriorityGrouping+0x40>)
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f46:	68ba      	ldr	r2, [r7, #8]
 8001f48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001f58:	4b06      	ldr	r3, [pc, #24]	; (8001f74 <__NVIC_SetPriorityGrouping+0x44>)
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f5e:	4a04      	ldr	r2, [pc, #16]	; (8001f70 <__NVIC_SetPriorityGrouping+0x40>)
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	60d3      	str	r3, [r2, #12]
}
 8001f64:	bf00      	nop
 8001f66:	3714      	adds	r7, #20
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr
 8001f70:	e000ed00 	.word	0xe000ed00
 8001f74:	05fa0000 	.word	0x05fa0000

08001f78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f7c:	4b04      	ldr	r3, [pc, #16]	; (8001f90 <__NVIC_GetPriorityGrouping+0x18>)
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	0a1b      	lsrs	r3, r3, #8
 8001f82:	f003 0307 	and.w	r3, r3, #7
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr
 8001f90:	e000ed00 	.word	0xe000ed00

08001f94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	db0b      	blt.n	8001fbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fa6:	79fb      	ldrb	r3, [r7, #7]
 8001fa8:	f003 021f 	and.w	r2, r3, #31
 8001fac:	4907      	ldr	r1, [pc, #28]	; (8001fcc <__NVIC_EnableIRQ+0x38>)
 8001fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb2:	095b      	lsrs	r3, r3, #5
 8001fb4:	2001      	movs	r0, #1
 8001fb6:	fa00 f202 	lsl.w	r2, r0, r2
 8001fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fbe:	bf00      	nop
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	e000e100 	.word	0xe000e100

08001fd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	6039      	str	r1, [r7, #0]
 8001fda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	db0a      	blt.n	8001ffa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	b2da      	uxtb	r2, r3
 8001fe8:	490c      	ldr	r1, [pc, #48]	; (800201c <__NVIC_SetPriority+0x4c>)
 8001fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fee:	0112      	lsls	r2, r2, #4
 8001ff0:	b2d2      	uxtb	r2, r2
 8001ff2:	440b      	add	r3, r1
 8001ff4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ff8:	e00a      	b.n	8002010 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	b2da      	uxtb	r2, r3
 8001ffe:	4908      	ldr	r1, [pc, #32]	; (8002020 <__NVIC_SetPriority+0x50>)
 8002000:	79fb      	ldrb	r3, [r7, #7]
 8002002:	f003 030f 	and.w	r3, r3, #15
 8002006:	3b04      	subs	r3, #4
 8002008:	0112      	lsls	r2, r2, #4
 800200a:	b2d2      	uxtb	r2, r2
 800200c:	440b      	add	r3, r1
 800200e:	761a      	strb	r2, [r3, #24]
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr
 800201c:	e000e100 	.word	0xe000e100
 8002020:	e000ed00 	.word	0xe000ed00

08002024 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002024:	b480      	push	{r7}
 8002026:	b089      	sub	sp, #36	; 0x24
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	60b9      	str	r1, [r7, #8]
 800202e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f003 0307 	and.w	r3, r3, #7
 8002036:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	f1c3 0307 	rsb	r3, r3, #7
 800203e:	2b04      	cmp	r3, #4
 8002040:	bf28      	it	cs
 8002042:	2304      	movcs	r3, #4
 8002044:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	3304      	adds	r3, #4
 800204a:	2b06      	cmp	r3, #6
 800204c:	d902      	bls.n	8002054 <NVIC_EncodePriority+0x30>
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	3b03      	subs	r3, #3
 8002052:	e000      	b.n	8002056 <NVIC_EncodePriority+0x32>
 8002054:	2300      	movs	r3, #0
 8002056:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002058:	f04f 32ff 	mov.w	r2, #4294967295
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	43da      	mvns	r2, r3
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	401a      	ands	r2, r3
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800206c:	f04f 31ff 	mov.w	r1, #4294967295
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	fa01 f303 	lsl.w	r3, r1, r3
 8002076:	43d9      	mvns	r1, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800207c:	4313      	orrs	r3, r2
         );
}
 800207e:	4618      	mov	r0, r3
 8002080:	3724      	adds	r7, #36	; 0x24
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
	...

0800208c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	3b01      	subs	r3, #1
 8002098:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800209c:	d301      	bcc.n	80020a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800209e:	2301      	movs	r3, #1
 80020a0:	e00f      	b.n	80020c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020a2:	4a0a      	ldr	r2, [pc, #40]	; (80020cc <SysTick_Config+0x40>)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	3b01      	subs	r3, #1
 80020a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020aa:	210f      	movs	r1, #15
 80020ac:	f04f 30ff 	mov.w	r0, #4294967295
 80020b0:	f7ff ff8e 	bl	8001fd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020b4:	4b05      	ldr	r3, [pc, #20]	; (80020cc <SysTick_Config+0x40>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ba:	4b04      	ldr	r3, [pc, #16]	; (80020cc <SysTick_Config+0x40>)
 80020bc:	2207      	movs	r2, #7
 80020be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	e000e010 	.word	0xe000e010

080020d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f7ff ff29 	bl	8001f30 <__NVIC_SetPriorityGrouping>
}
 80020de:	bf00      	nop
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020e6:	b580      	push	{r7, lr}
 80020e8:	b086      	sub	sp, #24
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	4603      	mov	r3, r0
 80020ee:	60b9      	str	r1, [r7, #8]
 80020f0:	607a      	str	r2, [r7, #4]
 80020f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80020f4:	2300      	movs	r3, #0
 80020f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020f8:	f7ff ff3e 	bl	8001f78 <__NVIC_GetPriorityGrouping>
 80020fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	68b9      	ldr	r1, [r7, #8]
 8002102:	6978      	ldr	r0, [r7, #20]
 8002104:	f7ff ff8e 	bl	8002024 <NVIC_EncodePriority>
 8002108:	4602      	mov	r2, r0
 800210a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800210e:	4611      	mov	r1, r2
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff ff5d 	bl	8001fd0 <__NVIC_SetPriority>
}
 8002116:	bf00      	nop
 8002118:	3718      	adds	r7, #24
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	b082      	sub	sp, #8
 8002122:	af00      	add	r7, sp, #0
 8002124:	4603      	mov	r3, r0
 8002126:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212c:	4618      	mov	r0, r3
 800212e:	f7ff ff31 	bl	8001f94 <__NVIC_EnableIRQ>
}
 8002132:	bf00      	nop
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800213a:	b580      	push	{r7, lr}
 800213c:	b082      	sub	sp, #8
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f7ff ffa2 	bl	800208c <SysTick_Config>
 8002148:	4603      	mov	r3, r0
}
 800214a:	4618      	mov	r0, r3
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
	...

08002154 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002154:	b480      	push	{r7}
 8002156:	b089      	sub	sp, #36	; 0x24
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800215e:	2300      	movs	r3, #0
 8002160:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002162:	2300      	movs	r3, #0
 8002164:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002166:	2300      	movs	r3, #0
 8002168:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800216a:	2300      	movs	r3, #0
 800216c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800216e:	2300      	movs	r3, #0
 8002170:	61fb      	str	r3, [r7, #28]
 8002172:	e175      	b.n	8002460 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002174:	2201      	movs	r2, #1
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	697a      	ldr	r2, [r7, #20]
 8002184:	4013      	ands	r3, r2
 8002186:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002188:	693a      	ldr	r2, [r7, #16]
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	429a      	cmp	r2, r3
 800218e:	f040 8164 	bne.w	800245a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f003 0303 	and.w	r3, r3, #3
 800219a:	2b01      	cmp	r3, #1
 800219c:	d005      	beq.n	80021aa <HAL_GPIO_Init+0x56>
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f003 0303 	and.w	r3, r3, #3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d130      	bne.n	800220c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	2203      	movs	r2, #3
 80021b6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ba:	43db      	mvns	r3, r3
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	4013      	ands	r3, r2
 80021c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	68da      	ldr	r2, [r3, #12]
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021e0:	2201      	movs	r2, #1
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	43db      	mvns	r3, r3
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	4013      	ands	r3, r2
 80021ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	091b      	lsrs	r3, r3, #4
 80021f6:	f003 0201 	and.w	r2, r3, #1
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	4313      	orrs	r3, r2
 8002204:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f003 0303 	and.w	r3, r3, #3
 8002214:	2b03      	cmp	r3, #3
 8002216:	d017      	beq.n	8002248 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	2203      	movs	r2, #3
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	43db      	mvns	r3, r3
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	4013      	ands	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	4313      	orrs	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f003 0303 	and.w	r3, r3, #3
 8002250:	2b02      	cmp	r3, #2
 8002252:	d123      	bne.n	800229c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	08da      	lsrs	r2, r3, #3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	3208      	adds	r2, #8
 800225c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002260:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	f003 0307 	and.w	r3, r3, #7
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	220f      	movs	r2, #15
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	43db      	mvns	r3, r3
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	4013      	ands	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	691a      	ldr	r2, [r3, #16]
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	f003 0307 	and.w	r3, r3, #7
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	4313      	orrs	r3, r2
 800228c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	08da      	lsrs	r2, r3, #3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	3208      	adds	r2, #8
 8002296:	69b9      	ldr	r1, [r7, #24]
 8002298:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	2203      	movs	r2, #3
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	43db      	mvns	r3, r3
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	4013      	ands	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f003 0203 	and.w	r2, r3, #3
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	f000 80be 	beq.w	800245a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022de:	4b66      	ldr	r3, [pc, #408]	; (8002478 <HAL_GPIO_Init+0x324>)
 80022e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e2:	4a65      	ldr	r2, [pc, #404]	; (8002478 <HAL_GPIO_Init+0x324>)
 80022e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022e8:	6453      	str	r3, [r2, #68]	; 0x44
 80022ea:	4b63      	ldr	r3, [pc, #396]	; (8002478 <HAL_GPIO_Init+0x324>)
 80022ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022f2:	60fb      	str	r3, [r7, #12]
 80022f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80022f6:	4a61      	ldr	r2, [pc, #388]	; (800247c <HAL_GPIO_Init+0x328>)
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	089b      	lsrs	r3, r3, #2
 80022fc:	3302      	adds	r3, #2
 80022fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002302:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	f003 0303 	and.w	r3, r3, #3
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	220f      	movs	r2, #15
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	43db      	mvns	r3, r3
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	4013      	ands	r3, r2
 8002318:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a58      	ldr	r2, [pc, #352]	; (8002480 <HAL_GPIO_Init+0x32c>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d037      	beq.n	8002392 <HAL_GPIO_Init+0x23e>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a57      	ldr	r2, [pc, #348]	; (8002484 <HAL_GPIO_Init+0x330>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d031      	beq.n	800238e <HAL_GPIO_Init+0x23a>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a56      	ldr	r2, [pc, #344]	; (8002488 <HAL_GPIO_Init+0x334>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d02b      	beq.n	800238a <HAL_GPIO_Init+0x236>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a55      	ldr	r2, [pc, #340]	; (800248c <HAL_GPIO_Init+0x338>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d025      	beq.n	8002386 <HAL_GPIO_Init+0x232>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a54      	ldr	r2, [pc, #336]	; (8002490 <HAL_GPIO_Init+0x33c>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d01f      	beq.n	8002382 <HAL_GPIO_Init+0x22e>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a53      	ldr	r2, [pc, #332]	; (8002494 <HAL_GPIO_Init+0x340>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d019      	beq.n	800237e <HAL_GPIO_Init+0x22a>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a52      	ldr	r2, [pc, #328]	; (8002498 <HAL_GPIO_Init+0x344>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d013      	beq.n	800237a <HAL_GPIO_Init+0x226>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a51      	ldr	r2, [pc, #324]	; (800249c <HAL_GPIO_Init+0x348>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d00d      	beq.n	8002376 <HAL_GPIO_Init+0x222>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a50      	ldr	r2, [pc, #320]	; (80024a0 <HAL_GPIO_Init+0x34c>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d007      	beq.n	8002372 <HAL_GPIO_Init+0x21e>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a4f      	ldr	r2, [pc, #316]	; (80024a4 <HAL_GPIO_Init+0x350>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d101      	bne.n	800236e <HAL_GPIO_Init+0x21a>
 800236a:	2309      	movs	r3, #9
 800236c:	e012      	b.n	8002394 <HAL_GPIO_Init+0x240>
 800236e:	230a      	movs	r3, #10
 8002370:	e010      	b.n	8002394 <HAL_GPIO_Init+0x240>
 8002372:	2308      	movs	r3, #8
 8002374:	e00e      	b.n	8002394 <HAL_GPIO_Init+0x240>
 8002376:	2307      	movs	r3, #7
 8002378:	e00c      	b.n	8002394 <HAL_GPIO_Init+0x240>
 800237a:	2306      	movs	r3, #6
 800237c:	e00a      	b.n	8002394 <HAL_GPIO_Init+0x240>
 800237e:	2305      	movs	r3, #5
 8002380:	e008      	b.n	8002394 <HAL_GPIO_Init+0x240>
 8002382:	2304      	movs	r3, #4
 8002384:	e006      	b.n	8002394 <HAL_GPIO_Init+0x240>
 8002386:	2303      	movs	r3, #3
 8002388:	e004      	b.n	8002394 <HAL_GPIO_Init+0x240>
 800238a:	2302      	movs	r3, #2
 800238c:	e002      	b.n	8002394 <HAL_GPIO_Init+0x240>
 800238e:	2301      	movs	r3, #1
 8002390:	e000      	b.n	8002394 <HAL_GPIO_Init+0x240>
 8002392:	2300      	movs	r3, #0
 8002394:	69fa      	ldr	r2, [r7, #28]
 8002396:	f002 0203 	and.w	r2, r2, #3
 800239a:	0092      	lsls	r2, r2, #2
 800239c:	4093      	lsls	r3, r2
 800239e:	69ba      	ldr	r2, [r7, #24]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80023a4:	4935      	ldr	r1, [pc, #212]	; (800247c <HAL_GPIO_Init+0x328>)
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	089b      	lsrs	r3, r3, #2
 80023aa:	3302      	adds	r3, #2
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023b2:	4b3d      	ldr	r3, [pc, #244]	; (80024a8 <HAL_GPIO_Init+0x354>)
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	43db      	mvns	r3, r3
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	4013      	ands	r3, r2
 80023c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d003      	beq.n	80023d6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023d6:	4a34      	ldr	r2, [pc, #208]	; (80024a8 <HAL_GPIO_Init+0x354>)
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023dc:	4b32      	ldr	r3, [pc, #200]	; (80024a8 <HAL_GPIO_Init+0x354>)
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	43db      	mvns	r3, r3
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	4013      	ands	r3, r2
 80023ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d003      	beq.n	8002400 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002400:	4a29      	ldr	r2, [pc, #164]	; (80024a8 <HAL_GPIO_Init+0x354>)
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002406:	4b28      	ldr	r3, [pc, #160]	; (80024a8 <HAL_GPIO_Init+0x354>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	43db      	mvns	r3, r3
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	4013      	ands	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d003      	beq.n	800242a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	4313      	orrs	r3, r2
 8002428:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800242a:	4a1f      	ldr	r2, [pc, #124]	; (80024a8 <HAL_GPIO_Init+0x354>)
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002430:	4b1d      	ldr	r3, [pc, #116]	; (80024a8 <HAL_GPIO_Init+0x354>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	43db      	mvns	r3, r3
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	4013      	ands	r3, r2
 800243e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d003      	beq.n	8002454 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	4313      	orrs	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002454:	4a14      	ldr	r2, [pc, #80]	; (80024a8 <HAL_GPIO_Init+0x354>)
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	3301      	adds	r3, #1
 800245e:	61fb      	str	r3, [r7, #28]
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	2b0f      	cmp	r3, #15
 8002464:	f67f ae86 	bls.w	8002174 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002468:	bf00      	nop
 800246a:	bf00      	nop
 800246c:	3724      	adds	r7, #36	; 0x24
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	40023800 	.word	0x40023800
 800247c:	40013800 	.word	0x40013800
 8002480:	40020000 	.word	0x40020000
 8002484:	40020400 	.word	0x40020400
 8002488:	40020800 	.word	0x40020800
 800248c:	40020c00 	.word	0x40020c00
 8002490:	40021000 	.word	0x40021000
 8002494:	40021400 	.word	0x40021400
 8002498:	40021800 	.word	0x40021800
 800249c:	40021c00 	.word	0x40021c00
 80024a0:	40022000 	.word	0x40022000
 80024a4:	40022400 	.word	0x40022400
 80024a8:	40013c00 	.word	0x40013c00

080024ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	460b      	mov	r3, r1
 80024b6:	807b      	strh	r3, [r7, #2]
 80024b8:	4613      	mov	r3, r2
 80024ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024bc:	787b      	ldrb	r3, [r7, #1]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d003      	beq.n	80024ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024c2:	887a      	ldrh	r2, [r7, #2]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80024c8:	e003      	b.n	80024d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80024ca:	887b      	ldrh	r3, [r7, #2]
 80024cc:	041a      	lsls	r2, r3, #16
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	619a      	str	r2, [r3, #24]
}
 80024d2:	bf00      	nop
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr

080024de <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80024de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024e0:	b08f      	sub	sp, #60	; 0x3c
 80024e2:	af0a      	add	r7, sp, #40	; 0x28
 80024e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d101      	bne.n	80024f0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e116      	b.n	800271e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d106      	bne.n	8002510 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f7ff f810 	bl	8001530 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2203      	movs	r2, #3
 8002514:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800251c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002520:	2b00      	cmp	r3, #0
 8002522:	d102      	bne.n	800252a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4618      	mov	r0, r3
 8002530:	f003 f946 	bl	80057c0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	603b      	str	r3, [r7, #0]
 800253a:	687e      	ldr	r6, [r7, #4]
 800253c:	466d      	mov	r5, sp
 800253e:	f106 0410 	add.w	r4, r6, #16
 8002542:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002544:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002546:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002548:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800254a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800254e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002552:	1d33      	adds	r3, r6, #4
 8002554:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002556:	6838      	ldr	r0, [r7, #0]
 8002558:	f003 f8da 	bl	8005710 <USB_CoreInit>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d005      	beq.n	800256e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2202      	movs	r2, #2
 8002566:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e0d7      	b.n	800271e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	2100      	movs	r1, #0
 8002574:	4618      	mov	r0, r3
 8002576:	f003 f934 	bl	80057e2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800257a:	2300      	movs	r3, #0
 800257c:	73fb      	strb	r3, [r7, #15]
 800257e:	e04a      	b.n	8002616 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002580:	7bfa      	ldrb	r2, [r7, #15]
 8002582:	6879      	ldr	r1, [r7, #4]
 8002584:	4613      	mov	r3, r2
 8002586:	00db      	lsls	r3, r3, #3
 8002588:	1a9b      	subs	r3, r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	440b      	add	r3, r1
 800258e:	333d      	adds	r3, #61	; 0x3d
 8002590:	2201      	movs	r2, #1
 8002592:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002594:	7bfa      	ldrb	r2, [r7, #15]
 8002596:	6879      	ldr	r1, [r7, #4]
 8002598:	4613      	mov	r3, r2
 800259a:	00db      	lsls	r3, r3, #3
 800259c:	1a9b      	subs	r3, r3, r2
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	440b      	add	r3, r1
 80025a2:	333c      	adds	r3, #60	; 0x3c
 80025a4:	7bfa      	ldrb	r2, [r7, #15]
 80025a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80025a8:	7bfa      	ldrb	r2, [r7, #15]
 80025aa:	7bfb      	ldrb	r3, [r7, #15]
 80025ac:	b298      	uxth	r0, r3
 80025ae:	6879      	ldr	r1, [r7, #4]
 80025b0:	4613      	mov	r3, r2
 80025b2:	00db      	lsls	r3, r3, #3
 80025b4:	1a9b      	subs	r3, r3, r2
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	440b      	add	r3, r1
 80025ba:	3342      	adds	r3, #66	; 0x42
 80025bc:	4602      	mov	r2, r0
 80025be:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80025c0:	7bfa      	ldrb	r2, [r7, #15]
 80025c2:	6879      	ldr	r1, [r7, #4]
 80025c4:	4613      	mov	r3, r2
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	1a9b      	subs	r3, r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	440b      	add	r3, r1
 80025ce:	333f      	adds	r3, #63	; 0x3f
 80025d0:	2200      	movs	r2, #0
 80025d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80025d4:	7bfa      	ldrb	r2, [r7, #15]
 80025d6:	6879      	ldr	r1, [r7, #4]
 80025d8:	4613      	mov	r3, r2
 80025da:	00db      	lsls	r3, r3, #3
 80025dc:	1a9b      	subs	r3, r3, r2
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	440b      	add	r3, r1
 80025e2:	3344      	adds	r3, #68	; 0x44
 80025e4:	2200      	movs	r2, #0
 80025e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80025e8:	7bfa      	ldrb	r2, [r7, #15]
 80025ea:	6879      	ldr	r1, [r7, #4]
 80025ec:	4613      	mov	r3, r2
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	1a9b      	subs	r3, r3, r2
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	440b      	add	r3, r1
 80025f6:	3348      	adds	r3, #72	; 0x48
 80025f8:	2200      	movs	r2, #0
 80025fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80025fc:	7bfa      	ldrb	r2, [r7, #15]
 80025fe:	6879      	ldr	r1, [r7, #4]
 8002600:	4613      	mov	r3, r2
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	1a9b      	subs	r3, r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	440b      	add	r3, r1
 800260a:	3350      	adds	r3, #80	; 0x50
 800260c:	2200      	movs	r2, #0
 800260e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002610:	7bfb      	ldrb	r3, [r7, #15]
 8002612:	3301      	adds	r3, #1
 8002614:	73fb      	strb	r3, [r7, #15]
 8002616:	7bfa      	ldrb	r2, [r7, #15]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	429a      	cmp	r2, r3
 800261e:	d3af      	bcc.n	8002580 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002620:	2300      	movs	r3, #0
 8002622:	73fb      	strb	r3, [r7, #15]
 8002624:	e044      	b.n	80026b0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002626:	7bfa      	ldrb	r2, [r7, #15]
 8002628:	6879      	ldr	r1, [r7, #4]
 800262a:	4613      	mov	r3, r2
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	1a9b      	subs	r3, r3, r2
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	440b      	add	r3, r1
 8002634:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002638:	2200      	movs	r2, #0
 800263a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800263c:	7bfa      	ldrb	r2, [r7, #15]
 800263e:	6879      	ldr	r1, [r7, #4]
 8002640:	4613      	mov	r3, r2
 8002642:	00db      	lsls	r3, r3, #3
 8002644:	1a9b      	subs	r3, r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	440b      	add	r3, r1
 800264a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800264e:	7bfa      	ldrb	r2, [r7, #15]
 8002650:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002652:	7bfa      	ldrb	r2, [r7, #15]
 8002654:	6879      	ldr	r1, [r7, #4]
 8002656:	4613      	mov	r3, r2
 8002658:	00db      	lsls	r3, r3, #3
 800265a:	1a9b      	subs	r3, r3, r2
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	440b      	add	r3, r1
 8002660:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002664:	2200      	movs	r2, #0
 8002666:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002668:	7bfa      	ldrb	r2, [r7, #15]
 800266a:	6879      	ldr	r1, [r7, #4]
 800266c:	4613      	mov	r3, r2
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	1a9b      	subs	r3, r3, r2
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	440b      	add	r3, r1
 8002676:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800267a:	2200      	movs	r2, #0
 800267c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800267e:	7bfa      	ldrb	r2, [r7, #15]
 8002680:	6879      	ldr	r1, [r7, #4]
 8002682:	4613      	mov	r3, r2
 8002684:	00db      	lsls	r3, r3, #3
 8002686:	1a9b      	subs	r3, r3, r2
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	440b      	add	r3, r1
 800268c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002690:	2200      	movs	r2, #0
 8002692:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002694:	7bfa      	ldrb	r2, [r7, #15]
 8002696:	6879      	ldr	r1, [r7, #4]
 8002698:	4613      	mov	r3, r2
 800269a:	00db      	lsls	r3, r3, #3
 800269c:	1a9b      	subs	r3, r3, r2
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	440b      	add	r3, r1
 80026a2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80026a6:	2200      	movs	r2, #0
 80026a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026aa:	7bfb      	ldrb	r3, [r7, #15]
 80026ac:	3301      	adds	r3, #1
 80026ae:	73fb      	strb	r3, [r7, #15]
 80026b0:	7bfa      	ldrb	r2, [r7, #15]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d3b5      	bcc.n	8002626 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	603b      	str	r3, [r7, #0]
 80026c0:	687e      	ldr	r6, [r7, #4]
 80026c2:	466d      	mov	r5, sp
 80026c4:	f106 0410 	add.w	r4, r6, #16
 80026c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026d0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026d4:	e885 0003 	stmia.w	r5, {r0, r1}
 80026d8:	1d33      	adds	r3, r6, #4
 80026da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026dc:	6838      	ldr	r0, [r7, #0]
 80026de:	f003 f8cd 	bl	800587c <USB_DevInit>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d005      	beq.n	80026f4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2202      	movs	r2, #2
 80026ec:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e014      	b.n	800271e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2201      	movs	r2, #1
 8002700:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002708:	2b01      	cmp	r3, #1
 800270a:	d102      	bne.n	8002712 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f000 f80b 	bl	8002728 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4618      	mov	r0, r3
 8002718:	f003 fa87 	bl	8005c2a <USB_DevDisconnect>

  return HAL_OK;
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3714      	adds	r7, #20
 8002722:	46bd      	mov	sp, r7
 8002724:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002728 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002728:	b480      	push	{r7}
 800272a:	b085      	sub	sp, #20
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2201      	movs	r2, #1
 800273a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002756:	4b05      	ldr	r3, [pc, #20]	; (800276c <HAL_PCDEx_ActivateLPM+0x44>)
 8002758:	4313      	orrs	r3, r2
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800275e:	2300      	movs	r3, #0
}
 8002760:	4618      	mov	r0, r3
 8002762:	3714      	adds	r7, #20
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr
 800276c:	10000003 	.word	0x10000003

08002770 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002774:	4b05      	ldr	r3, [pc, #20]	; (800278c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a04      	ldr	r2, [pc, #16]	; (800278c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800277a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800277e:	6013      	str	r3, [r2, #0]
}
 8002780:	bf00      	nop
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	40007000 	.word	0x40007000

08002790 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b086      	sub	sp, #24
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002798:	2300      	movs	r3, #0
 800279a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d101      	bne.n	80027a6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e291      	b.n	8002cca <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	f000 8087 	beq.w	80028c2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027b4:	4b96      	ldr	r3, [pc, #600]	; (8002a10 <HAL_RCC_OscConfig+0x280>)
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f003 030c 	and.w	r3, r3, #12
 80027bc:	2b04      	cmp	r3, #4
 80027be:	d00c      	beq.n	80027da <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027c0:	4b93      	ldr	r3, [pc, #588]	; (8002a10 <HAL_RCC_OscConfig+0x280>)
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f003 030c 	and.w	r3, r3, #12
 80027c8:	2b08      	cmp	r3, #8
 80027ca:	d112      	bne.n	80027f2 <HAL_RCC_OscConfig+0x62>
 80027cc:	4b90      	ldr	r3, [pc, #576]	; (8002a10 <HAL_RCC_OscConfig+0x280>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027d8:	d10b      	bne.n	80027f2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027da:	4b8d      	ldr	r3, [pc, #564]	; (8002a10 <HAL_RCC_OscConfig+0x280>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d06c      	beq.n	80028c0 <HAL_RCC_OscConfig+0x130>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d168      	bne.n	80028c0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e26b      	b.n	8002cca <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027fa:	d106      	bne.n	800280a <HAL_RCC_OscConfig+0x7a>
 80027fc:	4b84      	ldr	r3, [pc, #528]	; (8002a10 <HAL_RCC_OscConfig+0x280>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a83      	ldr	r2, [pc, #524]	; (8002a10 <HAL_RCC_OscConfig+0x280>)
 8002802:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002806:	6013      	str	r3, [r2, #0]
 8002808:	e02e      	b.n	8002868 <HAL_RCC_OscConfig+0xd8>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d10c      	bne.n	800282c <HAL_RCC_OscConfig+0x9c>
 8002812:	4b7f      	ldr	r3, [pc, #508]	; (8002a10 <HAL_RCC_OscConfig+0x280>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a7e      	ldr	r2, [pc, #504]	; (8002a10 <HAL_RCC_OscConfig+0x280>)
 8002818:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800281c:	6013      	str	r3, [r2, #0]
 800281e:	4b7c      	ldr	r3, [pc, #496]	; (8002a10 <HAL_RCC_OscConfig+0x280>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a7b      	ldr	r2, [pc, #492]	; (8002a10 <HAL_RCC_OscConfig+0x280>)
 8002824:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002828:	6013      	str	r3, [r2, #0]
 800282a:	e01d      	b.n	8002868 <HAL_RCC_OscConfig+0xd8>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002834:	d10c      	bne.n	8002850 <HAL_RCC_OscConfig+0xc0>
 8002836:	4b76      	ldr	r3, [pc, #472]	; (8002a10 <HAL_RCC_OscConfig+0x280>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a75      	ldr	r2, [pc, #468]	; (8002a10 <HAL_RCC_OscConfig+0x280>)
 800283c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002840:	6013      	str	r3, [r2, #0]
 8002842:	4b73      	ldr	r3, [pc, #460]	; (8002a10 <HAL_RCC_OscConfig+0x280>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a72      	ldr	r2, [pc, #456]	; (8002a10 <HAL_RCC_OscConfig+0x280>)
 8002848:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800284c:	6013      	str	r3, [r2, #0]
 800284e:	e00b      	b.n	8002868 <HAL_RCC_OscConfig+0xd8>
 8002850:	4b6f      	ldr	r3, [pc, #444]	; (8002a10 <HAL_RCC_OscConfig+0x280>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a6e      	ldr	r2, [pc, #440]	; (8002a10 <HAL_RCC_OscConfig+0x280>)
 8002856:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800285a:	6013      	str	r3, [r2, #0]
 800285c:	4b6c      	ldr	r3, [pc, #432]	; (8002a10 <HAL_RCC_OscConfig+0x280>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a6b      	ldr	r2, [pc, #428]	; (8002a10 <HAL_RCC_OscConfig+0x280>)
 8002862:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002866:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d013      	beq.n	8002898 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002870:	f7fe ff34 	bl	80016dc <HAL_GetTick>
 8002874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002876:	e008      	b.n	800288a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002878:	f7fe ff30 	bl	80016dc <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b64      	cmp	r3, #100	; 0x64
 8002884:	d901      	bls.n	800288a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e21f      	b.n	8002cca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800288a:	4b61      	ldr	r3, [pc, #388]	; (8002a10 <HAL_RCC_OscConfig+0x280>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d0f0      	beq.n	8002878 <HAL_RCC_OscConfig+0xe8>
 8002896:	e014      	b.n	80028c2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002898:	f7fe ff20 	bl	80016dc <HAL_GetTick>
 800289c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800289e:	e008      	b.n	80028b2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028a0:	f7fe ff1c 	bl	80016dc <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b64      	cmp	r3, #100	; 0x64
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e20b      	b.n	8002cca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028b2:	4b57      	ldr	r3, [pc, #348]	; (8002a10 <HAL_RCC_OscConfig+0x280>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1f0      	bne.n	80028a0 <HAL_RCC_OscConfig+0x110>
 80028be:	e000      	b.n	80028c2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d069      	beq.n	80029a2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028ce:	4b50      	ldr	r3, [pc, #320]	; (8002a10 <HAL_RCC_OscConfig+0x280>)
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f003 030c 	and.w	r3, r3, #12
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d00b      	beq.n	80028f2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028da:	4b4d      	ldr	r3, [pc, #308]	; (8002a10 <HAL_RCC_OscConfig+0x280>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f003 030c 	and.w	r3, r3, #12
 80028e2:	2b08      	cmp	r3, #8
 80028e4:	d11c      	bne.n	8002920 <HAL_RCC_OscConfig+0x190>
 80028e6:	4b4a      	ldr	r3, [pc, #296]	; (8002a10 <HAL_RCC_OscConfig+0x280>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d116      	bne.n	8002920 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028f2:	4b47      	ldr	r3, [pc, #284]	; (8002a10 <HAL_RCC_OscConfig+0x280>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d005      	beq.n	800290a <HAL_RCC_OscConfig+0x17a>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	2b01      	cmp	r3, #1
 8002904:	d001      	beq.n	800290a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e1df      	b.n	8002cca <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800290a:	4b41      	ldr	r3, [pc, #260]	; (8002a10 <HAL_RCC_OscConfig+0x280>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	00db      	lsls	r3, r3, #3
 8002918:	493d      	ldr	r1, [pc, #244]	; (8002a10 <HAL_RCC_OscConfig+0x280>)
 800291a:	4313      	orrs	r3, r2
 800291c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800291e:	e040      	b.n	80029a2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d023      	beq.n	8002970 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002928:	4b39      	ldr	r3, [pc, #228]	; (8002a10 <HAL_RCC_OscConfig+0x280>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a38      	ldr	r2, [pc, #224]	; (8002a10 <HAL_RCC_OscConfig+0x280>)
 800292e:	f043 0301 	orr.w	r3, r3, #1
 8002932:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002934:	f7fe fed2 	bl	80016dc <HAL_GetTick>
 8002938:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800293a:	e008      	b.n	800294e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800293c:	f7fe fece 	bl	80016dc <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b02      	cmp	r3, #2
 8002948:	d901      	bls.n	800294e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e1bd      	b.n	8002cca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800294e:	4b30      	ldr	r3, [pc, #192]	; (8002a10 <HAL_RCC_OscConfig+0x280>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d0f0      	beq.n	800293c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800295a:	4b2d      	ldr	r3, [pc, #180]	; (8002a10 <HAL_RCC_OscConfig+0x280>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	4929      	ldr	r1, [pc, #164]	; (8002a10 <HAL_RCC_OscConfig+0x280>)
 800296a:	4313      	orrs	r3, r2
 800296c:	600b      	str	r3, [r1, #0]
 800296e:	e018      	b.n	80029a2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002970:	4b27      	ldr	r3, [pc, #156]	; (8002a10 <HAL_RCC_OscConfig+0x280>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a26      	ldr	r2, [pc, #152]	; (8002a10 <HAL_RCC_OscConfig+0x280>)
 8002976:	f023 0301 	bic.w	r3, r3, #1
 800297a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800297c:	f7fe feae 	bl	80016dc <HAL_GetTick>
 8002980:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002982:	e008      	b.n	8002996 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002984:	f7fe feaa 	bl	80016dc <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b02      	cmp	r3, #2
 8002990:	d901      	bls.n	8002996 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e199      	b.n	8002cca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002996:	4b1e      	ldr	r3, [pc, #120]	; (8002a10 <HAL_RCC_OscConfig+0x280>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d1f0      	bne.n	8002984 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0308 	and.w	r3, r3, #8
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d038      	beq.n	8002a20 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	695b      	ldr	r3, [r3, #20]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d019      	beq.n	80029ea <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029b6:	4b16      	ldr	r3, [pc, #88]	; (8002a10 <HAL_RCC_OscConfig+0x280>)
 80029b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029ba:	4a15      	ldr	r2, [pc, #84]	; (8002a10 <HAL_RCC_OscConfig+0x280>)
 80029bc:	f043 0301 	orr.w	r3, r3, #1
 80029c0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029c2:	f7fe fe8b 	bl	80016dc <HAL_GetTick>
 80029c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029c8:	e008      	b.n	80029dc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029ca:	f7fe fe87 	bl	80016dc <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d901      	bls.n	80029dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e176      	b.n	8002cca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029dc:	4b0c      	ldr	r3, [pc, #48]	; (8002a10 <HAL_RCC_OscConfig+0x280>)
 80029de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029e0:	f003 0302 	and.w	r3, r3, #2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d0f0      	beq.n	80029ca <HAL_RCC_OscConfig+0x23a>
 80029e8:	e01a      	b.n	8002a20 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029ea:	4b09      	ldr	r3, [pc, #36]	; (8002a10 <HAL_RCC_OscConfig+0x280>)
 80029ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029ee:	4a08      	ldr	r2, [pc, #32]	; (8002a10 <HAL_RCC_OscConfig+0x280>)
 80029f0:	f023 0301 	bic.w	r3, r3, #1
 80029f4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f6:	f7fe fe71 	bl	80016dc <HAL_GetTick>
 80029fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029fc:	e00a      	b.n	8002a14 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029fe:	f7fe fe6d 	bl	80016dc <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d903      	bls.n	8002a14 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e15c      	b.n	8002cca <HAL_RCC_OscConfig+0x53a>
 8002a10:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a14:	4b91      	ldr	r3, [pc, #580]	; (8002c5c <HAL_RCC_OscConfig+0x4cc>)
 8002a16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a18:	f003 0302 	and.w	r3, r3, #2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d1ee      	bne.n	80029fe <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0304 	and.w	r3, r3, #4
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	f000 80a4 	beq.w	8002b76 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a2e:	4b8b      	ldr	r3, [pc, #556]	; (8002c5c <HAL_RCC_OscConfig+0x4cc>)
 8002a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d10d      	bne.n	8002a56 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a3a:	4b88      	ldr	r3, [pc, #544]	; (8002c5c <HAL_RCC_OscConfig+0x4cc>)
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3e:	4a87      	ldr	r2, [pc, #540]	; (8002c5c <HAL_RCC_OscConfig+0x4cc>)
 8002a40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a44:	6413      	str	r3, [r2, #64]	; 0x40
 8002a46:	4b85      	ldr	r3, [pc, #532]	; (8002c5c <HAL_RCC_OscConfig+0x4cc>)
 8002a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a4e:	60bb      	str	r3, [r7, #8]
 8002a50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a52:	2301      	movs	r3, #1
 8002a54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a56:	4b82      	ldr	r3, [pc, #520]	; (8002c60 <HAL_RCC_OscConfig+0x4d0>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d118      	bne.n	8002a94 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002a62:	4b7f      	ldr	r3, [pc, #508]	; (8002c60 <HAL_RCC_OscConfig+0x4d0>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a7e      	ldr	r2, [pc, #504]	; (8002c60 <HAL_RCC_OscConfig+0x4d0>)
 8002a68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a6e:	f7fe fe35 	bl	80016dc <HAL_GetTick>
 8002a72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a74:	e008      	b.n	8002a88 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a76:	f7fe fe31 	bl	80016dc <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b64      	cmp	r3, #100	; 0x64
 8002a82:	d901      	bls.n	8002a88 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e120      	b.n	8002cca <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a88:	4b75      	ldr	r3, [pc, #468]	; (8002c60 <HAL_RCC_OscConfig+0x4d0>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d0f0      	beq.n	8002a76 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d106      	bne.n	8002aaa <HAL_RCC_OscConfig+0x31a>
 8002a9c:	4b6f      	ldr	r3, [pc, #444]	; (8002c5c <HAL_RCC_OscConfig+0x4cc>)
 8002a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa0:	4a6e      	ldr	r2, [pc, #440]	; (8002c5c <HAL_RCC_OscConfig+0x4cc>)
 8002aa2:	f043 0301 	orr.w	r3, r3, #1
 8002aa6:	6713      	str	r3, [r2, #112]	; 0x70
 8002aa8:	e02d      	b.n	8002b06 <HAL_RCC_OscConfig+0x376>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d10c      	bne.n	8002acc <HAL_RCC_OscConfig+0x33c>
 8002ab2:	4b6a      	ldr	r3, [pc, #424]	; (8002c5c <HAL_RCC_OscConfig+0x4cc>)
 8002ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab6:	4a69      	ldr	r2, [pc, #420]	; (8002c5c <HAL_RCC_OscConfig+0x4cc>)
 8002ab8:	f023 0301 	bic.w	r3, r3, #1
 8002abc:	6713      	str	r3, [r2, #112]	; 0x70
 8002abe:	4b67      	ldr	r3, [pc, #412]	; (8002c5c <HAL_RCC_OscConfig+0x4cc>)
 8002ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac2:	4a66      	ldr	r2, [pc, #408]	; (8002c5c <HAL_RCC_OscConfig+0x4cc>)
 8002ac4:	f023 0304 	bic.w	r3, r3, #4
 8002ac8:	6713      	str	r3, [r2, #112]	; 0x70
 8002aca:	e01c      	b.n	8002b06 <HAL_RCC_OscConfig+0x376>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	2b05      	cmp	r3, #5
 8002ad2:	d10c      	bne.n	8002aee <HAL_RCC_OscConfig+0x35e>
 8002ad4:	4b61      	ldr	r3, [pc, #388]	; (8002c5c <HAL_RCC_OscConfig+0x4cc>)
 8002ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad8:	4a60      	ldr	r2, [pc, #384]	; (8002c5c <HAL_RCC_OscConfig+0x4cc>)
 8002ada:	f043 0304 	orr.w	r3, r3, #4
 8002ade:	6713      	str	r3, [r2, #112]	; 0x70
 8002ae0:	4b5e      	ldr	r3, [pc, #376]	; (8002c5c <HAL_RCC_OscConfig+0x4cc>)
 8002ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae4:	4a5d      	ldr	r2, [pc, #372]	; (8002c5c <HAL_RCC_OscConfig+0x4cc>)
 8002ae6:	f043 0301 	orr.w	r3, r3, #1
 8002aea:	6713      	str	r3, [r2, #112]	; 0x70
 8002aec:	e00b      	b.n	8002b06 <HAL_RCC_OscConfig+0x376>
 8002aee:	4b5b      	ldr	r3, [pc, #364]	; (8002c5c <HAL_RCC_OscConfig+0x4cc>)
 8002af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af2:	4a5a      	ldr	r2, [pc, #360]	; (8002c5c <HAL_RCC_OscConfig+0x4cc>)
 8002af4:	f023 0301 	bic.w	r3, r3, #1
 8002af8:	6713      	str	r3, [r2, #112]	; 0x70
 8002afa:	4b58      	ldr	r3, [pc, #352]	; (8002c5c <HAL_RCC_OscConfig+0x4cc>)
 8002afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002afe:	4a57      	ldr	r2, [pc, #348]	; (8002c5c <HAL_RCC_OscConfig+0x4cc>)
 8002b00:	f023 0304 	bic.w	r3, r3, #4
 8002b04:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d015      	beq.n	8002b3a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b0e:	f7fe fde5 	bl	80016dc <HAL_GetTick>
 8002b12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b14:	e00a      	b.n	8002b2c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b16:	f7fe fde1 	bl	80016dc <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d901      	bls.n	8002b2c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e0ce      	b.n	8002cca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b2c:	4b4b      	ldr	r3, [pc, #300]	; (8002c5c <HAL_RCC_OscConfig+0x4cc>)
 8002b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b30:	f003 0302 	and.w	r3, r3, #2
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d0ee      	beq.n	8002b16 <HAL_RCC_OscConfig+0x386>
 8002b38:	e014      	b.n	8002b64 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b3a:	f7fe fdcf 	bl	80016dc <HAL_GetTick>
 8002b3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b40:	e00a      	b.n	8002b58 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b42:	f7fe fdcb 	bl	80016dc <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d901      	bls.n	8002b58 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e0b8      	b.n	8002cca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b58:	4b40      	ldr	r3, [pc, #256]	; (8002c5c <HAL_RCC_OscConfig+0x4cc>)
 8002b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b5c:	f003 0302 	and.w	r3, r3, #2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d1ee      	bne.n	8002b42 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b64:	7dfb      	ldrb	r3, [r7, #23]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d105      	bne.n	8002b76 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b6a:	4b3c      	ldr	r3, [pc, #240]	; (8002c5c <HAL_RCC_OscConfig+0x4cc>)
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6e:	4a3b      	ldr	r2, [pc, #236]	; (8002c5c <HAL_RCC_OscConfig+0x4cc>)
 8002b70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b74:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	699b      	ldr	r3, [r3, #24]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	f000 80a4 	beq.w	8002cc8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b80:	4b36      	ldr	r3, [pc, #216]	; (8002c5c <HAL_RCC_OscConfig+0x4cc>)
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f003 030c 	and.w	r3, r3, #12
 8002b88:	2b08      	cmp	r3, #8
 8002b8a:	d06b      	beq.n	8002c64 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	699b      	ldr	r3, [r3, #24]
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d149      	bne.n	8002c28 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b94:	4b31      	ldr	r3, [pc, #196]	; (8002c5c <HAL_RCC_OscConfig+0x4cc>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a30      	ldr	r2, [pc, #192]	; (8002c5c <HAL_RCC_OscConfig+0x4cc>)
 8002b9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba0:	f7fe fd9c 	bl	80016dc <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ba6:	e008      	b.n	8002bba <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ba8:	f7fe fd98 	bl	80016dc <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e087      	b.n	8002cca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bba:	4b28      	ldr	r3, [pc, #160]	; (8002c5c <HAL_RCC_OscConfig+0x4cc>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1f0      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	69da      	ldr	r2, [r3, #28]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a1b      	ldr	r3, [r3, #32]
 8002bce:	431a      	orrs	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd4:	019b      	lsls	r3, r3, #6
 8002bd6:	431a      	orrs	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bdc:	085b      	lsrs	r3, r3, #1
 8002bde:	3b01      	subs	r3, #1
 8002be0:	041b      	lsls	r3, r3, #16
 8002be2:	431a      	orrs	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be8:	061b      	lsls	r3, r3, #24
 8002bea:	4313      	orrs	r3, r2
 8002bec:	4a1b      	ldr	r2, [pc, #108]	; (8002c5c <HAL_RCC_OscConfig+0x4cc>)
 8002bee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002bf2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bf4:	4b19      	ldr	r3, [pc, #100]	; (8002c5c <HAL_RCC_OscConfig+0x4cc>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a18      	ldr	r2, [pc, #96]	; (8002c5c <HAL_RCC_OscConfig+0x4cc>)
 8002bfa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c00:	f7fe fd6c 	bl	80016dc <HAL_GetTick>
 8002c04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c06:	e008      	b.n	8002c1a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c08:	f7fe fd68 	bl	80016dc <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e057      	b.n	8002cca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c1a:	4b10      	ldr	r3, [pc, #64]	; (8002c5c <HAL_RCC_OscConfig+0x4cc>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d0f0      	beq.n	8002c08 <HAL_RCC_OscConfig+0x478>
 8002c26:	e04f      	b.n	8002cc8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c28:	4b0c      	ldr	r3, [pc, #48]	; (8002c5c <HAL_RCC_OscConfig+0x4cc>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a0b      	ldr	r2, [pc, #44]	; (8002c5c <HAL_RCC_OscConfig+0x4cc>)
 8002c2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c34:	f7fe fd52 	bl	80016dc <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c3c:	f7fe fd4e 	bl	80016dc <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e03d      	b.n	8002cca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c4e:	4b03      	ldr	r3, [pc, #12]	; (8002c5c <HAL_RCC_OscConfig+0x4cc>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1f0      	bne.n	8002c3c <HAL_RCC_OscConfig+0x4ac>
 8002c5a:	e035      	b.n	8002cc8 <HAL_RCC_OscConfig+0x538>
 8002c5c:	40023800 	.word	0x40023800
 8002c60:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002c64:	4b1b      	ldr	r3, [pc, #108]	; (8002cd4 <HAL_RCC_OscConfig+0x544>)
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	699b      	ldr	r3, [r3, #24]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d028      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d121      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d11a      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c8e:	68fa      	ldr	r2, [r7, #12]
 8002c90:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c94:	4013      	ands	r3, r2
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c9a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d111      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002caa:	085b      	lsrs	r3, r3, #1
 8002cac:	3b01      	subs	r3, #1
 8002cae:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d107      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cbe:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d001      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e000      	b.n	8002cca <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3718      	adds	r7, #24
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	40023800 	.word	0x40023800

08002cd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d101      	bne.n	8002cf0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e0d0      	b.n	8002e92 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cf0:	4b6a      	ldr	r3, [pc, #424]	; (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 030f 	and.w	r3, r3, #15
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d910      	bls.n	8002d20 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cfe:	4b67      	ldr	r3, [pc, #412]	; (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f023 020f 	bic.w	r2, r3, #15
 8002d06:	4965      	ldr	r1, [pc, #404]	; (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d0e:	4b63      	ldr	r3, [pc, #396]	; (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 030f 	and.w	r3, r3, #15
 8002d16:	683a      	ldr	r2, [r7, #0]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d001      	beq.n	8002d20 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e0b8      	b.n	8002e92 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0302 	and.w	r3, r3, #2
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d020      	beq.n	8002d6e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0304 	and.w	r3, r3, #4
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d005      	beq.n	8002d44 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d38:	4b59      	ldr	r3, [pc, #356]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	4a58      	ldr	r2, [pc, #352]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8002d3e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d42:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0308 	and.w	r3, r3, #8
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d005      	beq.n	8002d5c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d50:	4b53      	ldr	r3, [pc, #332]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	4a52      	ldr	r2, [pc, #328]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8002d56:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d5a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d5c:	4b50      	ldr	r3, [pc, #320]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	494d      	ldr	r1, [pc, #308]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d040      	beq.n	8002dfc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d107      	bne.n	8002d92 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d82:	4b47      	ldr	r3, [pc, #284]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d115      	bne.n	8002dba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e07f      	b.n	8002e92 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d107      	bne.n	8002daa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d9a:	4b41      	ldr	r3, [pc, #260]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d109      	bne.n	8002dba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e073      	b.n	8002e92 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002daa:	4b3d      	ldr	r3, [pc, #244]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e06b      	b.n	8002e92 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dba:	4b39      	ldr	r3, [pc, #228]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f023 0203 	bic.w	r2, r3, #3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	4936      	ldr	r1, [pc, #216]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dcc:	f7fe fc86 	bl	80016dc <HAL_GetTick>
 8002dd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dd2:	e00a      	b.n	8002dea <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dd4:	f7fe fc82 	bl	80016dc <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	f241 3288 	movw	r2, #5000	; 0x1388
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e053      	b.n	8002e92 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dea:	4b2d      	ldr	r3, [pc, #180]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f003 020c 	and.w	r2, r3, #12
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d1eb      	bne.n	8002dd4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002dfc:	4b27      	ldr	r3, [pc, #156]	; (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 030f 	and.w	r3, r3, #15
 8002e04:	683a      	ldr	r2, [r7, #0]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d210      	bcs.n	8002e2c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e0a:	4b24      	ldr	r3, [pc, #144]	; (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f023 020f 	bic.w	r2, r3, #15
 8002e12:	4922      	ldr	r1, [pc, #136]	; (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e1a:	4b20      	ldr	r3, [pc, #128]	; (8002e9c <HAL_RCC_ClockConfig+0x1c4>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 030f 	and.w	r3, r3, #15
 8002e22:	683a      	ldr	r2, [r7, #0]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d001      	beq.n	8002e2c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e032      	b.n	8002e92 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0304 	and.w	r3, r3, #4
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d008      	beq.n	8002e4a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e38:	4b19      	ldr	r3, [pc, #100]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	4916      	ldr	r1, [pc, #88]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0308 	and.w	r3, r3, #8
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d009      	beq.n	8002e6a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e56:	4b12      	ldr	r3, [pc, #72]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	00db      	lsls	r3, r3, #3
 8002e64:	490e      	ldr	r1, [pc, #56]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e6a:	f000 f821 	bl	8002eb0 <HAL_RCC_GetSysClockFreq>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	4b0b      	ldr	r3, [pc, #44]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	091b      	lsrs	r3, r3, #4
 8002e76:	f003 030f 	and.w	r3, r3, #15
 8002e7a:	490a      	ldr	r1, [pc, #40]	; (8002ea4 <HAL_RCC_ClockConfig+0x1cc>)
 8002e7c:	5ccb      	ldrb	r3, [r1, r3]
 8002e7e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e82:	4a09      	ldr	r2, [pc, #36]	; (8002ea8 <HAL_RCC_ClockConfig+0x1d0>)
 8002e84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e86:	4b09      	ldr	r3, [pc, #36]	; (8002eac <HAL_RCC_ClockConfig+0x1d4>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7fe fbe2 	bl	8001654 <HAL_InitTick>

  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3710      	adds	r7, #16
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	40023c00 	.word	0x40023c00
 8002ea0:	40023800 	.word	0x40023800
 8002ea4:	080065d8 	.word	0x080065d8
 8002ea8:	20000018 	.word	0x20000018
 8002eac:	2000001c 	.word	0x2000001c

08002eb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002eb0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002eb4:	b084      	sub	sp, #16
 8002eb6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	607b      	str	r3, [r7, #4]
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	60fb      	str	r3, [r7, #12]
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ec8:	4b67      	ldr	r3, [pc, #412]	; (8003068 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f003 030c 	and.w	r3, r3, #12
 8002ed0:	2b08      	cmp	r3, #8
 8002ed2:	d00d      	beq.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x40>
 8002ed4:	2b08      	cmp	r3, #8
 8002ed6:	f200 80bd 	bhi.w	8003054 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d002      	beq.n	8002ee4 <HAL_RCC_GetSysClockFreq+0x34>
 8002ede:	2b04      	cmp	r3, #4
 8002ee0:	d003      	beq.n	8002eea <HAL_RCC_GetSysClockFreq+0x3a>
 8002ee2:	e0b7      	b.n	8003054 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ee4:	4b61      	ldr	r3, [pc, #388]	; (800306c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002ee6:	60bb      	str	r3, [r7, #8]
      break;
 8002ee8:	e0b7      	b.n	800305a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002eea:	4b61      	ldr	r3, [pc, #388]	; (8003070 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002eec:	60bb      	str	r3, [r7, #8]
      break;
 8002eee:	e0b4      	b.n	800305a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ef0:	4b5d      	ldr	r3, [pc, #372]	; (8003068 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ef8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002efa:	4b5b      	ldr	r3, [pc, #364]	; (8003068 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d04d      	beq.n	8002fa2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f06:	4b58      	ldr	r3, [pc, #352]	; (8003068 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	099b      	lsrs	r3, r3, #6
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	f04f 0300 	mov.w	r3, #0
 8002f12:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002f16:	f04f 0100 	mov.w	r1, #0
 8002f1a:	ea02 0800 	and.w	r8, r2, r0
 8002f1e:	ea03 0901 	and.w	r9, r3, r1
 8002f22:	4640      	mov	r0, r8
 8002f24:	4649      	mov	r1, r9
 8002f26:	f04f 0200 	mov.w	r2, #0
 8002f2a:	f04f 0300 	mov.w	r3, #0
 8002f2e:	014b      	lsls	r3, r1, #5
 8002f30:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002f34:	0142      	lsls	r2, r0, #5
 8002f36:	4610      	mov	r0, r2
 8002f38:	4619      	mov	r1, r3
 8002f3a:	ebb0 0008 	subs.w	r0, r0, r8
 8002f3e:	eb61 0109 	sbc.w	r1, r1, r9
 8002f42:	f04f 0200 	mov.w	r2, #0
 8002f46:	f04f 0300 	mov.w	r3, #0
 8002f4a:	018b      	lsls	r3, r1, #6
 8002f4c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002f50:	0182      	lsls	r2, r0, #6
 8002f52:	1a12      	subs	r2, r2, r0
 8002f54:	eb63 0301 	sbc.w	r3, r3, r1
 8002f58:	f04f 0000 	mov.w	r0, #0
 8002f5c:	f04f 0100 	mov.w	r1, #0
 8002f60:	00d9      	lsls	r1, r3, #3
 8002f62:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f66:	00d0      	lsls	r0, r2, #3
 8002f68:	4602      	mov	r2, r0
 8002f6a:	460b      	mov	r3, r1
 8002f6c:	eb12 0208 	adds.w	r2, r2, r8
 8002f70:	eb43 0309 	adc.w	r3, r3, r9
 8002f74:	f04f 0000 	mov.w	r0, #0
 8002f78:	f04f 0100 	mov.w	r1, #0
 8002f7c:	0259      	lsls	r1, r3, #9
 8002f7e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002f82:	0250      	lsls	r0, r2, #9
 8002f84:	4602      	mov	r2, r0
 8002f86:	460b      	mov	r3, r1
 8002f88:	4610      	mov	r0, r2
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	461a      	mov	r2, r3
 8002f90:	f04f 0300 	mov.w	r3, #0
 8002f94:	f7fd f994 	bl	80002c0 <__aeabi_uldivmod>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	60fb      	str	r3, [r7, #12]
 8002fa0:	e04a      	b.n	8003038 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fa2:	4b31      	ldr	r3, [pc, #196]	; (8003068 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	099b      	lsrs	r3, r3, #6
 8002fa8:	461a      	mov	r2, r3
 8002faa:	f04f 0300 	mov.w	r3, #0
 8002fae:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002fb2:	f04f 0100 	mov.w	r1, #0
 8002fb6:	ea02 0400 	and.w	r4, r2, r0
 8002fba:	ea03 0501 	and.w	r5, r3, r1
 8002fbe:	4620      	mov	r0, r4
 8002fc0:	4629      	mov	r1, r5
 8002fc2:	f04f 0200 	mov.w	r2, #0
 8002fc6:	f04f 0300 	mov.w	r3, #0
 8002fca:	014b      	lsls	r3, r1, #5
 8002fcc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002fd0:	0142      	lsls	r2, r0, #5
 8002fd2:	4610      	mov	r0, r2
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	1b00      	subs	r0, r0, r4
 8002fd8:	eb61 0105 	sbc.w	r1, r1, r5
 8002fdc:	f04f 0200 	mov.w	r2, #0
 8002fe0:	f04f 0300 	mov.w	r3, #0
 8002fe4:	018b      	lsls	r3, r1, #6
 8002fe6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002fea:	0182      	lsls	r2, r0, #6
 8002fec:	1a12      	subs	r2, r2, r0
 8002fee:	eb63 0301 	sbc.w	r3, r3, r1
 8002ff2:	f04f 0000 	mov.w	r0, #0
 8002ff6:	f04f 0100 	mov.w	r1, #0
 8002ffa:	00d9      	lsls	r1, r3, #3
 8002ffc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003000:	00d0      	lsls	r0, r2, #3
 8003002:	4602      	mov	r2, r0
 8003004:	460b      	mov	r3, r1
 8003006:	1912      	adds	r2, r2, r4
 8003008:	eb45 0303 	adc.w	r3, r5, r3
 800300c:	f04f 0000 	mov.w	r0, #0
 8003010:	f04f 0100 	mov.w	r1, #0
 8003014:	0299      	lsls	r1, r3, #10
 8003016:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800301a:	0290      	lsls	r0, r2, #10
 800301c:	4602      	mov	r2, r0
 800301e:	460b      	mov	r3, r1
 8003020:	4610      	mov	r0, r2
 8003022:	4619      	mov	r1, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	461a      	mov	r2, r3
 8003028:	f04f 0300 	mov.w	r3, #0
 800302c:	f7fd f948 	bl	80002c0 <__aeabi_uldivmod>
 8003030:	4602      	mov	r2, r0
 8003032:	460b      	mov	r3, r1
 8003034:	4613      	mov	r3, r2
 8003036:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003038:	4b0b      	ldr	r3, [pc, #44]	; (8003068 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	0c1b      	lsrs	r3, r3, #16
 800303e:	f003 0303 	and.w	r3, r3, #3
 8003042:	3301      	adds	r3, #1
 8003044:	005b      	lsls	r3, r3, #1
 8003046:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003048:	68fa      	ldr	r2, [r7, #12]
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003050:	60bb      	str	r3, [r7, #8]
      break;
 8003052:	e002      	b.n	800305a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003054:	4b05      	ldr	r3, [pc, #20]	; (800306c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003056:	60bb      	str	r3, [r7, #8]
      break;
 8003058:	bf00      	nop
    }
  }
  return sysclockfreq;
 800305a:	68bb      	ldr	r3, [r7, #8]
}
 800305c:	4618      	mov	r0, r3
 800305e:	3710      	adds	r7, #16
 8003060:	46bd      	mov	sp, r7
 8003062:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003066:	bf00      	nop
 8003068:	40023800 	.word	0x40023800
 800306c:	00f42400 	.word	0x00f42400
 8003070:	007a1200 	.word	0x007a1200

08003074 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003078:	4b03      	ldr	r3, [pc, #12]	; (8003088 <HAL_RCC_GetHCLKFreq+0x14>)
 800307a:	681b      	ldr	r3, [r3, #0]
}
 800307c:	4618      	mov	r0, r3
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	20000018 	.word	0x20000018

0800308c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003090:	f7ff fff0 	bl	8003074 <HAL_RCC_GetHCLKFreq>
 8003094:	4602      	mov	r2, r0
 8003096:	4b05      	ldr	r3, [pc, #20]	; (80030ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	0a9b      	lsrs	r3, r3, #10
 800309c:	f003 0307 	and.w	r3, r3, #7
 80030a0:	4903      	ldr	r1, [pc, #12]	; (80030b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030a2:	5ccb      	ldrb	r3, [r1, r3]
 80030a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	40023800 	.word	0x40023800
 80030b0:	080065e8 	.word	0x080065e8

080030b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80030b8:	f7ff ffdc 	bl	8003074 <HAL_RCC_GetHCLKFreq>
 80030bc:	4602      	mov	r2, r0
 80030be:	4b05      	ldr	r3, [pc, #20]	; (80030d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	0b5b      	lsrs	r3, r3, #13
 80030c4:	f003 0307 	and.w	r3, r3, #7
 80030c8:	4903      	ldr	r1, [pc, #12]	; (80030d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030ca:	5ccb      	ldrb	r3, [r1, r3]
 80030cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	40023800 	.word	0x40023800
 80030d8:	080065e8 	.word	0x080065e8

080030dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b088      	sub	sp, #32
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80030e4:	2300      	movs	r3, #0
 80030e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80030e8:	2300      	movs	r3, #0
 80030ea:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80030ec:	2300      	movs	r3, #0
 80030ee:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80030f0:	2300      	movs	r3, #0
 80030f2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80030f4:	2300      	movs	r3, #0
 80030f6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0301 	and.w	r3, r3, #1
 8003100:	2b00      	cmp	r3, #0
 8003102:	d012      	beq.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003104:	4b69      	ldr	r3, [pc, #420]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	4a68      	ldr	r2, [pc, #416]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800310a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800310e:	6093      	str	r3, [r2, #8]
 8003110:	4b66      	ldr	r3, [pc, #408]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003112:	689a      	ldr	r2, [r3, #8]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003118:	4964      	ldr	r1, [pc, #400]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800311a:	4313      	orrs	r3, r2
 800311c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003122:	2b00      	cmp	r3, #0
 8003124:	d101      	bne.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003126:	2301      	movs	r3, #1
 8003128:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d017      	beq.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003136:	4b5d      	ldr	r3, [pc, #372]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003138:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800313c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003144:	4959      	ldr	r1, [pc, #356]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003146:	4313      	orrs	r3, r2
 8003148:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003150:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003154:	d101      	bne.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003156:	2301      	movs	r3, #1
 8003158:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800315e:	2b00      	cmp	r3, #0
 8003160:	d101      	bne.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003162:	2301      	movs	r3, #1
 8003164:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d017      	beq.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003172:	4b4e      	ldr	r3, [pc, #312]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003174:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003178:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003180:	494a      	ldr	r1, [pc, #296]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003182:	4313      	orrs	r3, r2
 8003184:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003190:	d101      	bne.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003192:	2301      	movs	r3, #1
 8003194:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319a:	2b00      	cmp	r3, #0
 800319c:	d101      	bne.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800319e:	2301      	movs	r3, #1
 80031a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d001      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80031ae:	2301      	movs	r3, #1
 80031b0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0320 	and.w	r3, r3, #32
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	f000 808b 	beq.w	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80031c0:	4b3a      	ldr	r3, [pc, #232]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c4:	4a39      	ldr	r2, [pc, #228]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031ca:	6413      	str	r3, [r2, #64]	; 0x40
 80031cc:	4b37      	ldr	r3, [pc, #220]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031d4:	60bb      	str	r3, [r7, #8]
 80031d6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80031d8:	4b35      	ldr	r3, [pc, #212]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a34      	ldr	r2, [pc, #208]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80031de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031e4:	f7fe fa7a 	bl	80016dc <HAL_GetTick>
 80031e8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80031ea:	e008      	b.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031ec:	f7fe fa76 	bl	80016dc <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b64      	cmp	r3, #100	; 0x64
 80031f8:	d901      	bls.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e357      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80031fe:	4b2c      	ldr	r3, [pc, #176]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003206:	2b00      	cmp	r3, #0
 8003208:	d0f0      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800320a:	4b28      	ldr	r3, [pc, #160]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800320c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800320e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003212:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d035      	beq.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003222:	693a      	ldr	r2, [r7, #16]
 8003224:	429a      	cmp	r2, r3
 8003226:	d02e      	beq.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003228:	4b20      	ldr	r3, [pc, #128]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800322a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800322c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003230:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003232:	4b1e      	ldr	r3, [pc, #120]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003236:	4a1d      	ldr	r2, [pc, #116]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800323c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800323e:	4b1b      	ldr	r3, [pc, #108]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003242:	4a1a      	ldr	r2, [pc, #104]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003244:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003248:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800324a:	4a18      	ldr	r2, [pc, #96]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003250:	4b16      	ldr	r3, [pc, #88]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003254:	f003 0301 	and.w	r3, r3, #1
 8003258:	2b01      	cmp	r3, #1
 800325a:	d114      	bne.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800325c:	f7fe fa3e 	bl	80016dc <HAL_GetTick>
 8003260:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003262:	e00a      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003264:	f7fe fa3a 	bl	80016dc <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003272:	4293      	cmp	r3, r2
 8003274:	d901      	bls.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e319      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800327a:	4b0c      	ldr	r3, [pc, #48]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800327c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	2b00      	cmp	r3, #0
 8003284:	d0ee      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800328e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003292:	d111      	bne.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003294:	4b05      	ldr	r3, [pc, #20]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80032a0:	4b04      	ldr	r3, [pc, #16]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80032a2:	400b      	ands	r3, r1
 80032a4:	4901      	ldr	r1, [pc, #4]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	608b      	str	r3, [r1, #8]
 80032aa:	e00b      	b.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80032ac:	40023800 	.word	0x40023800
 80032b0:	40007000 	.word	0x40007000
 80032b4:	0ffffcff 	.word	0x0ffffcff
 80032b8:	4bb1      	ldr	r3, [pc, #708]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	4ab0      	ldr	r2, [pc, #704]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80032be:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80032c2:	6093      	str	r3, [r2, #8]
 80032c4:	4bae      	ldr	r3, [pc, #696]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80032c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032d0:	49ab      	ldr	r1, [pc, #684]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80032d2:	4313      	orrs	r3, r2
 80032d4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0310 	and.w	r3, r3, #16
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d010      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80032e2:	4ba7      	ldr	r3, [pc, #668]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80032e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032e8:	4aa5      	ldr	r2, [pc, #660]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80032ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032ee:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80032f2:	4ba3      	ldr	r3, [pc, #652]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80032f4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032fc:	49a0      	ldr	r1, [pc, #640]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d00a      	beq.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003310:	4b9b      	ldr	r3, [pc, #620]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003316:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800331e:	4998      	ldr	r1, [pc, #608]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003320:	4313      	orrs	r3, r2
 8003322:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d00a      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003332:	4b93      	ldr	r3, [pc, #588]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003334:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003338:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003340:	498f      	ldr	r1, [pc, #572]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003342:	4313      	orrs	r3, r2
 8003344:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d00a      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003354:	4b8a      	ldr	r3, [pc, #552]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800335a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003362:	4987      	ldr	r1, [pc, #540]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003364:	4313      	orrs	r3, r2
 8003366:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00a      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003376:	4b82      	ldr	r3, [pc, #520]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003378:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800337c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003384:	497e      	ldr	r1, [pc, #504]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003386:	4313      	orrs	r3, r2
 8003388:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003394:	2b00      	cmp	r3, #0
 8003396:	d00a      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003398:	4b79      	ldr	r3, [pc, #484]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800339a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800339e:	f023 0203 	bic.w	r2, r3, #3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a6:	4976      	ldr	r1, [pc, #472]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00a      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033ba:	4b71      	ldr	r3, [pc, #452]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80033bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033c0:	f023 020c 	bic.w	r2, r3, #12
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033c8:	496d      	ldr	r1, [pc, #436]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d00a      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80033dc:	4b68      	ldr	r3, [pc, #416]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80033de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033e2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033ea:	4965      	ldr	r1, [pc, #404]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00a      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80033fe:	4b60      	ldr	r3, [pc, #384]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003404:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800340c:	495c      	ldr	r1, [pc, #368]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800340e:	4313      	orrs	r3, r2
 8003410:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800341c:	2b00      	cmp	r3, #0
 800341e:	d00a      	beq.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003420:	4b57      	ldr	r3, [pc, #348]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003426:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800342e:	4954      	ldr	r1, [pc, #336]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003430:	4313      	orrs	r3, r2
 8003432:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00a      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003442:	4b4f      	ldr	r3, [pc, #316]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003448:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003450:	494b      	ldr	r1, [pc, #300]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003452:	4313      	orrs	r3, r2
 8003454:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d00a      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003464:	4b46      	ldr	r3, [pc, #280]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800346a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003472:	4943      	ldr	r1, [pc, #268]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003474:	4313      	orrs	r3, r2
 8003476:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00a      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003486:	4b3e      	ldr	r3, [pc, #248]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800348c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003494:	493a      	ldr	r1, [pc, #232]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003496:	4313      	orrs	r3, r2
 8003498:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d00a      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80034a8:	4b35      	ldr	r3, [pc, #212]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80034aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ae:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034b6:	4932      	ldr	r1, [pc, #200]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d011      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80034ca:	4b2d      	ldr	r3, [pc, #180]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80034cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034d0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034d8:	4929      	ldr	r1, [pc, #164]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034e8:	d101      	bne.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80034ea:	2301      	movs	r3, #1
 80034ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0308 	and.w	r3, r3, #8
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d001      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80034fa:	2301      	movs	r3, #1
 80034fc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00a      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800350a:	4b1d      	ldr	r3, [pc, #116]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800350c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003510:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003518:	4919      	ldr	r1, [pc, #100]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800351a:	4313      	orrs	r3, r2
 800351c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00b      	beq.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800352c:	4b14      	ldr	r3, [pc, #80]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800352e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003532:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800353c:	4910      	ldr	r1, [pc, #64]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800353e:	4313      	orrs	r3, r2
 8003540:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	2b01      	cmp	r3, #1
 8003548:	d006      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003552:	2b00      	cmp	r3, #0
 8003554:	f000 80d9 	beq.w	800370a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003558:	4b09      	ldr	r3, [pc, #36]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a08      	ldr	r2, [pc, #32]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800355e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003562:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003564:	f7fe f8ba 	bl	80016dc <HAL_GetTick>
 8003568:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800356a:	e00b      	b.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800356c:	f7fe f8b6 	bl	80016dc <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	2b64      	cmp	r3, #100	; 0x64
 8003578:	d904      	bls.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e197      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800357e:	bf00      	nop
 8003580:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003584:	4b6c      	ldr	r3, [pc, #432]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d1ed      	bne.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0301 	and.w	r3, r3, #1
 8003598:	2b00      	cmp	r3, #0
 800359a:	d021      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d11d      	bne.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80035a4:	4b64      	ldr	r3, [pc, #400]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035aa:	0c1b      	lsrs	r3, r3, #16
 80035ac:	f003 0303 	and.w	r3, r3, #3
 80035b0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80035b2:	4b61      	ldr	r3, [pc, #388]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035b8:	0e1b      	lsrs	r3, r3, #24
 80035ba:	f003 030f 	and.w	r3, r3, #15
 80035be:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	019a      	lsls	r2, r3, #6
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	041b      	lsls	r3, r3, #16
 80035ca:	431a      	orrs	r2, r3
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	061b      	lsls	r3, r3, #24
 80035d0:	431a      	orrs	r2, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	071b      	lsls	r3, r3, #28
 80035d8:	4957      	ldr	r1, [pc, #348]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d004      	beq.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035f4:	d00a      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d02e      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003606:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800360a:	d129      	bne.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800360c:	4b4a      	ldr	r3, [pc, #296]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800360e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003612:	0c1b      	lsrs	r3, r3, #16
 8003614:	f003 0303 	and.w	r3, r3, #3
 8003618:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800361a:	4b47      	ldr	r3, [pc, #284]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800361c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003620:	0f1b      	lsrs	r3, r3, #28
 8003622:	f003 0307 	and.w	r3, r3, #7
 8003626:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	019a      	lsls	r2, r3, #6
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	041b      	lsls	r3, r3, #16
 8003632:	431a      	orrs	r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	061b      	lsls	r3, r3, #24
 800363a:	431a      	orrs	r2, r3
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	071b      	lsls	r3, r3, #28
 8003640:	493d      	ldr	r1, [pc, #244]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003642:	4313      	orrs	r3, r2
 8003644:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003648:	4b3b      	ldr	r3, [pc, #236]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800364a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800364e:	f023 021f 	bic.w	r2, r3, #31
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003656:	3b01      	subs	r3, #1
 8003658:	4937      	ldr	r1, [pc, #220]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800365a:	4313      	orrs	r3, r2
 800365c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d01d      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800366c:	4b32      	ldr	r3, [pc, #200]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800366e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003672:	0e1b      	lsrs	r3, r3, #24
 8003674:	f003 030f 	and.w	r3, r3, #15
 8003678:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800367a:	4b2f      	ldr	r3, [pc, #188]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800367c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003680:	0f1b      	lsrs	r3, r3, #28
 8003682:	f003 0307 	and.w	r3, r3, #7
 8003686:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	019a      	lsls	r2, r3, #6
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	041b      	lsls	r3, r3, #16
 8003694:	431a      	orrs	r2, r3
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	061b      	lsls	r3, r3, #24
 800369a:	431a      	orrs	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	071b      	lsls	r3, r3, #28
 80036a0:	4925      	ldr	r1, [pc, #148]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d011      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	019a      	lsls	r2, r3, #6
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	041b      	lsls	r3, r3, #16
 80036c0:	431a      	orrs	r2, r3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	061b      	lsls	r3, r3, #24
 80036c8:	431a      	orrs	r2, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	071b      	lsls	r3, r3, #28
 80036d0:	4919      	ldr	r1, [pc, #100]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80036d8:	4b17      	ldr	r3, [pc, #92]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a16      	ldr	r2, [pc, #88]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80036e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036e4:	f7fd fffa 	bl	80016dc <HAL_GetTick>
 80036e8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80036ea:	e008      	b.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80036ec:	f7fd fff6 	bl	80016dc <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b64      	cmp	r3, #100	; 0x64
 80036f8:	d901      	bls.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e0d7      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80036fe:	4b0e      	ldr	r3, [pc, #56]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d0f0      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	2b01      	cmp	r3, #1
 800370e:	f040 80cd 	bne.w	80038ac <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003712:	4b09      	ldr	r3, [pc, #36]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a08      	ldr	r2, [pc, #32]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003718:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800371c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800371e:	f7fd ffdd 	bl	80016dc <HAL_GetTick>
 8003722:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003724:	e00a      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003726:	f7fd ffd9 	bl	80016dc <HAL_GetTick>
 800372a:	4602      	mov	r2, r0
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	2b64      	cmp	r3, #100	; 0x64
 8003732:	d903      	bls.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e0ba      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003738:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800373c:	4b5e      	ldr	r3, [pc, #376]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003744:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003748:	d0ed      	beq.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d003      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800375a:	2b00      	cmp	r3, #0
 800375c:	d009      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003766:	2b00      	cmp	r3, #0
 8003768:	d02e      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376e:	2b00      	cmp	r3, #0
 8003770:	d12a      	bne.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003772:	4b51      	ldr	r3, [pc, #324]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003778:	0c1b      	lsrs	r3, r3, #16
 800377a:	f003 0303 	and.w	r3, r3, #3
 800377e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003780:	4b4d      	ldr	r3, [pc, #308]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003786:	0f1b      	lsrs	r3, r3, #28
 8003788:	f003 0307 	and.w	r3, r3, #7
 800378c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	695b      	ldr	r3, [r3, #20]
 8003792:	019a      	lsls	r2, r3, #6
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	041b      	lsls	r3, r3, #16
 8003798:	431a      	orrs	r2, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	061b      	lsls	r3, r3, #24
 80037a0:	431a      	orrs	r2, r3
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	071b      	lsls	r3, r3, #28
 80037a6:	4944      	ldr	r1, [pc, #272]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037a8:	4313      	orrs	r3, r2
 80037aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80037ae:	4b42      	ldr	r3, [pc, #264]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037b4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037bc:	3b01      	subs	r3, #1
 80037be:	021b      	lsls	r3, r3, #8
 80037c0:	493d      	ldr	r1, [pc, #244]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d022      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037dc:	d11d      	bne.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80037de:	4b36      	ldr	r3, [pc, #216]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e4:	0e1b      	lsrs	r3, r3, #24
 80037e6:	f003 030f 	and.w	r3, r3, #15
 80037ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80037ec:	4b32      	ldr	r3, [pc, #200]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037f2:	0f1b      	lsrs	r3, r3, #28
 80037f4:	f003 0307 	and.w	r3, r3, #7
 80037f8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	019a      	lsls	r2, r3, #6
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a1b      	ldr	r3, [r3, #32]
 8003804:	041b      	lsls	r3, r3, #16
 8003806:	431a      	orrs	r2, r3
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	061b      	lsls	r3, r3, #24
 800380c:	431a      	orrs	r2, r3
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	071b      	lsls	r3, r3, #28
 8003812:	4929      	ldr	r1, [pc, #164]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003814:	4313      	orrs	r3, r2
 8003816:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0308 	and.w	r3, r3, #8
 8003822:	2b00      	cmp	r3, #0
 8003824:	d028      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003826:	4b24      	ldr	r3, [pc, #144]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800382c:	0e1b      	lsrs	r3, r3, #24
 800382e:	f003 030f 	and.w	r3, r3, #15
 8003832:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003834:	4b20      	ldr	r3, [pc, #128]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800383a:	0c1b      	lsrs	r3, r3, #16
 800383c:	f003 0303 	and.w	r3, r3, #3
 8003840:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	019a      	lsls	r2, r3, #6
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	041b      	lsls	r3, r3, #16
 800384c:	431a      	orrs	r2, r3
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	061b      	lsls	r3, r3, #24
 8003852:	431a      	orrs	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	69db      	ldr	r3, [r3, #28]
 8003858:	071b      	lsls	r3, r3, #28
 800385a:	4917      	ldr	r1, [pc, #92]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800385c:	4313      	orrs	r3, r2
 800385e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003862:	4b15      	ldr	r3, [pc, #84]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003864:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003868:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003870:	4911      	ldr	r1, [pc, #68]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003872:	4313      	orrs	r3, r2
 8003874:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003878:	4b0f      	ldr	r3, [pc, #60]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a0e      	ldr	r2, [pc, #56]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800387e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003882:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003884:	f7fd ff2a 	bl	80016dc <HAL_GetTick>
 8003888:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800388a:	e008      	b.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800388c:	f7fd ff26 	bl	80016dc <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	2b64      	cmp	r3, #100	; 0x64
 8003898:	d901      	bls.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e007      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800389e:	4b06      	ldr	r3, [pc, #24]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038aa:	d1ef      	bne.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3720      	adds	r7, #32
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	40023800 	.word	0x40023800

080038bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d101      	bne.n	80038ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e049      	b.n	8003962 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d106      	bne.n	80038e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f7fd fc54 	bl	8001190 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2202      	movs	r2, #2
 80038ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	3304      	adds	r3, #4
 80038f8:	4619      	mov	r1, r3
 80038fa:	4610      	mov	r0, r2
 80038fc:	f000 fdd6 	bl	80044ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3708      	adds	r7, #8
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
	...

0800396c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800396c:	b480      	push	{r7}
 800396e:	b085      	sub	sp, #20
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800397a:	b2db      	uxtb	r3, r3
 800397c:	2b01      	cmp	r3, #1
 800397e:	d001      	beq.n	8003984 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e054      	b.n	8003a2e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2202      	movs	r2, #2
 8003988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68da      	ldr	r2, [r3, #12]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f042 0201 	orr.w	r2, r2, #1
 800399a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a26      	ldr	r2, [pc, #152]	; (8003a3c <HAL_TIM_Base_Start_IT+0xd0>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d022      	beq.n	80039ec <HAL_TIM_Base_Start_IT+0x80>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039ae:	d01d      	beq.n	80039ec <HAL_TIM_Base_Start_IT+0x80>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a22      	ldr	r2, [pc, #136]	; (8003a40 <HAL_TIM_Base_Start_IT+0xd4>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d018      	beq.n	80039ec <HAL_TIM_Base_Start_IT+0x80>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a21      	ldr	r2, [pc, #132]	; (8003a44 <HAL_TIM_Base_Start_IT+0xd8>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d013      	beq.n	80039ec <HAL_TIM_Base_Start_IT+0x80>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a1f      	ldr	r2, [pc, #124]	; (8003a48 <HAL_TIM_Base_Start_IT+0xdc>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d00e      	beq.n	80039ec <HAL_TIM_Base_Start_IT+0x80>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a1e      	ldr	r2, [pc, #120]	; (8003a4c <HAL_TIM_Base_Start_IT+0xe0>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d009      	beq.n	80039ec <HAL_TIM_Base_Start_IT+0x80>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a1c      	ldr	r2, [pc, #112]	; (8003a50 <HAL_TIM_Base_Start_IT+0xe4>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d004      	beq.n	80039ec <HAL_TIM_Base_Start_IT+0x80>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a1b      	ldr	r2, [pc, #108]	; (8003a54 <HAL_TIM_Base_Start_IT+0xe8>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d115      	bne.n	8003a18 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	689a      	ldr	r2, [r3, #8]
 80039f2:	4b19      	ldr	r3, [pc, #100]	; (8003a58 <HAL_TIM_Base_Start_IT+0xec>)
 80039f4:	4013      	ands	r3, r2
 80039f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2b06      	cmp	r3, #6
 80039fc:	d015      	beq.n	8003a2a <HAL_TIM_Base_Start_IT+0xbe>
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a04:	d011      	beq.n	8003a2a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f042 0201 	orr.w	r2, r2, #1
 8003a14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a16:	e008      	b.n	8003a2a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f042 0201 	orr.w	r2, r2, #1
 8003a26:	601a      	str	r2, [r3, #0]
 8003a28:	e000      	b.n	8003a2c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a2a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3714      	adds	r7, #20
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	40010000 	.word	0x40010000
 8003a40:	40000400 	.word	0x40000400
 8003a44:	40000800 	.word	0x40000800
 8003a48:	40000c00 	.word	0x40000c00
 8003a4c:	40010400 	.word	0x40010400
 8003a50:	40014000 	.word	0x40014000
 8003a54:	40001800 	.word	0x40001800
 8003a58:	00010007 	.word	0x00010007

08003a5c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d101      	bne.n	8003a6e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e049      	b.n	8003b02 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d106      	bne.n	8003a88 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 f841 	bl	8003b0a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2202      	movs	r2, #2
 8003a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	3304      	adds	r3, #4
 8003a98:	4619      	mov	r1, r3
 8003a9a:	4610      	mov	r0, r2
 8003a9c:	f000 fd06 	bl	80044ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3708      	adds	r7, #8
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}

08003b0a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003b0a:	b480      	push	{r7}
 8003b0c:	b083      	sub	sp, #12
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003b12:	bf00      	nop
 8003b14:	370c      	adds	r7, #12
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
	...

08003b20 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d109      	bne.n	8003b44 <HAL_TIM_PWM_Start+0x24>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	bf14      	ite	ne
 8003b3c:	2301      	movne	r3, #1
 8003b3e:	2300      	moveq	r3, #0
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	e03c      	b.n	8003bbe <HAL_TIM_PWM_Start+0x9e>
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	2b04      	cmp	r3, #4
 8003b48:	d109      	bne.n	8003b5e <HAL_TIM_PWM_Start+0x3e>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	bf14      	ite	ne
 8003b56:	2301      	movne	r3, #1
 8003b58:	2300      	moveq	r3, #0
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	e02f      	b.n	8003bbe <HAL_TIM_PWM_Start+0x9e>
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	2b08      	cmp	r3, #8
 8003b62:	d109      	bne.n	8003b78 <HAL_TIM_PWM_Start+0x58>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	bf14      	ite	ne
 8003b70:	2301      	movne	r3, #1
 8003b72:	2300      	moveq	r3, #0
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	e022      	b.n	8003bbe <HAL_TIM_PWM_Start+0x9e>
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	2b0c      	cmp	r3, #12
 8003b7c:	d109      	bne.n	8003b92 <HAL_TIM_PWM_Start+0x72>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	bf14      	ite	ne
 8003b8a:	2301      	movne	r3, #1
 8003b8c:	2300      	moveq	r3, #0
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	e015      	b.n	8003bbe <HAL_TIM_PWM_Start+0x9e>
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	2b10      	cmp	r3, #16
 8003b96:	d109      	bne.n	8003bac <HAL_TIM_PWM_Start+0x8c>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	bf14      	ite	ne
 8003ba4:	2301      	movne	r3, #1
 8003ba6:	2300      	moveq	r3, #0
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	e008      	b.n	8003bbe <HAL_TIM_PWM_Start+0x9e>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	bf14      	ite	ne
 8003bb8:	2301      	movne	r3, #1
 8003bba:	2300      	moveq	r3, #0
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d001      	beq.n	8003bc6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e092      	b.n	8003cec <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d104      	bne.n	8003bd6 <HAL_TIM_PWM_Start+0xb6>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2202      	movs	r2, #2
 8003bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bd4:	e023      	b.n	8003c1e <HAL_TIM_PWM_Start+0xfe>
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	2b04      	cmp	r3, #4
 8003bda:	d104      	bne.n	8003be6 <HAL_TIM_PWM_Start+0xc6>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2202      	movs	r2, #2
 8003be0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003be4:	e01b      	b.n	8003c1e <HAL_TIM_PWM_Start+0xfe>
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	2b08      	cmp	r3, #8
 8003bea:	d104      	bne.n	8003bf6 <HAL_TIM_PWM_Start+0xd6>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2202      	movs	r2, #2
 8003bf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bf4:	e013      	b.n	8003c1e <HAL_TIM_PWM_Start+0xfe>
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	2b0c      	cmp	r3, #12
 8003bfa:	d104      	bne.n	8003c06 <HAL_TIM_PWM_Start+0xe6>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2202      	movs	r2, #2
 8003c00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c04:	e00b      	b.n	8003c1e <HAL_TIM_PWM_Start+0xfe>
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	2b10      	cmp	r3, #16
 8003c0a:	d104      	bne.n	8003c16 <HAL_TIM_PWM_Start+0xf6>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2202      	movs	r2, #2
 8003c10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c14:	e003      	b.n	8003c1e <HAL_TIM_PWM_Start+0xfe>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2202      	movs	r2, #2
 8003c1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2201      	movs	r2, #1
 8003c24:	6839      	ldr	r1, [r7, #0]
 8003c26:	4618      	mov	r0, r3
 8003c28:	f000 ffd8 	bl	8004bdc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a30      	ldr	r2, [pc, #192]	; (8003cf4 <HAL_TIM_PWM_Start+0x1d4>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d004      	beq.n	8003c40 <HAL_TIM_PWM_Start+0x120>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a2f      	ldr	r2, [pc, #188]	; (8003cf8 <HAL_TIM_PWM_Start+0x1d8>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d101      	bne.n	8003c44 <HAL_TIM_PWM_Start+0x124>
 8003c40:	2301      	movs	r3, #1
 8003c42:	e000      	b.n	8003c46 <HAL_TIM_PWM_Start+0x126>
 8003c44:	2300      	movs	r3, #0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d007      	beq.n	8003c5a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c58:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a25      	ldr	r2, [pc, #148]	; (8003cf4 <HAL_TIM_PWM_Start+0x1d4>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d022      	beq.n	8003caa <HAL_TIM_PWM_Start+0x18a>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c6c:	d01d      	beq.n	8003caa <HAL_TIM_PWM_Start+0x18a>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a22      	ldr	r2, [pc, #136]	; (8003cfc <HAL_TIM_PWM_Start+0x1dc>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d018      	beq.n	8003caa <HAL_TIM_PWM_Start+0x18a>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a20      	ldr	r2, [pc, #128]	; (8003d00 <HAL_TIM_PWM_Start+0x1e0>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d013      	beq.n	8003caa <HAL_TIM_PWM_Start+0x18a>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a1f      	ldr	r2, [pc, #124]	; (8003d04 <HAL_TIM_PWM_Start+0x1e4>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d00e      	beq.n	8003caa <HAL_TIM_PWM_Start+0x18a>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a19      	ldr	r2, [pc, #100]	; (8003cf8 <HAL_TIM_PWM_Start+0x1d8>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d009      	beq.n	8003caa <HAL_TIM_PWM_Start+0x18a>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a1b      	ldr	r2, [pc, #108]	; (8003d08 <HAL_TIM_PWM_Start+0x1e8>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d004      	beq.n	8003caa <HAL_TIM_PWM_Start+0x18a>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a19      	ldr	r2, [pc, #100]	; (8003d0c <HAL_TIM_PWM_Start+0x1ec>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d115      	bne.n	8003cd6 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	689a      	ldr	r2, [r3, #8]
 8003cb0:	4b17      	ldr	r3, [pc, #92]	; (8003d10 <HAL_TIM_PWM_Start+0x1f0>)
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2b06      	cmp	r3, #6
 8003cba:	d015      	beq.n	8003ce8 <HAL_TIM_PWM_Start+0x1c8>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cc2:	d011      	beq.n	8003ce8 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f042 0201 	orr.w	r2, r2, #1
 8003cd2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cd4:	e008      	b.n	8003ce8 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f042 0201 	orr.w	r2, r2, #1
 8003ce4:	601a      	str	r2, [r3, #0]
 8003ce6:	e000      	b.n	8003cea <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ce8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3710      	adds	r7, #16
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	40010000 	.word	0x40010000
 8003cf8:	40010400 	.word	0x40010400
 8003cfc:	40000400 	.word	0x40000400
 8003d00:	40000800 	.word	0x40000800
 8003d04:	40000c00 	.word	0x40000c00
 8003d08:	40014000 	.word	0x40014000
 8003d0c:	40001800 	.word	0x40001800
 8003d10:	00010007 	.word	0x00010007

08003d14 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b086      	sub	sp, #24
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d101      	bne.n	8003d28 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e08f      	b.n	8003e48 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d106      	bne.n	8003d42 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f7fd fa61 	bl	8001204 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2202      	movs	r2, #2
 8003d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	6899      	ldr	r1, [r3, #8]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	4b3e      	ldr	r3, [pc, #248]	; (8003e50 <HAL_TIM_Encoder_Init+0x13c>)
 8003d56:	400b      	ands	r3, r1
 8003d58:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	3304      	adds	r3, #4
 8003d62:	4619      	mov	r1, r3
 8003d64:	4610      	mov	r0, r2
 8003d66:	f000 fba1 	bl	80044ac <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	699b      	ldr	r3, [r3, #24]
 8003d78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	6a1b      	ldr	r3, [r3, #32]
 8003d80:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	697a      	ldr	r2, [r7, #20]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003d8c:	693a      	ldr	r2, [r7, #16]
 8003d8e:	4b31      	ldr	r3, [pc, #196]	; (8003e54 <HAL_TIM_Encoder_Init+0x140>)
 8003d90:	4013      	ands	r3, r2
 8003d92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	689a      	ldr	r2, [r3, #8]
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	699b      	ldr	r3, [r3, #24]
 8003d9c:	021b      	lsls	r3, r3, #8
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	693a      	ldr	r2, [r7, #16]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003da6:	693a      	ldr	r2, [r7, #16]
 8003da8:	4b2b      	ldr	r3, [pc, #172]	; (8003e58 <HAL_TIM_Encoder_Init+0x144>)
 8003daa:	4013      	ands	r3, r2
 8003dac:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003dae:	693a      	ldr	r2, [r7, #16]
 8003db0:	4b2a      	ldr	r3, [pc, #168]	; (8003e5c <HAL_TIM_Encoder_Init+0x148>)
 8003db2:	4013      	ands	r3, r2
 8003db4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	68da      	ldr	r2, [r3, #12]
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	69db      	ldr	r3, [r3, #28]
 8003dbe:	021b      	lsls	r3, r3, #8
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	693a      	ldr	r2, [r7, #16]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	691b      	ldr	r3, [r3, #16]
 8003dcc:	011a      	lsls	r2, r3, #4
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	6a1b      	ldr	r3, [r3, #32]
 8003dd2:	031b      	lsls	r3, r3, #12
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	693a      	ldr	r2, [r7, #16]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003de2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003dea:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	685a      	ldr	r2, [r3, #4]
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	695b      	ldr	r3, [r3, #20]
 8003df4:	011b      	lsls	r3, r3, #4
 8003df6:	4313      	orrs	r3, r2
 8003df8:	68fa      	ldr	r2, [r7, #12]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	697a      	ldr	r2, [r7, #20]
 8003e04:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	693a      	ldr	r2, [r7, #16]
 8003e0c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	68fa      	ldr	r2, [r7, #12]
 8003e14:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2201      	movs	r2, #1
 8003e22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2201      	movs	r2, #1
 8003e32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2201      	movs	r2, #1
 8003e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e46:	2300      	movs	r3, #0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3718      	adds	r7, #24
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	fffebff8 	.word	0xfffebff8
 8003e54:	fffffcfc 	.word	0xfffffcfc
 8003e58:	fffff3f3 	.word	0xfffff3f3
 8003e5c:	ffff0f0f 	.word	0xffff0f0f

08003e60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	f003 0302 	and.w	r3, r3, #2
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d122      	bne.n	8003ebc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	f003 0302 	and.w	r3, r3, #2
 8003e80:	2b02      	cmp	r3, #2
 8003e82:	d11b      	bne.n	8003ebc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f06f 0202 	mvn.w	r2, #2
 8003e8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2201      	movs	r2, #1
 8003e92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	699b      	ldr	r3, [r3, #24]
 8003e9a:	f003 0303 	and.w	r3, r3, #3
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d003      	beq.n	8003eaa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f000 fae4 	bl	8004470 <HAL_TIM_IC_CaptureCallback>
 8003ea8:	e005      	b.n	8003eb6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f000 fad6 	bl	800445c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f000 fae7 	bl	8004484 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	f003 0304 	and.w	r3, r3, #4
 8003ec6:	2b04      	cmp	r3, #4
 8003ec8:	d122      	bne.n	8003f10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	f003 0304 	and.w	r3, r3, #4
 8003ed4:	2b04      	cmp	r3, #4
 8003ed6:	d11b      	bne.n	8003f10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f06f 0204 	mvn.w	r2, #4
 8003ee0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2202      	movs	r2, #2
 8003ee6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	699b      	ldr	r3, [r3, #24]
 8003eee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d003      	beq.n	8003efe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 faba 	bl	8004470 <HAL_TIM_IC_CaptureCallback>
 8003efc:	e005      	b.n	8003f0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 faac 	bl	800445c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 fabd 	bl	8004484 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	f003 0308 	and.w	r3, r3, #8
 8003f1a:	2b08      	cmp	r3, #8
 8003f1c:	d122      	bne.n	8003f64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	f003 0308 	and.w	r3, r3, #8
 8003f28:	2b08      	cmp	r3, #8
 8003f2a:	d11b      	bne.n	8003f64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f06f 0208 	mvn.w	r2, #8
 8003f34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2204      	movs	r2, #4
 8003f3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	69db      	ldr	r3, [r3, #28]
 8003f42:	f003 0303 	and.w	r3, r3, #3
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d003      	beq.n	8003f52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f000 fa90 	bl	8004470 <HAL_TIM_IC_CaptureCallback>
 8003f50:	e005      	b.n	8003f5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 fa82 	bl	800445c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f000 fa93 	bl	8004484 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	f003 0310 	and.w	r3, r3, #16
 8003f6e:	2b10      	cmp	r3, #16
 8003f70:	d122      	bne.n	8003fb8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	f003 0310 	and.w	r3, r3, #16
 8003f7c:	2b10      	cmp	r3, #16
 8003f7e:	d11b      	bne.n	8003fb8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f06f 0210 	mvn.w	r2, #16
 8003f88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2208      	movs	r2, #8
 8003f8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	69db      	ldr	r3, [r3, #28]
 8003f96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d003      	beq.n	8003fa6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 fa66 	bl	8004470 <HAL_TIM_IC_CaptureCallback>
 8003fa4:	e005      	b.n	8003fb2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 fa58 	bl	800445c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f000 fa69 	bl	8004484 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	f003 0301 	and.w	r3, r3, #1
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d10e      	bne.n	8003fe4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	f003 0301 	and.w	r3, r3, #1
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d107      	bne.n	8003fe4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f06f 0201 	mvn.w	r2, #1
 8003fdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f7fd f9ba 	bl	8001358 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fee:	2b80      	cmp	r3, #128	; 0x80
 8003ff0:	d10e      	bne.n	8004010 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ffc:	2b80      	cmp	r3, #128	; 0x80
 8003ffe:	d107      	bne.n	8004010 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 ff22 	bl	8004e54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800401a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800401e:	d10e      	bne.n	800403e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800402a:	2b80      	cmp	r3, #128	; 0x80
 800402c:	d107      	bne.n	800403e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004036:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f000 ff15 	bl	8004e68 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	691b      	ldr	r3, [r3, #16]
 8004044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004048:	2b40      	cmp	r3, #64	; 0x40
 800404a:	d10e      	bne.n	800406a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004056:	2b40      	cmp	r3, #64	; 0x40
 8004058:	d107      	bne.n	800406a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004062:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f000 fa17 	bl	8004498 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	f003 0320 	and.w	r3, r3, #32
 8004074:	2b20      	cmp	r3, #32
 8004076:	d10e      	bne.n	8004096 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	f003 0320 	and.w	r3, r3, #32
 8004082:	2b20      	cmp	r3, #32
 8004084:	d107      	bne.n	8004096 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f06f 0220 	mvn.w	r2, #32
 800408e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f000 fed5 	bl	8004e40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004096:	bf00      	nop
 8004098:	3708      	adds	r7, #8
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
	...

080040a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b086      	sub	sp, #24
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040ac:	2300      	movs	r3, #0
 80040ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d101      	bne.n	80040be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80040ba:	2302      	movs	r3, #2
 80040bc:	e0ff      	b.n	80042be <HAL_TIM_PWM_ConfigChannel+0x21e>
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2201      	movs	r2, #1
 80040c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2b14      	cmp	r3, #20
 80040ca:	f200 80f0 	bhi.w	80042ae <HAL_TIM_PWM_ConfigChannel+0x20e>
 80040ce:	a201      	add	r2, pc, #4	; (adr r2, 80040d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80040d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040d4:	08004129 	.word	0x08004129
 80040d8:	080042af 	.word	0x080042af
 80040dc:	080042af 	.word	0x080042af
 80040e0:	080042af 	.word	0x080042af
 80040e4:	08004169 	.word	0x08004169
 80040e8:	080042af 	.word	0x080042af
 80040ec:	080042af 	.word	0x080042af
 80040f0:	080042af 	.word	0x080042af
 80040f4:	080041ab 	.word	0x080041ab
 80040f8:	080042af 	.word	0x080042af
 80040fc:	080042af 	.word	0x080042af
 8004100:	080042af 	.word	0x080042af
 8004104:	080041eb 	.word	0x080041eb
 8004108:	080042af 	.word	0x080042af
 800410c:	080042af 	.word	0x080042af
 8004110:	080042af 	.word	0x080042af
 8004114:	0800422d 	.word	0x0800422d
 8004118:	080042af 	.word	0x080042af
 800411c:	080042af 	.word	0x080042af
 8004120:	080042af 	.word	0x080042af
 8004124:	0800426d 	.word	0x0800426d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68b9      	ldr	r1, [r7, #8]
 800412e:	4618      	mov	r0, r3
 8004130:	f000 fa5c 	bl	80045ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	699a      	ldr	r2, [r3, #24]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f042 0208 	orr.w	r2, r2, #8
 8004142:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	699a      	ldr	r2, [r3, #24]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f022 0204 	bic.w	r2, r2, #4
 8004152:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	6999      	ldr	r1, [r3, #24]
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	691a      	ldr	r2, [r3, #16]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	430a      	orrs	r2, r1
 8004164:	619a      	str	r2, [r3, #24]
      break;
 8004166:	e0a5      	b.n	80042b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	68b9      	ldr	r1, [r7, #8]
 800416e:	4618      	mov	r0, r3
 8004170:	f000 faae 	bl	80046d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	699a      	ldr	r2, [r3, #24]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004182:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	699a      	ldr	r2, [r3, #24]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004192:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	6999      	ldr	r1, [r3, #24]
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	021a      	lsls	r2, r3, #8
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	430a      	orrs	r2, r1
 80041a6:	619a      	str	r2, [r3, #24]
      break;
 80041a8:	e084      	b.n	80042b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	68b9      	ldr	r1, [r7, #8]
 80041b0:	4618      	mov	r0, r3
 80041b2:	f000 fb05 	bl	80047c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	69da      	ldr	r2, [r3, #28]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f042 0208 	orr.w	r2, r2, #8
 80041c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	69da      	ldr	r2, [r3, #28]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f022 0204 	bic.w	r2, r2, #4
 80041d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	69d9      	ldr	r1, [r3, #28]
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	691a      	ldr	r2, [r3, #16]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	430a      	orrs	r2, r1
 80041e6:	61da      	str	r2, [r3, #28]
      break;
 80041e8:	e064      	b.n	80042b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	68b9      	ldr	r1, [r7, #8]
 80041f0:	4618      	mov	r0, r3
 80041f2:	f000 fb5b 	bl	80048ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	69da      	ldr	r2, [r3, #28]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004204:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	69da      	ldr	r2, [r3, #28]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004214:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	69d9      	ldr	r1, [r3, #28]
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	021a      	lsls	r2, r3, #8
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	430a      	orrs	r2, r1
 8004228:	61da      	str	r2, [r3, #28]
      break;
 800422a:	e043      	b.n	80042b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68b9      	ldr	r1, [r7, #8]
 8004232:	4618      	mov	r0, r3
 8004234:	f000 fb92 	bl	800495c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f042 0208 	orr.w	r2, r2, #8
 8004246:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f022 0204 	bic.w	r2, r2, #4
 8004256:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	691a      	ldr	r2, [r3, #16]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	430a      	orrs	r2, r1
 8004268:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800426a:	e023      	b.n	80042b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	68b9      	ldr	r1, [r7, #8]
 8004272:	4618      	mov	r0, r3
 8004274:	f000 fbc4 	bl	8004a00 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004286:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004296:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	691b      	ldr	r3, [r3, #16]
 80042a2:	021a      	lsls	r2, r3, #8
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	430a      	orrs	r2, r1
 80042aa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80042ac:	e002      	b.n	80042b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	75fb      	strb	r3, [r7, #23]
      break;
 80042b2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80042bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3718      	adds	r7, #24
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop

080042c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042d2:	2300      	movs	r3, #0
 80042d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d101      	bne.n	80042e4 <HAL_TIM_ConfigClockSource+0x1c>
 80042e0:	2302      	movs	r3, #2
 80042e2:	e0b4      	b.n	800444e <HAL_TIM_ConfigClockSource+0x186>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2202      	movs	r2, #2
 80042f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042fc:	68ba      	ldr	r2, [r7, #8]
 80042fe:	4b56      	ldr	r3, [pc, #344]	; (8004458 <HAL_TIM_ConfigClockSource+0x190>)
 8004300:	4013      	ands	r3, r2
 8004302:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800430a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	68ba      	ldr	r2, [r7, #8]
 8004312:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800431c:	d03e      	beq.n	800439c <HAL_TIM_ConfigClockSource+0xd4>
 800431e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004322:	f200 8087 	bhi.w	8004434 <HAL_TIM_ConfigClockSource+0x16c>
 8004326:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800432a:	f000 8086 	beq.w	800443a <HAL_TIM_ConfigClockSource+0x172>
 800432e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004332:	d87f      	bhi.n	8004434 <HAL_TIM_ConfigClockSource+0x16c>
 8004334:	2b70      	cmp	r3, #112	; 0x70
 8004336:	d01a      	beq.n	800436e <HAL_TIM_ConfigClockSource+0xa6>
 8004338:	2b70      	cmp	r3, #112	; 0x70
 800433a:	d87b      	bhi.n	8004434 <HAL_TIM_ConfigClockSource+0x16c>
 800433c:	2b60      	cmp	r3, #96	; 0x60
 800433e:	d050      	beq.n	80043e2 <HAL_TIM_ConfigClockSource+0x11a>
 8004340:	2b60      	cmp	r3, #96	; 0x60
 8004342:	d877      	bhi.n	8004434 <HAL_TIM_ConfigClockSource+0x16c>
 8004344:	2b50      	cmp	r3, #80	; 0x50
 8004346:	d03c      	beq.n	80043c2 <HAL_TIM_ConfigClockSource+0xfa>
 8004348:	2b50      	cmp	r3, #80	; 0x50
 800434a:	d873      	bhi.n	8004434 <HAL_TIM_ConfigClockSource+0x16c>
 800434c:	2b40      	cmp	r3, #64	; 0x40
 800434e:	d058      	beq.n	8004402 <HAL_TIM_ConfigClockSource+0x13a>
 8004350:	2b40      	cmp	r3, #64	; 0x40
 8004352:	d86f      	bhi.n	8004434 <HAL_TIM_ConfigClockSource+0x16c>
 8004354:	2b30      	cmp	r3, #48	; 0x30
 8004356:	d064      	beq.n	8004422 <HAL_TIM_ConfigClockSource+0x15a>
 8004358:	2b30      	cmp	r3, #48	; 0x30
 800435a:	d86b      	bhi.n	8004434 <HAL_TIM_ConfigClockSource+0x16c>
 800435c:	2b20      	cmp	r3, #32
 800435e:	d060      	beq.n	8004422 <HAL_TIM_ConfigClockSource+0x15a>
 8004360:	2b20      	cmp	r3, #32
 8004362:	d867      	bhi.n	8004434 <HAL_TIM_ConfigClockSource+0x16c>
 8004364:	2b00      	cmp	r3, #0
 8004366:	d05c      	beq.n	8004422 <HAL_TIM_ConfigClockSource+0x15a>
 8004368:	2b10      	cmp	r3, #16
 800436a:	d05a      	beq.n	8004422 <HAL_TIM_ConfigClockSource+0x15a>
 800436c:	e062      	b.n	8004434 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6818      	ldr	r0, [r3, #0]
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	6899      	ldr	r1, [r3, #8]
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	685a      	ldr	r2, [r3, #4]
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	f000 fc0d 	bl	8004b9c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004390:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	68ba      	ldr	r2, [r7, #8]
 8004398:	609a      	str	r2, [r3, #8]
      break;
 800439a:	e04f      	b.n	800443c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6818      	ldr	r0, [r3, #0]
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	6899      	ldr	r1, [r3, #8]
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	685a      	ldr	r2, [r3, #4]
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	f000 fbf6 	bl	8004b9c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	689a      	ldr	r2, [r3, #8]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043be:	609a      	str	r2, [r3, #8]
      break;
 80043c0:	e03c      	b.n	800443c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6818      	ldr	r0, [r3, #0]
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	6859      	ldr	r1, [r3, #4]
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	461a      	mov	r2, r3
 80043d0:	f000 fb6a 	bl	8004aa8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	2150      	movs	r1, #80	; 0x50
 80043da:	4618      	mov	r0, r3
 80043dc:	f000 fbc3 	bl	8004b66 <TIM_ITRx_SetConfig>
      break;
 80043e0:	e02c      	b.n	800443c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6818      	ldr	r0, [r3, #0]
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	6859      	ldr	r1, [r3, #4]
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	461a      	mov	r2, r3
 80043f0:	f000 fb89 	bl	8004b06 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2160      	movs	r1, #96	; 0x60
 80043fa:	4618      	mov	r0, r3
 80043fc:	f000 fbb3 	bl	8004b66 <TIM_ITRx_SetConfig>
      break;
 8004400:	e01c      	b.n	800443c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6818      	ldr	r0, [r3, #0]
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	6859      	ldr	r1, [r3, #4]
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	461a      	mov	r2, r3
 8004410:	f000 fb4a 	bl	8004aa8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2140      	movs	r1, #64	; 0x40
 800441a:	4618      	mov	r0, r3
 800441c:	f000 fba3 	bl	8004b66 <TIM_ITRx_SetConfig>
      break;
 8004420:	e00c      	b.n	800443c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4619      	mov	r1, r3
 800442c:	4610      	mov	r0, r2
 800442e:	f000 fb9a 	bl	8004b66 <TIM_ITRx_SetConfig>
      break;
 8004432:	e003      	b.n	800443c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	73fb      	strb	r3, [r7, #15]
      break;
 8004438:	e000      	b.n	800443c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800443a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800444c:	7bfb      	ldrb	r3, [r7, #15]
}
 800444e:	4618      	mov	r0, r3
 8004450:	3710      	adds	r7, #16
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	fffeff88 	.word	0xfffeff88

0800445c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004464:	bf00      	nop
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004478:	bf00      	nop
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr

08004484 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800448c:	bf00      	nop
 800448e:	370c      	adds	r7, #12
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044a0:	bf00      	nop
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b085      	sub	sp, #20
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4a40      	ldr	r2, [pc, #256]	; (80045c0 <TIM_Base_SetConfig+0x114>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d013      	beq.n	80044ec <TIM_Base_SetConfig+0x40>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044ca:	d00f      	beq.n	80044ec <TIM_Base_SetConfig+0x40>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4a3d      	ldr	r2, [pc, #244]	; (80045c4 <TIM_Base_SetConfig+0x118>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d00b      	beq.n	80044ec <TIM_Base_SetConfig+0x40>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4a3c      	ldr	r2, [pc, #240]	; (80045c8 <TIM_Base_SetConfig+0x11c>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d007      	beq.n	80044ec <TIM_Base_SetConfig+0x40>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	4a3b      	ldr	r2, [pc, #236]	; (80045cc <TIM_Base_SetConfig+0x120>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d003      	beq.n	80044ec <TIM_Base_SetConfig+0x40>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	4a3a      	ldr	r2, [pc, #232]	; (80045d0 <TIM_Base_SetConfig+0x124>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d108      	bne.n	80044fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a2f      	ldr	r2, [pc, #188]	; (80045c0 <TIM_Base_SetConfig+0x114>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d02b      	beq.n	800455e <TIM_Base_SetConfig+0xb2>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800450c:	d027      	beq.n	800455e <TIM_Base_SetConfig+0xb2>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a2c      	ldr	r2, [pc, #176]	; (80045c4 <TIM_Base_SetConfig+0x118>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d023      	beq.n	800455e <TIM_Base_SetConfig+0xb2>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4a2b      	ldr	r2, [pc, #172]	; (80045c8 <TIM_Base_SetConfig+0x11c>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d01f      	beq.n	800455e <TIM_Base_SetConfig+0xb2>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a2a      	ldr	r2, [pc, #168]	; (80045cc <TIM_Base_SetConfig+0x120>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d01b      	beq.n	800455e <TIM_Base_SetConfig+0xb2>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a29      	ldr	r2, [pc, #164]	; (80045d0 <TIM_Base_SetConfig+0x124>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d017      	beq.n	800455e <TIM_Base_SetConfig+0xb2>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a28      	ldr	r2, [pc, #160]	; (80045d4 <TIM_Base_SetConfig+0x128>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d013      	beq.n	800455e <TIM_Base_SetConfig+0xb2>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a27      	ldr	r2, [pc, #156]	; (80045d8 <TIM_Base_SetConfig+0x12c>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d00f      	beq.n	800455e <TIM_Base_SetConfig+0xb2>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a26      	ldr	r2, [pc, #152]	; (80045dc <TIM_Base_SetConfig+0x130>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d00b      	beq.n	800455e <TIM_Base_SetConfig+0xb2>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a25      	ldr	r2, [pc, #148]	; (80045e0 <TIM_Base_SetConfig+0x134>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d007      	beq.n	800455e <TIM_Base_SetConfig+0xb2>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a24      	ldr	r2, [pc, #144]	; (80045e4 <TIM_Base_SetConfig+0x138>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d003      	beq.n	800455e <TIM_Base_SetConfig+0xb2>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a23      	ldr	r2, [pc, #140]	; (80045e8 <TIM_Base_SetConfig+0x13c>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d108      	bne.n	8004570 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004564:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	68fa      	ldr	r2, [r7, #12]
 800456c:	4313      	orrs	r3, r2
 800456e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	695b      	ldr	r3, [r3, #20]
 800457a:	4313      	orrs	r3, r2
 800457c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	68fa      	ldr	r2, [r7, #12]
 8004582:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	689a      	ldr	r2, [r3, #8]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4a0a      	ldr	r2, [pc, #40]	; (80045c0 <TIM_Base_SetConfig+0x114>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d003      	beq.n	80045a4 <TIM_Base_SetConfig+0xf8>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	4a0c      	ldr	r2, [pc, #48]	; (80045d0 <TIM_Base_SetConfig+0x124>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d103      	bne.n	80045ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	691a      	ldr	r2, [r3, #16]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	615a      	str	r2, [r3, #20]
}
 80045b2:	bf00      	nop
 80045b4:	3714      	adds	r7, #20
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	40010000 	.word	0x40010000
 80045c4:	40000400 	.word	0x40000400
 80045c8:	40000800 	.word	0x40000800
 80045cc:	40000c00 	.word	0x40000c00
 80045d0:	40010400 	.word	0x40010400
 80045d4:	40014000 	.word	0x40014000
 80045d8:	40014400 	.word	0x40014400
 80045dc:	40014800 	.word	0x40014800
 80045e0:	40001800 	.word	0x40001800
 80045e4:	40001c00 	.word	0x40001c00
 80045e8:	40002000 	.word	0x40002000

080045ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b087      	sub	sp, #28
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a1b      	ldr	r3, [r3, #32]
 80045fa:	f023 0201 	bic.w	r2, r3, #1
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a1b      	ldr	r3, [r3, #32]
 8004606:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	699b      	ldr	r3, [r3, #24]
 8004612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004614:	68fa      	ldr	r2, [r7, #12]
 8004616:	4b2b      	ldr	r3, [pc, #172]	; (80046c4 <TIM_OC1_SetConfig+0xd8>)
 8004618:	4013      	ands	r3, r2
 800461a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f023 0303 	bic.w	r3, r3, #3
 8004622:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	68fa      	ldr	r2, [r7, #12]
 800462a:	4313      	orrs	r3, r2
 800462c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	f023 0302 	bic.w	r3, r3, #2
 8004634:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	697a      	ldr	r2, [r7, #20]
 800463c:	4313      	orrs	r3, r2
 800463e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4a21      	ldr	r2, [pc, #132]	; (80046c8 <TIM_OC1_SetConfig+0xdc>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d003      	beq.n	8004650 <TIM_OC1_SetConfig+0x64>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4a20      	ldr	r2, [pc, #128]	; (80046cc <TIM_OC1_SetConfig+0xe0>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d10c      	bne.n	800466a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	f023 0308 	bic.w	r3, r3, #8
 8004656:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	697a      	ldr	r2, [r7, #20]
 800465e:	4313      	orrs	r3, r2
 8004660:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	f023 0304 	bic.w	r3, r3, #4
 8004668:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a16      	ldr	r2, [pc, #88]	; (80046c8 <TIM_OC1_SetConfig+0xdc>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d003      	beq.n	800467a <TIM_OC1_SetConfig+0x8e>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a15      	ldr	r2, [pc, #84]	; (80046cc <TIM_OC1_SetConfig+0xe0>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d111      	bne.n	800469e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004680:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004688:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	695b      	ldr	r3, [r3, #20]
 800468e:	693a      	ldr	r2, [r7, #16]
 8004690:	4313      	orrs	r3, r2
 8004692:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	699b      	ldr	r3, [r3, #24]
 8004698:	693a      	ldr	r2, [r7, #16]
 800469a:	4313      	orrs	r3, r2
 800469c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	693a      	ldr	r2, [r7, #16]
 80046a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	68fa      	ldr	r2, [r7, #12]
 80046a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	685a      	ldr	r2, [r3, #4]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	697a      	ldr	r2, [r7, #20]
 80046b6:	621a      	str	r2, [r3, #32]
}
 80046b8:	bf00      	nop
 80046ba:	371c      	adds	r7, #28
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr
 80046c4:	fffeff8f 	.word	0xfffeff8f
 80046c8:	40010000 	.word	0x40010000
 80046cc:	40010400 	.word	0x40010400

080046d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b087      	sub	sp, #28
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a1b      	ldr	r3, [r3, #32]
 80046de:	f023 0210 	bic.w	r2, r3, #16
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a1b      	ldr	r3, [r3, #32]
 80046ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	699b      	ldr	r3, [r3, #24]
 80046f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80046f8:	68fa      	ldr	r2, [r7, #12]
 80046fa:	4b2e      	ldr	r3, [pc, #184]	; (80047b4 <TIM_OC2_SetConfig+0xe4>)
 80046fc:	4013      	ands	r3, r2
 80046fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004706:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	021b      	lsls	r3, r3, #8
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	4313      	orrs	r3, r2
 8004712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	f023 0320 	bic.w	r3, r3, #32
 800471a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	011b      	lsls	r3, r3, #4
 8004722:	697a      	ldr	r2, [r7, #20]
 8004724:	4313      	orrs	r3, r2
 8004726:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4a23      	ldr	r2, [pc, #140]	; (80047b8 <TIM_OC2_SetConfig+0xe8>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d003      	beq.n	8004738 <TIM_OC2_SetConfig+0x68>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4a22      	ldr	r2, [pc, #136]	; (80047bc <TIM_OC2_SetConfig+0xec>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d10d      	bne.n	8004754 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800473e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	011b      	lsls	r3, r3, #4
 8004746:	697a      	ldr	r2, [r7, #20]
 8004748:	4313      	orrs	r3, r2
 800474a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004752:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4a18      	ldr	r2, [pc, #96]	; (80047b8 <TIM_OC2_SetConfig+0xe8>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d003      	beq.n	8004764 <TIM_OC2_SetConfig+0x94>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4a17      	ldr	r2, [pc, #92]	; (80047bc <TIM_OC2_SetConfig+0xec>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d113      	bne.n	800478c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800476a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004772:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	695b      	ldr	r3, [r3, #20]
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	693a      	ldr	r2, [r7, #16]
 800477c:	4313      	orrs	r3, r2
 800477e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	699b      	ldr	r3, [r3, #24]
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	693a      	ldr	r2, [r7, #16]
 8004788:	4313      	orrs	r3, r2
 800478a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	693a      	ldr	r2, [r7, #16]
 8004790:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	68fa      	ldr	r2, [r7, #12]
 8004796:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	685a      	ldr	r2, [r3, #4]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	697a      	ldr	r2, [r7, #20]
 80047a4:	621a      	str	r2, [r3, #32]
}
 80047a6:	bf00      	nop
 80047a8:	371c      	adds	r7, #28
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr
 80047b2:	bf00      	nop
 80047b4:	feff8fff 	.word	0xfeff8fff
 80047b8:	40010000 	.word	0x40010000
 80047bc:	40010400 	.word	0x40010400

080047c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b087      	sub	sp, #28
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a1b      	ldr	r3, [r3, #32]
 80047ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a1b      	ldr	r3, [r3, #32]
 80047da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	69db      	ldr	r3, [r3, #28]
 80047e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80047e8:	68fa      	ldr	r2, [r7, #12]
 80047ea:	4b2d      	ldr	r3, [pc, #180]	; (80048a0 <TIM_OC3_SetConfig+0xe0>)
 80047ec:	4013      	ands	r3, r2
 80047ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f023 0303 	bic.w	r3, r3, #3
 80047f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68fa      	ldr	r2, [r7, #12]
 80047fe:	4313      	orrs	r3, r2
 8004800:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004808:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	021b      	lsls	r3, r3, #8
 8004810:	697a      	ldr	r2, [r7, #20]
 8004812:	4313      	orrs	r3, r2
 8004814:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a22      	ldr	r2, [pc, #136]	; (80048a4 <TIM_OC3_SetConfig+0xe4>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d003      	beq.n	8004826 <TIM_OC3_SetConfig+0x66>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a21      	ldr	r2, [pc, #132]	; (80048a8 <TIM_OC3_SetConfig+0xe8>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d10d      	bne.n	8004842 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800482c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	021b      	lsls	r3, r3, #8
 8004834:	697a      	ldr	r2, [r7, #20]
 8004836:	4313      	orrs	r3, r2
 8004838:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004840:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a17      	ldr	r2, [pc, #92]	; (80048a4 <TIM_OC3_SetConfig+0xe4>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d003      	beq.n	8004852 <TIM_OC3_SetConfig+0x92>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a16      	ldr	r2, [pc, #88]	; (80048a8 <TIM_OC3_SetConfig+0xe8>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d113      	bne.n	800487a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004858:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004860:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	695b      	ldr	r3, [r3, #20]
 8004866:	011b      	lsls	r3, r3, #4
 8004868:	693a      	ldr	r2, [r7, #16]
 800486a:	4313      	orrs	r3, r2
 800486c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	699b      	ldr	r3, [r3, #24]
 8004872:	011b      	lsls	r3, r3, #4
 8004874:	693a      	ldr	r2, [r7, #16]
 8004876:	4313      	orrs	r3, r2
 8004878:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	693a      	ldr	r2, [r7, #16]
 800487e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	685a      	ldr	r2, [r3, #4]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	697a      	ldr	r2, [r7, #20]
 8004892:	621a      	str	r2, [r3, #32]
}
 8004894:	bf00      	nop
 8004896:	371c      	adds	r7, #28
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr
 80048a0:	fffeff8f 	.word	0xfffeff8f
 80048a4:	40010000 	.word	0x40010000
 80048a8:	40010400 	.word	0x40010400

080048ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b087      	sub	sp, #28
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a1b      	ldr	r3, [r3, #32]
 80048ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a1b      	ldr	r3, [r3, #32]
 80048c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	69db      	ldr	r3, [r3, #28]
 80048d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80048d4:	68fa      	ldr	r2, [r7, #12]
 80048d6:	4b1e      	ldr	r3, [pc, #120]	; (8004950 <TIM_OC4_SetConfig+0xa4>)
 80048d8:	4013      	ands	r3, r2
 80048da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	021b      	lsls	r3, r3, #8
 80048ea:	68fa      	ldr	r2, [r7, #12]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80048f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	031b      	lsls	r3, r3, #12
 80048fe:	693a      	ldr	r2, [r7, #16]
 8004900:	4313      	orrs	r3, r2
 8004902:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4a13      	ldr	r2, [pc, #76]	; (8004954 <TIM_OC4_SetConfig+0xa8>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d003      	beq.n	8004914 <TIM_OC4_SetConfig+0x68>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4a12      	ldr	r2, [pc, #72]	; (8004958 <TIM_OC4_SetConfig+0xac>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d109      	bne.n	8004928 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800491a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	695b      	ldr	r3, [r3, #20]
 8004920:	019b      	lsls	r3, r3, #6
 8004922:	697a      	ldr	r2, [r7, #20]
 8004924:	4313      	orrs	r3, r2
 8004926:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	697a      	ldr	r2, [r7, #20]
 800492c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	68fa      	ldr	r2, [r7, #12]
 8004932:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	685a      	ldr	r2, [r3, #4]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	693a      	ldr	r2, [r7, #16]
 8004940:	621a      	str	r2, [r3, #32]
}
 8004942:	bf00      	nop
 8004944:	371c      	adds	r7, #28
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr
 800494e:	bf00      	nop
 8004950:	feff8fff 	.word	0xfeff8fff
 8004954:	40010000 	.word	0x40010000
 8004958:	40010400 	.word	0x40010400

0800495c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800495c:	b480      	push	{r7}
 800495e:	b087      	sub	sp, #28
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a1b      	ldr	r3, [r3, #32]
 800496a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a1b      	ldr	r3, [r3, #32]
 8004976:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004984:	68fa      	ldr	r2, [r7, #12]
 8004986:	4b1b      	ldr	r3, [pc, #108]	; (80049f4 <TIM_OC5_SetConfig+0x98>)
 8004988:	4013      	ands	r3, r2
 800498a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	68fa      	ldr	r2, [r7, #12]
 8004992:	4313      	orrs	r3, r2
 8004994:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800499c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	041b      	lsls	r3, r3, #16
 80049a4:	693a      	ldr	r2, [r7, #16]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a12      	ldr	r2, [pc, #72]	; (80049f8 <TIM_OC5_SetConfig+0x9c>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d003      	beq.n	80049ba <TIM_OC5_SetConfig+0x5e>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a11      	ldr	r2, [pc, #68]	; (80049fc <TIM_OC5_SetConfig+0xa0>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d109      	bne.n	80049ce <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049c0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	695b      	ldr	r3, [r3, #20]
 80049c6:	021b      	lsls	r3, r3, #8
 80049c8:	697a      	ldr	r2, [r7, #20]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	697a      	ldr	r2, [r7, #20]
 80049d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	685a      	ldr	r2, [r3, #4]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	693a      	ldr	r2, [r7, #16]
 80049e6:	621a      	str	r2, [r3, #32]
}
 80049e8:	bf00      	nop
 80049ea:	371c      	adds	r7, #28
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr
 80049f4:	fffeff8f 	.word	0xfffeff8f
 80049f8:	40010000 	.word	0x40010000
 80049fc:	40010400 	.word	0x40010400

08004a00 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b087      	sub	sp, #28
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a1b      	ldr	r3, [r3, #32]
 8004a0e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a1b      	ldr	r3, [r3, #32]
 8004a1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	4b1c      	ldr	r3, [pc, #112]	; (8004a9c <TIM_OC6_SetConfig+0x9c>)
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	021b      	lsls	r3, r3, #8
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004a42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	051b      	lsls	r3, r3, #20
 8004a4a:	693a      	ldr	r2, [r7, #16]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a13      	ldr	r2, [pc, #76]	; (8004aa0 <TIM_OC6_SetConfig+0xa0>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d003      	beq.n	8004a60 <TIM_OC6_SetConfig+0x60>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4a12      	ldr	r2, [pc, #72]	; (8004aa4 <TIM_OC6_SetConfig+0xa4>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d109      	bne.n	8004a74 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a66:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	695b      	ldr	r3, [r3, #20]
 8004a6c:	029b      	lsls	r3, r3, #10
 8004a6e:	697a      	ldr	r2, [r7, #20]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	697a      	ldr	r2, [r7, #20]
 8004a78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	685a      	ldr	r2, [r3, #4]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	693a      	ldr	r2, [r7, #16]
 8004a8c:	621a      	str	r2, [r3, #32]
}
 8004a8e:	bf00      	nop
 8004a90:	371c      	adds	r7, #28
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	feff8fff 	.word	0xfeff8fff
 8004aa0:	40010000 	.word	0x40010000
 8004aa4:	40010400 	.word	0x40010400

08004aa8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b087      	sub	sp, #28
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6a1b      	ldr	r3, [r3, #32]
 8004ab8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6a1b      	ldr	r3, [r3, #32]
 8004abe:	f023 0201 	bic.w	r2, r3, #1
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	699b      	ldr	r3, [r3, #24]
 8004aca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ad2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	011b      	lsls	r3, r3, #4
 8004ad8:	693a      	ldr	r2, [r7, #16]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	f023 030a 	bic.w	r3, r3, #10
 8004ae4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ae6:	697a      	ldr	r2, [r7, #20]
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	693a      	ldr	r2, [r7, #16]
 8004af2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	697a      	ldr	r2, [r7, #20]
 8004af8:	621a      	str	r2, [r3, #32]
}
 8004afa:	bf00      	nop
 8004afc:	371c      	adds	r7, #28
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr

08004b06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b06:	b480      	push	{r7}
 8004b08:	b087      	sub	sp, #28
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	60f8      	str	r0, [r7, #12]
 8004b0e:	60b9      	str	r1, [r7, #8]
 8004b10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	6a1b      	ldr	r3, [r3, #32]
 8004b16:	f023 0210 	bic.w	r2, r3, #16
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	699b      	ldr	r3, [r3, #24]
 8004b22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6a1b      	ldr	r3, [r3, #32]
 8004b28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	031b      	lsls	r3, r3, #12
 8004b36:	697a      	ldr	r2, [r7, #20]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b42:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	011b      	lsls	r3, r3, #4
 8004b48:	693a      	ldr	r2, [r7, #16]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	697a      	ldr	r2, [r7, #20]
 8004b52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	693a      	ldr	r2, [r7, #16]
 8004b58:	621a      	str	r2, [r3, #32]
}
 8004b5a:	bf00      	nop
 8004b5c:	371c      	adds	r7, #28
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr

08004b66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b66:	b480      	push	{r7}
 8004b68:	b085      	sub	sp, #20
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
 8004b6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b7e:	683a      	ldr	r2, [r7, #0]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	f043 0307 	orr.w	r3, r3, #7
 8004b88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	609a      	str	r2, [r3, #8]
}
 8004b90:	bf00      	nop
 8004b92:	3714      	adds	r7, #20
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b087      	sub	sp, #28
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	607a      	str	r2, [r7, #4]
 8004ba8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bb6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	021a      	lsls	r2, r3, #8
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	431a      	orrs	r2, r3
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	697a      	ldr	r2, [r7, #20]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	697a      	ldr	r2, [r7, #20]
 8004bce:	609a      	str	r2, [r3, #8]
}
 8004bd0:	bf00      	nop
 8004bd2:	371c      	adds	r7, #28
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr

08004bdc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b087      	sub	sp, #28
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	60b9      	str	r1, [r7, #8]
 8004be6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	f003 031f 	and.w	r3, r3, #31
 8004bee:	2201      	movs	r2, #1
 8004bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6a1a      	ldr	r2, [r3, #32]
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	43db      	mvns	r3, r3
 8004bfe:	401a      	ands	r2, r3
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6a1a      	ldr	r2, [r3, #32]
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	f003 031f 	and.w	r3, r3, #31
 8004c0e:	6879      	ldr	r1, [r7, #4]
 8004c10:	fa01 f303 	lsl.w	r3, r1, r3
 8004c14:	431a      	orrs	r2, r3
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	621a      	str	r2, [r3, #32]
}
 8004c1a:	bf00      	nop
 8004c1c:	371c      	adds	r7, #28
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
	...

08004c28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b085      	sub	sp, #20
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d101      	bne.n	8004c40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c3c:	2302      	movs	r3, #2
 8004c3e:	e06d      	b.n	8004d1c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2202      	movs	r2, #2
 8004c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a30      	ldr	r2, [pc, #192]	; (8004d28 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d004      	beq.n	8004c74 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a2f      	ldr	r2, [pc, #188]	; (8004d2c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d108      	bne.n	8004c86 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004c7a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	68fa      	ldr	r2, [r7, #12]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c8c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68fa      	ldr	r2, [r7, #12]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	68fa      	ldr	r2, [r7, #12]
 8004c9e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a20      	ldr	r2, [pc, #128]	; (8004d28 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d022      	beq.n	8004cf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cb2:	d01d      	beq.n	8004cf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a1d      	ldr	r2, [pc, #116]	; (8004d30 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d018      	beq.n	8004cf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a1c      	ldr	r2, [pc, #112]	; (8004d34 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d013      	beq.n	8004cf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a1a      	ldr	r2, [pc, #104]	; (8004d38 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d00e      	beq.n	8004cf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a15      	ldr	r2, [pc, #84]	; (8004d2c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d009      	beq.n	8004cf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a16      	ldr	r2, [pc, #88]	; (8004d3c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d004      	beq.n	8004cf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a15      	ldr	r2, [pc, #84]	; (8004d40 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d10c      	bne.n	8004d0a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cf6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	68ba      	ldr	r2, [r7, #8]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68ba      	ldr	r2, [r7, #8]
 8004d08:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d1a:	2300      	movs	r3, #0
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3714      	adds	r7, #20
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr
 8004d28:	40010000 	.word	0x40010000
 8004d2c:	40010400 	.word	0x40010400
 8004d30:	40000400 	.word	0x40000400
 8004d34:	40000800 	.word	0x40000800
 8004d38:	40000c00 	.word	0x40000c00
 8004d3c:	40014000 	.word	0x40014000
 8004d40:	40001800 	.word	0x40001800

08004d44 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b085      	sub	sp, #20
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d101      	bne.n	8004d60 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004d5c:	2302      	movs	r3, #2
 8004d5e:	e065      	b.n	8004e2c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	695b      	ldr	r3, [r3, #20]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	699b      	ldr	r3, [r3, #24]
 8004dd4:	041b      	lsls	r3, r3, #16
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a16      	ldr	r2, [pc, #88]	; (8004e38 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d004      	beq.n	8004dee <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a14      	ldr	r2, [pc, #80]	; (8004e3c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d115      	bne.n	8004e1a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df8:	051b      	lsls	r3, r3, #20
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	69db      	ldr	r3, [r3, #28]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	6a1b      	ldr	r3, [r3, #32]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68fa      	ldr	r2, [r7, #12]
 8004e20:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e2a:	2300      	movs	r3, #0
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3714      	adds	r7, #20
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr
 8004e38:	40010000 	.word	0x40010000
 8004e3c:	40010400 	.word	0x40010400

08004e40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b083      	sub	sp, #12
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e48:	bf00      	nop
 8004e4a:	370c      	adds	r7, #12
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr

08004e54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e5c:	bf00      	nop
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004e70:	bf00      	nop
 8004e72:	370c      	adds	r7, #12
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d101      	bne.n	8004e8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e040      	b.n	8004f10 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d106      	bne.n	8004ea4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f7fc fad4 	bl	800144c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2224      	movs	r2, #36	; 0x24
 8004ea8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f022 0201 	bic.w	r2, r2, #1
 8004eb8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f000 f82c 	bl	8004f18 <UART_SetConfig>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d101      	bne.n	8004eca <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e022      	b.n	8004f10 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d002      	beq.n	8004ed8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 fa82 	bl	80053dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	685a      	ldr	r2, [r3, #4]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ee6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	689a      	ldr	r2, [r3, #8]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ef6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f042 0201 	orr.w	r2, r2, #1
 8004f06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f000 fb09 	bl	8005520 <UART_CheckIdleState>
 8004f0e:	4603      	mov	r3, r0
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3708      	adds	r7, #8
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b088      	sub	sp, #32
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f20:	2300      	movs	r3, #0
 8004f22:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	689a      	ldr	r2, [r3, #8]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	691b      	ldr	r3, [r3, #16]
 8004f2c:	431a      	orrs	r2, r3
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	695b      	ldr	r3, [r3, #20]
 8004f32:	431a      	orrs	r2, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	69db      	ldr	r3, [r3, #28]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	4ba7      	ldr	r3, [pc, #668]	; (80051e0 <UART_SetConfig+0x2c8>)
 8004f44:	4013      	ands	r3, r2
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	6812      	ldr	r2, [r2, #0]
 8004f4a:	6979      	ldr	r1, [r7, #20]
 8004f4c:	430b      	orrs	r3, r1
 8004f4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	68da      	ldr	r2, [r3, #12]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	430a      	orrs	r2, r1
 8004f64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	699b      	ldr	r3, [r3, #24]
 8004f6a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6a1b      	ldr	r3, [r3, #32]
 8004f70:	697a      	ldr	r2, [r7, #20]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	697a      	ldr	r2, [r7, #20]
 8004f86:	430a      	orrs	r2, r1
 8004f88:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a95      	ldr	r2, [pc, #596]	; (80051e4 <UART_SetConfig+0x2cc>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d120      	bne.n	8004fd6 <UART_SetConfig+0xbe>
 8004f94:	4b94      	ldr	r3, [pc, #592]	; (80051e8 <UART_SetConfig+0x2d0>)
 8004f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f9a:	f003 0303 	and.w	r3, r3, #3
 8004f9e:	2b03      	cmp	r3, #3
 8004fa0:	d816      	bhi.n	8004fd0 <UART_SetConfig+0xb8>
 8004fa2:	a201      	add	r2, pc, #4	; (adr r2, 8004fa8 <UART_SetConfig+0x90>)
 8004fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fa8:	08004fb9 	.word	0x08004fb9
 8004fac:	08004fc5 	.word	0x08004fc5
 8004fb0:	08004fbf 	.word	0x08004fbf
 8004fb4:	08004fcb 	.word	0x08004fcb
 8004fb8:	2301      	movs	r3, #1
 8004fba:	77fb      	strb	r3, [r7, #31]
 8004fbc:	e14f      	b.n	800525e <UART_SetConfig+0x346>
 8004fbe:	2302      	movs	r3, #2
 8004fc0:	77fb      	strb	r3, [r7, #31]
 8004fc2:	e14c      	b.n	800525e <UART_SetConfig+0x346>
 8004fc4:	2304      	movs	r3, #4
 8004fc6:	77fb      	strb	r3, [r7, #31]
 8004fc8:	e149      	b.n	800525e <UART_SetConfig+0x346>
 8004fca:	2308      	movs	r3, #8
 8004fcc:	77fb      	strb	r3, [r7, #31]
 8004fce:	e146      	b.n	800525e <UART_SetConfig+0x346>
 8004fd0:	2310      	movs	r3, #16
 8004fd2:	77fb      	strb	r3, [r7, #31]
 8004fd4:	e143      	b.n	800525e <UART_SetConfig+0x346>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a84      	ldr	r2, [pc, #528]	; (80051ec <UART_SetConfig+0x2d4>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d132      	bne.n	8005046 <UART_SetConfig+0x12e>
 8004fe0:	4b81      	ldr	r3, [pc, #516]	; (80051e8 <UART_SetConfig+0x2d0>)
 8004fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fe6:	f003 030c 	and.w	r3, r3, #12
 8004fea:	2b0c      	cmp	r3, #12
 8004fec:	d828      	bhi.n	8005040 <UART_SetConfig+0x128>
 8004fee:	a201      	add	r2, pc, #4	; (adr r2, 8004ff4 <UART_SetConfig+0xdc>)
 8004ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ff4:	08005029 	.word	0x08005029
 8004ff8:	08005041 	.word	0x08005041
 8004ffc:	08005041 	.word	0x08005041
 8005000:	08005041 	.word	0x08005041
 8005004:	08005035 	.word	0x08005035
 8005008:	08005041 	.word	0x08005041
 800500c:	08005041 	.word	0x08005041
 8005010:	08005041 	.word	0x08005041
 8005014:	0800502f 	.word	0x0800502f
 8005018:	08005041 	.word	0x08005041
 800501c:	08005041 	.word	0x08005041
 8005020:	08005041 	.word	0x08005041
 8005024:	0800503b 	.word	0x0800503b
 8005028:	2300      	movs	r3, #0
 800502a:	77fb      	strb	r3, [r7, #31]
 800502c:	e117      	b.n	800525e <UART_SetConfig+0x346>
 800502e:	2302      	movs	r3, #2
 8005030:	77fb      	strb	r3, [r7, #31]
 8005032:	e114      	b.n	800525e <UART_SetConfig+0x346>
 8005034:	2304      	movs	r3, #4
 8005036:	77fb      	strb	r3, [r7, #31]
 8005038:	e111      	b.n	800525e <UART_SetConfig+0x346>
 800503a:	2308      	movs	r3, #8
 800503c:	77fb      	strb	r3, [r7, #31]
 800503e:	e10e      	b.n	800525e <UART_SetConfig+0x346>
 8005040:	2310      	movs	r3, #16
 8005042:	77fb      	strb	r3, [r7, #31]
 8005044:	e10b      	b.n	800525e <UART_SetConfig+0x346>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a69      	ldr	r2, [pc, #420]	; (80051f0 <UART_SetConfig+0x2d8>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d120      	bne.n	8005092 <UART_SetConfig+0x17a>
 8005050:	4b65      	ldr	r3, [pc, #404]	; (80051e8 <UART_SetConfig+0x2d0>)
 8005052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005056:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800505a:	2b30      	cmp	r3, #48	; 0x30
 800505c:	d013      	beq.n	8005086 <UART_SetConfig+0x16e>
 800505e:	2b30      	cmp	r3, #48	; 0x30
 8005060:	d814      	bhi.n	800508c <UART_SetConfig+0x174>
 8005062:	2b20      	cmp	r3, #32
 8005064:	d009      	beq.n	800507a <UART_SetConfig+0x162>
 8005066:	2b20      	cmp	r3, #32
 8005068:	d810      	bhi.n	800508c <UART_SetConfig+0x174>
 800506a:	2b00      	cmp	r3, #0
 800506c:	d002      	beq.n	8005074 <UART_SetConfig+0x15c>
 800506e:	2b10      	cmp	r3, #16
 8005070:	d006      	beq.n	8005080 <UART_SetConfig+0x168>
 8005072:	e00b      	b.n	800508c <UART_SetConfig+0x174>
 8005074:	2300      	movs	r3, #0
 8005076:	77fb      	strb	r3, [r7, #31]
 8005078:	e0f1      	b.n	800525e <UART_SetConfig+0x346>
 800507a:	2302      	movs	r3, #2
 800507c:	77fb      	strb	r3, [r7, #31]
 800507e:	e0ee      	b.n	800525e <UART_SetConfig+0x346>
 8005080:	2304      	movs	r3, #4
 8005082:	77fb      	strb	r3, [r7, #31]
 8005084:	e0eb      	b.n	800525e <UART_SetConfig+0x346>
 8005086:	2308      	movs	r3, #8
 8005088:	77fb      	strb	r3, [r7, #31]
 800508a:	e0e8      	b.n	800525e <UART_SetConfig+0x346>
 800508c:	2310      	movs	r3, #16
 800508e:	77fb      	strb	r3, [r7, #31]
 8005090:	e0e5      	b.n	800525e <UART_SetConfig+0x346>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a57      	ldr	r2, [pc, #348]	; (80051f4 <UART_SetConfig+0x2dc>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d120      	bne.n	80050de <UART_SetConfig+0x1c6>
 800509c:	4b52      	ldr	r3, [pc, #328]	; (80051e8 <UART_SetConfig+0x2d0>)
 800509e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050a2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80050a6:	2bc0      	cmp	r3, #192	; 0xc0
 80050a8:	d013      	beq.n	80050d2 <UART_SetConfig+0x1ba>
 80050aa:	2bc0      	cmp	r3, #192	; 0xc0
 80050ac:	d814      	bhi.n	80050d8 <UART_SetConfig+0x1c0>
 80050ae:	2b80      	cmp	r3, #128	; 0x80
 80050b0:	d009      	beq.n	80050c6 <UART_SetConfig+0x1ae>
 80050b2:	2b80      	cmp	r3, #128	; 0x80
 80050b4:	d810      	bhi.n	80050d8 <UART_SetConfig+0x1c0>
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d002      	beq.n	80050c0 <UART_SetConfig+0x1a8>
 80050ba:	2b40      	cmp	r3, #64	; 0x40
 80050bc:	d006      	beq.n	80050cc <UART_SetConfig+0x1b4>
 80050be:	e00b      	b.n	80050d8 <UART_SetConfig+0x1c0>
 80050c0:	2300      	movs	r3, #0
 80050c2:	77fb      	strb	r3, [r7, #31]
 80050c4:	e0cb      	b.n	800525e <UART_SetConfig+0x346>
 80050c6:	2302      	movs	r3, #2
 80050c8:	77fb      	strb	r3, [r7, #31]
 80050ca:	e0c8      	b.n	800525e <UART_SetConfig+0x346>
 80050cc:	2304      	movs	r3, #4
 80050ce:	77fb      	strb	r3, [r7, #31]
 80050d0:	e0c5      	b.n	800525e <UART_SetConfig+0x346>
 80050d2:	2308      	movs	r3, #8
 80050d4:	77fb      	strb	r3, [r7, #31]
 80050d6:	e0c2      	b.n	800525e <UART_SetConfig+0x346>
 80050d8:	2310      	movs	r3, #16
 80050da:	77fb      	strb	r3, [r7, #31]
 80050dc:	e0bf      	b.n	800525e <UART_SetConfig+0x346>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a45      	ldr	r2, [pc, #276]	; (80051f8 <UART_SetConfig+0x2e0>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d125      	bne.n	8005134 <UART_SetConfig+0x21c>
 80050e8:	4b3f      	ldr	r3, [pc, #252]	; (80051e8 <UART_SetConfig+0x2d0>)
 80050ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050f6:	d017      	beq.n	8005128 <UART_SetConfig+0x210>
 80050f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050fc:	d817      	bhi.n	800512e <UART_SetConfig+0x216>
 80050fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005102:	d00b      	beq.n	800511c <UART_SetConfig+0x204>
 8005104:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005108:	d811      	bhi.n	800512e <UART_SetConfig+0x216>
 800510a:	2b00      	cmp	r3, #0
 800510c:	d003      	beq.n	8005116 <UART_SetConfig+0x1fe>
 800510e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005112:	d006      	beq.n	8005122 <UART_SetConfig+0x20a>
 8005114:	e00b      	b.n	800512e <UART_SetConfig+0x216>
 8005116:	2300      	movs	r3, #0
 8005118:	77fb      	strb	r3, [r7, #31]
 800511a:	e0a0      	b.n	800525e <UART_SetConfig+0x346>
 800511c:	2302      	movs	r3, #2
 800511e:	77fb      	strb	r3, [r7, #31]
 8005120:	e09d      	b.n	800525e <UART_SetConfig+0x346>
 8005122:	2304      	movs	r3, #4
 8005124:	77fb      	strb	r3, [r7, #31]
 8005126:	e09a      	b.n	800525e <UART_SetConfig+0x346>
 8005128:	2308      	movs	r3, #8
 800512a:	77fb      	strb	r3, [r7, #31]
 800512c:	e097      	b.n	800525e <UART_SetConfig+0x346>
 800512e:	2310      	movs	r3, #16
 8005130:	77fb      	strb	r3, [r7, #31]
 8005132:	e094      	b.n	800525e <UART_SetConfig+0x346>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a30      	ldr	r2, [pc, #192]	; (80051fc <UART_SetConfig+0x2e4>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d125      	bne.n	800518a <UART_SetConfig+0x272>
 800513e:	4b2a      	ldr	r3, [pc, #168]	; (80051e8 <UART_SetConfig+0x2d0>)
 8005140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005144:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005148:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800514c:	d017      	beq.n	800517e <UART_SetConfig+0x266>
 800514e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005152:	d817      	bhi.n	8005184 <UART_SetConfig+0x26c>
 8005154:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005158:	d00b      	beq.n	8005172 <UART_SetConfig+0x25a>
 800515a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800515e:	d811      	bhi.n	8005184 <UART_SetConfig+0x26c>
 8005160:	2b00      	cmp	r3, #0
 8005162:	d003      	beq.n	800516c <UART_SetConfig+0x254>
 8005164:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005168:	d006      	beq.n	8005178 <UART_SetConfig+0x260>
 800516a:	e00b      	b.n	8005184 <UART_SetConfig+0x26c>
 800516c:	2301      	movs	r3, #1
 800516e:	77fb      	strb	r3, [r7, #31]
 8005170:	e075      	b.n	800525e <UART_SetConfig+0x346>
 8005172:	2302      	movs	r3, #2
 8005174:	77fb      	strb	r3, [r7, #31]
 8005176:	e072      	b.n	800525e <UART_SetConfig+0x346>
 8005178:	2304      	movs	r3, #4
 800517a:	77fb      	strb	r3, [r7, #31]
 800517c:	e06f      	b.n	800525e <UART_SetConfig+0x346>
 800517e:	2308      	movs	r3, #8
 8005180:	77fb      	strb	r3, [r7, #31]
 8005182:	e06c      	b.n	800525e <UART_SetConfig+0x346>
 8005184:	2310      	movs	r3, #16
 8005186:	77fb      	strb	r3, [r7, #31]
 8005188:	e069      	b.n	800525e <UART_SetConfig+0x346>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a1c      	ldr	r2, [pc, #112]	; (8005200 <UART_SetConfig+0x2e8>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d137      	bne.n	8005204 <UART_SetConfig+0x2ec>
 8005194:	4b14      	ldr	r3, [pc, #80]	; (80051e8 <UART_SetConfig+0x2d0>)
 8005196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800519a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800519e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80051a2:	d017      	beq.n	80051d4 <UART_SetConfig+0x2bc>
 80051a4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80051a8:	d817      	bhi.n	80051da <UART_SetConfig+0x2c2>
 80051aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051ae:	d00b      	beq.n	80051c8 <UART_SetConfig+0x2b0>
 80051b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051b4:	d811      	bhi.n	80051da <UART_SetConfig+0x2c2>
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d003      	beq.n	80051c2 <UART_SetConfig+0x2aa>
 80051ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051be:	d006      	beq.n	80051ce <UART_SetConfig+0x2b6>
 80051c0:	e00b      	b.n	80051da <UART_SetConfig+0x2c2>
 80051c2:	2300      	movs	r3, #0
 80051c4:	77fb      	strb	r3, [r7, #31]
 80051c6:	e04a      	b.n	800525e <UART_SetConfig+0x346>
 80051c8:	2302      	movs	r3, #2
 80051ca:	77fb      	strb	r3, [r7, #31]
 80051cc:	e047      	b.n	800525e <UART_SetConfig+0x346>
 80051ce:	2304      	movs	r3, #4
 80051d0:	77fb      	strb	r3, [r7, #31]
 80051d2:	e044      	b.n	800525e <UART_SetConfig+0x346>
 80051d4:	2308      	movs	r3, #8
 80051d6:	77fb      	strb	r3, [r7, #31]
 80051d8:	e041      	b.n	800525e <UART_SetConfig+0x346>
 80051da:	2310      	movs	r3, #16
 80051dc:	77fb      	strb	r3, [r7, #31]
 80051de:	e03e      	b.n	800525e <UART_SetConfig+0x346>
 80051e0:	efff69f3 	.word	0xefff69f3
 80051e4:	40011000 	.word	0x40011000
 80051e8:	40023800 	.word	0x40023800
 80051ec:	40004400 	.word	0x40004400
 80051f0:	40004800 	.word	0x40004800
 80051f4:	40004c00 	.word	0x40004c00
 80051f8:	40005000 	.word	0x40005000
 80051fc:	40011400 	.word	0x40011400
 8005200:	40007800 	.word	0x40007800
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a71      	ldr	r2, [pc, #452]	; (80053d0 <UART_SetConfig+0x4b8>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d125      	bne.n	800525a <UART_SetConfig+0x342>
 800520e:	4b71      	ldr	r3, [pc, #452]	; (80053d4 <UART_SetConfig+0x4bc>)
 8005210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005214:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005218:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800521c:	d017      	beq.n	800524e <UART_SetConfig+0x336>
 800521e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005222:	d817      	bhi.n	8005254 <UART_SetConfig+0x33c>
 8005224:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005228:	d00b      	beq.n	8005242 <UART_SetConfig+0x32a>
 800522a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800522e:	d811      	bhi.n	8005254 <UART_SetConfig+0x33c>
 8005230:	2b00      	cmp	r3, #0
 8005232:	d003      	beq.n	800523c <UART_SetConfig+0x324>
 8005234:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005238:	d006      	beq.n	8005248 <UART_SetConfig+0x330>
 800523a:	e00b      	b.n	8005254 <UART_SetConfig+0x33c>
 800523c:	2300      	movs	r3, #0
 800523e:	77fb      	strb	r3, [r7, #31]
 8005240:	e00d      	b.n	800525e <UART_SetConfig+0x346>
 8005242:	2302      	movs	r3, #2
 8005244:	77fb      	strb	r3, [r7, #31]
 8005246:	e00a      	b.n	800525e <UART_SetConfig+0x346>
 8005248:	2304      	movs	r3, #4
 800524a:	77fb      	strb	r3, [r7, #31]
 800524c:	e007      	b.n	800525e <UART_SetConfig+0x346>
 800524e:	2308      	movs	r3, #8
 8005250:	77fb      	strb	r3, [r7, #31]
 8005252:	e004      	b.n	800525e <UART_SetConfig+0x346>
 8005254:	2310      	movs	r3, #16
 8005256:	77fb      	strb	r3, [r7, #31]
 8005258:	e001      	b.n	800525e <UART_SetConfig+0x346>
 800525a:	2310      	movs	r3, #16
 800525c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	69db      	ldr	r3, [r3, #28]
 8005262:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005266:	d15a      	bne.n	800531e <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8005268:	7ffb      	ldrb	r3, [r7, #31]
 800526a:	2b08      	cmp	r3, #8
 800526c:	d827      	bhi.n	80052be <UART_SetConfig+0x3a6>
 800526e:	a201      	add	r2, pc, #4	; (adr r2, 8005274 <UART_SetConfig+0x35c>)
 8005270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005274:	08005299 	.word	0x08005299
 8005278:	080052a1 	.word	0x080052a1
 800527c:	080052a9 	.word	0x080052a9
 8005280:	080052bf 	.word	0x080052bf
 8005284:	080052af 	.word	0x080052af
 8005288:	080052bf 	.word	0x080052bf
 800528c:	080052bf 	.word	0x080052bf
 8005290:	080052bf 	.word	0x080052bf
 8005294:	080052b7 	.word	0x080052b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005298:	f7fd fef8 	bl	800308c <HAL_RCC_GetPCLK1Freq>
 800529c:	61b8      	str	r0, [r7, #24]
        break;
 800529e:	e013      	b.n	80052c8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052a0:	f7fd ff08 	bl	80030b4 <HAL_RCC_GetPCLK2Freq>
 80052a4:	61b8      	str	r0, [r7, #24]
        break;
 80052a6:	e00f      	b.n	80052c8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052a8:	4b4b      	ldr	r3, [pc, #300]	; (80053d8 <UART_SetConfig+0x4c0>)
 80052aa:	61bb      	str	r3, [r7, #24]
        break;
 80052ac:	e00c      	b.n	80052c8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052ae:	f7fd fdff 	bl	8002eb0 <HAL_RCC_GetSysClockFreq>
 80052b2:	61b8      	str	r0, [r7, #24]
        break;
 80052b4:	e008      	b.n	80052c8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052ba:	61bb      	str	r3, [r7, #24]
        break;
 80052bc:	e004      	b.n	80052c8 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80052be:	2300      	movs	r3, #0
 80052c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	77bb      	strb	r3, [r7, #30]
        break;
 80052c6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80052c8:	69bb      	ldr	r3, [r7, #24]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d074      	beq.n	80053b8 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	005a      	lsls	r2, r3, #1
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	085b      	lsrs	r3, r3, #1
 80052d8:	441a      	add	r2, r3
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	fbb2 f3f3 	udiv	r3, r2, r3
 80052e2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	2b0f      	cmp	r3, #15
 80052e8:	d916      	bls.n	8005318 <UART_SetConfig+0x400>
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052f0:	d212      	bcs.n	8005318 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	f023 030f 	bic.w	r3, r3, #15
 80052fa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	085b      	lsrs	r3, r3, #1
 8005300:	b29b      	uxth	r3, r3
 8005302:	f003 0307 	and.w	r3, r3, #7
 8005306:	b29a      	uxth	r2, r3
 8005308:	89fb      	ldrh	r3, [r7, #14]
 800530a:	4313      	orrs	r3, r2
 800530c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	89fa      	ldrh	r2, [r7, #14]
 8005314:	60da      	str	r2, [r3, #12]
 8005316:	e04f      	b.n	80053b8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	77bb      	strb	r3, [r7, #30]
 800531c:	e04c      	b.n	80053b8 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800531e:	7ffb      	ldrb	r3, [r7, #31]
 8005320:	2b08      	cmp	r3, #8
 8005322:	d828      	bhi.n	8005376 <UART_SetConfig+0x45e>
 8005324:	a201      	add	r2, pc, #4	; (adr r2, 800532c <UART_SetConfig+0x414>)
 8005326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800532a:	bf00      	nop
 800532c:	08005351 	.word	0x08005351
 8005330:	08005359 	.word	0x08005359
 8005334:	08005361 	.word	0x08005361
 8005338:	08005377 	.word	0x08005377
 800533c:	08005367 	.word	0x08005367
 8005340:	08005377 	.word	0x08005377
 8005344:	08005377 	.word	0x08005377
 8005348:	08005377 	.word	0x08005377
 800534c:	0800536f 	.word	0x0800536f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005350:	f7fd fe9c 	bl	800308c <HAL_RCC_GetPCLK1Freq>
 8005354:	61b8      	str	r0, [r7, #24]
        break;
 8005356:	e013      	b.n	8005380 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005358:	f7fd feac 	bl	80030b4 <HAL_RCC_GetPCLK2Freq>
 800535c:	61b8      	str	r0, [r7, #24]
        break;
 800535e:	e00f      	b.n	8005380 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005360:	4b1d      	ldr	r3, [pc, #116]	; (80053d8 <UART_SetConfig+0x4c0>)
 8005362:	61bb      	str	r3, [r7, #24]
        break;
 8005364:	e00c      	b.n	8005380 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005366:	f7fd fda3 	bl	8002eb0 <HAL_RCC_GetSysClockFreq>
 800536a:	61b8      	str	r0, [r7, #24]
        break;
 800536c:	e008      	b.n	8005380 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800536e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005372:	61bb      	str	r3, [r7, #24]
        break;
 8005374:	e004      	b.n	8005380 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8005376:	2300      	movs	r3, #0
 8005378:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	77bb      	strb	r3, [r7, #30]
        break;
 800537e:	bf00      	nop
    }

    if (pclk != 0U)
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d018      	beq.n	80053b8 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	085a      	lsrs	r2, r3, #1
 800538c:	69bb      	ldr	r3, [r7, #24]
 800538e:	441a      	add	r2, r3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	fbb2 f3f3 	udiv	r3, r2, r3
 8005398:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	2b0f      	cmp	r3, #15
 800539e:	d909      	bls.n	80053b4 <UART_SetConfig+0x49c>
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053a6:	d205      	bcs.n	80053b4 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	b29a      	uxth	r2, r3
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	60da      	str	r2, [r3, #12]
 80053b2:	e001      	b.n	80053b8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80053c4:	7fbb      	ldrb	r3, [r7, #30]
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3720      	adds	r7, #32
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	bf00      	nop
 80053d0:	40007c00 	.word	0x40007c00
 80053d4:	40023800 	.word	0x40023800
 80053d8:	00f42400 	.word	0x00f42400

080053dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e8:	f003 0301 	and.w	r3, r3, #1
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d00a      	beq.n	8005406 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	430a      	orrs	r2, r1
 8005404:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540a:	f003 0302 	and.w	r3, r3, #2
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00a      	beq.n	8005428 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	430a      	orrs	r2, r1
 8005426:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542c:	f003 0304 	and.w	r3, r3, #4
 8005430:	2b00      	cmp	r3, #0
 8005432:	d00a      	beq.n	800544a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	430a      	orrs	r2, r1
 8005448:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544e:	f003 0308 	and.w	r3, r3, #8
 8005452:	2b00      	cmp	r3, #0
 8005454:	d00a      	beq.n	800546c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	430a      	orrs	r2, r1
 800546a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005470:	f003 0310 	and.w	r3, r3, #16
 8005474:	2b00      	cmp	r3, #0
 8005476:	d00a      	beq.n	800548e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	430a      	orrs	r2, r1
 800548c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005492:	f003 0320 	and.w	r3, r3, #32
 8005496:	2b00      	cmp	r3, #0
 8005498:	d00a      	beq.n	80054b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	430a      	orrs	r2, r1
 80054ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d01a      	beq.n	80054f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	430a      	orrs	r2, r1
 80054d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054da:	d10a      	bne.n	80054f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	430a      	orrs	r2, r1
 80054f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d00a      	beq.n	8005514 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	430a      	orrs	r2, r1
 8005512:	605a      	str	r2, [r3, #4]
  }
}
 8005514:	bf00      	nop
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b086      	sub	sp, #24
 8005524:	af02      	add	r7, sp, #8
 8005526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005530:	f7fc f8d4 	bl	80016dc <HAL_GetTick>
 8005534:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 0308 	and.w	r3, r3, #8
 8005540:	2b08      	cmp	r3, #8
 8005542:	d10e      	bne.n	8005562 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005544:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005548:	9300      	str	r3, [sp, #0]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2200      	movs	r2, #0
 800554e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f000 f817 	bl	8005586 <UART_WaitOnFlagUntilTimeout>
 8005558:	4603      	mov	r3, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d001      	beq.n	8005562 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800555e:	2303      	movs	r3, #3
 8005560:	e00d      	b.n	800557e <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2220      	movs	r2, #32
 8005566:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2220      	movs	r2, #32
 800556c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800557c:	2300      	movs	r3, #0
}
 800557e:	4618      	mov	r0, r3
 8005580:	3710      	adds	r7, #16
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}

08005586 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005586:	b580      	push	{r7, lr}
 8005588:	b09c      	sub	sp, #112	; 0x70
 800558a:	af00      	add	r7, sp, #0
 800558c:	60f8      	str	r0, [r7, #12]
 800558e:	60b9      	str	r1, [r7, #8]
 8005590:	603b      	str	r3, [r7, #0]
 8005592:	4613      	mov	r3, r2
 8005594:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005596:	e0a5      	b.n	80056e4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005598:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800559a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800559e:	f000 80a1 	beq.w	80056e4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055a2:	f7fc f89b 	bl	80016dc <HAL_GetTick>
 80055a6:	4602      	mov	r2, r0
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	1ad3      	subs	r3, r2, r3
 80055ac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d302      	bcc.n	80055b8 <UART_WaitOnFlagUntilTimeout+0x32>
 80055b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d13e      	bne.n	8005636 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055c0:	e853 3f00 	ldrex	r3, [r3]
 80055c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80055c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055c8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80055cc:	667b      	str	r3, [r7, #100]	; 0x64
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	461a      	mov	r2, r3
 80055d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80055d8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055da:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80055dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80055de:	e841 2300 	strex	r3, r2, [r1]
 80055e2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80055e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d1e6      	bne.n	80055b8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	3308      	adds	r3, #8
 80055f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055f4:	e853 3f00 	ldrex	r3, [r3]
 80055f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80055fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055fc:	f023 0301 	bic.w	r3, r3, #1
 8005600:	663b      	str	r3, [r7, #96]	; 0x60
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	3308      	adds	r3, #8
 8005608:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800560a:	64ba      	str	r2, [r7, #72]	; 0x48
 800560c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800560e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005610:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005612:	e841 2300 	strex	r3, r2, [r1]
 8005616:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005618:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800561a:	2b00      	cmp	r3, #0
 800561c:	d1e5      	bne.n	80055ea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2220      	movs	r2, #32
 8005622:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2220      	movs	r2, #32
 8005628:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2200      	movs	r2, #0
 800562e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	e067      	b.n	8005706 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 0304 	and.w	r3, r3, #4
 8005640:	2b00      	cmp	r3, #0
 8005642:	d04f      	beq.n	80056e4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	69db      	ldr	r3, [r3, #28]
 800564a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800564e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005652:	d147      	bne.n	80056e4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800565c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005666:	e853 3f00 	ldrex	r3, [r3]
 800566a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800566c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005672:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	461a      	mov	r2, r3
 800567a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800567c:	637b      	str	r3, [r7, #52]	; 0x34
 800567e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005680:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005682:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005684:	e841 2300 	strex	r3, r2, [r1]
 8005688:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800568a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800568c:	2b00      	cmp	r3, #0
 800568e:	d1e6      	bne.n	800565e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	3308      	adds	r3, #8
 8005696:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	e853 3f00 	ldrex	r3, [r3]
 800569e:	613b      	str	r3, [r7, #16]
   return(result);
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	f023 0301 	bic.w	r3, r3, #1
 80056a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	3308      	adds	r3, #8
 80056ae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80056b0:	623a      	str	r2, [r7, #32]
 80056b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b4:	69f9      	ldr	r1, [r7, #28]
 80056b6:	6a3a      	ldr	r2, [r7, #32]
 80056b8:	e841 2300 	strex	r3, r2, [r1]
 80056bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80056be:	69bb      	ldr	r3, [r7, #24]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d1e5      	bne.n	8005690 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2220      	movs	r2, #32
 80056c8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2220      	movs	r2, #32
 80056ce:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2220      	movs	r2, #32
 80056d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2200      	movs	r2, #0
 80056dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80056e0:	2303      	movs	r3, #3
 80056e2:	e010      	b.n	8005706 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	69da      	ldr	r2, [r3, #28]
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	4013      	ands	r3, r2
 80056ee:	68ba      	ldr	r2, [r7, #8]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	bf0c      	ite	eq
 80056f4:	2301      	moveq	r3, #1
 80056f6:	2300      	movne	r3, #0
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	461a      	mov	r2, r3
 80056fc:	79fb      	ldrb	r3, [r7, #7]
 80056fe:	429a      	cmp	r2, r3
 8005700:	f43f af4a 	beq.w	8005598 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005704:	2300      	movs	r3, #0
}
 8005706:	4618      	mov	r0, r3
 8005708:	3770      	adds	r7, #112	; 0x70
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
	...

08005710 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005710:	b084      	sub	sp, #16
 8005712:	b580      	push	{r7, lr}
 8005714:	b084      	sub	sp, #16
 8005716:	af00      	add	r7, sp, #0
 8005718:	6078      	str	r0, [r7, #4]
 800571a:	f107 001c 	add.w	r0, r7, #28
 800571e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005724:	2b01      	cmp	r3, #1
 8005726:	d120      	bne.n	800576a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800572c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	68da      	ldr	r2, [r3, #12]
 8005738:	4b20      	ldr	r3, [pc, #128]	; (80057bc <USB_CoreInit+0xac>)
 800573a:	4013      	ands	r3, r2
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800574c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800574e:	2b01      	cmp	r3, #1
 8005750:	d105      	bne.n	800575e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	68db      	ldr	r3, [r3, #12]
 8005756:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 fa92 	bl	8005c88 <USB_CoreReset>
 8005764:	4603      	mov	r3, r0
 8005766:	73fb      	strb	r3, [r7, #15]
 8005768:	e010      	b.n	800578c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 fa86 	bl	8005c88 <USB_CoreReset>
 800577c:	4603      	mov	r3, r0
 800577e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005784:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800578c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800578e:	2b01      	cmp	r3, #1
 8005790:	d10b      	bne.n	80057aa <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	f043 0206 	orr.w	r2, r3, #6
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	f043 0220 	orr.w	r2, r3, #32
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80057aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3710      	adds	r7, #16
 80057b0:	46bd      	mov	sp, r7
 80057b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80057b6:	b004      	add	sp, #16
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop
 80057bc:	ffbdffbf 	.word	0xffbdffbf

080057c0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b083      	sub	sp, #12
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	f023 0201 	bic.w	r2, r3, #1
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80057d4:	2300      	movs	r3, #0
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	370c      	adds	r7, #12
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr

080057e2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80057e2:	b580      	push	{r7, lr}
 80057e4:	b084      	sub	sp, #16
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
 80057ea:	460b      	mov	r3, r1
 80057ec:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80057ee:	2300      	movs	r3, #0
 80057f0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	68db      	ldr	r3, [r3, #12]
 80057f6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80057fe:	78fb      	ldrb	r3, [r7, #3]
 8005800:	2b01      	cmp	r3, #1
 8005802:	d115      	bne.n	8005830 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005810:	2001      	movs	r0, #1
 8005812:	f7fb ff6f 	bl	80016f4 <HAL_Delay>
      ms++;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	3301      	adds	r3, #1
 800581a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f000 fa25 	bl	8005c6c <USB_GetMode>
 8005822:	4603      	mov	r3, r0
 8005824:	2b01      	cmp	r3, #1
 8005826:	d01e      	beq.n	8005866 <USB_SetCurrentMode+0x84>
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2b31      	cmp	r3, #49	; 0x31
 800582c:	d9f0      	bls.n	8005810 <USB_SetCurrentMode+0x2e>
 800582e:	e01a      	b.n	8005866 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005830:	78fb      	ldrb	r3, [r7, #3]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d115      	bne.n	8005862 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	68db      	ldr	r3, [r3, #12]
 800583a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005842:	2001      	movs	r0, #1
 8005844:	f7fb ff56 	bl	80016f4 <HAL_Delay>
      ms++;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	3301      	adds	r3, #1
 800584c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 fa0c 	bl	8005c6c <USB_GetMode>
 8005854:	4603      	mov	r3, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d005      	beq.n	8005866 <USB_SetCurrentMode+0x84>
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2b31      	cmp	r3, #49	; 0x31
 800585e:	d9f0      	bls.n	8005842 <USB_SetCurrentMode+0x60>
 8005860:	e001      	b.n	8005866 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	e005      	b.n	8005872 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2b32      	cmp	r3, #50	; 0x32
 800586a:	d101      	bne.n	8005870 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e000      	b.n	8005872 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005870:	2300      	movs	r3, #0
}
 8005872:	4618      	mov	r0, r3
 8005874:	3710      	adds	r7, #16
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
	...

0800587c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800587c:	b084      	sub	sp, #16
 800587e:	b580      	push	{r7, lr}
 8005880:	b086      	sub	sp, #24
 8005882:	af00      	add	r7, sp, #0
 8005884:	6078      	str	r0, [r7, #4]
 8005886:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800588a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800588e:	2300      	movs	r3, #0
 8005890:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005896:	2300      	movs	r3, #0
 8005898:	613b      	str	r3, [r7, #16]
 800589a:	e009      	b.n	80058b0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	3340      	adds	r3, #64	; 0x40
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	4413      	add	r3, r2
 80058a6:	2200      	movs	r2, #0
 80058a8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	3301      	adds	r3, #1
 80058ae:	613b      	str	r3, [r7, #16]
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	2b0e      	cmp	r3, #14
 80058b4:	d9f2      	bls.n	800589c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80058b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d11c      	bne.n	80058f6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	68fa      	ldr	r2, [r7, #12]
 80058c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058ca:	f043 0302 	orr.w	r3, r3, #2
 80058ce:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	601a      	str	r2, [r3, #0]
 80058f4:	e005      	b.n	8005902 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058fa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005908:	461a      	mov	r2, r3
 800590a:	2300      	movs	r3, #0
 800590c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005914:	4619      	mov	r1, r3
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800591c:	461a      	mov	r2, r3
 800591e:	680b      	ldr	r3, [r1, #0]
 8005920:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005924:	2b01      	cmp	r3, #1
 8005926:	d10c      	bne.n	8005942 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800592a:	2b00      	cmp	r3, #0
 800592c:	d104      	bne.n	8005938 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800592e:	2100      	movs	r1, #0
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f000 f961 	bl	8005bf8 <USB_SetDevSpeed>
 8005936:	e008      	b.n	800594a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005938:	2101      	movs	r1, #1
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 f95c 	bl	8005bf8 <USB_SetDevSpeed>
 8005940:	e003      	b.n	800594a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005942:	2103      	movs	r1, #3
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f000 f957 	bl	8005bf8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800594a:	2110      	movs	r1, #16
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f000 f8f3 	bl	8005b38 <USB_FlushTxFifo>
 8005952:	4603      	mov	r3, r0
 8005954:	2b00      	cmp	r3, #0
 8005956:	d001      	beq.n	800595c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f000 f91d 	bl	8005b9c <USB_FlushRxFifo>
 8005962:	4603      	mov	r3, r0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d001      	beq.n	800596c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005972:	461a      	mov	r2, r3
 8005974:	2300      	movs	r3, #0
 8005976:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800597e:	461a      	mov	r2, r3
 8005980:	2300      	movs	r3, #0
 8005982:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800598a:	461a      	mov	r2, r3
 800598c:	2300      	movs	r3, #0
 800598e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005990:	2300      	movs	r3, #0
 8005992:	613b      	str	r3, [r7, #16]
 8005994:	e043      	b.n	8005a1e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	015a      	lsls	r2, r3, #5
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	4413      	add	r3, r2
 800599e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059ac:	d118      	bne.n	80059e0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d10a      	bne.n	80059ca <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	015a      	lsls	r2, r3, #5
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	4413      	add	r3, r2
 80059bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059c0:	461a      	mov	r2, r3
 80059c2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80059c6:	6013      	str	r3, [r2, #0]
 80059c8:	e013      	b.n	80059f2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	015a      	lsls	r2, r3, #5
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	4413      	add	r3, r2
 80059d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059d6:	461a      	mov	r2, r3
 80059d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80059dc:	6013      	str	r3, [r2, #0]
 80059de:	e008      	b.n	80059f2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	015a      	lsls	r2, r3, #5
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	4413      	add	r3, r2
 80059e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ec:	461a      	mov	r2, r3
 80059ee:	2300      	movs	r3, #0
 80059f0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	015a      	lsls	r2, r3, #5
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	4413      	add	r3, r2
 80059fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059fe:	461a      	mov	r2, r3
 8005a00:	2300      	movs	r3, #0
 8005a02:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	015a      	lsls	r2, r3, #5
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	4413      	add	r3, r2
 8005a0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a10:	461a      	mov	r2, r3
 8005a12:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005a16:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	613b      	str	r3, [r7, #16]
 8005a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a20:	693a      	ldr	r2, [r7, #16]
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d3b7      	bcc.n	8005996 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a26:	2300      	movs	r3, #0
 8005a28:	613b      	str	r3, [r7, #16]
 8005a2a:	e043      	b.n	8005ab4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	015a      	lsls	r2, r3, #5
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	4413      	add	r3, r2
 8005a34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a42:	d118      	bne.n	8005a76 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d10a      	bne.n	8005a60 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	015a      	lsls	r2, r3, #5
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	4413      	add	r3, r2
 8005a52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a56:	461a      	mov	r2, r3
 8005a58:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005a5c:	6013      	str	r3, [r2, #0]
 8005a5e:	e013      	b.n	8005a88 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	015a      	lsls	r2, r3, #5
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	4413      	add	r3, r2
 8005a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005a72:	6013      	str	r3, [r2, #0]
 8005a74:	e008      	b.n	8005a88 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	015a      	lsls	r2, r3, #5
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	4413      	add	r3, r2
 8005a7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a82:	461a      	mov	r2, r3
 8005a84:	2300      	movs	r3, #0
 8005a86:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	015a      	lsls	r2, r3, #5
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	4413      	add	r3, r2
 8005a90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a94:	461a      	mov	r2, r3
 8005a96:	2300      	movs	r3, #0
 8005a98:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	015a      	lsls	r2, r3, #5
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	4413      	add	r3, r2
 8005aa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005aac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	613b      	str	r3, [r7, #16]
 8005ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab6:	693a      	ldr	r2, [r7, #16]
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d3b7      	bcc.n	8005a2c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ac2:	691b      	ldr	r3, [r3, #16]
 8005ac4:	68fa      	ldr	r2, [r7, #12]
 8005ac6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005aca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ace:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005adc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d105      	bne.n	8005af0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	699b      	ldr	r3, [r3, #24]
 8005ae8:	f043 0210 	orr.w	r2, r3, #16
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	699a      	ldr	r2, [r3, #24]
 8005af4:	4b0e      	ldr	r3, [pc, #56]	; (8005b30 <USB_DevInit+0x2b4>)
 8005af6:	4313      	orrs	r3, r2
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005afc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d005      	beq.n	8005b0e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	699b      	ldr	r3, [r3, #24]
 8005b06:	f043 0208 	orr.w	r2, r3, #8
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005b0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d105      	bne.n	8005b20 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	699a      	ldr	r2, [r3, #24]
 8005b18:	4b06      	ldr	r3, [pc, #24]	; (8005b34 <USB_DevInit+0x2b8>)
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	687a      	ldr	r2, [r7, #4]
 8005b1e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005b20:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3718      	adds	r7, #24
 8005b26:	46bd      	mov	sp, r7
 8005b28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b2c:	b004      	add	sp, #16
 8005b2e:	4770      	bx	lr
 8005b30:	803c3800 	.word	0x803c3800
 8005b34:	40000004 	.word	0x40000004

08005b38 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b085      	sub	sp, #20
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005b42:	2300      	movs	r3, #0
 8005b44:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	3301      	adds	r3, #1
 8005b4a:	60fb      	str	r3, [r7, #12]
 8005b4c:	4a12      	ldr	r2, [pc, #72]	; (8005b98 <USB_FlushTxFifo+0x60>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d901      	bls.n	8005b56 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005b52:	2303      	movs	r3, #3
 8005b54:	e01a      	b.n	8005b8c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	691b      	ldr	r3, [r3, #16]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	daf3      	bge.n	8005b46 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	019b      	lsls	r3, r3, #6
 8005b66:	f043 0220 	orr.w	r2, r3, #32
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	3301      	adds	r3, #1
 8005b72:	60fb      	str	r3, [r7, #12]
 8005b74:	4a08      	ldr	r2, [pc, #32]	; (8005b98 <USB_FlushTxFifo+0x60>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d901      	bls.n	8005b7e <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8005b7a:	2303      	movs	r3, #3
 8005b7c:	e006      	b.n	8005b8c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	691b      	ldr	r3, [r3, #16]
 8005b82:	f003 0320 	and.w	r3, r3, #32
 8005b86:	2b20      	cmp	r3, #32
 8005b88:	d0f1      	beq.n	8005b6e <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8005b8a:	2300      	movs	r3, #0
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3714      	adds	r7, #20
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr
 8005b98:	00030d40 	.word	0x00030d40

08005b9c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b085      	sub	sp, #20
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	3301      	adds	r3, #1
 8005bac:	60fb      	str	r3, [r7, #12]
 8005bae:	4a11      	ldr	r2, [pc, #68]	; (8005bf4 <USB_FlushRxFifo+0x58>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d901      	bls.n	8005bb8 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8005bb4:	2303      	movs	r3, #3
 8005bb6:	e017      	b.n	8005be8 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	691b      	ldr	r3, [r3, #16]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	daf3      	bge.n	8005ba8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2210      	movs	r2, #16
 8005bc8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	3301      	adds	r3, #1
 8005bce:	60fb      	str	r3, [r7, #12]
 8005bd0:	4a08      	ldr	r2, [pc, #32]	; (8005bf4 <USB_FlushRxFifo+0x58>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d901      	bls.n	8005bda <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8005bd6:	2303      	movs	r3, #3
 8005bd8:	e006      	b.n	8005be8 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	691b      	ldr	r3, [r3, #16]
 8005bde:	f003 0310 	and.w	r3, r3, #16
 8005be2:	2b10      	cmp	r3, #16
 8005be4:	d0f1      	beq.n	8005bca <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8005be6:	2300      	movs	r3, #0
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3714      	adds	r7, #20
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr
 8005bf4:	00030d40 	.word	0x00030d40

08005bf8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b085      	sub	sp, #20
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	460b      	mov	r3, r1
 8005c02:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	78fb      	ldrb	r3, [r7, #3]
 8005c12:	68f9      	ldr	r1, [r7, #12]
 8005c14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005c1c:	2300      	movs	r3, #0
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3714      	adds	r7, #20
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr

08005c2a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005c2a:	b480      	push	{r7}
 8005c2c:	b085      	sub	sp, #20
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	68fa      	ldr	r2, [r7, #12]
 8005c40:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005c44:	f023 0303 	bic.w	r3, r3, #3
 8005c48:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	68fa      	ldr	r2, [r7, #12]
 8005c54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c58:	f043 0302 	orr.w	r3, r3, #2
 8005c5c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005c5e:	2300      	movs	r3, #0
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3714      	adds	r7, #20
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	695b      	ldr	r3, [r3, #20]
 8005c78:	f003 0301 	and.w	r3, r3, #1
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	370c      	adds	r7, #12
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr

08005c88 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b085      	sub	sp, #20
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c90:	2300      	movs	r3, #0
 8005c92:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	3301      	adds	r3, #1
 8005c98:	60fb      	str	r3, [r7, #12]
 8005c9a:	4a13      	ldr	r2, [pc, #76]	; (8005ce8 <USB_CoreReset+0x60>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d901      	bls.n	8005ca4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005ca0:	2303      	movs	r3, #3
 8005ca2:	e01a      	b.n	8005cda <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	691b      	ldr	r3, [r3, #16]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	daf3      	bge.n	8005c94 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005cac:	2300      	movs	r3, #0
 8005cae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	691b      	ldr	r3, [r3, #16]
 8005cb4:	f043 0201 	orr.w	r2, r3, #1
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	3301      	adds	r3, #1
 8005cc0:	60fb      	str	r3, [r7, #12]
 8005cc2:	4a09      	ldr	r2, [pc, #36]	; (8005ce8 <USB_CoreReset+0x60>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d901      	bls.n	8005ccc <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005cc8:	2303      	movs	r3, #3
 8005cca:	e006      	b.n	8005cda <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	691b      	ldr	r3, [r3, #16]
 8005cd0:	f003 0301 	and.w	r3, r3, #1
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d0f1      	beq.n	8005cbc <USB_CoreReset+0x34>

  return HAL_OK;
 8005cd8:	2300      	movs	r3, #0
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3714      	adds	r7, #20
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce4:	4770      	bx	lr
 8005ce6:	bf00      	nop
 8005ce8:	00030d40 	.word	0x00030d40

08005cec <__errno>:
 8005cec:	4b01      	ldr	r3, [pc, #4]	; (8005cf4 <__errno+0x8>)
 8005cee:	6818      	ldr	r0, [r3, #0]
 8005cf0:	4770      	bx	lr
 8005cf2:	bf00      	nop
 8005cf4:	20000024 	.word	0x20000024

08005cf8 <__libc_init_array>:
 8005cf8:	b570      	push	{r4, r5, r6, lr}
 8005cfa:	4d0d      	ldr	r5, [pc, #52]	; (8005d30 <__libc_init_array+0x38>)
 8005cfc:	4c0d      	ldr	r4, [pc, #52]	; (8005d34 <__libc_init_array+0x3c>)
 8005cfe:	1b64      	subs	r4, r4, r5
 8005d00:	10a4      	asrs	r4, r4, #2
 8005d02:	2600      	movs	r6, #0
 8005d04:	42a6      	cmp	r6, r4
 8005d06:	d109      	bne.n	8005d1c <__libc_init_array+0x24>
 8005d08:	4d0b      	ldr	r5, [pc, #44]	; (8005d38 <__libc_init_array+0x40>)
 8005d0a:	4c0c      	ldr	r4, [pc, #48]	; (8005d3c <__libc_init_array+0x44>)
 8005d0c:	f000 fc4e 	bl	80065ac <_init>
 8005d10:	1b64      	subs	r4, r4, r5
 8005d12:	10a4      	asrs	r4, r4, #2
 8005d14:	2600      	movs	r6, #0
 8005d16:	42a6      	cmp	r6, r4
 8005d18:	d105      	bne.n	8005d26 <__libc_init_array+0x2e>
 8005d1a:	bd70      	pop	{r4, r5, r6, pc}
 8005d1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d20:	4798      	blx	r3
 8005d22:	3601      	adds	r6, #1
 8005d24:	e7ee      	b.n	8005d04 <__libc_init_array+0xc>
 8005d26:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d2a:	4798      	blx	r3
 8005d2c:	3601      	adds	r6, #1
 8005d2e:	e7f2      	b.n	8005d16 <__libc_init_array+0x1e>
 8005d30:	0800662c 	.word	0x0800662c
 8005d34:	0800662c 	.word	0x0800662c
 8005d38:	0800662c 	.word	0x0800662c
 8005d3c:	08006630 	.word	0x08006630

08005d40 <memset>:
 8005d40:	4402      	add	r2, r0
 8005d42:	4603      	mov	r3, r0
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d100      	bne.n	8005d4a <memset+0xa>
 8005d48:	4770      	bx	lr
 8005d4a:	f803 1b01 	strb.w	r1, [r3], #1
 8005d4e:	e7f9      	b.n	8005d44 <memset+0x4>

08005d50 <siprintf>:
 8005d50:	b40e      	push	{r1, r2, r3}
 8005d52:	b500      	push	{lr}
 8005d54:	b09c      	sub	sp, #112	; 0x70
 8005d56:	ab1d      	add	r3, sp, #116	; 0x74
 8005d58:	9002      	str	r0, [sp, #8]
 8005d5a:	9006      	str	r0, [sp, #24]
 8005d5c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005d60:	4809      	ldr	r0, [pc, #36]	; (8005d88 <siprintf+0x38>)
 8005d62:	9107      	str	r1, [sp, #28]
 8005d64:	9104      	str	r1, [sp, #16]
 8005d66:	4909      	ldr	r1, [pc, #36]	; (8005d8c <siprintf+0x3c>)
 8005d68:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d6c:	9105      	str	r1, [sp, #20]
 8005d6e:	6800      	ldr	r0, [r0, #0]
 8005d70:	9301      	str	r3, [sp, #4]
 8005d72:	a902      	add	r1, sp, #8
 8005d74:	f000 f868 	bl	8005e48 <_svfiprintf_r>
 8005d78:	9b02      	ldr	r3, [sp, #8]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	701a      	strb	r2, [r3, #0]
 8005d7e:	b01c      	add	sp, #112	; 0x70
 8005d80:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d84:	b003      	add	sp, #12
 8005d86:	4770      	bx	lr
 8005d88:	20000024 	.word	0x20000024
 8005d8c:	ffff0208 	.word	0xffff0208

08005d90 <__ssputs_r>:
 8005d90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d94:	688e      	ldr	r6, [r1, #8]
 8005d96:	429e      	cmp	r6, r3
 8005d98:	4682      	mov	sl, r0
 8005d9a:	460c      	mov	r4, r1
 8005d9c:	4690      	mov	r8, r2
 8005d9e:	461f      	mov	r7, r3
 8005da0:	d838      	bhi.n	8005e14 <__ssputs_r+0x84>
 8005da2:	898a      	ldrh	r2, [r1, #12]
 8005da4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005da8:	d032      	beq.n	8005e10 <__ssputs_r+0x80>
 8005daa:	6825      	ldr	r5, [r4, #0]
 8005dac:	6909      	ldr	r1, [r1, #16]
 8005dae:	eba5 0901 	sub.w	r9, r5, r1
 8005db2:	6965      	ldr	r5, [r4, #20]
 8005db4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005db8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005dbc:	3301      	adds	r3, #1
 8005dbe:	444b      	add	r3, r9
 8005dc0:	106d      	asrs	r5, r5, #1
 8005dc2:	429d      	cmp	r5, r3
 8005dc4:	bf38      	it	cc
 8005dc6:	461d      	movcc	r5, r3
 8005dc8:	0553      	lsls	r3, r2, #21
 8005dca:	d531      	bpl.n	8005e30 <__ssputs_r+0xa0>
 8005dcc:	4629      	mov	r1, r5
 8005dce:	f000 fb47 	bl	8006460 <_malloc_r>
 8005dd2:	4606      	mov	r6, r0
 8005dd4:	b950      	cbnz	r0, 8005dec <__ssputs_r+0x5c>
 8005dd6:	230c      	movs	r3, #12
 8005dd8:	f8ca 3000 	str.w	r3, [sl]
 8005ddc:	89a3      	ldrh	r3, [r4, #12]
 8005dde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005de2:	81a3      	strh	r3, [r4, #12]
 8005de4:	f04f 30ff 	mov.w	r0, #4294967295
 8005de8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dec:	6921      	ldr	r1, [r4, #16]
 8005dee:	464a      	mov	r2, r9
 8005df0:	f000 fabe 	bl	8006370 <memcpy>
 8005df4:	89a3      	ldrh	r3, [r4, #12]
 8005df6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005dfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dfe:	81a3      	strh	r3, [r4, #12]
 8005e00:	6126      	str	r6, [r4, #16]
 8005e02:	6165      	str	r5, [r4, #20]
 8005e04:	444e      	add	r6, r9
 8005e06:	eba5 0509 	sub.w	r5, r5, r9
 8005e0a:	6026      	str	r6, [r4, #0]
 8005e0c:	60a5      	str	r5, [r4, #8]
 8005e0e:	463e      	mov	r6, r7
 8005e10:	42be      	cmp	r6, r7
 8005e12:	d900      	bls.n	8005e16 <__ssputs_r+0x86>
 8005e14:	463e      	mov	r6, r7
 8005e16:	4632      	mov	r2, r6
 8005e18:	6820      	ldr	r0, [r4, #0]
 8005e1a:	4641      	mov	r1, r8
 8005e1c:	f000 fab6 	bl	800638c <memmove>
 8005e20:	68a3      	ldr	r3, [r4, #8]
 8005e22:	6822      	ldr	r2, [r4, #0]
 8005e24:	1b9b      	subs	r3, r3, r6
 8005e26:	4432      	add	r2, r6
 8005e28:	60a3      	str	r3, [r4, #8]
 8005e2a:	6022      	str	r2, [r4, #0]
 8005e2c:	2000      	movs	r0, #0
 8005e2e:	e7db      	b.n	8005de8 <__ssputs_r+0x58>
 8005e30:	462a      	mov	r2, r5
 8005e32:	f000 fb6f 	bl	8006514 <_realloc_r>
 8005e36:	4606      	mov	r6, r0
 8005e38:	2800      	cmp	r0, #0
 8005e3a:	d1e1      	bne.n	8005e00 <__ssputs_r+0x70>
 8005e3c:	6921      	ldr	r1, [r4, #16]
 8005e3e:	4650      	mov	r0, sl
 8005e40:	f000 fabe 	bl	80063c0 <_free_r>
 8005e44:	e7c7      	b.n	8005dd6 <__ssputs_r+0x46>
	...

08005e48 <_svfiprintf_r>:
 8005e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e4c:	4698      	mov	r8, r3
 8005e4e:	898b      	ldrh	r3, [r1, #12]
 8005e50:	061b      	lsls	r3, r3, #24
 8005e52:	b09d      	sub	sp, #116	; 0x74
 8005e54:	4607      	mov	r7, r0
 8005e56:	460d      	mov	r5, r1
 8005e58:	4614      	mov	r4, r2
 8005e5a:	d50e      	bpl.n	8005e7a <_svfiprintf_r+0x32>
 8005e5c:	690b      	ldr	r3, [r1, #16]
 8005e5e:	b963      	cbnz	r3, 8005e7a <_svfiprintf_r+0x32>
 8005e60:	2140      	movs	r1, #64	; 0x40
 8005e62:	f000 fafd 	bl	8006460 <_malloc_r>
 8005e66:	6028      	str	r0, [r5, #0]
 8005e68:	6128      	str	r0, [r5, #16]
 8005e6a:	b920      	cbnz	r0, 8005e76 <_svfiprintf_r+0x2e>
 8005e6c:	230c      	movs	r3, #12
 8005e6e:	603b      	str	r3, [r7, #0]
 8005e70:	f04f 30ff 	mov.w	r0, #4294967295
 8005e74:	e0d1      	b.n	800601a <_svfiprintf_r+0x1d2>
 8005e76:	2340      	movs	r3, #64	; 0x40
 8005e78:	616b      	str	r3, [r5, #20]
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	9309      	str	r3, [sp, #36]	; 0x24
 8005e7e:	2320      	movs	r3, #32
 8005e80:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005e84:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e88:	2330      	movs	r3, #48	; 0x30
 8005e8a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006034 <_svfiprintf_r+0x1ec>
 8005e8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005e92:	f04f 0901 	mov.w	r9, #1
 8005e96:	4623      	mov	r3, r4
 8005e98:	469a      	mov	sl, r3
 8005e9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e9e:	b10a      	cbz	r2, 8005ea4 <_svfiprintf_r+0x5c>
 8005ea0:	2a25      	cmp	r2, #37	; 0x25
 8005ea2:	d1f9      	bne.n	8005e98 <_svfiprintf_r+0x50>
 8005ea4:	ebba 0b04 	subs.w	fp, sl, r4
 8005ea8:	d00b      	beq.n	8005ec2 <_svfiprintf_r+0x7a>
 8005eaa:	465b      	mov	r3, fp
 8005eac:	4622      	mov	r2, r4
 8005eae:	4629      	mov	r1, r5
 8005eb0:	4638      	mov	r0, r7
 8005eb2:	f7ff ff6d 	bl	8005d90 <__ssputs_r>
 8005eb6:	3001      	adds	r0, #1
 8005eb8:	f000 80aa 	beq.w	8006010 <_svfiprintf_r+0x1c8>
 8005ebc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ebe:	445a      	add	r2, fp
 8005ec0:	9209      	str	r2, [sp, #36]	; 0x24
 8005ec2:	f89a 3000 	ldrb.w	r3, [sl]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	f000 80a2 	beq.w	8006010 <_svfiprintf_r+0x1c8>
 8005ecc:	2300      	movs	r3, #0
 8005ece:	f04f 32ff 	mov.w	r2, #4294967295
 8005ed2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ed6:	f10a 0a01 	add.w	sl, sl, #1
 8005eda:	9304      	str	r3, [sp, #16]
 8005edc:	9307      	str	r3, [sp, #28]
 8005ede:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ee2:	931a      	str	r3, [sp, #104]	; 0x68
 8005ee4:	4654      	mov	r4, sl
 8005ee6:	2205      	movs	r2, #5
 8005ee8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005eec:	4851      	ldr	r0, [pc, #324]	; (8006034 <_svfiprintf_r+0x1ec>)
 8005eee:	f7fa f997 	bl	8000220 <memchr>
 8005ef2:	9a04      	ldr	r2, [sp, #16]
 8005ef4:	b9d8      	cbnz	r0, 8005f2e <_svfiprintf_r+0xe6>
 8005ef6:	06d0      	lsls	r0, r2, #27
 8005ef8:	bf44      	itt	mi
 8005efa:	2320      	movmi	r3, #32
 8005efc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f00:	0711      	lsls	r1, r2, #28
 8005f02:	bf44      	itt	mi
 8005f04:	232b      	movmi	r3, #43	; 0x2b
 8005f06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f0a:	f89a 3000 	ldrb.w	r3, [sl]
 8005f0e:	2b2a      	cmp	r3, #42	; 0x2a
 8005f10:	d015      	beq.n	8005f3e <_svfiprintf_r+0xf6>
 8005f12:	9a07      	ldr	r2, [sp, #28]
 8005f14:	4654      	mov	r4, sl
 8005f16:	2000      	movs	r0, #0
 8005f18:	f04f 0c0a 	mov.w	ip, #10
 8005f1c:	4621      	mov	r1, r4
 8005f1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f22:	3b30      	subs	r3, #48	; 0x30
 8005f24:	2b09      	cmp	r3, #9
 8005f26:	d94e      	bls.n	8005fc6 <_svfiprintf_r+0x17e>
 8005f28:	b1b0      	cbz	r0, 8005f58 <_svfiprintf_r+0x110>
 8005f2a:	9207      	str	r2, [sp, #28]
 8005f2c:	e014      	b.n	8005f58 <_svfiprintf_r+0x110>
 8005f2e:	eba0 0308 	sub.w	r3, r0, r8
 8005f32:	fa09 f303 	lsl.w	r3, r9, r3
 8005f36:	4313      	orrs	r3, r2
 8005f38:	9304      	str	r3, [sp, #16]
 8005f3a:	46a2      	mov	sl, r4
 8005f3c:	e7d2      	b.n	8005ee4 <_svfiprintf_r+0x9c>
 8005f3e:	9b03      	ldr	r3, [sp, #12]
 8005f40:	1d19      	adds	r1, r3, #4
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	9103      	str	r1, [sp, #12]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	bfbb      	ittet	lt
 8005f4a:	425b      	neglt	r3, r3
 8005f4c:	f042 0202 	orrlt.w	r2, r2, #2
 8005f50:	9307      	strge	r3, [sp, #28]
 8005f52:	9307      	strlt	r3, [sp, #28]
 8005f54:	bfb8      	it	lt
 8005f56:	9204      	strlt	r2, [sp, #16]
 8005f58:	7823      	ldrb	r3, [r4, #0]
 8005f5a:	2b2e      	cmp	r3, #46	; 0x2e
 8005f5c:	d10c      	bne.n	8005f78 <_svfiprintf_r+0x130>
 8005f5e:	7863      	ldrb	r3, [r4, #1]
 8005f60:	2b2a      	cmp	r3, #42	; 0x2a
 8005f62:	d135      	bne.n	8005fd0 <_svfiprintf_r+0x188>
 8005f64:	9b03      	ldr	r3, [sp, #12]
 8005f66:	1d1a      	adds	r2, r3, #4
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	9203      	str	r2, [sp, #12]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	bfb8      	it	lt
 8005f70:	f04f 33ff 	movlt.w	r3, #4294967295
 8005f74:	3402      	adds	r4, #2
 8005f76:	9305      	str	r3, [sp, #20]
 8005f78:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006044 <_svfiprintf_r+0x1fc>
 8005f7c:	7821      	ldrb	r1, [r4, #0]
 8005f7e:	2203      	movs	r2, #3
 8005f80:	4650      	mov	r0, sl
 8005f82:	f7fa f94d 	bl	8000220 <memchr>
 8005f86:	b140      	cbz	r0, 8005f9a <_svfiprintf_r+0x152>
 8005f88:	2340      	movs	r3, #64	; 0x40
 8005f8a:	eba0 000a 	sub.w	r0, r0, sl
 8005f8e:	fa03 f000 	lsl.w	r0, r3, r0
 8005f92:	9b04      	ldr	r3, [sp, #16]
 8005f94:	4303      	orrs	r3, r0
 8005f96:	3401      	adds	r4, #1
 8005f98:	9304      	str	r3, [sp, #16]
 8005f9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f9e:	4826      	ldr	r0, [pc, #152]	; (8006038 <_svfiprintf_r+0x1f0>)
 8005fa0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005fa4:	2206      	movs	r2, #6
 8005fa6:	f7fa f93b 	bl	8000220 <memchr>
 8005faa:	2800      	cmp	r0, #0
 8005fac:	d038      	beq.n	8006020 <_svfiprintf_r+0x1d8>
 8005fae:	4b23      	ldr	r3, [pc, #140]	; (800603c <_svfiprintf_r+0x1f4>)
 8005fb0:	bb1b      	cbnz	r3, 8005ffa <_svfiprintf_r+0x1b2>
 8005fb2:	9b03      	ldr	r3, [sp, #12]
 8005fb4:	3307      	adds	r3, #7
 8005fb6:	f023 0307 	bic.w	r3, r3, #7
 8005fba:	3308      	adds	r3, #8
 8005fbc:	9303      	str	r3, [sp, #12]
 8005fbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fc0:	4433      	add	r3, r6
 8005fc2:	9309      	str	r3, [sp, #36]	; 0x24
 8005fc4:	e767      	b.n	8005e96 <_svfiprintf_r+0x4e>
 8005fc6:	fb0c 3202 	mla	r2, ip, r2, r3
 8005fca:	460c      	mov	r4, r1
 8005fcc:	2001      	movs	r0, #1
 8005fce:	e7a5      	b.n	8005f1c <_svfiprintf_r+0xd4>
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	3401      	adds	r4, #1
 8005fd4:	9305      	str	r3, [sp, #20]
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	f04f 0c0a 	mov.w	ip, #10
 8005fdc:	4620      	mov	r0, r4
 8005fde:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005fe2:	3a30      	subs	r2, #48	; 0x30
 8005fe4:	2a09      	cmp	r2, #9
 8005fe6:	d903      	bls.n	8005ff0 <_svfiprintf_r+0x1a8>
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d0c5      	beq.n	8005f78 <_svfiprintf_r+0x130>
 8005fec:	9105      	str	r1, [sp, #20]
 8005fee:	e7c3      	b.n	8005f78 <_svfiprintf_r+0x130>
 8005ff0:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ff4:	4604      	mov	r4, r0
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e7f0      	b.n	8005fdc <_svfiprintf_r+0x194>
 8005ffa:	ab03      	add	r3, sp, #12
 8005ffc:	9300      	str	r3, [sp, #0]
 8005ffe:	462a      	mov	r2, r5
 8006000:	4b0f      	ldr	r3, [pc, #60]	; (8006040 <_svfiprintf_r+0x1f8>)
 8006002:	a904      	add	r1, sp, #16
 8006004:	4638      	mov	r0, r7
 8006006:	f3af 8000 	nop.w
 800600a:	1c42      	adds	r2, r0, #1
 800600c:	4606      	mov	r6, r0
 800600e:	d1d6      	bne.n	8005fbe <_svfiprintf_r+0x176>
 8006010:	89ab      	ldrh	r3, [r5, #12]
 8006012:	065b      	lsls	r3, r3, #25
 8006014:	f53f af2c 	bmi.w	8005e70 <_svfiprintf_r+0x28>
 8006018:	9809      	ldr	r0, [sp, #36]	; 0x24
 800601a:	b01d      	add	sp, #116	; 0x74
 800601c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006020:	ab03      	add	r3, sp, #12
 8006022:	9300      	str	r3, [sp, #0]
 8006024:	462a      	mov	r2, r5
 8006026:	4b06      	ldr	r3, [pc, #24]	; (8006040 <_svfiprintf_r+0x1f8>)
 8006028:	a904      	add	r1, sp, #16
 800602a:	4638      	mov	r0, r7
 800602c:	f000 f87a 	bl	8006124 <_printf_i>
 8006030:	e7eb      	b.n	800600a <_svfiprintf_r+0x1c2>
 8006032:	bf00      	nop
 8006034:	080065f0 	.word	0x080065f0
 8006038:	080065fa 	.word	0x080065fa
 800603c:	00000000 	.word	0x00000000
 8006040:	08005d91 	.word	0x08005d91
 8006044:	080065f6 	.word	0x080065f6

08006048 <_printf_common>:
 8006048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800604c:	4616      	mov	r6, r2
 800604e:	4699      	mov	r9, r3
 8006050:	688a      	ldr	r2, [r1, #8]
 8006052:	690b      	ldr	r3, [r1, #16]
 8006054:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006058:	4293      	cmp	r3, r2
 800605a:	bfb8      	it	lt
 800605c:	4613      	movlt	r3, r2
 800605e:	6033      	str	r3, [r6, #0]
 8006060:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006064:	4607      	mov	r7, r0
 8006066:	460c      	mov	r4, r1
 8006068:	b10a      	cbz	r2, 800606e <_printf_common+0x26>
 800606a:	3301      	adds	r3, #1
 800606c:	6033      	str	r3, [r6, #0]
 800606e:	6823      	ldr	r3, [r4, #0]
 8006070:	0699      	lsls	r1, r3, #26
 8006072:	bf42      	ittt	mi
 8006074:	6833      	ldrmi	r3, [r6, #0]
 8006076:	3302      	addmi	r3, #2
 8006078:	6033      	strmi	r3, [r6, #0]
 800607a:	6825      	ldr	r5, [r4, #0]
 800607c:	f015 0506 	ands.w	r5, r5, #6
 8006080:	d106      	bne.n	8006090 <_printf_common+0x48>
 8006082:	f104 0a19 	add.w	sl, r4, #25
 8006086:	68e3      	ldr	r3, [r4, #12]
 8006088:	6832      	ldr	r2, [r6, #0]
 800608a:	1a9b      	subs	r3, r3, r2
 800608c:	42ab      	cmp	r3, r5
 800608e:	dc26      	bgt.n	80060de <_printf_common+0x96>
 8006090:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006094:	1e13      	subs	r3, r2, #0
 8006096:	6822      	ldr	r2, [r4, #0]
 8006098:	bf18      	it	ne
 800609a:	2301      	movne	r3, #1
 800609c:	0692      	lsls	r2, r2, #26
 800609e:	d42b      	bmi.n	80060f8 <_printf_common+0xb0>
 80060a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80060a4:	4649      	mov	r1, r9
 80060a6:	4638      	mov	r0, r7
 80060a8:	47c0      	blx	r8
 80060aa:	3001      	adds	r0, #1
 80060ac:	d01e      	beq.n	80060ec <_printf_common+0xa4>
 80060ae:	6823      	ldr	r3, [r4, #0]
 80060b0:	68e5      	ldr	r5, [r4, #12]
 80060b2:	6832      	ldr	r2, [r6, #0]
 80060b4:	f003 0306 	and.w	r3, r3, #6
 80060b8:	2b04      	cmp	r3, #4
 80060ba:	bf08      	it	eq
 80060bc:	1aad      	subeq	r5, r5, r2
 80060be:	68a3      	ldr	r3, [r4, #8]
 80060c0:	6922      	ldr	r2, [r4, #16]
 80060c2:	bf0c      	ite	eq
 80060c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060c8:	2500      	movne	r5, #0
 80060ca:	4293      	cmp	r3, r2
 80060cc:	bfc4      	itt	gt
 80060ce:	1a9b      	subgt	r3, r3, r2
 80060d0:	18ed      	addgt	r5, r5, r3
 80060d2:	2600      	movs	r6, #0
 80060d4:	341a      	adds	r4, #26
 80060d6:	42b5      	cmp	r5, r6
 80060d8:	d11a      	bne.n	8006110 <_printf_common+0xc8>
 80060da:	2000      	movs	r0, #0
 80060dc:	e008      	b.n	80060f0 <_printf_common+0xa8>
 80060de:	2301      	movs	r3, #1
 80060e0:	4652      	mov	r2, sl
 80060e2:	4649      	mov	r1, r9
 80060e4:	4638      	mov	r0, r7
 80060e6:	47c0      	blx	r8
 80060e8:	3001      	adds	r0, #1
 80060ea:	d103      	bne.n	80060f4 <_printf_common+0xac>
 80060ec:	f04f 30ff 	mov.w	r0, #4294967295
 80060f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060f4:	3501      	adds	r5, #1
 80060f6:	e7c6      	b.n	8006086 <_printf_common+0x3e>
 80060f8:	18e1      	adds	r1, r4, r3
 80060fa:	1c5a      	adds	r2, r3, #1
 80060fc:	2030      	movs	r0, #48	; 0x30
 80060fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006102:	4422      	add	r2, r4
 8006104:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006108:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800610c:	3302      	adds	r3, #2
 800610e:	e7c7      	b.n	80060a0 <_printf_common+0x58>
 8006110:	2301      	movs	r3, #1
 8006112:	4622      	mov	r2, r4
 8006114:	4649      	mov	r1, r9
 8006116:	4638      	mov	r0, r7
 8006118:	47c0      	blx	r8
 800611a:	3001      	adds	r0, #1
 800611c:	d0e6      	beq.n	80060ec <_printf_common+0xa4>
 800611e:	3601      	adds	r6, #1
 8006120:	e7d9      	b.n	80060d6 <_printf_common+0x8e>
	...

08006124 <_printf_i>:
 8006124:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006128:	460c      	mov	r4, r1
 800612a:	4691      	mov	r9, r2
 800612c:	7e27      	ldrb	r7, [r4, #24]
 800612e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006130:	2f78      	cmp	r7, #120	; 0x78
 8006132:	4680      	mov	r8, r0
 8006134:	469a      	mov	sl, r3
 8006136:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800613a:	d807      	bhi.n	800614c <_printf_i+0x28>
 800613c:	2f62      	cmp	r7, #98	; 0x62
 800613e:	d80a      	bhi.n	8006156 <_printf_i+0x32>
 8006140:	2f00      	cmp	r7, #0
 8006142:	f000 80d8 	beq.w	80062f6 <_printf_i+0x1d2>
 8006146:	2f58      	cmp	r7, #88	; 0x58
 8006148:	f000 80a3 	beq.w	8006292 <_printf_i+0x16e>
 800614c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006150:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006154:	e03a      	b.n	80061cc <_printf_i+0xa8>
 8006156:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800615a:	2b15      	cmp	r3, #21
 800615c:	d8f6      	bhi.n	800614c <_printf_i+0x28>
 800615e:	a001      	add	r0, pc, #4	; (adr r0, 8006164 <_printf_i+0x40>)
 8006160:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006164:	080061bd 	.word	0x080061bd
 8006168:	080061d1 	.word	0x080061d1
 800616c:	0800614d 	.word	0x0800614d
 8006170:	0800614d 	.word	0x0800614d
 8006174:	0800614d 	.word	0x0800614d
 8006178:	0800614d 	.word	0x0800614d
 800617c:	080061d1 	.word	0x080061d1
 8006180:	0800614d 	.word	0x0800614d
 8006184:	0800614d 	.word	0x0800614d
 8006188:	0800614d 	.word	0x0800614d
 800618c:	0800614d 	.word	0x0800614d
 8006190:	080062dd 	.word	0x080062dd
 8006194:	08006201 	.word	0x08006201
 8006198:	080062bf 	.word	0x080062bf
 800619c:	0800614d 	.word	0x0800614d
 80061a0:	0800614d 	.word	0x0800614d
 80061a4:	080062ff 	.word	0x080062ff
 80061a8:	0800614d 	.word	0x0800614d
 80061ac:	08006201 	.word	0x08006201
 80061b0:	0800614d 	.word	0x0800614d
 80061b4:	0800614d 	.word	0x0800614d
 80061b8:	080062c7 	.word	0x080062c7
 80061bc:	680b      	ldr	r3, [r1, #0]
 80061be:	1d1a      	adds	r2, r3, #4
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	600a      	str	r2, [r1, #0]
 80061c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80061c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80061cc:	2301      	movs	r3, #1
 80061ce:	e0a3      	b.n	8006318 <_printf_i+0x1f4>
 80061d0:	6825      	ldr	r5, [r4, #0]
 80061d2:	6808      	ldr	r0, [r1, #0]
 80061d4:	062e      	lsls	r6, r5, #24
 80061d6:	f100 0304 	add.w	r3, r0, #4
 80061da:	d50a      	bpl.n	80061f2 <_printf_i+0xce>
 80061dc:	6805      	ldr	r5, [r0, #0]
 80061de:	600b      	str	r3, [r1, #0]
 80061e0:	2d00      	cmp	r5, #0
 80061e2:	da03      	bge.n	80061ec <_printf_i+0xc8>
 80061e4:	232d      	movs	r3, #45	; 0x2d
 80061e6:	426d      	negs	r5, r5
 80061e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061ec:	485e      	ldr	r0, [pc, #376]	; (8006368 <_printf_i+0x244>)
 80061ee:	230a      	movs	r3, #10
 80061f0:	e019      	b.n	8006226 <_printf_i+0x102>
 80061f2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80061f6:	6805      	ldr	r5, [r0, #0]
 80061f8:	600b      	str	r3, [r1, #0]
 80061fa:	bf18      	it	ne
 80061fc:	b22d      	sxthne	r5, r5
 80061fe:	e7ef      	b.n	80061e0 <_printf_i+0xbc>
 8006200:	680b      	ldr	r3, [r1, #0]
 8006202:	6825      	ldr	r5, [r4, #0]
 8006204:	1d18      	adds	r0, r3, #4
 8006206:	6008      	str	r0, [r1, #0]
 8006208:	0628      	lsls	r0, r5, #24
 800620a:	d501      	bpl.n	8006210 <_printf_i+0xec>
 800620c:	681d      	ldr	r5, [r3, #0]
 800620e:	e002      	b.n	8006216 <_printf_i+0xf2>
 8006210:	0669      	lsls	r1, r5, #25
 8006212:	d5fb      	bpl.n	800620c <_printf_i+0xe8>
 8006214:	881d      	ldrh	r5, [r3, #0]
 8006216:	4854      	ldr	r0, [pc, #336]	; (8006368 <_printf_i+0x244>)
 8006218:	2f6f      	cmp	r7, #111	; 0x6f
 800621a:	bf0c      	ite	eq
 800621c:	2308      	moveq	r3, #8
 800621e:	230a      	movne	r3, #10
 8006220:	2100      	movs	r1, #0
 8006222:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006226:	6866      	ldr	r6, [r4, #4]
 8006228:	60a6      	str	r6, [r4, #8]
 800622a:	2e00      	cmp	r6, #0
 800622c:	bfa2      	ittt	ge
 800622e:	6821      	ldrge	r1, [r4, #0]
 8006230:	f021 0104 	bicge.w	r1, r1, #4
 8006234:	6021      	strge	r1, [r4, #0]
 8006236:	b90d      	cbnz	r5, 800623c <_printf_i+0x118>
 8006238:	2e00      	cmp	r6, #0
 800623a:	d04d      	beq.n	80062d8 <_printf_i+0x1b4>
 800623c:	4616      	mov	r6, r2
 800623e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006242:	fb03 5711 	mls	r7, r3, r1, r5
 8006246:	5dc7      	ldrb	r7, [r0, r7]
 8006248:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800624c:	462f      	mov	r7, r5
 800624e:	42bb      	cmp	r3, r7
 8006250:	460d      	mov	r5, r1
 8006252:	d9f4      	bls.n	800623e <_printf_i+0x11a>
 8006254:	2b08      	cmp	r3, #8
 8006256:	d10b      	bne.n	8006270 <_printf_i+0x14c>
 8006258:	6823      	ldr	r3, [r4, #0]
 800625a:	07df      	lsls	r7, r3, #31
 800625c:	d508      	bpl.n	8006270 <_printf_i+0x14c>
 800625e:	6923      	ldr	r3, [r4, #16]
 8006260:	6861      	ldr	r1, [r4, #4]
 8006262:	4299      	cmp	r1, r3
 8006264:	bfde      	ittt	le
 8006266:	2330      	movle	r3, #48	; 0x30
 8006268:	f806 3c01 	strble.w	r3, [r6, #-1]
 800626c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006270:	1b92      	subs	r2, r2, r6
 8006272:	6122      	str	r2, [r4, #16]
 8006274:	f8cd a000 	str.w	sl, [sp]
 8006278:	464b      	mov	r3, r9
 800627a:	aa03      	add	r2, sp, #12
 800627c:	4621      	mov	r1, r4
 800627e:	4640      	mov	r0, r8
 8006280:	f7ff fee2 	bl	8006048 <_printf_common>
 8006284:	3001      	adds	r0, #1
 8006286:	d14c      	bne.n	8006322 <_printf_i+0x1fe>
 8006288:	f04f 30ff 	mov.w	r0, #4294967295
 800628c:	b004      	add	sp, #16
 800628e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006292:	4835      	ldr	r0, [pc, #212]	; (8006368 <_printf_i+0x244>)
 8006294:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006298:	6823      	ldr	r3, [r4, #0]
 800629a:	680e      	ldr	r6, [r1, #0]
 800629c:	061f      	lsls	r7, r3, #24
 800629e:	f856 5b04 	ldr.w	r5, [r6], #4
 80062a2:	600e      	str	r6, [r1, #0]
 80062a4:	d514      	bpl.n	80062d0 <_printf_i+0x1ac>
 80062a6:	07d9      	lsls	r1, r3, #31
 80062a8:	bf44      	itt	mi
 80062aa:	f043 0320 	orrmi.w	r3, r3, #32
 80062ae:	6023      	strmi	r3, [r4, #0]
 80062b0:	b91d      	cbnz	r5, 80062ba <_printf_i+0x196>
 80062b2:	6823      	ldr	r3, [r4, #0]
 80062b4:	f023 0320 	bic.w	r3, r3, #32
 80062b8:	6023      	str	r3, [r4, #0]
 80062ba:	2310      	movs	r3, #16
 80062bc:	e7b0      	b.n	8006220 <_printf_i+0xfc>
 80062be:	6823      	ldr	r3, [r4, #0]
 80062c0:	f043 0320 	orr.w	r3, r3, #32
 80062c4:	6023      	str	r3, [r4, #0]
 80062c6:	2378      	movs	r3, #120	; 0x78
 80062c8:	4828      	ldr	r0, [pc, #160]	; (800636c <_printf_i+0x248>)
 80062ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80062ce:	e7e3      	b.n	8006298 <_printf_i+0x174>
 80062d0:	065e      	lsls	r6, r3, #25
 80062d2:	bf48      	it	mi
 80062d4:	b2ad      	uxthmi	r5, r5
 80062d6:	e7e6      	b.n	80062a6 <_printf_i+0x182>
 80062d8:	4616      	mov	r6, r2
 80062da:	e7bb      	b.n	8006254 <_printf_i+0x130>
 80062dc:	680b      	ldr	r3, [r1, #0]
 80062de:	6826      	ldr	r6, [r4, #0]
 80062e0:	6960      	ldr	r0, [r4, #20]
 80062e2:	1d1d      	adds	r5, r3, #4
 80062e4:	600d      	str	r5, [r1, #0]
 80062e6:	0635      	lsls	r5, r6, #24
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	d501      	bpl.n	80062f0 <_printf_i+0x1cc>
 80062ec:	6018      	str	r0, [r3, #0]
 80062ee:	e002      	b.n	80062f6 <_printf_i+0x1d2>
 80062f0:	0671      	lsls	r1, r6, #25
 80062f2:	d5fb      	bpl.n	80062ec <_printf_i+0x1c8>
 80062f4:	8018      	strh	r0, [r3, #0]
 80062f6:	2300      	movs	r3, #0
 80062f8:	6123      	str	r3, [r4, #16]
 80062fa:	4616      	mov	r6, r2
 80062fc:	e7ba      	b.n	8006274 <_printf_i+0x150>
 80062fe:	680b      	ldr	r3, [r1, #0]
 8006300:	1d1a      	adds	r2, r3, #4
 8006302:	600a      	str	r2, [r1, #0]
 8006304:	681e      	ldr	r6, [r3, #0]
 8006306:	6862      	ldr	r2, [r4, #4]
 8006308:	2100      	movs	r1, #0
 800630a:	4630      	mov	r0, r6
 800630c:	f7f9 ff88 	bl	8000220 <memchr>
 8006310:	b108      	cbz	r0, 8006316 <_printf_i+0x1f2>
 8006312:	1b80      	subs	r0, r0, r6
 8006314:	6060      	str	r0, [r4, #4]
 8006316:	6863      	ldr	r3, [r4, #4]
 8006318:	6123      	str	r3, [r4, #16]
 800631a:	2300      	movs	r3, #0
 800631c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006320:	e7a8      	b.n	8006274 <_printf_i+0x150>
 8006322:	6923      	ldr	r3, [r4, #16]
 8006324:	4632      	mov	r2, r6
 8006326:	4649      	mov	r1, r9
 8006328:	4640      	mov	r0, r8
 800632a:	47d0      	blx	sl
 800632c:	3001      	adds	r0, #1
 800632e:	d0ab      	beq.n	8006288 <_printf_i+0x164>
 8006330:	6823      	ldr	r3, [r4, #0]
 8006332:	079b      	lsls	r3, r3, #30
 8006334:	d413      	bmi.n	800635e <_printf_i+0x23a>
 8006336:	68e0      	ldr	r0, [r4, #12]
 8006338:	9b03      	ldr	r3, [sp, #12]
 800633a:	4298      	cmp	r0, r3
 800633c:	bfb8      	it	lt
 800633e:	4618      	movlt	r0, r3
 8006340:	e7a4      	b.n	800628c <_printf_i+0x168>
 8006342:	2301      	movs	r3, #1
 8006344:	4632      	mov	r2, r6
 8006346:	4649      	mov	r1, r9
 8006348:	4640      	mov	r0, r8
 800634a:	47d0      	blx	sl
 800634c:	3001      	adds	r0, #1
 800634e:	d09b      	beq.n	8006288 <_printf_i+0x164>
 8006350:	3501      	adds	r5, #1
 8006352:	68e3      	ldr	r3, [r4, #12]
 8006354:	9903      	ldr	r1, [sp, #12]
 8006356:	1a5b      	subs	r3, r3, r1
 8006358:	42ab      	cmp	r3, r5
 800635a:	dcf2      	bgt.n	8006342 <_printf_i+0x21e>
 800635c:	e7eb      	b.n	8006336 <_printf_i+0x212>
 800635e:	2500      	movs	r5, #0
 8006360:	f104 0619 	add.w	r6, r4, #25
 8006364:	e7f5      	b.n	8006352 <_printf_i+0x22e>
 8006366:	bf00      	nop
 8006368:	08006601 	.word	0x08006601
 800636c:	08006612 	.word	0x08006612

08006370 <memcpy>:
 8006370:	440a      	add	r2, r1
 8006372:	4291      	cmp	r1, r2
 8006374:	f100 33ff 	add.w	r3, r0, #4294967295
 8006378:	d100      	bne.n	800637c <memcpy+0xc>
 800637a:	4770      	bx	lr
 800637c:	b510      	push	{r4, lr}
 800637e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006382:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006386:	4291      	cmp	r1, r2
 8006388:	d1f9      	bne.n	800637e <memcpy+0xe>
 800638a:	bd10      	pop	{r4, pc}

0800638c <memmove>:
 800638c:	4288      	cmp	r0, r1
 800638e:	b510      	push	{r4, lr}
 8006390:	eb01 0402 	add.w	r4, r1, r2
 8006394:	d902      	bls.n	800639c <memmove+0x10>
 8006396:	4284      	cmp	r4, r0
 8006398:	4623      	mov	r3, r4
 800639a:	d807      	bhi.n	80063ac <memmove+0x20>
 800639c:	1e43      	subs	r3, r0, #1
 800639e:	42a1      	cmp	r1, r4
 80063a0:	d008      	beq.n	80063b4 <memmove+0x28>
 80063a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80063a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80063aa:	e7f8      	b.n	800639e <memmove+0x12>
 80063ac:	4402      	add	r2, r0
 80063ae:	4601      	mov	r1, r0
 80063b0:	428a      	cmp	r2, r1
 80063b2:	d100      	bne.n	80063b6 <memmove+0x2a>
 80063b4:	bd10      	pop	{r4, pc}
 80063b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80063ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80063be:	e7f7      	b.n	80063b0 <memmove+0x24>

080063c0 <_free_r>:
 80063c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80063c2:	2900      	cmp	r1, #0
 80063c4:	d048      	beq.n	8006458 <_free_r+0x98>
 80063c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063ca:	9001      	str	r0, [sp, #4]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	f1a1 0404 	sub.w	r4, r1, #4
 80063d2:	bfb8      	it	lt
 80063d4:	18e4      	addlt	r4, r4, r3
 80063d6:	f000 f8d3 	bl	8006580 <__malloc_lock>
 80063da:	4a20      	ldr	r2, [pc, #128]	; (800645c <_free_r+0x9c>)
 80063dc:	9801      	ldr	r0, [sp, #4]
 80063de:	6813      	ldr	r3, [r2, #0]
 80063e0:	4615      	mov	r5, r2
 80063e2:	b933      	cbnz	r3, 80063f2 <_free_r+0x32>
 80063e4:	6063      	str	r3, [r4, #4]
 80063e6:	6014      	str	r4, [r2, #0]
 80063e8:	b003      	add	sp, #12
 80063ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80063ee:	f000 b8cd 	b.w	800658c <__malloc_unlock>
 80063f2:	42a3      	cmp	r3, r4
 80063f4:	d90b      	bls.n	800640e <_free_r+0x4e>
 80063f6:	6821      	ldr	r1, [r4, #0]
 80063f8:	1862      	adds	r2, r4, r1
 80063fa:	4293      	cmp	r3, r2
 80063fc:	bf04      	itt	eq
 80063fe:	681a      	ldreq	r2, [r3, #0]
 8006400:	685b      	ldreq	r3, [r3, #4]
 8006402:	6063      	str	r3, [r4, #4]
 8006404:	bf04      	itt	eq
 8006406:	1852      	addeq	r2, r2, r1
 8006408:	6022      	streq	r2, [r4, #0]
 800640a:	602c      	str	r4, [r5, #0]
 800640c:	e7ec      	b.n	80063e8 <_free_r+0x28>
 800640e:	461a      	mov	r2, r3
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	b10b      	cbz	r3, 8006418 <_free_r+0x58>
 8006414:	42a3      	cmp	r3, r4
 8006416:	d9fa      	bls.n	800640e <_free_r+0x4e>
 8006418:	6811      	ldr	r1, [r2, #0]
 800641a:	1855      	adds	r5, r2, r1
 800641c:	42a5      	cmp	r5, r4
 800641e:	d10b      	bne.n	8006438 <_free_r+0x78>
 8006420:	6824      	ldr	r4, [r4, #0]
 8006422:	4421      	add	r1, r4
 8006424:	1854      	adds	r4, r2, r1
 8006426:	42a3      	cmp	r3, r4
 8006428:	6011      	str	r1, [r2, #0]
 800642a:	d1dd      	bne.n	80063e8 <_free_r+0x28>
 800642c:	681c      	ldr	r4, [r3, #0]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	6053      	str	r3, [r2, #4]
 8006432:	4421      	add	r1, r4
 8006434:	6011      	str	r1, [r2, #0]
 8006436:	e7d7      	b.n	80063e8 <_free_r+0x28>
 8006438:	d902      	bls.n	8006440 <_free_r+0x80>
 800643a:	230c      	movs	r3, #12
 800643c:	6003      	str	r3, [r0, #0]
 800643e:	e7d3      	b.n	80063e8 <_free_r+0x28>
 8006440:	6825      	ldr	r5, [r4, #0]
 8006442:	1961      	adds	r1, r4, r5
 8006444:	428b      	cmp	r3, r1
 8006446:	bf04      	itt	eq
 8006448:	6819      	ldreq	r1, [r3, #0]
 800644a:	685b      	ldreq	r3, [r3, #4]
 800644c:	6063      	str	r3, [r4, #4]
 800644e:	bf04      	itt	eq
 8006450:	1949      	addeq	r1, r1, r5
 8006452:	6021      	streq	r1, [r4, #0]
 8006454:	6054      	str	r4, [r2, #4]
 8006456:	e7c7      	b.n	80063e8 <_free_r+0x28>
 8006458:	b003      	add	sp, #12
 800645a:	bd30      	pop	{r4, r5, pc}
 800645c:	200000b4 	.word	0x200000b4

08006460 <_malloc_r>:
 8006460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006462:	1ccd      	adds	r5, r1, #3
 8006464:	f025 0503 	bic.w	r5, r5, #3
 8006468:	3508      	adds	r5, #8
 800646a:	2d0c      	cmp	r5, #12
 800646c:	bf38      	it	cc
 800646e:	250c      	movcc	r5, #12
 8006470:	2d00      	cmp	r5, #0
 8006472:	4606      	mov	r6, r0
 8006474:	db01      	blt.n	800647a <_malloc_r+0x1a>
 8006476:	42a9      	cmp	r1, r5
 8006478:	d903      	bls.n	8006482 <_malloc_r+0x22>
 800647a:	230c      	movs	r3, #12
 800647c:	6033      	str	r3, [r6, #0]
 800647e:	2000      	movs	r0, #0
 8006480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006482:	f000 f87d 	bl	8006580 <__malloc_lock>
 8006486:	4921      	ldr	r1, [pc, #132]	; (800650c <_malloc_r+0xac>)
 8006488:	680a      	ldr	r2, [r1, #0]
 800648a:	4614      	mov	r4, r2
 800648c:	b99c      	cbnz	r4, 80064b6 <_malloc_r+0x56>
 800648e:	4f20      	ldr	r7, [pc, #128]	; (8006510 <_malloc_r+0xb0>)
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	b923      	cbnz	r3, 800649e <_malloc_r+0x3e>
 8006494:	4621      	mov	r1, r4
 8006496:	4630      	mov	r0, r6
 8006498:	f000 f862 	bl	8006560 <_sbrk_r>
 800649c:	6038      	str	r0, [r7, #0]
 800649e:	4629      	mov	r1, r5
 80064a0:	4630      	mov	r0, r6
 80064a2:	f000 f85d 	bl	8006560 <_sbrk_r>
 80064a6:	1c43      	adds	r3, r0, #1
 80064a8:	d123      	bne.n	80064f2 <_malloc_r+0x92>
 80064aa:	230c      	movs	r3, #12
 80064ac:	6033      	str	r3, [r6, #0]
 80064ae:	4630      	mov	r0, r6
 80064b0:	f000 f86c 	bl	800658c <__malloc_unlock>
 80064b4:	e7e3      	b.n	800647e <_malloc_r+0x1e>
 80064b6:	6823      	ldr	r3, [r4, #0]
 80064b8:	1b5b      	subs	r3, r3, r5
 80064ba:	d417      	bmi.n	80064ec <_malloc_r+0x8c>
 80064bc:	2b0b      	cmp	r3, #11
 80064be:	d903      	bls.n	80064c8 <_malloc_r+0x68>
 80064c0:	6023      	str	r3, [r4, #0]
 80064c2:	441c      	add	r4, r3
 80064c4:	6025      	str	r5, [r4, #0]
 80064c6:	e004      	b.n	80064d2 <_malloc_r+0x72>
 80064c8:	6863      	ldr	r3, [r4, #4]
 80064ca:	42a2      	cmp	r2, r4
 80064cc:	bf0c      	ite	eq
 80064ce:	600b      	streq	r3, [r1, #0]
 80064d0:	6053      	strne	r3, [r2, #4]
 80064d2:	4630      	mov	r0, r6
 80064d4:	f000 f85a 	bl	800658c <__malloc_unlock>
 80064d8:	f104 000b 	add.w	r0, r4, #11
 80064dc:	1d23      	adds	r3, r4, #4
 80064de:	f020 0007 	bic.w	r0, r0, #7
 80064e2:	1ac2      	subs	r2, r0, r3
 80064e4:	d0cc      	beq.n	8006480 <_malloc_r+0x20>
 80064e6:	1a1b      	subs	r3, r3, r0
 80064e8:	50a3      	str	r3, [r4, r2]
 80064ea:	e7c9      	b.n	8006480 <_malloc_r+0x20>
 80064ec:	4622      	mov	r2, r4
 80064ee:	6864      	ldr	r4, [r4, #4]
 80064f0:	e7cc      	b.n	800648c <_malloc_r+0x2c>
 80064f2:	1cc4      	adds	r4, r0, #3
 80064f4:	f024 0403 	bic.w	r4, r4, #3
 80064f8:	42a0      	cmp	r0, r4
 80064fa:	d0e3      	beq.n	80064c4 <_malloc_r+0x64>
 80064fc:	1a21      	subs	r1, r4, r0
 80064fe:	4630      	mov	r0, r6
 8006500:	f000 f82e 	bl	8006560 <_sbrk_r>
 8006504:	3001      	adds	r0, #1
 8006506:	d1dd      	bne.n	80064c4 <_malloc_r+0x64>
 8006508:	e7cf      	b.n	80064aa <_malloc_r+0x4a>
 800650a:	bf00      	nop
 800650c:	200000b4 	.word	0x200000b4
 8006510:	200000b8 	.word	0x200000b8

08006514 <_realloc_r>:
 8006514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006516:	4607      	mov	r7, r0
 8006518:	4614      	mov	r4, r2
 800651a:	460e      	mov	r6, r1
 800651c:	b921      	cbnz	r1, 8006528 <_realloc_r+0x14>
 800651e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006522:	4611      	mov	r1, r2
 8006524:	f7ff bf9c 	b.w	8006460 <_malloc_r>
 8006528:	b922      	cbnz	r2, 8006534 <_realloc_r+0x20>
 800652a:	f7ff ff49 	bl	80063c0 <_free_r>
 800652e:	4625      	mov	r5, r4
 8006530:	4628      	mov	r0, r5
 8006532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006534:	f000 f830 	bl	8006598 <_malloc_usable_size_r>
 8006538:	42a0      	cmp	r0, r4
 800653a:	d20f      	bcs.n	800655c <_realloc_r+0x48>
 800653c:	4621      	mov	r1, r4
 800653e:	4638      	mov	r0, r7
 8006540:	f7ff ff8e 	bl	8006460 <_malloc_r>
 8006544:	4605      	mov	r5, r0
 8006546:	2800      	cmp	r0, #0
 8006548:	d0f2      	beq.n	8006530 <_realloc_r+0x1c>
 800654a:	4631      	mov	r1, r6
 800654c:	4622      	mov	r2, r4
 800654e:	f7ff ff0f 	bl	8006370 <memcpy>
 8006552:	4631      	mov	r1, r6
 8006554:	4638      	mov	r0, r7
 8006556:	f7ff ff33 	bl	80063c0 <_free_r>
 800655a:	e7e9      	b.n	8006530 <_realloc_r+0x1c>
 800655c:	4635      	mov	r5, r6
 800655e:	e7e7      	b.n	8006530 <_realloc_r+0x1c>

08006560 <_sbrk_r>:
 8006560:	b538      	push	{r3, r4, r5, lr}
 8006562:	4d06      	ldr	r5, [pc, #24]	; (800657c <_sbrk_r+0x1c>)
 8006564:	2300      	movs	r3, #0
 8006566:	4604      	mov	r4, r0
 8006568:	4608      	mov	r0, r1
 800656a:	602b      	str	r3, [r5, #0]
 800656c:	f7fa fc76 	bl	8000e5c <_sbrk>
 8006570:	1c43      	adds	r3, r0, #1
 8006572:	d102      	bne.n	800657a <_sbrk_r+0x1a>
 8006574:	682b      	ldr	r3, [r5, #0]
 8006576:	b103      	cbz	r3, 800657a <_sbrk_r+0x1a>
 8006578:	6023      	str	r3, [r4, #0]
 800657a:	bd38      	pop	{r3, r4, r5, pc}
 800657c:	200006f0 	.word	0x200006f0

08006580 <__malloc_lock>:
 8006580:	4801      	ldr	r0, [pc, #4]	; (8006588 <__malloc_lock+0x8>)
 8006582:	f000 b811 	b.w	80065a8 <__retarget_lock_acquire_recursive>
 8006586:	bf00      	nop
 8006588:	200006f8 	.word	0x200006f8

0800658c <__malloc_unlock>:
 800658c:	4801      	ldr	r0, [pc, #4]	; (8006594 <__malloc_unlock+0x8>)
 800658e:	f000 b80c 	b.w	80065aa <__retarget_lock_release_recursive>
 8006592:	bf00      	nop
 8006594:	200006f8 	.word	0x200006f8

08006598 <_malloc_usable_size_r>:
 8006598:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800659c:	1f18      	subs	r0, r3, #4
 800659e:	2b00      	cmp	r3, #0
 80065a0:	bfbc      	itt	lt
 80065a2:	580b      	ldrlt	r3, [r1, r0]
 80065a4:	18c0      	addlt	r0, r0, r3
 80065a6:	4770      	bx	lr

080065a8 <__retarget_lock_acquire_recursive>:
 80065a8:	4770      	bx	lr

080065aa <__retarget_lock_release_recursive>:
 80065aa:	4770      	bx	lr

080065ac <_init>:
 80065ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ae:	bf00      	nop
 80065b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065b2:	bc08      	pop	{r3}
 80065b4:	469e      	mov	lr, r3
 80065b6:	4770      	bx	lr

080065b8 <_fini>:
 80065b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ba:	bf00      	nop
 80065bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065be:	bc08      	pop	{r3}
 80065c0:	469e      	mov	lr, r3
 80065c2:	4770      	bx	lr
